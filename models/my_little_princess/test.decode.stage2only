# ::snt Chapter 4 .
# ::tok Chapter 4 .
# ::alignments 0-1|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:23.811
# ::node	0	chapter	0-1
# ::node	0.0	4	1-2
# ::root	0	chapter
# ::edge	chapter	mod	4	0	0.0	
(c / chapter 
      :mod 4)

# ::snt I had thus learned a second fact of great importance : this was that the planet the little prince came from was scarcely any larger than a house !
# ::tok I had thus learned a second fact of great importance : this was that the planet the little prince came from was scarcely any larger than a house !
# ::alignments 3-4|0 6-7|0.1 24-25|0.2.0 15-16|0.2.3 19-20|0.2 18-19|0.2.1 17-18|0.2.1.0 27-28|0.2.0.0 23-24|0.2.2.0 8-9|0.3.0 0-1|0.0 22-23|0.2.2 9-10|0.3 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:25.043
# ::node	0	learn-01	3-4
# ::node	0.0	i	0-1
# ::node	0.1	fact	6-7
# ::node	0.2	come-01	19-20
# ::node	0.2.0	large	24-25
# ::node	0.2.0.0	house	27-28
# ::node	0.2.1	prince	18-19
# ::node	0.2.1.0	little	17-18
# ::node	0.2.2	scarce	22-23
# ::node	0.2.2.0	any	23-24
# ::node	0.2.3	planet	15-16
# ::node	0.3	important	9-10
# ::node	0.3.0	great	8-9
# ::root	0	learn-01
# ::edge	any	mod	scarce	0.2.2.0	0.2.2	
# ::edge	come-01	ARG0	large	0.2	0.2.0	
# ::edge	come-01	ARG1	prince	0.2	0.2.1	
# ::edge	come-01	ARG2	scarce	0.2	0.2.2	
# ::edge	come-01	ARG4	planet	0.2	0.2.3	
# ::edge	come-01	condition	learn-01	0.2	0	
# ::edge	important	mod	great	0.3	0.3.0	
# ::edge	large	compared-to	house	0.2.0	0.2.0.0	
# ::edge	learn-01	ARG0	i	0	0.0	
# ::edge	learn-01	ARG1	fact	0	0.1	
# ::edge	learn-01	location	important	0	0.3	
# ::edge	prince	mod	little	0.2.1	0.2.1.0	
(l / learn-01 
      :ARG0 (i / i) 
      :ARG1 (f / fact) 
      :condition-of (c / come-01 
            :ARG0 (l2 / large 
                  :compared-to (h / house)) 
            :ARG1 (p2 / prince 
                  :mod (l3 / little)) 
            :ARG2 (s2 / scarce 
                  :mod-of (a / any)) 
            :ARG4 (p / planet)) 
      :location (i2 / important 
            :mod (g / great)))

# ::snt But that did not really surprise me much .
# ::tok But that did not really surprise me much .
# ::alignments 0-1|0 5-6|0.0 7-8|0.0.0 1-2|0.0.1.0 4-5|0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:25.109
# ::node	0	contrast-01	0-1
# ::node	0.0	surprise-01	5-6
# ::node	0.0.0	much	7-8
# ::node	0.0.1	real-04	4-5
# ::node	0.0.1.0	that	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	surprise-01	0	0.0	
# ::edge	real-04	ARG0	that	0.0.1	0.0.1.0	
# ::edge	real-04	ARG1	surprise-01	0.0.1	0.0	
# ::edge	surprise-01	ARG1	much	0.0	0.0.0	
(c / contrast-01 
      :ARG2 (s / surprise-01 
            :ARG1 (m / much) 
            :ARG1-of (r / real-04 
                  :ARG0 (t / that))))

# ::snt I knew very well that in addition to the great planets -- such as the Earth , Jupiter , Mars , Venus -- to which we have given names , there are also hundreds of others , some of which are so small that one has a hard time seeing them through the telescope .
# ::tok I knew very well that in addition to the great planets -- such as the Earth , Jupiter , Mars , Venus -- to which we have given names , there are also hundreds of others , some of which are so small that one has a hard time seeing them through the telescope .
# ::alignments 15-16|0.1.1+0.1.1.0+0.1.1.0.0 17-18|0.0.1+0.0.1.0+0.0.1.0.0 19-20|0.1+0.1.0+0.1.0.0 21-22|0.0.2+0.0.2.0+0.0.2.0.0 1-2|0 3-4|0.2 2-3|0.2.0 10-11|0.0.0.0.1 28-29|0.0.0.0 25-26|0.0.0.0.0 9-10|0.0.0.0.1.0 32-33|0.0.0.1.0 42-43|0.0.0.1.0.0.0 49-50|0.0.0 53-54|0.0.0.1 41-42|0.0.0.1.0.0.0.0 35-36|0.0.0.1.0.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:26.634
# ::node	0	know-01	1-2
# ::node	0.0	i	0-1
# ::node	0.0.0	see-01	49-50
# ::node	0.0.0.0	name-01	28-29
# ::node	0.0.0.0.0	we	25-26
# ::node	0.0.0.0.1	planet	10-11
# ::node	0.0.0.0.1.0	great	9-10
# ::node	0.0.0.1	telescope	53-54
# ::node	0.0.0.1.0	include-91	32-33
# ::node	0.0.0.1.0.0	other	35-36
# ::node	0.0.0.1.0.0.0	small	42-43
# ::node	0.0.0.1.0.0.0.0	so	41-42
# ::node	0.0.1	planet	17-18
# ::node	0.0.1.0	name	17-18
# ::node	0.0.1.0.0	"Jupiter"	17-18
# ::node	0.0.2	planet	21-22
# ::node	0.0.2.0	name	21-22
# ::node	0.0.2.0.0	"Venus"	21-22
# ::node	0.1	planet	19-20
# ::node	0.1.0	name	19-20
# ::node	0.1.0.0	"Mars"	19-20
# ::node	0.1.1	planet	15-16
# ::node	0.1.1.0	name	15-16
# ::node	0.1.1.0.0	"Earth"	15-16
# ::node	0.2	well	3-4
# ::node	0.2.0	very	2-3
# ::root	0	know-01
# ::edge	include-91	ARG0	telescope	0.0.0.1.0	0.0.0.1	
# ::edge	include-91	ARG1	other	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	know-01	ARG0	i	0	0.0	
# ::edge	know-01	ARG1	planet	0	0.1	
# ::edge	know-01	degree	well	0	0.2	
# ::edge	name	op1	"Earth"	0.1.1.0	0.1.1.0.0	
# ::edge	name	op1	"Jupiter"	0.0.1.0	0.0.1.0.0	
# ::edge	name	op1	"Mars"	0.1.0	0.1.0.0	
# ::edge	name	op1	"Venus"	0.0.2.0	0.0.2.0.0	
# ::edge	name-01	ARG0	we	0.0.0.0	0.0.0.0.0	
# ::edge	name-01	ARG1	planet	0.0.0.0	0.0.0.0.1	
# ::edge	other	mod	small	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	planet	mod	great	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	planet	name	name	0.0.1	0.0.1.0	
# ::edge	planet	name	name	0.0.2	0.0.2.0	
# ::edge	planet	name	name	0.1	0.1.0	
# ::edge	planet	name	name	0.1.1	0.1.1.0	
# ::edge	planet	poss	i	0.0.1	0.0	
# ::edge	planet	poss	i	0.0.2	0.0	
# ::edge	planet	topic	planet	0.1	0.1.1	
# ::edge	see-01	ARG0	i	0.0.0	0.0	
# ::edge	see-01	ARG1	name-01	0.0.0	0.0.0.0	
# ::edge	see-01	manner	telescope	0.0.0	0.0.0.1	
# ::edge	small	degree	so	0.0.0.1.0.0.0	0.0.0.1.0.0.0.0	
# ::edge	well	degree	very	0.2	0.2.0	
(k / know-01 
      :ARG0 (i / i 
            :ARG0-of (s4 / see-01 
                  :ARG1 (n5 / name-01 
                        :ARG0 (w3 / we) 
                        :ARG1 (p / planet 
                              :mod (g / great))) 
                  :manner (t / telescope 
                        :ARG0-of (i2 / include-91 
                              :ARG1 (o / other 
                                    :mod (s2 / small 
                                          :degree (s3 / so)))))) 
            :poss-of (p3 / planet 
                  :name (n2 / name 
                        :op1 "Jupiter")) 
            :poss-of (p5 / planet 
                  :name (n4 / name 
                        :op1 "Venus"))) 
      :ARG1 (p4 / planet 
            :name (n3 / name 
                  :op1 "Mars") 
            :topic (p2 / planet 
                  :name (n / name 
                        :op1 "Earth"))) 
      :degree (w / well 
            :degree (v / very)))

# ::snt When an astronomer discovers one of these he does not give it a name , but only a number .
# ::tok When an astronomer discovers one of these he does not give it a name , but only a number .
# ::alignments 10-11|0 13-14|0.1 3-4|0.2 16-17|0.1.0 4-5|0.0 5-6|0.2.1+0.2.1.0 18-19|0.1.1 2-3|0.2.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:26.747
# ::node	0	give-01	10-11
# ::node	0.0	1	4-5
# ::node	0.1	name-01	13-14
# ::node	0.1.0	only	16-17
# ::node	0.1.1	number	18-19
# ::node	0.2	discover-01	3-4
# ::node	0.2.0	astronomer	2-3
# ::node	0.2.1	thing	5-6
# ::node	0.2.1.0	include-91	5-6
# ::root	0	give-01
# ::edge	discover-01	ARG0	astronomer	0.2	0.2.0	
# ::edge	discover-01	ARG1	thing	0.2	0.2.1	
# ::edge	give-01	ARG0	1	0	0.0	
# ::edge	give-01	ARG1	name-01	0	0.1	
# ::edge	give-01	condition	discover-01	0	0.2	
# ::edge	include-91	ARG1	thing	0.2.1.0	0.2.1	
# ::edge	name-01	ARG0	only	0.1	0.1.0	
# ::edge	name-01	ARG1	number	0.1	0.1.1	
(g / give-01 
      :ARG0 1 
      :ARG1 (n3 / name-01 
            :ARG0 (o2 / only) 
            :ARG1 (n2 / number)) 
      :condition (d / discover-01 
            :ARG0 (a / astronomer) 
            :ARG1 (t / thing 
                  :ARG1-of (i / include-91))))

# ::snt He might call it , for example , " Asteroid 325 . "
# ::tok He might call it , for example , " Asteroid 325 . "
# ::alignments 9-11|0.2+0.2.1+0.2.0 2-3|0 3-4|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:26.957
# ::node	0	call-01	2-3
# ::node	0.0	he	0-1
# ::node	0.1	it	3-4
# ::node	0.2	name	9-11
# ::node	0.2.0	"Asteroid"	9-11
# ::node	0.2.1	325	9-11
# ::root	0	call-01
# ::edge	call-01	ARG0	he	0	0.0	
# ::edge	call-01	ARG1	it	0	0.1	
# ::edge	call-01	ARG2	name	0	0.2	
# ::edge	name	op1	"Asteroid"	0.2	0.2.0	
# ::edge	name	op2	325	0.2	0.2.1	
(c / call-01 
      :ARG0 (h / he) 
      :ARG1 (i / it) 
      :ARG2 (n2 / name 
            :op1 "Asteroid" 
            :op2 325))

# ::snt I have serious reason to believe that the planet from which the little prince came is the asteroid known as B-612 .
# ::tok I have serious reason to believe that the planet from which the little prince came is the asteroid known as B - 612 .
# ::alignments 20-21|0.0.2.0.0+0.0.2.0.0.0 3-4|0.0.2 2-3|0.0.2.0 5-6|0.0 14-15|0.0.1.0 17-18|0 8-9|0.0.1 13-14|0.0.1.0.0 12-13|0.0.1.0.0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:27.313
# ::node	0	asteroid	17-18
# ::node	0.0	believe-01	5-6
# ::node	0.0.0	i	0-1
# ::node	0.0.1	planet	8-9
# ::node	0.0.1.0	come-01	14-15
# ::node	0.0.1.0.0	prince	13-14
# ::node	0.0.1.0.0.0	little	12-13
# ::node	0.0.2	reason	3-4
# ::node	0.0.2.0	serious-02	2-3
# ::node	0.0.2.0.0	name	20-21
# ::node	0.0.2.0.0.0	"B-612"	20-21
# ::root	0	asteroid
(a / asteroid 
      :ARG1-of (b / believe-01 
            :ARG0 (i / i) 
            :ARG2 (p / planet 
                  :ARG0-of (c2 / come-01 
                        :ARG1 (p2 / prince 
                              :mod (l / little)))) 
            :purpose-of (r / reason 
                  :ARG1-of (s / serious-02 
                        :ARG0 (n4 / name 
                              :op1 "B-612")))))

# ::snt This asteroid has only once been seen through the telescope .
# ::tok This asteroid has only once been seen through the telescope .
# ::alignments 6-7|0 3-4|0.1.0.0 9-10|0.0 1-2|0.1 0-1|0.1.1 2-3|0.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:27.349
# ::node	0	see-01	6-7
# ::node	0.0	telescope	9-10
# ::node	0.1	asteroid	1-2
# ::node	0.1.0	have-frequency-91	2-3
# ::node	0.1.0.0	only	3-4
# ::node	0.1.1	this	0-1
# ::root	0	see-01
# ::edge	asteroid	mod	this	0.1	0.1.1	
# ::edge	have-frequency-91	ARG0	only	0.1.0	0.1.0.0	
# ::edge	have-frequency-91	ARG1	asteroid	0.1.0	0.1	
# ::edge	see-01	ARG0	telescope	0	0.0	
# ::edge	see-01	ARG1	asteroid	0	0.1	
(s / see-01 
      :ARG0 (t2 / telescope) 
      :ARG1 (a / asteroid 
            :ARG1-of (h / have-frequency-91 
                  :ARG0 (o / only)) 
            :mod (t / this)))

# ::snt That was by a Turkish astronomer , in 1909 .
# ::tok That was by a Turkish astronomer , in 1909 .
# ::alignments 4-5|0.0+0.0.1+0.0.1.0 8-9|0+0.1 5-6|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:27.381
# ::node	0	date-entity	8-9
# ::node	0.0	country	4-5
# ::node	0.0.0	astronomer	5-6
# ::node	0.0.1	name	4-5
# ::node	0.0.1.0	"Turkey"	4-5
# ::node	0.1	1909	8-9
# ::root	0	date-entity
# ::edge	astronomer	mod	country	0.0.0	0.0	
# ::edge	country	name	name	0.0	0.0.1	
# ::edge	date-entity	poss	country	0	0.0	
# ::edge	date-entity	year	1909	0	0.1	
# ::edge	name	op1	"Turkey"	0.0.1	0.0.1.0	
(d / date-entity 
      :poss (c / country 
            :mod-of (a / astronomer) 
            :name (n / name 
                  :op1 "Turkey")) 
      :year 1909)

# ::snt On making his discovery , the astronomer had presented it to the International Astronomical Congress , in a great demonstration .
# ::tok On making his discovery , the astronomer had presented it to the International Astronomical Congress , in a great demonstration .
# ::alignments 12-15|0.2+0.2.0+0.2.0.2+0.2.0.1+0.2.0.0 8-9|0 6-7|0.0 18-19|0.0.0.0 9-10|0.1 3-4|0.0.1 19-20|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:27.459
# ::node	0	present-01	8-9
# ::node	0.0	astronomer	6-7
# ::node	0.0.0	demonstrate-01	19-20
# ::node	0.0.0.0	great	18-19
# ::node	0.0.1	discover-01	3-4
# ::node	0.1	it	9-10
# ::node	0.2	organization	12-15
# ::node	0.2.0	name	12-15
# ::node	0.2.0.0	"International"	12-15
# ::node	0.2.0.1	"Astronomical"	12-15
# ::node	0.2.0.2	"Congress"	12-15
# ::root	0	present-01
# ::edge	demonstrate-01	ARG0	astronomer	0.0.0	0.0	
# ::edge	demonstrate-01	mod	great	0.0.0	0.0.0.0	
# ::edge	discover-01	ARG0	astronomer	0.0.1	0.0	
# ::edge	name	op1	"International"	0.2.0	0.2.0.0	
# ::edge	name	op2	"Astronomical"	0.2.0	0.2.0.1	
# ::edge	name	op3	"Congress"	0.2.0	0.2.0.2	
# ::edge	organization	name	name	0.2	0.2.0	
# ::edge	present-01	ARG0	astronomer	0	0.0	
# ::edge	present-01	ARG1	it	0	0.1	
# ::edge	present-01	ARG4	organization	0	0.2	
(p / present-01 
      :ARG0 (a / astronomer 
            :ARG0-of (d2 / demonstrate-01 
                  :mod (g / great)) 
            :ARG0-of (d3 / discover-01)) 
      :ARG1 (i / it) 
      :ARG4 (o / organization 
            :name (n / name 
                  :op1 "International" 
                  :op2 "Astronomical" 
                  :op3 "Congress")))

# ::snt But he was in Turkish costume , and so nobody would believe what he said .
# ::tok But he was in Turkish costume , and so nobody would believe what he said .
# ::alignments 4-5|0.0.0.0.0+0.0.0.0.0.0+0.0.0.0.0.0.0 0-1|0 5-6|0.0.0.0 11-12|0.0 14-15|0.0.1+0.0.1.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:27.529
# ::node	0	contrast-01	0-1
# ::node	0.0	believe-01	11-12
# ::node	0.0.0	he	1-2
# ::node	0.0.0.0	costume-01	5-6
# ::node	0.0.0.0.0	country	4-5
# ::node	0.0.0.0.0.0	name	4-5
# ::node	0.0.0.0.0.0.0	"Turkey"	4-5
# ::node	0.0.1	thing	14-15
# ::node	0.0.1.0	say-01	14-15
# ::root	0	contrast-01
# ::edge	believe-01	ARG0	he	0.0	0.0.0	
# ::edge	believe-01	ARG1	thing	0.0	0.0.1	
# ::edge	contrast-01	ARG2	believe-01	0	0.0	
# ::edge	costume-01	ARG0	he	0.0.0.0	0.0.0	
# ::edge	costume-01	mod	country	0.0.0.0	0.0.0.0.0	
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	name	op1	"Turkey"	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	say-01	ARG1	thing	0.0.1.0	0.0.1	
(c4 / contrast-01 
      :ARG2 (b2 / believe-01 
            :ARG0 (h / he 
                  :ARG0-of (c / costume-01 
                        :mod (c2 / country 
                              :name (n / name 
                                    :op1 "Turkey")))) 
            :ARG1 (t / thing 
                  :ARG1-of (s2 / say-01))))

# ::snt Grown - ups are like that ...
# ::tok Grown - ups are like that ...
# ::alignments 5-6|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:27.542
# ::node	0	grown-up	0-1
# ::node	0.0	that	5-6
# ::root	0	grown-up
# ::edge	grown-up	poss	that	0	0.0	
(g / grown-up 
      :poss (t / that))

# ::snt Fortunately , however , for the reputation of Asteroid B-612 , a Turkish dictator made a law that his subjects , under pain of death , should change to European costume .
# ::tok Fortunately , however , for the reputation of Asteroid B - 612 , a Turkish dictator made a law that his subjects , under pain of death , should change to European costume .
# ::alignments 8-10|0.2.0.0+0.2.0.0.0+0.2.0.0.0.1+0.2.0.0.0.0 14-15|0.2.2+0.2.2.0+0.2.2.0.0 31-32|0.2.0.1.0+0.2.0.1.0.0+0.2.0.1.0.0.0 16-17|0 6-7|0.2.0.2.0 18-19|0.1 29-30|0.2.0 26-27|0.2.0.2 32-33|0.2.0.1 21-22|0.0 15-16|0.2+0.2.1 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:28.067
# ::node	0	make-01	16-17
# ::node	0.0	subject	21-22
# ::node	0.0.0	fortunate-01	0-1
# ::node	0.1	law	18-19
# ::node	0.2	have-org-role-91	15-16
# ::node	0.2.0	change-01	29-30
# ::node	0.2.0.0	planet	8-10
# ::node	0.2.0.0.0	name	8-10
# ::node	0.2.0.0.0.0	"Asteroid"	8-10
# ::node	0.2.0.0.0.1	"B-612"	8-10
# ::node	0.2.0.1	costume	32-33
# ::node	0.2.0.1.0	continent	31-32
# ::node	0.2.0.1.0.0	name	31-32
# ::node	0.2.0.1.0.0.0	"Europe"	31-32
# ::node	0.2.0.2	die-01	26-27
# ::node	0.2.0.2.0	reputation	6-7
# ::node	0.2.1	dictator	15-16
# ::node	0.2.2	country	14-15
# ::node	0.2.2.0	name	14-15
# ::node	0.2.2.0.0	"Turkey"	14-15
# ::root	0	make-01
# ::edge	change-01	ARG0	have-org-role-91	0.2.0	0.2	
# ::edge	change-01	ARG1	planet	0.2.0	0.2.0.0	
# ::edge	change-01	ARG2	costume	0.2.0	0.2.0.1	
# ::edge	change-01	manner	die-01	0.2.0	0.2.0.2	
# ::edge	continent	name	name	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	costume	mod	continent	0.2.0.1	0.2.0.1.0	
# ::edge	country	name	name	0.2.2	0.2.2.0	
# ::edge	die-01	ARG1	reputation	0.2.0.2	0.2.0.2.0	
# ::edge	fortunate-01	ARG0	subject	0.0.0	0.0	
# ::edge	have-org-role-91	ARG2	dictator	0.2	0.2.1	
# ::edge	have-org-role-91	mod	country	0.2	0.2.2	
# ::edge	make-01	ARG0	subject	0	0.0	
# ::edge	make-01	ARG1	law	0	0.1	
# ::edge	make-01	ARG2	have-org-role-91	0	0.2	
# ::edge	name	op1	"Asteroid"	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	name	op1	"Europe"	0.2.0.1.0.0	0.2.0.1.0.0.0	
# ::edge	name	op1	"Turkey"	0.2.2.0	0.2.2.0.0	
# ::edge	name	op2	"B-612"	0.2.0.0.0	0.2.0.0.0.1	
# ::edge	planet	name	name	0.2.0.0	0.2.0.0.0	
(m / make-01 
      :ARG0 (s / subject 
            :ARG0-of (f / fortunate-01)) 
      :ARG1 (l / law) 
      :ARG2 (h / have-org-role-91 
            :ARG0-of (c2 / change-01 
                  :ARG1 (p2 / planet 
                        :name (n3 / name 
                              :op1 "Asteroid" 
                              :op2 "B-612")) 
                  :ARG2 (c3 / costume 
                        :mod (c4 / continent 
                              :name (n2 / name 
                                    :op1 "Europe"))) 
                  :manner (d2 / die-01 
                        :ARG1 (r / reputation))) 
            :ARG2 (d / dictator) 
            :mod (c / country 
                  :name (n / name 
                        :op1 "Turkey"))))

# ::snt So in 1920 the astronomer gave his demonstration all over again , dressed with impressive style and elegance .
# ::tok So in 1920 the astronomer gave his demonstration all over again , dressed with impressive style and elegance .
# ::alignments 2-3|0.1.1+0.1.1.0 4-5|0.1.0 12-13|0.1 16-17|0 17-18|0.2 15-16|0.0.0 10-11|0.1.0.0.0 7-8|0.1.0.0 14-15|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:28.177
# ::node	0	and	16-17
# ::node	0.0	impress-01	14-15
# ::node	0.0.0	style	15-16
# ::node	0.1	dress-01	12-13
# ::node	0.1.0	astronomer	4-5
# ::node	0.1.0.0	demonstrate-01	7-8
# ::node	0.1.0.0.0	again	10-11
# ::node	0.1.1	date-entity	2-3
# ::node	0.1.1.0	1920	2-3
# ::node	0.2	elegance	17-18
# ::root	0	and
# ::edge	and	op1	elegance	0	0.2	
# ::edge	date-entity	year	1920	0.1.1	0.1.1.0	
# ::edge	demonstrate-01	ARG0	again	0.1.0.0	0.1.0.0.0	
# ::edge	demonstrate-01	ARG1	astronomer	0.1.0.0	0.1.0	
# ::edge	dress-01	ARG0	astronomer	0.1	0.1.0	
# ::edge	dress-01	ARG1	date-entity	0.1	0.1.1	
# ::edge	dress-01	ARG2	and	0.1	0	
# ::edge	impress-01	ARG0	and	0.0	0	
# ::edge	impress-01	ARG1	style	0.0	0.0.0	
(a4 / and 
      :ARG0-of (i / impress-01 
            :ARG1 (s / style)) 
      :ARG2-of (d2 / dress-01 
            :ARG0 (a / astronomer 
                  :ARG1-of (d4 / demonstrate-01 
                        :ARG0 (a3 / again))) 
            :ARG1 (d3 / date-entity 
                  :year 1920)) 
      :op1 (e / elegance))

# ::snt And this time everybody accepted his report .
# ::tok And this time everybody accepted his report .
# ::alignments 0-1|0 4-5|0.0 2-3|0.0.1 1-2|0.0.1.0 6-7|0.0.0.0.0+0.0.0.0 3-4|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:28.387
# ::node	0	and	0-1
# ::node	0.0	accept-01	4-5
# ::node	0.0.0	everybody	3-4
# ::node	0.0.0.0	report-01	6-7
# ::node	0.0.0.0.0	thing	6-7
# ::node	0.0.1	time	2-3
# ::node	0.0.1.0	this	1-2
# ::root	0	and
# ::edge	accept-01	ARG0	everybody	0.0	0.0.0	
# ::edge	accept-01	ARG1	time	0.0	0.0.1	
# ::edge	and	op1	accept-01	0	0.0	
# ::edge	report-01	ARG0	everybody	0.0.0.0	0.0.0	
# ::edge	report-01	ARG1	thing	0.0.0.0	0.0.0.0.0	
# ::edge	time	mod	this	0.0.1	0.0.1.0	
(a / and 
      :op1 (a2 / accept-01 
            :ARG0 (e / everybody 
                  :ARG0-of (r / report-01 
                        :ARG1 (t3 / thing))) 
            :ARG1 (t / time 
                  :mod (t2 / this))))

# ::snt If I have told you these details about the asteroid , and made a note of its number for you , it is on account of the grown - ups and their ways .
# ::tok If I have told you these details about the asteroid , and made a note of its number for you , it is on account of the grown - ups and their ways .
# ::alignments 24-25|0.0.0.1 11-12|0 14-15|0.0.0.0 17-18|0.0.0.0.0 3-4|0.0 4-5|0.0.2 6-7|0.0.1 9-10|0.1 1-2|0.0.0 30-31|0.0.0.1.0 32-33|0.0.0.1.0.0 27-28|0.0.0.1.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.134
# ::node	0	and	11-12
# ::node	0.0	tell-01	3-4
# ::node	0.0.0	i	1-2
# ::node	0.0.0.0	note-01	14-15
# ::node	0.0.0.0.0	number	17-18
# ::node	0.0.0.1	account-01	24-25
# ::node	0.0.0.1.0	and	30-31
# ::node	0.0.0.1.0.0	way	32-33
# ::node	0.0.0.1.1	grown-up	27-28
# ::node	0.0.1	detail	6-7
# ::node	0.0.2	you	4-5
# ::node	0.1	asteroid	9-10
# ::root	0	and
# ::edge	account-01	ARG0	and	0.0.0.1	0.0.0.1.0	
# ::edge	account-01	ARG1	grown-up	0.0.0.1	0.0.0.1.1	
# ::edge	account-01	poss	i	0.0.0.1	0.0.0	
# ::edge	and	op1	tell-01	0	0.0	
# ::edge	and	op1	way	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	and	op2	asteroid	0	0.1	
# ::edge	note-01	ARG0	i	0.0.0.0	0.0.0	
# ::edge	note-01	ARG1	number	0.0.0.0	0.0.0.0.0	
# ::edge	tell-01	ARG0	i	0.0	0.0.0	
# ::edge	tell-01	ARG1	detail	0.0	0.0.1	
# ::edge	tell-01	ARG2	you	0.0	0.0.2	
(a3 / and 
      :op1 (t / tell-01 
            :ARG0 (i / i 
                  :ARG0-of (n3 / note-01 
                        :ARG1 (n4 / number)) 
                  :poss-of (a / account-01 
                        :ARG0 (a2 / and 
                              :op1 (w / way)) 
                        :ARG1 (g / grown-up))) 
            :ARG1 (d / detail) 
            :ARG2 (y / you)) 
      :op2 (a4 / asteroid))

# ::snt WHen you tell them that you have made a new friend , they never ask you any questions about essential matters .
# ::tok WHen you tell them that you have made a new friend , they never ask you any questions about essential matters .
# ::alignments 17-18|0.2 16-17|0.2.1 2-3|0.3 12-13|0.0 7-8|0 10-11|0.1.0 9-10|0.1.0.0 1-2|0.3.0 20-21|0.2.0 19-20|0.2.0.0 6-7|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.404
# ::node	0	make-01	7-8
# ::node	0.0	they	12-13
# ::node	0.1	have-rel-role-91	6-7
# ::node	0.1.0	friend	10-11
# ::node	0.1.0.0	new-01	9-10
# ::node	0.2	question-01	17-18
# ::node	0.2.0	matter	20-21
# ::node	0.2.0.0	essential	19-20
# ::node	0.2.1	any	16-17
# ::node	0.3	tell-01	2-3
# ::node	0.3.0	you	1-2
# ::root	0	make-01
# ::edge	have-rel-role-91	ARG2	friend	0.1	0.1.0	
# ::edge	make-01	ARG0	they	0	0.0	
# ::edge	make-01	ARG1	have-rel-role-91	0	0.1	
# ::edge	matter	mod	essential	0.2.0	0.2.0.0	
# ::edge	new-01	ARG1	friend	0.1.0.0	0.1.0	
# ::edge	question-01	ARG0	matter	0.2	0.2.0	
# ::edge	question-01	ARG1	make-01	0.2	0	
# ::edge	question-01	ARG2	any	0.2	0.2.1	
# ::edge	tell-01	ARG0	you	0.3	0.3.0	
# ::edge	tell-01	ARG1	make-01	0.3	0	
(m2 / make-01 
      :ARG0 (t / they) 
      :ARG1 (h / have-rel-role-91 
            :ARG2 (f / friend 
                  :ARG1-of (n / new-01))) 
      :ARG1-of (q2 / question-01 
            :ARG0 (m / matter 
                  :mod (e / essential)) 
            :ARG2 (a2 / any)) 
      :ARG1-of (t3 / tell-01 
            :ARG0 (y / you)))

# ::snt They never say to you , " What does his voice sound like ?
# ::tok They never say to you , " What does his voice sound like ?
# ::alignments 2-3|0 4-5|0.1 11-12|0.0.0 10-11|0.0.0.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.565
# ::node	0	say-01	2-3
# ::node	0.0	they	0-1
# ::node	0.0.0	sound-01	11-12
# ::node	0.0.0.0	voice	10-11
# ::node	0.1	you	4-5
# ::root	0	say-01
# ::edge	say-01	ARG0	they	0	0.0	
# ::edge	say-01	ARG1	you	0	0.1	
# ::edge	sound-01	ARG0	they	0.0.0	0.0	
# ::edge	sound-01	ARG1	voice	0.0.0	0.0.0.0	
(s / say-01 
      :ARG0 (t / they 
            :ARG0-of (s2 / sound-01 
                  :ARG1 (v / voice))) 
      :ARG1 (y / you))

# ::snt What games does he love best ?
# ::tok What games does he love best ?
# ::alignments 4-5|0.0 5-6|0+0.1 1-2|0.0.1 3-4|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.627
# ::node	0	good	5-6
# ::node	0.0	love-01	4-5
# ::node	0.0.0	he	3-4
# ::node	0.0.1	game	1-2
# ::node	0.1	most	5-6
# ::root	0	good
# ::edge	good	degree	most	0	0.1	
# ::edge	love-01	ARG0	he	0.0	0.0.0	
# ::edge	love-01	ARG1	game	0.0	0.0.1	
# ::edge	love-01	ARG2	good	0.0	0	
(g / good 
      :ARG2-of (l / love-01 
            :ARG0 (h / he) 
            :ARG1 (g2 / game)) 
      :degree (m / most))

# ::snt Does he collect butterflies ? "
# ::tok Does he collect butterflies ? "
# ::alignments 2-3|0 3-4|0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.643
# ::node	0	collect-01	2-3
# ::node	0.0	he	1-2
# ::node	0.1	butterfly	3-4
# ::root	0	collect-01
# ::edge	collect-01	ARG0	he	0	0.0	
# ::edge	collect-01	ARG1	butterfly	0	0.1	
(c / collect-01 
      :ARG0 (h / he) 
      :ARG1 (b / butterfly))

# ::snt Instead , they demand : " How old is he ?
# ::tok Instead , they demand : " How old is he ?
# ::alignments 3-4|0 9-10|0.1 2-3|0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.666
# ::node	0	demand-01	3-4
# ::node	0.0	they	2-3
# ::node	0.1	he	9-10
# ::node	0.2	instead-of-91	0-1
# ::root	0	demand-01
# ::edge	demand-01	ARG0	they	0	0.0	
# ::edge	demand-01	ARG1	he	0	0.1	
# ::edge	demand-01	manner	instead-of-91	0	0.2	
(d / demand-01 
      :ARG0 (t / they) 
      :ARG1 (h2 / he) 
      :manner (i2 / instead-of-91))

# ::snt How many brothers has he ?
# ::tok How many brothers has he ?
# ::alignments 4-5|0.0.0 2-3|0 3-4|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.683
# ::node	0	brother	2-3
# ::node	0.0	have-rel-role-91	3-4
# ::node	0.0.0	he	4-5
# ::root	0	brother
(b / brother 
      :ARG0-of (h / have-rel-role-91 
            :ARG1 (h2 / he)))

# ::snt How much does he weigh ?
# ::tok How much does he weigh ?
# ::alignments 4-5|0 3-4|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.692
# ::node	0	weigh-01	4-5
# ::node	0.0	he	3-4
# ::root	0	weigh-01
# ::edge	weigh-01	ARG0	he	0	0.0	
(w / weigh-01 
      :ARG0 (h / he))

# ::snt How much money does his father make ? "
# ::tok How much money does his father make ? "
# ::alignments 6-7|0 5-6|0.0+0.0.0 2-3|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.745
# ::node	0	make-05	6-7
# ::node	0.0	have-rel-role-91	5-6
# ::node	0.0.0	father	5-6
# ::node	0.1	monetary-quantity	2-3
# ::root	0	make-05
# ::edge	have-rel-role-91	ARG2	father	0.0	0.0.0	
# ::edge	make-05	ARG0	have-rel-role-91	0	0.0	
# ::edge	make-05	ARG1	monetary-quantity	0	0.1	
(m / make-05 
      :ARG0 (h2 / have-rel-role-91 
            :ARG2 (f / father)) 
      :ARG1 (m2 / monetary-quantity))

# ::snt Only from these figures do they think they have learned anything about him .
# ::tok Only from these figures do they think they have learned anything about him .
# ::alignments 6-7|0.0.1 9-10|0.0 3-4|0 0-1|0.0.1.1 10-11|0.0.0 5-6|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:29.856
# ::node	0	figure	3-4
# ::node	0.0	learn-01	9-10
# ::node	0.0.0	anything	10-11
# ::node	0.0.1	think-01	6-7
# ::node	0.0.1.0	they	5-6
# ::node	0.0.1.1	only	0-1
# ::root	0	figure
(f / figure 
      :ARG0-of (l / learn-01 
            :ARG1 (a / anything) 
            :ARG1-of (t / think-01 
                  :ARG0 (t2 / they) 
                  :ARG2 (o / only))))

# ::snt If you were to say to the grown - ups : " I saw a beautiful house made of rosy brick , with geraniums in the windows and doves on the roof , " they would not be able to get any idea of that house at all .
# ::tok If you were to say to the grown - ups : " I saw a beautiful house made of rosy brick , with geraniums in the windows and doves on the roof , " they would not be able to get any idea of that house at all .
# ::alignments 38-39|0 4-5|0.1.2.0.0 13-14|0.1.2 16-17|0.1.0 15-16|0.1.0.0 27-28|0.1.2.0.0.0 28-29|0.1.2.0.0.0.1 31-32|0.1.2.0.0.0.1.0 23-24|0.1.3 26-27|0.1.2.0.0.0.0 17-18|0.1 20-21|0.1.1 19-20|0.1.1.0 1-2|0.1.2.0 40-41|0.0 42-43|0.0.1 46-47|0.0.0 47-48|0.1.0.0.0 41-42|0.0.1.0 7-8|0.1.2.0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:31.346
# ::node	0	possible-01	38-39
# ::node	0.0	get-01	40-41
# ::node	0.0.0	at	46-47
# ::node	0.0.1	idea	42-43
# ::node	0.0.1.0	any	41-42
# ::node	0.1	make-01	17-18
# ::node	0.1.0	house	16-17
# ::node	0.1.0.0	beautiful-02	15-16
# ::node	0.1.0.0.0	all	47-48
# ::node	0.1.1	brick	20-21
# ::node	0.1.1.0	rosy	19-20
# ::node	0.1.2	see-01	13-14
# ::node	0.1.2.0	you	1-2
# ::node	0.1.2.0.0	say-01	4-5
# ::node	0.1.2.0.0.0	and	27-28
# ::node	0.1.2.0.0.0.0	window	26-27
# ::node	0.1.2.0.0.0.1	dove	28-29
# ::node	0.1.2.0.0.0.1.0	roof	31-32
# ::node	0.1.2.0.0.1	grown-up	7-8
# ::node	0.1.3	geranium	23-24
# ::root	0	possible-01
# ::edge	and	op1	window	0.1.2.0.0.0	0.1.2.0.0.0.0	
# ::edge	and	op2	dove	0.1.2.0.0.0	0.1.2.0.0.0.1	
# ::edge	beautiful-02	ARG0	all	0.1.0.0	0.1.0.0.0	
# ::edge	beautiful-02	ARG1	house	0.1.0.0	0.1.0	
# ::edge	brick	mod	rosy	0.1.1	0.1.1.0	
# ::edge	dove	location	roof	0.1.2.0.0.0.1	0.1.2.0.0.0.1.0	
# ::edge	get-01	ARG0	at	0.0	0.0.0	
# ::edge	get-01	ARG1	idea	0.0	0.0.1	
# ::edge	idea	mod	any	0.0.1	0.0.1.0	
# ::edge	make-01	ARG0	house	0.1	0.1.0	
# ::edge	make-01	ARG1	brick	0.1	0.1.1	
# ::edge	make-01	ARG2	geranium	0.1	0.1.3	
# ::edge	possible-01	ARG1	get-01	0	0.0	
# ::edge	possible-01	ARG2	make-01	0	0.1	
# ::edge	say-01	ARG0	you	0.1.2.0.0	0.1.2.0	
# ::edge	say-01	ARG1	and	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	say-01	ARG2	grown-up	0.1.2.0.0	0.1.2.0.0.1	
# ::edge	see-01	ARG0	you	0.1.2	0.1.2.0	
# ::edge	see-01	ARG1	make-01	0.1.2	0.1	
(p / possible-01 
      :ARG1 (g / get-01 
            :ARG0 (a2 / at) 
            :ARG1 (i / idea 
                  :mod (a / any))) 
      :ARG2 (m / make-01 
            :ARG0 (h2 / house 
                  :ARG1-of (b2 / beautiful-02 
                        :ARG0 (a3 / all))) 
            :ARG1 (b / brick 
                  :mod (r / rosy)) 
            :ARG1-of (s2 / see-01 
                  :ARG0 (y / you 
                        :ARG0-of (s / say-01 
                              :ARG1 (a4 / and 
                                    :op1 (w / window) 
                                    :op2 (d / dove 
                                          :location (r2 / roof))) 
                              :ARG2 (g2 / grown-up)))) 
            :ARG2 (g3 / geranium)))

# ::snt You would have to say to them : " I saw a house that cost $ 20,000 . "
# ::tok You would have to say to them : " I saw a house that cost $ 20,000 . "
# ::alignments 4-5|0 10-11|0.1 12-13|0.1.0 14-15|0.1.0.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:31.457
# ::node	0	say-01	4-5
# ::node	0.0	you	0-1
# ::node	0.1	see-01	10-11
# ::node	0.1.0	house	12-13
# ::node	0.1.0.0	cost-01	14-15
# ::root	0	say-01
# ::edge	cost-01	ARG0	house	0.1.0.0	0.1.0	
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	see-01	0	0.1	
# ::edge	see-01	ARG1	house	0.1	0.1.0	
(s / say-01 
      :ARG0 (y / you) 
      :ARG1 (s2 / see-01 
            :ARG1 (h / house 
                  :ARG0-of (c / cost-01))))

# ::snt Then they would exclaim : " Oh , what a pretty house that is ! "
# ::tok Then they would exclaim : " Oh , what a pretty house that is ! "
# ::alignments 3-4|0 0-1|0.2 10-11|0.0.0 11-12|0.0 12-13|0.0.1 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:31.499
# ::node	0	exclaim-01	3-4
# ::node	0.0	house	11-12
# ::node	0.0.0	pretty	10-11
# ::node	0.0.1	that	12-13
# ::node	0.1	they	1-2
# ::node	0.2	then	0-1
# ::root	0	exclaim-01
# ::edge	exclaim-01	ARG0	house	0	0.0	
# ::edge	exclaim-01	ARG1	they	0	0.1	
# ::edge	exclaim-01	time	then	0	0.2	
# ::edge	house	mod	pretty	0.0	0.0.0	
# ::edge	that	mod	house	0.0.1	0.0	
(e / exclaim-01 
      :ARG0 (h2 / house 
            :mod (p2 / pretty) 
            :mod-of (t4 / that)) 
      :ARG1 (t / they) 
      :time (t3 / then))

# ::snt Just so , you might say to them : " The proof that the little prince existed is that he was charming , that he laughed , and that he was looking for a sheep .
# ::tok Just so , you might say to them : " The proof that the little prince existed is that he was charming , that he laughed , and that he was looking for a sheep .
# ::alignments 5-6|0 27-28|0.1 31-32|0.1.1 34-35|0.1.1.1 25-26|0.1.0 21-22|0.1.0.0.0 19-20|0.1.0.0 16-17|0.1.1.0.0 15-16|0.1.1.0 14-15|0.1.1.0.1 3-4|0.0 0-1|0.1.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:31.696
# ::node	0	say-01	5-6
# ::node	0.0	you	3-4
# ::node	0.1	and	27-28
# ::node	0.1.0	laugh-01	25-26
# ::node	0.1.0.0	he	19-20
# ::node	0.1.0.0.0	charming	21-22
# ::node	0.1.0.1	just-so	0-1
# ::node	0.1.1	look-01	31-32
# ::node	0.1.1.0	prince	15-16
# ::node	0.1.1.0.0	exist-01	16-17
# ::node	0.1.1.0.1	little	14-15
# ::node	0.1.1.1	sheep	34-35
# ::root	0	say-01
# ::edge	and	op1	laugh-01	0.1	0.1.0	
# ::edge	and	op2	look-01	0.1	0.1.1	
# ::edge	charming	domain	he	0.1.0.0.0	0.1.0.0	
# ::edge	exist-01	ARG0	prince	0.1.1.0.0	0.1.1.0	
# ::edge	laugh-01	ARG0	he	0.1.0	0.1.0.0	
# ::edge	laugh-01	ARG1	just-so	0.1.0	0.1.0.1	
# ::edge	look-01	ARG0	prince	0.1.1	0.1.1.0	
# ::edge	look-01	ARG1	sheep	0.1.1	0.1.1.1	
# ::edge	prince	mod	little	0.1.1.0	0.1.1.0.1	
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	and	0	0.1	
(s2 / say-01 
      :ARG0 (y / you) 
      :ARG1 (a / and 
            :op1 (l / laugh-01 
                  :ARG0 (h / he 
                        :domain-of (c / charming)) 
                  :ARG1 (j / just-so)) 
            :op2 (l2 / look-01 
                  :ARG0 (p3 / prince 
                        :ARG0-of (e / exist-01) 
                        :mod (l3 / little)) 
                  :ARG1 (s3 / sheep))))

# ::snt If anybody wants a sheep , that is a proof that he exists . "
# ::tok If anybody wants a sheep , that is a proof that he exists . "
# ::alignments 2-3|0.0 4-5|0.0.0 1-2|0 12-13|0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:31.715
# ::node	0	anybody	1-2
# ::node	0.0	want-01	2-3
# ::node	0.0.0	sheep	4-5
# ::node	0.0.1	exist-01	12-13
# ::root	0	anybody
(a / anybody 
      :ARG0-of (w / want-01 
            :ARG1 (s / sheep) 
            :ARG1-of (e / exist-01)))

# ::snt And what good would it do to tell them that ?
# ::tok And what good would it do to tell them that ?
# ::alignments 0-1|0 5-6|0.0 2-3|0.0.0 7-8|0.0.1 9-10|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:31.732
# ::node	0	and	0-1
# ::node	0.0	do-02	5-6
# ::node	0.0.0	good-04	2-3
# ::node	0.0.1	tell-01	7-8
# ::node	0.0.1.0	that	9-10
# ::root	0	and
# ::edge	and	op1	do-02	0	0.0	
# ::edge	do-02	ARG1	good-04	0.0	0.0.0	
# ::edge	do-02	purpose	tell-01	0.0	0.0.1	
# ::edge	tell-01	ARG1	that	0.0.1	0.0.1.0	
(a / and 
      :op1 (d / do-02 
            :ARG1 (g / good-04) 
            :purpose (t / tell-01 
                  :ARG1 (t3 / that))))

# ::snt They would shrug their shoulders , and treat you like a child .
# ::tok They would shrug their shoulders , and treat you like a child .
# ::alignments 6-7|0 7-8|0.1 11-12|0.1.1 8-9|0.1.0 2-3|0.0 4-5|0.0.1 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:31.811
# ::node	0	and	6-7
# ::node	0.0	shrug-01	2-3
# ::node	0.0.0	they	0-1
# ::node	0.0.1	shoulder	4-5
# ::node	0.1	treat-01	7-8
# ::node	0.1.0	you	8-9
# ::node	0.1.1	child	11-12
# ::root	0	and
# ::edge	and	op1	shrug-01	0	0.0	
# ::edge	and	op2	treat-01	0	0.1	
# ::edge	shrug-01	ARG0	they	0.0	0.0.0	
# ::edge	shrug-01	ARG1	shoulder	0.0	0.0.1	
# ::edge	treat-01	ARG0	shoulder	0.1	0.0.1	
# ::edge	treat-01	ARG1	you	0.1	0.1.0	
# ::edge	treat-01	ARG2	child	0.1	0.1.1	
(a / and 
      :op1 (s / shrug-01 
            :ARG0 (t / they) 
            :ARG1 (s2 / shoulder)) 
      :op2 (t2 / treat-01 
            :ARG1 (y / you) 
            :ARG2 (c / child) 
            :ARG0 s2))

# ::snt But if you said to them : " The planet he came from is Asteroid B-612 , " then they would be convinced , and leave you in peace from their questions .
# ::tok But if you said to them : " The planet he came from is Asteroid B - 612 , " then they would be convinced , and leave you in peace from their questions .
# ::alignments 14-16|0.0.1.0.1+0.0.1.0.1.1+0.0.1.0.1.0 0-1|0 26-27|0.1 3-4|0.0 11-12|0.0.1.0 9-10|0.0.1 10-11|0.0.1.0.0 2-3|0.0.0 27-28|0.1.0.0.0 30-31|0.1.0.0.0.0 33-34|0.1.0.0.0.1 24-25|0.1.0 21-22|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:32.250
# ::node	0	contrast-01	0-1
# ::node	0.0	say-01	3-4
# ::node	0.0.0	you	2-3
# ::node	0.0.1	planet	9-10
# ::node	0.0.1.0	come-01	11-12
# ::node	0.0.1.0.0	he	10-11
# ::node	0.0.1.0.1	name	14-16
# ::node	0.0.1.0.1.0	"Asteroid"	14-16
# ::node	0.0.1.0.1.1	"B-612"	14-16
# ::node	0.1	and	26-27
# ::node	0.1.0	convince-01	24-25
# ::node	0.1.0.0	they	21-22
# ::node	0.1.0.0.0	leave-14	27-28
# ::node	0.1.0.0.0.0	peace	30-31
# ::node	0.1.0.0.0.1	question-01	33-34
# ::root	0	contrast-01
# ::edge	and	op1	convince-01	0.1	0.1.0	
# ::edge	come-01	ARG1	he	0.0.1.0	0.0.1.0.0	
# ::edge	come-01	ARG4	planet	0.0.1.0	0.0.1	
# ::edge	come-01	time	name	0.0.1.0	0.0.1.0.1	
# ::edge	contrast-01	ARG1	say-01	0	0.0	
# ::edge	contrast-01	ARG2	and	0	0.1	
# ::edge	convince-01	ARG1	they	0.1.0	0.1.0.0	
# ::edge	leave-14	ARG0	they	0.1.0.0.0	0.1.0.0	
# ::edge	leave-14	ARG1	peace	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	leave-14	manner	question-01	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	name	op1	"Asteroid"	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	name	op2	"B-612"	0.0.1.0.1	0.0.1.0.1.1	
# ::edge	say-01	ARG0	you	0.0	0.0.0	
# ::edge	say-01	ARG1	planet	0.0	0.0.1	
(c3 / contrast-01 
      :ARG1 (s / say-01 
            :ARG0 (y / you) 
            :ARG1 (p / planet 
                  :ARG4-of (c2 / come-01 
                        :ARG1 (h / he) 
                        :time (n / name 
                              :op1 "Asteroid" 
                              :op2 "B-612")))) 
      :ARG2 (a / and 
            :op1 (c / convince-01 
                  :ARG1 (t / they 
                        :ARG0-of (l / leave-14 
                              :ARG1 (p2 / peace) 
                              :manner (q2 / question-01))))))

# ::snt They are like that .
# ::tok They are like that .
# ::alignments 0-1|0.0 3-4|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:32.260
# ::node	0	that	3-4
# ::node	0.0	they	0-1
# ::root	0	that
(t2 / that 
      :op-of (t / they))

# ::snt One must not hold it against them .
# ::tok One must not hold it against them .
# ::alignments 0-1|0.0 3-4|0 5-6|0.2 4-5|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:32.276
# ::node	0	hold-01	3-4
# ::node	0.0	one	0-1
# ::node	0.1	it	4-5
# ::node	0.2	against	5-6
# ::root	0	hold-01
# ::edge	hold-01	ARG0	one	0	0.0	
# ::edge	hold-01	ARG1	it	0	0.1	
# ::edge	hold-01	ARG2	against	0	0.2	
(h / hold-01 
      :ARG0 (o2 / one) 
      :ARG1 (i / it) 
      :ARG2 (a / against))

# ::snt Children should always show great forbearance toward grown - up people .
# ::tok Children should always show great forbearance toward grown - up people .
# ::alignments 1-2|0 3-4|0.0 2-3|0.0.3 5-6|0.0.1 4-5|0.0.1.0 0-1|0.0.0 7-8|0.0.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:32.424
# ::node	0	recommend-01	1-2
# ::node	0.0	show-01	3-4
# ::node	0.0.0	child	0-1
# ::node	0.0.1	forbearance	5-6
# ::node	0.0.1.0	great	4-5
# ::node	0.0.2	grown-up	7-8
# ::node	0.0.3	always	2-3
# ::root	0	recommend-01
# ::edge	forbearance	mod	great	0.0.1	0.0.1.0	
# ::edge	recommend-01	ARG1	show-01	0	0.0	
# ::edge	show-01	ARG0	child	0.0	0.0.0	
# ::edge	show-01	ARG1	forbearance	0.0	0.0.1	
# ::edge	show-01	ARG2	grown-up	0.0	0.0.2	
# ::edge	show-01	time	always	0.0	0.0.3	
(r / recommend-01 
      :ARG1 (s / show-01 
            :ARG0 (c / child) 
            :ARG1 (f / forbearance 
                  :mod (g / great)) 
            :ARG2 (g2 / grown-up) 
            :time (a / always)))

# ::snt But certainly , for us who understand life , figures are a matter of indifference .
# ::tok But certainly , for us who understand life , figures are a matter of indifference .
# ::alignments 0-1|0 6-7|0.2.0 7-8|0.2.0.0 9-10|0.2 1-2|0.0 14-15|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:32.480
# ::node	0	contrast-01	0-1
# ::node	0.0	certain	1-2
# ::node	0.1	indifferent-01	14-15
# ::node	0.2	figure	9-10
# ::node	0.2.0	understand-01	6-7
# ::node	0.2.0.0	life	7-8
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	certain	0	0.0	
# ::edge	contrast-01	time	figure	0	0.2	
# ::edge	indifferent-01	ARG1	contrast-01	0.1	0	
# ::edge	understand-01	ARG0	figure	0.2.0	0.2	
# ::edge	understand-01	ARG1	life	0.2.0	0.2.0.0	
(c2 / contrast-01 
      :ARG1 (c / certain) 
      :ARG1-of (i2 / indifferent-01) 
      :time (f2 / figure 
            :ARG0-of (u / understand-01 
                  :ARG1 (l / life))))

# ::snt I should have liked to begin this story in the fashion of the fairy - tales .
# ::tok I should have liked to begin this story in the fashion of the fairy - tales .
# ::alignments 3-4|0.0.0.1 5-6|0.0.0 10-11|0 15-16|0.0.0.1.0 13-14|0.0.0.1.0.0 7-8|0.0 6-7|0.0.1 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:32.642
# ::node	0	fashion	10-11
# ::node	0.0	story	7-8
# ::node	0.0.0	begin-01	5-6
# ::node	0.0.0.0	i	0-1
# ::node	0.0.0.1	like-02	3-4
# ::node	0.0.0.1.0	tale	15-16
# ::node	0.0.0.1.0.0	fairy	13-14
# ::node	0.0.1	this	6-7
# ::root	0	fashion
(f / fashion 
      :poss-of (s / story 
            :ARG1-of (b / begin-01 
                  :ARG0 (i / i) 
                  :ARG1-of (l / like-02 
                        :ARG0 (t2 / tale 
                              :mod (f2 / fairy)))) 
            :mod (t / this)))

# ::snt I should have like to say : " Once upon a time there was a little prince who lived on a planet that was scarcely any bigger than himself , and who had need of a sheep ... "
# ::tok I should have like to say : " Once upon a time there was a little prince who lived on a planet that was scarcely any bigger than himself , and who had need of a sheep ... "
# ::alignments 3-4|0.0.0.0.0 5-6|0.0.0.0.0.0 16-17|0.0.0.0 33-34|0 36-37|0.1 18-19|0.0.0 21-22|0.0.0.2 26-27|0.0 15-16|0.0.0.0.1 0-1|0.0.0.0.0.0.0 8-9|0.0.0.0.0.0.1 24-25|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:33.363
# ::node	0	need-01	33-34
# ::node	0.0	big	26-27
# ::node	0.0.0	live-01	18-19
# ::node	0.0.0.0	prince	16-17
# ::node	0.0.0.0.0	like-02	3-4
# ::node	0.0.0.0.0.0	say-01	5-6
# ::node	0.0.0.0.0.0.0	i	0-1
# ::node	0.0.0.0.0.0.1	once-upon-a-time	8-9
# ::node	0.0.0.0.1	little	15-16
# ::node	0.0.0.1	scarce	24-25
# ::node	0.0.0.2	planet	21-22
# ::node	0.1	sheep	36-37
# ::root	0	need-01
# ::edge	like-02	ARG0	prince	0.0.0.0.0	0.0.0.0	
# ::edge	like-02	ARG1	say-01	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	live-01	ARG0	prince	0.0.0	0.0.0.0	
# ::edge	live-01	ARG1	scarce	0.0.0	0.0.0.1	
# ::edge	live-01	ARG2	big	0.0.0	0.0	
# ::edge	live-01	location	planet	0.0.0	0.0.0.2	
# ::edge	need-01	ARG0	big	0	0.0	
# ::edge	need-01	ARG1	sheep	0	0.1	
# ::edge	prince	mod	little	0.0.0.0	0.0.0.0.1	
# ::edge	say-01	ARG0	i	0.0.0.0.0.0	0.0.0.0.0.0.0	
# ::edge	say-01	ARG1	once-upon-a-time	0.0.0.0.0.0	0.0.0.0.0.0.1	
(n / need-01 
      :ARG0 (b / big 
            :ARG2-of (l3 / live-01 
                  :ARG0 (p / prince 
                        :ARG0-of (l / like-02 
                              :ARG1 (s / say-01 
                                    :ARG0 (i / i) 
                                    :ARG1 (o / once-upon-a-time))) 
                        :mod (l2 / little)) 
                  :ARG1 (s2 / scarce) 
                  :location (p2 / planet))) 
      :ARG1 (s3 / sheep))

# ::snt To those who understand life , that would have given a much greater air of truth to my story .
# ::tok To those who understand life , that would have given a much greater air of truth to my story .
# ::alignments 9-10|0.0.0 3-4|0.0+0 4-5|0.1 18-19|0.0.0.2 15-16|0.0.0.1.0 13-14|0.0.0.1 12-13|0.0.0.1.1 11-12|0.0.0.1.2 6-7|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:33.534
# ::node	0	understand-01	3-4
# ::node	0.0	person	3-4
# ::node	0.0.0	give-01	9-10
# ::node	0.0.0.0	that	6-7
# ::node	0.0.0.1	air	13-14
# ::node	0.0.0.1.0	truth	15-16
# ::node	0.0.0.1.1	great	12-13
# ::node	0.0.0.1.2	much	11-12
# ::node	0.0.0.2	story	18-19
# ::node	0.1	life	4-5
# ::root	0	understand-01
# ::edge	air	domain	truth	0.0.0.1	0.0.0.1.0	
# ::edge	air	mod	great	0.0.0.1	0.0.0.1.1	
# ::edge	give-01	ARG0	that	0.0.0	0.0.0.0	
# ::edge	give-01	ARG1	air	0.0.0	0.0.0.1	
# ::edge	give-01	ARG2	person	0.0.0	0.0	
# ::edge	give-01	destination	story	0.0.0	0.0.0.2	
# ::edge	much	op1	air	0.0.0.1.2	0.0.0.1	
# ::edge	understand-01	ARG0	person	0	0.0	
# ::edge	understand-01	ARG1	life	0	0.1	
(u / understand-01 
      :ARG0 (p / person 
            :ARG2-of (g / give-01 
                  :ARG0 (t / that) 
                  :ARG1 (a / air 
                        :domain (t3 / truth) 
                        :mod (g2 / great) 
                        :op-of (m2 / much)) 
                  :destination (s / story))) 
      :ARG1 (l / life))

# ::snt For I do not want any one to read my book carelessly .
# ::tok For I do not want any one to read my book carelessly .
# ::alignments 4-5|0 8-9|0.0.0 10-11|0.0.0.0 1-2|0.0 11-12|0.0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:33.554
# ::node	0	want-01	4-5
# ::node	0.0	i	1-2
# ::node	0.0.0	read-01	8-9
# ::node	0.0.0.0	book	10-11
# ::node	0.0.0.1	careless	11-12
# ::root	0	want-01
# ::edge	read-01	ARG0	i	0.0.0	0.0	
# ::edge	read-01	ARG1	book	0.0.0	0.0.0.0	
# ::edge	read-01	degree	careless	0.0.0	0.0.0.1	
# ::edge	want-01	ARG0	i	0	0.0	
(w / want-01 
      :ARG0 (i / i 
            :ARG0-of (r / read-01 
                  :ARG1 (b / book) 
                  :degree (c2 / careless))))

# ::snt I have suffered too much grief in setting down these memories .
# ::tok I have suffered too much grief in setting down these memories .
# ::alignments 2-3|0.0 10-11|0.0.1 5-6|0 4-5|0.1 3-4|0.0.2 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:33.642
# ::node	0	grief	5-6
# ::node	0.0	suffer-01	2-3
# ::node	0.0.0	i	0-1
# ::node	0.0.1	memory	10-11
# ::node	0.0.2	too	3-4
# ::node	0.1	much	4-5
# ::root	0	grief
# ::edge	grief	degree	much	0	0.1	
# ::edge	suffer-01	ARG0	i	0.0	0.0.0	
# ::edge	suffer-01	ARG1	memory	0.0	0.0.1	
# ::edge	suffer-01	ARG2	too	0.0	0.0.2	
# ::edge	suffer-01	ARG4	grief	0.0	0	
(g / grief 
      :ARG4-of (s / suffer-01 
            :ARG0 (i / i) 
            :ARG1 (m2 / memory) 
            :ARG2 (t / too)) 
      :degree (m / much))

# ::snt Six years have already passed since my friend went away from me , with his sheep .
# ::tok Six years have already passed since my friend went away from me , with his sheep .
# ::alignments 8-9|0 3-4|0.3 0-1|0.1.1 1-2|0.1+0.1.2 15-16|0.2 9-10|0.4 7-8|0.0 2-3|0.1.0.0+0.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:34.013
# ::node	0	go-02	8-9
# ::node	0.0	friend	7-8
# ::node	0.1	temporal-quantity	1-2
# ::node	0.1.0	have-rel-role-91	2-3
# ::node	0.1.0.0	person	2-3
# ::node	0.1.1	6	0-1
# ::node	0.1.2	year	1-2
# ::node	0.2	sheep	15-16
# ::node	0.3	already	3-4
# ::node	0.4	away	9-10
# ::root	0	go-02
# ::edge	already	compared-to	go-02	0.3	0	
# ::edge	go-02	ARG0	friend	0	0.0	
# ::edge	go-02	ARG1	temporal-quantity	0	0.1	
# ::edge	go-02	ARG2	sheep	0	0.2	
# ::edge	go-02	direction	away	0	0.4	
# ::edge	have-rel-role-91	ARG0	person	0.1.0	0.1.0.0	
# ::edge	have-rel-role-91	ARG1	temporal-quantity	0.1.0	0.1	
# ::edge	temporal-quantity	quant	6	0.1	0.1.1	
# ::edge	temporal-quantity	unit	year	0.1	0.1.2	
(g / go-02 
      :ARG0 (f / friend) 
      :ARG1 (t / temporal-quantity 
            :ARG1-of (h / have-rel-role-91 
                  :ARG0 (p / person)) 
            :quant 6 
            :unit (y / year)) 
      :ARG2 (s / sheep) 
      :compared-to-of (a3 / already) 
      :direction (a / away))

# ::snt If I try to describe him here , it is to make sure that I shall not forget him .
# ::tok If I try to describe him here , it is to make sure that I shall not forget him .
# ::alignments 17-18|0 2-3|0.0.0 4-5|0.0.1 6-7|0.0.1.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:34.038
# ::node	0	forget-01	17-18
# ::node	0.0	i	1-2
# ::node	0.0.0	try-01	2-3
# ::node	0.0.1	describe-01	4-5
# ::node	0.0.1.0	here	6-7
# ::root	0	forget-01
# ::edge	describe-01	ARG0	i	0.0.1	0.0	
# ::edge	describe-01	location	here	0.0.1	0.0.1.0	
# ::edge	forget-01	ARG0	i	0	0.0	
# ::edge	try-01	ARG0	i	0.0.0	0.0	
# ::edge	try-01	ARG1	describe-01	0.0.0	0.0.1	
(f / forget-01 
      :ARG0 (i / i 
            :ARG0-of (t / try-01) 
            :ARG0-of (d / describe-01 
                  :location (h2 / here) 
                  :ARG1-of t)))

# ::snt To forget a friend is sad .
# ::tok To forget a friend is sad .
# ::alignments 5-6|0.0.0 1-2|0 3-4|0.0+0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:34.049
# ::node	0	forget-01	1-2
# ::node	0.0	have-rel-role-91	3-4
# ::node	0.0.0	sad-02	5-6
# ::node	0.0.1	friend	3-4
# ::root	0	forget-01
# ::edge	forget-01	ARG1	have-rel-role-91	0	0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0	0.0.1	
# ::edge	sad-02	ARG1	have-rel-role-91	0.0.0	0.0	
(f3 / forget-01 
      :ARG1 (h / have-rel-role-91 
            :ARG1-of (s / sad-02) 
            :ARG2 (f / friend)))

# ::snt Not every one has had a friend .
# ::tok Not every one has had a friend .
# ::alignments 3-4|0.0.0.0 6-7|0.0.0 4-5|0+0.0 1-2|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:34.125
# ::node	0	person	4-5
# ::node	0.0	have-rel-role-91	4-5
# ::node	0.0.0	friend	6-7
# ::node	0.0.0.0	have-03	3-4
# ::node	0.0.0.0.0	everyone	1-2
# ::root	0	person
(p / person 
      :ARG0-of (h2 / have-rel-role-91 
            :ARG2 (f / friend 
                  :ARG2-of (h / have-03 
                        :ARG1 (e / everyone)))))

# ::snt And if I forget him , I may become like the grown - ups who are no longer interested in anything but figures ...
# ::tok And if I forget him , I may become like the grown - ups who are no longer interested in anything but figures ...
# ::alignments 16-17|0.2.1.2 0-1|0.1 7-8|0 3-4|0.2 2-3|0.2.0 18-19|0.2.1 20-21|0.2.1.1 22-23|0.0 11-12|0.2.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:34.327
# ::node	0	possible-01	7-8
# ::node	0.0	figure	22-23
# ::node	0.1	and	0-1
# ::node	0.2	forget-01	3-4
# ::node	0.2.0	i	2-3
# ::node	0.2.1	interest-01	18-19
# ::node	0.2.1.0	grown-up	11-12
# ::node	0.2.1.1	anything	20-21
# ::node	0.2.1.2	-	16-17
# ::root	0	possible-01
# ::edge	forget-01	ARG0	i	0.2	0.2.0	
# ::edge	forget-01	ARG1	interest-01	0.2	0.2.1	
# ::edge	interest-01	ARG0	grown-up	0.2.1	0.2.1.0	
# ::edge	interest-01	ARG1	anything	0.2.1	0.2.1.1	
# ::edge	interest-01	ARG2	-	0.2.1	0.2.1.2	
# ::edge	possible-01	ARG0	figure	0	0.0	
# ::edge	possible-01	ARG1	and	0	0.1	
# ::edge	possible-01	ARG2	forget-01	0	0.2	
(p / possible-01 
      :ARG0 (f / figure) 
      :ARG1 (a / and) 
      :ARG2 (f2 / forget-01 
            :ARG0 (i / i) 
            :ARG1 (i2 / interest-01 
                  :ARG0 (g / grown-up) 
                  :ARG1 (a2 / anything) 
                  :ARG2 (- / -))))

# ::snt It is for that purpose , again , that I have bought a box of paints and some pencils .
# ::tok It is for that purpose , again , that I have bought a box of paints and some pencils .
# ::alignments 11-12|0.2 3-4|0.2.2 16-17|0 18-19|0.1 17-18|0.1.0 15-16|0.0 13-14|0.2.1 9-10|0.2.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:34.557
# ::node	0	and	16-17
# ::node	0.0	paint	15-16
# ::node	0.1	pencil	18-19
# ::node	0.1.0	some	17-18
# ::node	0.2	buy-01	11-12
# ::node	0.2.0	i	9-10
# ::node	0.2.1	box	13-14
# ::node	0.2.2	that	3-4
# ::root	0	and
# ::edge	and	op1	paint	0	0.0	
# ::edge	and	op2	pencil	0	0.1	
# ::edge	buy-01	ARG0	i	0.2	0.2.0	
# ::edge	buy-01	ARG1	box	0.2	0.2.1	
# ::edge	buy-01	ARG2	that	0.2	0.2.2	
# ::edge	buy-01	time	and	0.2	0	
# ::edge	pencil	mod	some	0.1	0.1.0	
(a / and 
      :op1 (p / paint) 
      :op2 (p2 / pencil 
            :mod (s / some)) 
      :time-of (b / buy-01 
            :ARG0 (i / i) 
            :ARG1 (b2 / box) 
            :ARG2 (t2 / that)))

# ::snt It is hard to take up drawing again at my age , when I have never made any pictures except those of the boa constrictor from the outside and the boa constrictor from the inside , since I was six .
# ::tok It is hard to take up drawing again at my age , when I have never made any pictures except those of the boa constrictor from the outside and the boa constrictor from the inside , since I was six .
# ::alignments 2-3|0.0.0.0.0.1.1 13-14|0.0.0 16-17|0.0 36-37|0.0.0.0.0.1.0 10-11|0.0.0.0 39-40|0.0.0.0.0.0 18-19|0.0.1 19-20|0.0.3 28-29|0 23-24|0.0.0.0.0.1.1.0 25-26|0.1.0 34-35|0.0.2.0 24-25|0.0.0.0.0.1.1.0.0 30-31|0.2.0 32-33|0.0.2 27-28|0.1 31-32|0.2 17-18|0.0.3.0 6-7|0.0.0.0.0 7-8|0.0.0.0.0.2 4-5|0.0.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:35.350
# ::node	0	and	28-29
# ::node	0.0	make-01	16-17
# ::node	0.0.0	i	13-14
# ::node	0.0.0.0	age-01	10-11
# ::node	0.0.0.0.0	draw-01	6-7
# ::node	0.0.0.0.0.0	6	39-40
# ::node	0.0.0.0.0.1	take-up-31	4-5
# ::node	0.0.0.0.0.1.0	since	36-37
# ::node	0.0.0.0.0.1.1	hard-02	2-3
# ::node	0.0.0.0.0.1.1.0	boa	23-24
# ::node	0.0.0.0.0.1.1.0.0	constrictor	24-25
# ::node	0.0.0.0.0.2	again	7-8
# ::node	0.0.1	picture	18-19
# ::node	0.0.2	from	32-33
# ::node	0.0.2.0	inside	34-35
# ::node	0.0.3	except-01	19-20
# ::node	0.0.3.0	any	17-18
# ::node	0.1	outside	27-28
# ::node	0.1.0	from	25-26
# ::node	0.2	constrictor	31-32
# ::node	0.2.0	boa	30-31
# ::root	0	and
# ::edge	age-01	ARG1	i	0.0.0.0	0.0.0	
# ::edge	and	op1	outside	0	0.1	
# ::edge	and	op2	constrictor	0	0.2	
# ::edge	boa	mod	constrictor	0.0.0.0.0.1.1.0	0.0.0.0.0.1.1.0.0	
# ::edge	boa	mod	constrictor	0.2.0	0.2	
# ::edge	draw-01	ARG0	6	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	draw-01	ARG1	age-01	0.0.0.0.0	0.0.0.0	
# ::edge	draw-01	mod	again	0.0.0.0.0	0.0.0.0.0.2	
# ::edge	except-01	ARG1	any	0.0.3	0.0.3.0	
# ::edge	from	op1	inside	0.0.2	0.0.2.0	
# ::edge	from	op1	outside	0.1.0	0.1	
# ::edge	hard-02	ARG0	boa	0.0.0.0.0.1.1	0.0.0.0.0.1.1.0	
# ::edge	hard-02	ARG1	take-up-31	0.0.0.0.0.1.1	0.0.0.0.0.1	
# ::edge	make-01	ARG0	i	0.0	0.0.0	
# ::edge	make-01	ARG1	picture	0.0	0.0.1	
# ::edge	make-01	ARG2	and	0.0	0	
# ::edge	make-01	time	except-01	0.0	0.0.3	
# ::edge	make-01	time	from	0.0	0.0.2	
# ::edge	take-up-31	ARG0	since	0.0.0.0.0.1	0.0.0.0.0.1.0	
# ::edge	take-up-31	ARG1	draw-01	0.0.0.0.0.1	0.0.0.0.0	
(a6 / and 
      :ARG2-of (m / make-01 
            :ARG0 (i / i 
                  :ARG1-of (a3 / age-01 
                        :ARG1-of (d / draw-01 
                              :ARG0 6 
                              :ARG1-of (t / take-up-31 
                                    :ARG0 (s / since) 
                                    :ARG1-of (h / hard-02 
                                          :ARG0 (b2 / boa 
                                                :mod (c3 / constrictor)))) 
                              :mod (a / again)))) 
            :ARG1 (p / picture) 
            :time (f / from 
                  :op1 (i2 / inside)) 
            :time (e2 / except-01 
                  :ARG1 (a5 / any))) 
      :op1 (o / outside 
            :op-of (f2 / from)) 
      :op2 (c2 / constrictor 
            :mod-of (b / boa)))

# ::snt I shall certainly try to make my portraits as true to life as possible .
# ::tok I shall certainly try to make my portraits as true to life as possible .
# ::alignments 3-4|0.0.0.1.0 5-6|0.0.0.1 9-10|0.0.0 13-14|0 11-12|0.0 7-8|0.0.0.0 0-1|0.0.0.1.0.0 2-3|0.0.0.1.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:35.416
# ::node	0	possible-01	13-14
# ::node	0.0	life	11-12
# ::node	0.0.0	true-02	9-10
# ::node	0.0.0.0	portrait	7-8
# ::node	0.0.0.1	make-02	5-6
# ::node	0.0.0.1.0	try-01	3-4
# ::node	0.0.0.1.0.0	i	0-1
# ::node	0.0.0.1.0.1	certain	2-3
# ::root	0	possible-01
# ::edge	make-02	ARG1	true-02	0.0.0.1	0.0.0	
# ::edge	possible-01	ARG1	life	0	0.0	
# ::edge	true-02	ARG1	portrait	0.0.0	0.0.0.0	
# ::edge	true-02	ARG2	life	0.0.0	0.0	
# ::edge	try-01	ARG0	i	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	try-01	ARG1	make-02	0.0.0.1.0	0.0.0.1	
# ::edge	try-01	mod	certain	0.0.0.1.0	0.0.0.1.0.1	
(p2 / possible-01 
      :ARG1 (l / life 
            :ARG2-of (t2 / true-02 
                  :ARG1 (p / portrait) 
                  :ARG1-of (m / make-02 
                        :ARG1-of (t / try-01 
                              :ARG0 (i / i) 
                              :mod (c / certain))))))

# ::snt But I am not at all sure of success .
# ::tok But I am not at all sure of success .
# ::alignments 0-1|0 6-7|0.1 4-5|0.0 5-6|0.1.1 1-2|0.1.0 8-9|0.1.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:35.448
# ::node	0	contrast-01	0-1
# ::node	0.0	at	4-5
# ::node	0.1	sure-02	6-7
# ::node	0.1.0	i	1-2
# ::node	0.1.1	all	5-6
# ::node	0.1.2	succeed-01	8-9
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	at	0	0.0	
# ::edge	contrast-01	ARG2	sure-02	0	0.1	
# ::edge	sure-02	ARG0	i	0.1	0.1.0	
# ::edge	sure-02	ARG1	all	0.1	0.1.1	
# ::edge	sure-02	ARG2	succeed-01	0.1	0.1.2	
(c / contrast-01 
      :ARG1 (a / at) 
      :ARG2 (s / sure-02 
            :ARG0 (i / i) 
            :ARG1 (a2 / all) 
            :ARG2 (s2 / succeed-01)))

# ::snt One drawing goes along all right , and another has no resemblance to its subject .
# ::tok One drawing goes along all right , and another has no resemblance to its subject .
# ::alignments 10-11|0.3 7-8|0.1.1 1-2|0.1.0 8-9|0.0 14-15|0.2 2-3|0.1 3-4|0.1.2 0-1|0.1.0.0 11-12|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:35.502
# ::node	0	resemble-01	11-12
# ::node	0.0	another	8-9
# ::node	0.1	go-06	2-3
# ::node	0.1.0	draw-01	1-2
# ::node	0.1.0.0	1	0-1
# ::node	0.1.1	and	7-8
# ::node	0.1.2	along	3-4
# ::node	0.2	subject	14-15
# ::node	0.3	-	10-11
# ::root	0	resemble-01
# ::edge	and	op1	go-06	0.1.1	0.1	
# ::edge	draw-01	ARG1	1	0.1.0	0.1.0.0	
# ::edge	go-06	ARG0	draw-01	0.1	0.1.0	
# ::edge	go-06	ARG1	resemble-01	0.1	0	
# ::edge	go-06	time	along	0.1	0.1.2	
# ::edge	resemble-01	ARG1	another	0	0.0	
# ::edge	resemble-01	ARG2	subject	0	0.2	
# ::edge	resemble-01	polarity	-	0	0.3	
(r2 / resemble-01 
      :ARG1 (a4 / another) 
      :ARG1-of (g / go-06 
            :ARG0 (d2 / draw-01 
                  :ARG1 1) 
            :op-of (a / and) 
            :time (a2 / along)) 
      :ARG2 (s / subject) 
      :polarity (- / -))

# ::snt I make some errors , too , in the little prince 's height : in one place he is too tall and in another too short .
# ::tok I make some errors , too , in the little prince 's height : in one place he is too tall and in another too short .
# ::alignments 0-1|0.0.0.0 10-11|0.0.0.5.0 9-10|0.0.0.5 5-6|0.0.0.1 21-22|0 25-26|0.0.0 16-17|0.0.0.2.0 23-24|0.0.0.4 19-20|0.0.1 20-21|0.0 15-16|0.0.0.2 24-25|0.0.0.3 2-3|0.0.0.6 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:35.745
# ::node	0	and	21-22
# ::node	0.0	tall	20-21
# ::node	0.0.0	short-07	25-26
# ::node	0.0.0.0	i	0-1
# ::node	0.0.0.1	too	5-6
# ::node	0.0.0.2	one	15-16
# ::node	0.0.0.2.0	place	16-17
# ::node	0.0.0.3	too	24-25
# ::node	0.0.0.4	another	23-24
# ::node	0.0.0.5	little	9-10
# ::node	0.0.0.5.0	prince	10-11
# ::node	0.0.0.6	some	2-3
# ::node	0.0.1	too	19-20
# ::root	0	and
# ::edge	and	op1	tall	0	0.0	
# ::edge	place	quant	one	0.0.0.2.0	0.0.0.2	
# ::edge	prince	mod	little	0.0.0.5.0	0.0.0.5	
# ::edge	short-07	ARG0	i	0.0.0	0.0.0.0	
# ::edge	short-07	ARG1	too	0.0.0	0.0.0.1	
# ::edge	short-07	ARG2	tall	0.0.0	0.0	
# ::edge	short-07	concession	one	0.0.0	0.0.0.2	
# ::edge	short-07	degree	too	0.0.0	0.0.0.3	
# ::edge	short-07	mod	another	0.0.0	0.0.0.4	
# ::edge	short-07	mod	little	0.0.0	0.0.0.5	
# ::edge	some	op1	short-07	0.0.0.6	0.0.0	
# ::edge	tall	degree	too	0.0	0.0.1	
(a / and 
      :op1 (t2 / tall 
            :ARG2-of (s / short-07 
                  :ARG0 (i / i) 
                  :ARG1 (t / too) 
                  :concession (o / one 
                        :quant-of (p3 / place)) 
                  :degree (t3 / too) 
                  :mod (a2 / another) 
                  :mod (l / little 
                        :mod-of (p / prince)) 
                  :op-of (s2 / some)) 
            :degree (t4 / too)))

# ::snt And I feel some doubts about the color of his costume .
# ::tok And I feel some doubts about the color of his costume .
# ::alignments 0-1|0.3 2-3|0 4-5|0.1 3-4|0.1.0 7-8|0.2 10-11|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:35.792
# ::node	0	feel-01	2-3
# ::node	0.0	i	1-2
# ::node	0.0.0	costume	10-11
# ::node	0.1	doubt-01	4-5
# ::node	0.1.0	some	3-4
# ::node	0.2	color	7-8
# ::node	0.3	and	0-1
# ::root	0	feel-01
# ::edge	and	op1	feel-01	0.3	0	
# ::edge	costume	poss	i	0.0.0	0.0	
# ::edge	doubt-01	mod	some	0.1	0.1.0	
# ::edge	feel-01	ARG0	i	0	0.0	
# ::edge	feel-01	ARG1	doubt-01	0	0.1	
# ::edge	feel-01	ARG2	color	0	0.2	
(f / feel-01 
      :ARG0 (i / i 
            :poss-of (c2 / costume)) 
      :ARG1 (d / doubt-01 
            :mod (s / some)) 
      :ARG2 (c / color) 
      :op-of (a / and))

# ::snt So I fumble along as best I can , now good , now bad , and I hope generally fair - to - middling .
# ::tok So I fumble along as best I can , now good , now bad , and I hope generally fair - to - middling .
# ::alignments 2-3|0 5-6|0.0.1+0.0.1.1 7-8|0.0.1.0 19-20|0.0.0.1 23-24|0.0.0.0 17-18|0.0.0 13-14|0.1.0 9-10|0.1.1 10-11|0.1 12-13|0.1.0.0 3-4|0.2 1-2|0.0 18-19|0.0.0.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.051
# ::node	0	fumble-01	2-3
# ::node	0.0	i	1-2
# ::node	0.0.0	hope-01	17-18
# ::node	0.0.0.0	middling	23-24
# ::node	0.0.0.1	fair-04	19-20
# ::node	0.0.0.1.0	general-02	18-19
# ::node	0.0.1	good-03	5-6
# ::node	0.0.1.0	possible-01	7-8
# ::node	0.0.1.1	most	5-6
# ::node	0.1	good-03	10-11
# ::node	0.1.0	bad-02	13-14
# ::node	0.1.0.0	now	12-13
# ::node	0.1.1	now	9-10
# ::node	0.2	along	3-4
# ::root	0	fumble-01
# ::edge	bad-02	ARG1	good-03	0.1.0	0.1	
# ::edge	bad-02	time	now	0.1.0	0.1.0.0	
# ::edge	fair-04	ARG1	hope-01	0.0.0.1	0.0.0	
# ::edge	fumble-01	ARG0	i	0	0.0	
# ::edge	fumble-01	ARG1	good-03	0	0.1	
# ::edge	fumble-01	direction	along	0	0.2	
# ::edge	general-02	ARG1	fair-04	0.0.0.1.0	0.0.0.1	
# ::edge	good-03	ARG1	i	0.0.1	0.0	
# ::edge	good-03	compared-to	possible-01	0.0.1	0.0.1.0	
# ::edge	good-03	degree	most	0.0.1	0.0.1.1	
# ::edge	good-03	time	now	0.1	0.1.1	
# ::edge	hope-01	ARG0	i	0.0.0	0.0	
# ::edge	hope-01	ARG1	middling	0.0.0	0.0.0.0	
(f / fumble-01 
      :ARG0 (i / i 
            :ARG0-of (h / hope-01 
                  :ARG1 (m2 / middling) 
                  :ARG1-of (f2 / fair-04 
                        :ARG1-of (g3 / general-02))) 
            :ARG1-of (g / good-03 
                  :compared-to (p / possible-01) 
                  :degree (m / most))) 
      :ARG1 (g2 / good-03 
            :ARG1-of (b / bad-02 
                  :time (n / now)) 
            :time (n2 / now)) 
      :direction (a / along))

# ::snt In certain more important details I shall make mistakes , also .
# ::tok In certain more important details I shall make mistakes , also .
# ::alignments 8-9|0.0 10-11|0.0.1 4-5|0.1 1-2|0 3-4|0.1.0 2-3|0.1.0.0 5-6|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.111
# ::node	0	certain	1-2
# ::node	0.0	mistake-02	8-9
# ::node	0.0.0	i	5-6
# ::node	0.0.1	also	10-11
# ::node	0.1	detail	4-5
# ::node	0.1.0	important	3-4
# ::node	0.1.0.0	more	2-3
# ::root	0	certain
(c / certain 
      :ARG1-of (m2 / mistake-02 
            :ARG0 (i / i) 
            :mod (a / also)) 
      :mod-of (d / detail 
            :mod (i2 / important 
                  :degree (m3 / more))))

# ::snt But that is something that will not be my fault .
# ::tok But that is something that will not be my fault .
# ::alignments 0-1|0 9-10|0.2 3-4|0.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.128
# ::node	0	contrast-01	0-1
# ::node	0.0	something	3-4
# ::node	0.1	that	1-2
# ::node	0.2	fault-01	9-10
# ::root	0	contrast-01
# ::edge	contrast-01	ARG0	something	0	0.0	
# ::edge	contrast-01	ARG1	that	0	0.1	
# ::edge	fault-01	ARG1	contrast-01	0.2	0	
(c / contrast-01 
      :ARG0 (s2 / something) 
      :ARG1 (t2 / that) 
      :ARG1-of (f2 / fault-01))

# ::snt My friend never explained anything to me .
# ::tok My friend never explained anything to me .
# ::alignments 3-4|0 4-5|0.1 1-2|0.0+0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.147
# ::node	0	explain-01	3-4
# ::node	0.0	have-rel-role-91	1-2
# ::node	0.0.0	friend	1-2
# ::node	0.1	anything	4-5
# ::root	0	explain-01
# ::edge	explain-01	ARG0	have-rel-role-91	0	0.0	
# ::edge	explain-01	ARG1	anything	0	0.1	
# ::edge	have-rel-role-91	ARG2	friend	0.0	0.0.0	
(e / explain-01 
      :ARG0 (h / have-rel-role-91 
            :ARG2 (f / friend)) 
      :ARG1 (a / anything))

# ::snt He thought , perhaps , that I was like himself .
# ::tok He thought , perhaps , that I was like himself .
# ::alignments 1-2|0 3-4|0.2 6-7|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.191
# ::node	0	think-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	i	6-7
# ::node	0.2	perhaps	3-4
# ::root	0	think-01
# ::edge	think-01	ARG0	he	0	0.0	
# ::edge	think-01	ARG2	i	0	0.1	
# ::edge	think-01	mod	perhaps	0	0.2	
(t / think-01 
      :ARG0 (h / he) 
      :ARG2 (i / i) 
      :mod (p / perhaps))

# ::snt But I , alas , do not know how to see sheep through the walls of boxes .
# ::tok But I , alas , do not know how to see sheep through the walls of boxes .
# ::alignments 0-1|0 3-4|0.1 7-8|0.2 10-11|0.2.1+0.2.1.0 12-13|0.2.2.0 14-15|0.2.2.0.0 16-17|0.0 11-12|0.2.2 1-2|0.2.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.318
# ::node	0	contrast-01	0-1
# ::node	0.0	box	16-17
# ::node	0.1	alas	3-4
# ::node	0.2	know-01	7-8
# ::node	0.2.0	i	1-2
# ::node	0.2.1	thing	10-11
# ::node	0.2.1.0	see-01	10-11
# ::node	0.2.2	sheep	11-12
# ::node	0.2.2.0	through	12-13
# ::node	0.2.2.0.0	wall	14-15
# ::root	0	contrast-01
# ::edge	contrast-01	ARG0	box	0	0.0	
# ::edge	contrast-01	ARG1	alas	0	0.1	
# ::edge	contrast-01	ARG2	know-01	0	0.2	
# ::edge	know-01	ARG0	i	0.2	0.2.0	
# ::edge	know-01	ARG1	thing	0.2	0.2.1	
# ::edge	know-01	manner	sheep	0.2	0.2.2	
# ::edge	see-01	manner	thing	0.2.1.0	0.2.1	
# ::edge	sheep	direction	through	0.2.2	0.2.2.0	
# ::edge	through	op1	wall	0.2.2.0	0.2.2.0.0	
(c / contrast-01 
      :ARG0 (b2 / box) 
      :ARG1 (a / alas) 
      :ARG2 (k / know-01 
            :ARG0 (i / i) 
            :ARG1 (t2 / thing 
                  :manner-of (s / see-01)) 
            :manner (s2 / sheep 
                  :direction (t / through 
                        :op1 (w / wall)))))

# ::snt Perhaps I am a little like the grown - ups .
# ::tok Perhaps I am a little like the grown - ups .
# ::alignments 1-2|0.0.0.0 0-1|0.0 4-5|0.0.0 7-8|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.329
# ::node	0	grown-up	7-8
# ::node	0.0	perhaps	0-1
# ::node	0.0.0	little	4-5
# ::node	0.0.0.0	i	1-2
# ::root	0	grown-up
# ::edge	grown-up	poss	perhaps	0	0.0	
# ::edge	i	op1	little	0.0.0.0	0.0.0	
# ::edge	little	poss	perhaps	0.0.0	0.0	
(g / grown-up 
      :poss (p / perhaps 
            :poss-of (l / little 
                  :op-of (i / i))))

# ::snt I have had to grow old .
# ::tok I have had to grow old .
# ::alignments 0-1|0.0.0 4-5|0.0 5-6|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.336
# ::node	0	old	5-6
# ::node	0.0	grow-02	4-5
# ::node	0.0.0	i	0-1
# ::root	0	old
(o2 / old 
      :ARG2-of (g / grow-02 
            :ARG0 (i / i)))

# ::snt Chapter 5 .
# ::tok Chapter 5 .
# ::alignments 0-1|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.340
# ::node	0	chapter	0-1
# ::node	0.0	5	1-2
# ::root	0	chapter
# ::edge	chapter	mod	5	0	0.0	
(c / chapter 
      :mod 5)

# ::snt As each day passed I would learn , in our talk , something about the little prince 's planet , his departure from it , his journey .
# ::tok As each day passed I would learn , in our talk , something about the little prince 's planet , his departure from it , his journey .
# ::alignments 6-7|0.1 10-11|0.2.1 3-4|0 2-3|0.0 1-2|0.0.0 12-13|0.2.0 18-19|0.2.0.0 16-17|0.1.1.0 15-16|0.1.1.0.0 26-27|0.1.1 4-5|0.1.0 21-22|0.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.520
# ::node	0	pass-03	3-4
# ::node	0.0	day	2-3
# ::node	0.0.0	each	1-2
# ::node	0.1	learn-01	6-7
# ::node	0.1.0	i	4-5
# ::node	0.1.1	journey-01	26-27
# ::node	0.1.1.0	prince	16-17
# ::node	0.1.1.0.0	little	15-16
# ::node	0.2	depart-01	21-22
# ::node	0.2.0	something	12-13
# ::node	0.2.0.0	planet	18-19
# ::node	0.2.1	talk-01	10-11
# ::root	0	pass-03
# ::edge	day	mod	each	0.0	0.0.0	
# ::edge	depart-01	ARG0	something	0.2	0.2.0	
# ::edge	depart-01	ARG1	pass-03	0.2	0	
# ::edge	journey-01	ARG0	prince	0.1.1	0.1.1.0	
# ::edge	learn-01	ARG0	i	0.1	0.1.0	
# ::edge	learn-01	ARG1	journey-01	0.1	0.1.1	
# ::edge	pass-03	ARG0	day	0	0.0	
# ::edge	pass-03	ARG1	learn-01	0	0.1	
# ::edge	planet	domain	something	0.2.0.0	0.2.0	
# ::edge	prince	mod	little	0.1.1.0	0.1.1.0.0	
# ::edge	talk-01	ARG1	depart-01	0.2.1	0.2	
(p / pass-03 
      :ARG0 (d / day 
            :mod (e / each)) 
      :ARG1 (l / learn-01 
            :ARG0 (i / i) 
            :ARG1 (j / journey-01 
                  :ARG0 (p3 / prince 
                        :mod (l2 / little)))) 
      :ARG1-of (d2 / depart-01 
            :ARG0 (s / something 
                  :domain-of (p2 / planet)) 
            :ARG1-of (t / talk-01)))

# ::snt The information would come very slowly , as it might chance to fall from his thoughts .
# ::tok The information would come very slowly , as it might chance to fall from his thoughts .
# ::alignments 3-4|0.0.0.0 12-13|0.0 10-11|0 4-5|0.0.0.1 1-2|0.0.0.0.0 5-6|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.552
# ::node	0	chance-01	10-11
# ::node	0.0	fall-01	12-13
# ::node	0.0.0	slow-05	5-6
# ::node	0.0.0.0	come-01	3-4
# ::node	0.0.0.0.0	information	1-2
# ::node	0.0.0.1	very	4-5
# ::root	0	chance-01
# ::edge	chance-01	ARG1	fall-01	0	0.0	
# ::edge	come-01	ARG1	information	0.0.0.0	0.0.0.0.0	
# ::edge	fall-01	ARG1	slow-05	0.0	0.0.0	
# ::edge	slow-05	ARG1	come-01	0.0.0	0.0.0.0	
# ::edge	slow-05	degree	very	0.0.0	0.0.0.1	
(c2 / chance-01 
      :ARG1 (f / fall-01 
            :ARG1 (s / slow-05 
                  :ARG1 (c / come-01 
                        :ARG1 (i / information)) 
                  :degree (v / very))))

# ::snt It was in this way that I heard , on the third day , about the catastrophe of the baobabs .
# ::tok It was in this way that I heard , on the third day , about the catastrophe of the baobabs .
# ::alignments 7-8|0.0 12-13|0.0.2 3-4|0.0.1 16-17|0 19-20|0.1 6-7|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.627
# ::node	0	catastrophe	16-17
# ::node	0.0	hear-01	7-8
# ::node	0.0.0	i	6-7
# ::node	0.0.1	this	3-4
# ::node	0.0.2	day	12-13
# ::node	0.1	baobab	19-20
# ::root	0	catastrophe
# ::edge	catastrophe	poss	baobab	0	0.1	
# ::edge	hear-01	ARG0	i	0.0	0.0.0	
# ::edge	hear-01	ARG1	this	0.0	0.0.1	
# ::edge	hear-01	ARG2	day	0.0	0.0.2	
# ::edge	hear-01	location	catastrophe	0.0	0	
(c / catastrophe 
      :location-of (h / hear-01 
            :ARG0 (i / i) 
            :ARG1 (t / this) 
            :ARG2 (d / day)) 
      :poss (b / baobab))

# ::snt This time , once more , I had the sheep to thank for it .
# ::tok This time , once more , I had the sheep to thank for it .
# ::alignments 11-12|0.0 13-14|0.0.2 9-10|0.0.1 6-7|0.0.0 1-2|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.727
# ::node	0	time	1-2
# ::node	0.0	thank-01	11-12
# ::node	0.0.0	i	6-7
# ::node	0.0.1	sheep	9-10
# ::node	0.0.2	it	13-14
# ::node	0.1	this	0-1
# ::root	0	time
# ::edge	thank-01	ARG0	i	0.0	0.0.0	
# ::edge	thank-01	ARG1	sheep	0.0	0.0.1	
# ::edge	thank-01	ARG2	it	0.0	0.0.2	
# ::edge	thank-01	concession	time	0.0	0	
# ::edge	time	mod	this	0	0.1	
(t2 / time 
      :concession-of (t / thank-01 
            :ARG0 (i / i) 
            :ARG1 (s / sheep) 
            :ARG2 (i2 / it)) 
      :mod (t3 / this))

# ::snt For the little prince asked me abruptly -- as if seized by a grave doubt -- " It is true , is n't it , that sheep eat little bushes ? "
# ::tok For the little prince asked me abruptly -- as if seized by a grave doubt -- " It is true , is n't it , that sheep eat little bushes ? "
# ::alignments 4-5|0 10-11|0.2.0 14-15|0.2.0.0 13-14|0.2.0.0.0 19-20|0.1 27-28|0.1.0 29-30|0.1.0.1 2-3|0.0.0 26-27|0.1.0.0 3-4|0.0 28-29|0.1.0.1.0 6-7|0.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.819
# ::node	0	ask-01	4-5
# ::node	0.0	prince	3-4
# ::node	0.0.0	little	2-3
# ::node	0.1	true-01	19-20
# ::node	0.1.0	eat-01	27-28
# ::node	0.1.0.0	sheep	26-27
# ::node	0.1.0.1	bush	29-30
# ::node	0.1.0.1.0	little	28-29
# ::node	0.2	abrupt	6-7
# ::node	0.2.0	seize-01	10-11
# ::node	0.2.0.0	doubt-01	14-15
# ::node	0.2.0.0.0	grave	13-14
# ::root	0	ask-01
# ::edge	ask-01	ARG0	prince	0	0.0	
# ::edge	ask-01	ARG1	true-01	0	0.1	
# ::edge	ask-01	extent	abrupt	0	0.2	
# ::edge	bush	mod	little	0.1.0.1	0.1.0.1.0	
# ::edge	doubt-01	mod	grave	0.2.0.0	0.2.0.0.0	
# ::edge	eat-01	ARG0	sheep	0.1.0	0.1.0.0	
# ::edge	eat-01	ARG1	bush	0.1.0	0.1.0.1	
# ::edge	prince	mod	little	0.0	0.0.0	
# ::edge	seize-01	ARG1	abrupt	0.2.0	0.2	
# ::edge	seize-01	ARG2	doubt-01	0.2.0	0.2.0.0	
# ::edge	true-01	ARG1	eat-01	0.1	0.1.0	
(a / ask-01 
      :ARG0 (p / prince 
            :mod (l / little)) 
      :ARG1 (t / true-01 
            :ARG1 (e / eat-01 
                  :ARG0 (s / sheep) 
                  :ARG1 (b / bush 
                        :mod (l2 / little)))) 
      :extent (a2 / abrupt 
            :ARG1-of (s2 / seize-01 
                  :ARG2 (d / doubt-01 
                        :mod (g / grave)))))

# ::snt " Yes , that is true . "
# ::tok " Yes , that is true . "
# ::alignments 5-6|0 3-4|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.828
# ::node	0	true-01	5-6
# ::node	0.0	that	3-4
# ::root	0	true-01
# ::edge	true-01	ARG1	that	0	0.0	
(t / true-01 
      :ARG1 (t2 / that))

# ::snt " Ah !
# ::tok " Ah !
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.831
# ::node	0	ah	1-2
# ::root	0	ah
(a / ah)

# ::snt I am glad ! "
# ::tok I am glad ! "
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.836
# ::node	0	glad-02	2-3
# ::node	0.0	i	0-1
# ::root	0	glad-02
# ::edge	glad-02	ARG1	i	0	0.0	
(g / glad-02 
      :ARG1 (i / i))

# ::snt I did not understand why it was so important that sheep should eat little bushes .
# ::tok I did not understand why it was so important that sheep should eat little bushes .
# ::alignments 3-4|0.0.0.0 8-9|0.0 11-12|0 12-13|0.1 14-15|0.1.1 13-14|0.1.1.0 10-11|0.1.0 7-8|0.0.0 0-1|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.913
# ::node	0	recommend-01	11-12
# ::node	0.0	important	8-9
# ::node	0.0.0	so	7-8
# ::node	0.0.0.0	understand-01	3-4
# ::node	0.0.0.0.0	i	0-1
# ::node	0.1	eat-01	12-13
# ::node	0.1.0	sheep	10-11
# ::node	0.1.1	bush	14-15
# ::node	0.1.1.0	little	13-14
# ::root	0	recommend-01
# ::edge	bush	mod	little	0.1.1	0.1.1.0	
# ::edge	eat-01	ARG0	sheep	0.1	0.1.0	
# ::edge	eat-01	ARG1	bush	0.1	0.1.1	
# ::edge	important	degree	so	0.0	0.0.0	
# ::edge	recommend-01	ARG0	important	0	0.0	
# ::edge	recommend-01	ARG1	eat-01	0	0.1	
# ::edge	understand-01	ARG0	i	0.0.0.0	0.0.0.0.0	
# ::edge	understand-01	ARG1	so	0.0.0.0	0.0.0	
(r / recommend-01 
      :ARG0 (i2 / important 
            :degree (s2 / so 
                  :ARG1-of (u / understand-01 
                        :ARG0 (i / i)))) 
      :ARG1 (e / eat-01 
            :ARG0 (s / sheep) 
            :ARG1 (b / bush 
                  :mod (l / little))))

# ::snt But the little prince added : " Then it follows that they also eat baobabs ? "
# ::tok But the little prince added : " Then it follows that they also eat baobabs ? "
# ::alignments 0-1|0 4-5|0.0 9-10|0.0.1 13-14|0.0.1.0 12-13|0.0.1.0.2 14-15|0.0.1.0.1 11-12|0.0.1.0.0 3-4|0.0.0 2-3|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:36.960
# ::node	0	contrast-01	0-1
# ::node	0.0	add-01	4-5
# ::node	0.0.0	prince	3-4
# ::node	0.0.0.0	little	2-3
# ::node	0.0.1	follow-05	9-10
# ::node	0.0.1.0	eat-01	13-14
# ::node	0.0.1.0.0	they	11-12
# ::node	0.0.1.0.1	baobab	14-15
# ::node	0.0.1.0.2	also	12-13
# ::root	0	contrast-01
# ::edge	add-01	ARG0	prince	0.0	0.0.0	
# ::edge	add-01	ARG1	follow-05	0.0	0.0.1	
# ::edge	contrast-01	ARG2	add-01	0	0.0	
# ::edge	eat-01	ARG0	they	0.0.1.0	0.0.1.0.0	
# ::edge	eat-01	ARG1	baobab	0.0.1.0	0.0.1.0.1	
# ::edge	eat-01	mod	also	0.0.1.0	0.0.1.0.2	
# ::edge	follow-05	ARG1	eat-01	0.0.1	0.0.1.0	
# ::edge	prince	mod	little	0.0.0	0.0.0.0	
(c / contrast-01 
      :ARG2 (a / add-01 
            :ARG0 (p / prince 
                  :mod (l / little)) 
            :ARG1 (f / follow-05 
                  :ARG1 (e / eat-01 
                        :ARG0 (t / they) 
                        :ARG1 (b / baobab) 
                        :mod (a2 / also)))))

# ::snt I pointed out to the little prince that baobabs were not little bushes , but , on the contrary , trees as big as castles ; and that even if he took a whole herd of elephants away with him , the herd would not eat up one single baobab .
# ::tok I pointed out to the little prince that baobabs were not little bushes , but , on the contrary , trees as big as castles ; and that even if he took a whole herd of elephants away with him , the herd would not eat up one single baobab .
# ::alignments 0-1|0.0.0.0.2.0 25-26|0 8-9|0.0.0.0.2.1.1 48-49|0.0 47-48|0.0.0.1 31-32|0.0.0.0 37-38|0.0.0.0.3 34-35|0.0.0.0.1 33-34|0.0.0.0.1.0 36-37|0.0.0.0.0 20-21|0.0.1 12-13|0.0.0.0.2.1 5-6|0.0.0.0.2.2.0 49-50|0.0.0 22-23|0.0.0.0.2.3 24-25|0.1 6-7|0.0.0.0.2.2 11-12|0.0.0.0.2.1.0 1-2|0.0.0.0.2 28-29|0.0.0.0.4 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:37.796
# ::node	0	and	25-26
# ::node	0.0	single-02	48-49
# ::node	0.0.0	baobab	49-50
# ::node	0.0.0.0	take-01	31-32
# ::node	0.0.0.0.0	elephant	36-37
# ::node	0.0.0.0.1	herd	34-35
# ::node	0.0.0.0.1.0	whole	33-34
# ::node	0.0.0.0.2	point-out-02	1-2
# ::node	0.0.0.0.2.0	i	0-1
# ::node	0.0.0.0.2.1	bush	12-13
# ::node	0.0.0.0.2.1.0	little	11-12
# ::node	0.0.0.0.2.1.1	baobab	8-9
# ::node	0.0.0.0.2.2	prince	6-7
# ::node	0.0.0.0.2.2.0	little	5-6
# ::node	0.0.0.0.2.3	big	22-23
# ::node	0.0.0.0.3	away	37-38
# ::node	0.0.0.0.4	even-if	28-29
# ::node	0.0.0.1	1	47-48
# ::node	0.0.1	tree	20-21
# ::node	0.1	castle	24-25
# ::root	0	and
# ::edge	and	op1	castle	0	0.1	
# ::edge	away	op1	take-01	0.0.0.0.3	0.0.0.0	
# ::edge	baobab	quant	1	0.0.0	0.0.0.1	
# ::edge	big	op1	point-out-02	0.0.0.0.2.3	0.0.0.0.2	
# ::edge	bush	degree	little	0.0.0.0.2.1	0.0.0.0.2.1.0	
# ::edge	bush	domain	baobab	0.0.0.0.2.1	0.0.0.0.2.1.1	
# ::edge	herd	mod	whole	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	point-out-02	ARG0	i	0.0.0.0.2	0.0.0.0.2.0	
# ::edge	point-out-02	ARG1	bush	0.0.0.0.2	0.0.0.0.2.1	
# ::edge	point-out-02	ARG2	prince	0.0.0.0.2	0.0.0.0.2.2	
# ::edge	prince	mod	little	0.0.0.0.2.2	0.0.0.0.2.2.0	
# ::edge	single-02	ARG0	and	0.0	0	
# ::edge	single-02	ARG1	baobab	0.0	0.0.0	
# ::edge	take-01	ARG0	baobab	0.0.0.0	0.0.0	
# ::edge	take-01	ARG1	elephant	0.0.0.0	0.0.0.0.0	
# ::edge	take-01	ARG2	herd	0.0.0.0	0.0.0.0.1	
# ::edge	take-01	condition	point-out-02	0.0.0.0	0.0.0.0.2	
# ::edge	take-01	time	even-if	0.0.0.0	0.0.0.0.4	
# ::edge	tree	op1	single-02	0.0.1	0.0	
(a / and 
      :ARG0-of (s / single-02 
            :ARG1 (b2 / baobab 
                  :ARG0-of (t / take-01 
                        :ARG1 (e2 / elephant) 
                        :ARG2 (h / herd 
                              :mod (w / whole)) 
                        :condition (p2 / point-out-02 
                              :ARG0 (i / i) 
                              :ARG1 (b3 / bush 
                                    :degree (l2 / little) 
                                    :domain (b / baobab)) 
                              :ARG2 (p / prince 
                                    :mod (l3 / little)) 
                              :op-of (b5 / big)) 
                        :op-of (a2 / away) 
                        :time (e3 / even-if)) 
                  :quant 1) 
            :op-of (t2 / tree)) 
      :op1 (c / castle))

# ::snt The idea of the herd of elephants made the little prince laugh .
# ::tok The idea of the herd of elephants made the little prince laugh .
# ::alignments 7-8|0 11-12|0.1 10-11|0.0 9-10|0.1.1 1-2|0.1.0 4-5|0.1.0.0 6-7|0.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:38.073
# ::node	0	make-02	7-8
# ::node	0.0	prince	10-11
# ::node	0.1	laugh-01	11-12
# ::node	0.1.0	idea	1-2
# ::node	0.1.0.0	herd	4-5
# ::node	0.1.1	little	9-10
# ::node	0.2	elephant	6-7
# ::root	0	make-02
# ::edge	idea	topic	herd	0.1.0	0.1.0.0	
# ::edge	laugh-01	ARG0	idea	0.1	0.1.0	
# ::edge	laugh-01	mod	little	0.1	0.1.1	
# ::edge	make-02	ARG0	prince	0	0.0	
# ::edge	make-02	ARG1	laugh-01	0	0.1	
# ::edge	make-02	ARG2	elephant	0	0.2	
(m / make-02 
      :ARG0 (p / prince) 
      :ARG1 (l / laugh-01 
            :ARG0 (i / idea 
                  :topic (h / herd)) 
            :mod (l2 / little)) 
      :ARG2 (e / elephant))

# ::snt " We would have to put them one on top of the other , " he said .
# ::tok " We would have to put them one on top of the other , " he said .
# ::alignments 16-17|0 1-2|0.0 15-16|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:38.101
# ::node	0	say-01	16-17
# ::node	0.0	we	1-2
# ::node	0.1	he	15-16
# ::root	0	say-01
# ::edge	say-01	ARG0	we	0	0.0	
# ::edge	say-01	ARG2	he	0	0.1	
(s / say-01 
      :ARG0 (w / we) 
      :ARG2 (h / he))

# ::snt But he made a wise comment : " Before they grow so big , the baobabs start out by being little . "
# ::tok But he made a wise comment : " Before they grow so big , the baobabs start out by being little . "
# ::alignments 0-1|0 5-6|0.1 4-5|0.1.1 15-16|0.1.0.0.0 20-21|0.0 8-9|0.1.0.0.1.1 10-11|0.1.0.0.1 12-13|0.1.0.0.1.0.0 11-12|0.1.0.0.1.0 1-2|0.1.0 16-17|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:38.419
# ::node	0	contrast-01	0-1
# ::node	0.0	little	20-21
# ::node	0.1	comment-01	5-6
# ::node	0.1.0	he	1-2
# ::node	0.1.0.0	start-out-05	16-17
# ::node	0.1.0.0.0	baobab	15-16
# ::node	0.1.0.0.1	grow-02	10-11
# ::node	0.1.0.0.1.0	so	11-12
# ::node	0.1.0.0.1.0.0	big	12-13
# ::node	0.1.0.0.1.1	before	8-9
# ::node	0.1.1	wise	4-5
# ::root	0	contrast-01
# ::edge	before	op1	grow-02	0.1.0.0.1.1	0.1.0.0.1	
# ::edge	big	degree	so	0.1.0.0.1.0.0	0.1.0.0.1.0	
# ::edge	comment-01	ARG0	he	0.1	0.1.0	
# ::edge	comment-01	mod	wise	0.1	0.1.1	
# ::edge	contrast-01	ARG1	little	0	0.0	
# ::edge	contrast-01	ARG2	comment-01	0	0.1	
# ::edge	grow-02	ARG1	so	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	start-out-05	ARG0	he	0.1.0.0	0.1.0	
# ::edge	start-out-05	ARG1	baobab	0.1.0.0	0.1.0.0.0	
# ::edge	start-out-05	time	grow-02	0.1.0.0	0.1.0.0.1	
(c2 / contrast-01 
      :ARG1 (l / little) 
      :ARG2 (c / comment-01 
            :ARG0 (h / he 
                  :ARG0-of (s / start-out-05 
                        :ARG1 (b2 / baobab) 
                        :time (g / grow-02 
                              :ARG1 (s2 / so 
                                    :degree-of (b5 / big)) 
                              :op-of (b4 / before)))) 
            :mod (w / wise)))

# ::snt " That is strictly correct , "
# ::tok " That is strictly correct , "
# ::alignments 4-5|0.0 1-2|0.0.0 3-4|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:38.440
# ::node	0	strict	3-4
# ::node	0.0	correct-02	4-5
# ::node	0.0.0	that	1-2
# ::root	0	strict
(s / strict 
      :degree-of (c / correct-02 
            :ARG0 (t / that)))

# ::snt I said .
# ::tok I said .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:38.448
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
(s / say-01 
      :ARG0 (i / i))

# ::snt " But why do you want the sheep to eat the little baobabs ? "
# ::tok " But why do you want the sheep to eat the little baobabs ? "
# ::alignments 1-2|0 5-6|0.0 9-10|0.0.1.0 12-13|0.0.1.0.0 11-12|0.0.1.0.0.0 7-8|0.0.1 4-5|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:38.481
# ::node	0	contrast-01	1-2
# ::node	0.0	want-01	5-6
# ::node	0.0.0	you	4-5
# ::node	0.0.1	sheep	7-8
# ::node	0.0.1.0	eat-01	9-10
# ::node	0.0.1.0.0	baobab	12-13
# ::node	0.0.1.0.0.0	little	11-12
# ::root	0	contrast-01
# ::edge	baobab	mod	little	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	contrast-01	ARG2	want-01	0	0.0	
# ::edge	eat-01	ARG0	sheep	0.0.1.0	0.0.1	
# ::edge	eat-01	ARG1	baobab	0.0.1.0	0.0.1.0.0	
# ::edge	want-01	ARG0	you	0.0	0.0.0	
# ::edge	want-01	ARG1	sheep	0.0	0.0.1	
(c / contrast-01 
      :ARG2 (w / want-01 
            :ARG0 (y / you) 
            :ARG1 (s / sheep 
                  :ARG0-of (e / eat-01 
                        :ARG1 (b / baobab 
                              :mod (l / little))))))

# ::snt He answered me at once , " Oh , come , come ! " , as if he were speaking of something that was self - evident .
# ::tok He answered me at once , " Oh , come , come ! " , as if he were speaking of something that was self - evident .
# ::alignments 1-2|0 19-20|0.0.1 21-22|0.0.0.0 0-1|0.0 26-27|0.0.0 9-10|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:38.620
# ::node	0	answer-01	1-2
# ::node	0.0	he	0-1
# ::node	0.0.0	evidence-01	26-27
# ::node	0.0.0.0	something	21-22
# ::node	0.0.1	speak-01	19-20
# ::node	0.1	come-on-25	9-10
# ::root	0	answer-01
# ::edge	answer-01	ARG0	he	0	0.0	
# ::edge	answer-01	ARG1	come-on-25	0	0.1	
# ::edge	evidence-01	ARG0	he	0.0.0	0.0	
# ::edge	evidence-01	ARG1	something	0.0.0	0.0.0.0	
# ::edge	speak-01	ARG0	he	0.0.1	0.0	
(a / answer-01 
      :ARG0 (h / he 
            :ARG0-of (e / evidence-01 
                  :ARG1 (s2 / something)) 
            :ARG0-of (s / speak-01)) 
      :ARG1 (c / come-on-25))

# ::snt And I was obliged to make a great mental effort to solve this problem , without any assistance .
# ::tok And I was obliged to make a great mental effort to solve this problem , without any assistance .
# ::alignments 0-1|0 3-4|0.0 9-10|0.0.0 7-8|0.0.0.1 8-9|0.0.0.2 11-12|0.0.0.0 13-14|0.0.0.0.0 12-13|0.0.0.0.0.0 1-2|0.0.1 17-18|0.0.0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:38.781
# ::node	0	and	0-1
# ::node	0.0	oblige-02	3-4
# ::node	0.0.0	effort-01	9-10
# ::node	0.0.0.0	solve-01	11-12
# ::node	0.0.0.0.0	problem	13-14
# ::node	0.0.0.0.0.0	this	12-13
# ::node	0.0.0.0.1	assist-01	17-18
# ::node	0.0.0.1	great	7-8
# ::node	0.0.0.2	mental	8-9
# ::node	0.0.1	i	1-2
# ::root	0	and
# ::edge	and	op1	oblige-02	0	0.0	
# ::edge	effort-01	ARG0	oblige-02	0.0.0	0.0	
# ::edge	effort-01	ARG1	solve-01	0.0.0	0.0.0.0	
# ::edge	effort-01	mod	great	0.0.0	0.0.0.1	
# ::edge	effort-01	mod	mental	0.0.0	0.0.0.2	
# ::edge	oblige-02	ARG1	i	0.0	0.0.1	
# ::edge	problem	mod	this	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	solve-01	ARG1	problem	0.0.0.0	0.0.0.0.0	
# ::edge	solve-01	manner	assist-01	0.0.0.0	0.0.0.0.1	
(a / and 
      :op1 (o / oblige-02 
            :ARG0-of (e / effort-01 
                  :ARG1 (s / solve-01 
                        :ARG1 (p / problem 
                              :mod (t / this)) 
                        :manner (a2 / assist-01)) 
                  :mod (g / great) 
                  :mod (m2 / mental)) 
            :ARG1 (i / i)))

# ::snt Indeed , as I learned , there were on the planet where the little prince lived -- as on all planets -- good plants and bad plants .
# ::tok Indeed , as I learned , there were on the planet where the little prince lived -- as on all planets -- good plants and bad plants .
# ::alignments 24-25|0.1 0-1|0.1.0.1.0.0 23-24|0.1.0.0.0 25-26|0.0 26-27|0 22-23|0.1.0.0.0.0 10-11|0.1.0 15-16|0.1.0.0 14-15|0.1.0.0.1 13-14|0.1.0.0.1.0 20-21|0.1.0.0.0.0.0 19-20|0.1.0.0.0.0.0.0 4-5|0.1.0.1.0 3-4|0.1.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:39.421
# ::node	0	plant	26-27
# ::node	0.0	bad-07	25-26
# ::node	0.1	and	24-25
# ::node	0.1.0	planet	10-11
# ::node	0.1.0.0	live-01	15-16
# ::node	0.1.0.0.0	plant	23-24
# ::node	0.1.0.0.0.0	good-02	22-23
# ::node	0.1.0.0.0.0.0	planet	20-21
# ::node	0.1.0.0.0.0.0.0	all	19-20
# ::node	0.1.0.0.1	prince	14-15
# ::node	0.1.0.0.1.0	little	13-14
# ::node	0.1.0.1	i	3-4
# ::node	0.1.0.1.0	learn-01	4-5
# ::node	0.1.0.1.0.0	indeed	0-1
# ::root	0	plant
(p / plant 
      :ARG1-of (b / bad-07) 
      :op-of (a3 / and 
            :op1 (p3 / planet 
                  :ARG0-of (l / live-01 
                        :ARG1 (p2 / plant 
                              :ARG1-of (g / good-02 
                                    :ARG2 (p5 / planet 
                                          :mod (a2 / all)))) 
                        :ARG2 (p4 / prince 
                              :mod (l2 / little))) 
                  :poss (i2 / i 
                        :ARG0-of (l3 / learn-01 
                              :ARG1 (i / indeed))))))

# ::snt In consequence , there were good seeds from good plants , and bad seeds from bad plants .
# ::tok In consequence , there were good seeds from good plants , and bad seeds from bad plants .
# ::alignments 11-12|0 6-7|0.0 9-10|0.0.0.0.0 12-13|0.1.0 15-16|0.1.0.0 13-14|0.1 16-17|0.1.0.0.0 5-6|0.0.0 8-9|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:39.480
# ::node	0	and	11-12
# ::node	0.0	seed	6-7
# ::node	0.0.0	good-02	5-6
# ::node	0.0.0.0	good-02	8-9
# ::node	0.0.0.0.0	plant	9-10
# ::node	0.1	seed	13-14
# ::node	0.1.0	bad-07	12-13
# ::node	0.1.0.0	bad-07	15-16
# ::node	0.1.0.0.0	plant	16-17
# ::root	0	and
# ::edge	and	op1	seed	0	0.0	
# ::edge	and	op2	seed	0	0.1	
# ::edge	bad-07	ARG1	plant	0.1.0.0	0.1.0.0.0	
# ::edge	bad-07	ARG1	seed	0.1.0	0.1	
# ::edge	bad-07	ARG3	bad-07	0.1.0	0.1.0.0	
# ::edge	good-02	ARG1	plant	0.0.0.0	0.0.0.0.0	
# ::edge	good-02	ARG1	seed	0.0.0	0.0	
# ::edge	good-02	ARG3	good-02	0.0.0	0.0.0.0	
(a / and 
      :op1 (s2 / seed 
            :ARG1-of (g2 / good-02 
                  :ARG3 (g / good-02 
                        :ARG1 (p2 / plant)))) 
      :op2 (s / seed 
            :ARG1-of (b2 / bad-07 
                  :ARG3 (b / bad-07 
                        :ARG1 (p / plant)))))

# ::snt But seeds are invisible .
# ::tok But seeds are invisible .
# ::alignments 0-1|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:39.492
# ::node	0	contrast-01	0-1
# ::node	0.0	seed	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG0	seed	0	0.0	
(c / contrast-01 
      :ARG0 (s / seed))

# ::snt They sleep deep in the heart of the earth 's darkness , until some one among them is seized with the desire to awaken .
# ::tok They sleep deep in the heart of the earth 's darkness , until some one among them is seized with the desire to awaken .
# ::alignments 1-2|0.1.0 12-13|0.1.0.1.1 18-19|0.1.0.1 6-7|0.1.0.0.0 21-22|0.1.0.1.0 5-6|0.1.0.0 10-11|0.1.0.0.0.0.0 8-9|0.1.0.0.0.0 2-3|0 0-1|0.1 13-14|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:39.705
# ::node	0	deep-02	2-3
# ::node	0.0	someone	13-14
# ::node	0.1	they	0-1
# ::node	0.1.0	sleep-01	1-2
# ::node	0.1.0.0	heart	5-6
# ::node	0.1.0.0.0	include-91	6-7
# ::node	0.1.0.0.0.0	earth	8-9
# ::node	0.1.0.0.0.0.0	darkness	10-11
# ::node	0.1.0.1	seize-01	18-19
# ::node	0.1.0.1.0	desire-01	21-22
# ::node	0.1.0.1.1	until	12-13
# ::root	0	deep-02
# ::edge	darkness	poss	earth	0.1.0.0.0.0.0	0.1.0.0.0.0	
# ::edge	deep-02	ARG0	someone	0	0.0	
# ::edge	deep-02	ARG1	they	0	0.1	
# ::edge	include-91	ARG0	heart	0.1.0.0.0	0.1.0.0	
# ::edge	include-91	ARG1	earth	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	seize-01	ARG1	desire-01	0.1.0.1	0.1.0.1.0	
# ::edge	sleep-01	ARG0	they	0.1.0	0.1	
# ::edge	sleep-01	ARG1	heart	0.1.0	0.1.0.0	
# ::edge	sleep-01	condition	seize-01	0.1.0	0.1.0.1	
# ::edge	until	op1	seize-01	0.1.0.1.1	0.1.0.1	
(d / deep-02 
      :ARG0 (s3 / someone) 
      :ARG1 (t / they 
            :ARG0-of (s / sleep-01 
                  :ARG1 (h / heart 
                        :ARG0-of (i / include-91 
                              :ARG1 (e / earth 
                                    :poss-of (d2 / darkness)))) 
                  :condition (s2 / seize-01 
                        :ARG1 (d3 / desire-01) 
                        :op-of (u / until)))))

# ::snt Then this little seed will stretch itself and begin -- timidly at first -- to push a charming little sprig inoffensively upward toward the sun .
# ::tok Then this little seed will stretch itself and begin -- timidly at first -- to push a charming little sprig inoffensively upward toward the sun .
# ::alignments 7-8|0 0-1|0.0.2 8-9|0.1 15-16|0.0.1 21-22|0.0.1.1 24-25|0.1.0 19-20|0.0.1.0 17-18|0.0.1.0.0 2-3|0.0.0.0 5-6|0.0 3-4|0.0.0 1-2|0.0.2.0 18-19|0.0.1.0.0.1 10-11|0.1.1 20-21|0.0.1.0.0.0+0.0.1.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:40.203
# ::node	0	and	7-8
# ::node	0.0	stretch-01	5-6
# ::node	0.0.0	seed	3-4
# ::node	0.0.0.0	little	2-3
# ::node	0.0.1	push-01	15-16
# ::node	0.0.1.0	sprig	19-20
# ::node	0.0.1.0.0	charm-01	17-18
# ::node	0.0.1.0.0.0	offensive	20-21
# ::node	0.0.1.0.0.0.0	-	20-21
# ::node	0.0.1.0.0.1	little	18-19
# ::node	0.0.1.1	upward	21-22
# ::node	0.0.2	then	0-1
# ::node	0.0.2.0	this	1-2
# ::node	0.1	begin-01	8-9
# ::node	0.1.0	sun	24-25
# ::node	0.1.1	timid	10-11
# ::root	0	and
# ::edge	and	op1	stretch-01	0	0.0	
# ::edge	and	op2	begin-01	0	0.1	
# ::edge	begin-01	ARG0	sun	0.1	0.1.0	
# ::edge	begin-01	ARG1	timid	0.1	0.1.1	
# ::edge	charm-01	ARG0	sprig	0.0.1.0.0	0.0.1.0	
# ::edge	charm-01	ARG1	offensive	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	charm-01	ARG2	little	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	offensive	polarity	-	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	push-01	ARG0	sprig	0.0.1	0.0.1.0	
# ::edge	push-01	manner	upward	0.0.1	0.0.1.1	
# ::edge	seed	mod	little	0.0.0	0.0.0.0	
# ::edge	stretch-01	ARG0	seed	0.0	0.0.0	
# ::edge	stretch-01	ARG1	push-01	0.0	0.0.1	
# ::edge	stretch-01	time	then	0.0	0.0.2	
# ::edge	this	mod	then	0.0.2.0	0.0.2	
(a / and 
      :op1 (s / stretch-01 
            :ARG0 (s2 / seed 
                  :mod (l2 / little)) 
            :ARG1 (p / push-01 
                  :ARG0 (s3 / sprig 
                        :ARG0-of (c / charm-01 
                              :ARG1 (o / offensive 
                                    :polarity -) 
                              :ARG2 (l / little))) 
                  :manner (u / upward)) 
            :time (t / then 
                  :mod-of (t2 / this))) 
      :op2 (b / begin-01 
            :ARG0 (s4 / sun) 
            :ARG1 (t3 / timid)))

# ::snt If it is only a sprout of radish or the sprig of a rose - bush , one would let it grow wherever it might wish .
# ::tok If it is only a sprout of radish or the sprig of a rose - bush , one would let it grow wherever it might wish .
# ::alignments 17-18|0.2.0 21-22|0.2 25-26|0 8-9|0.1.1.0 1-2|0.2.1 3-4|0.0 10-11|0.1.1 15-16|0.1.1.1.0 13-14|0.1.1.1 5-6|0.1 7-8|0.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:40.370
# ::node	0	wish-01	25-26
# ::node	0.0	only	3-4
# ::node	0.1	sprout	5-6
# ::node	0.1.0	radish	7-8
# ::node	0.1.1	sprig	10-11
# ::node	0.1.1.0	or	8-9
# ::node	0.1.1.1	rose	13-14
# ::node	0.1.1.1.0	bush	15-16
# ::node	0.2	grow-01	21-22
# ::node	0.2.0	one	17-18
# ::node	0.2.1	it	1-2
# ::root	0	wish-01
# ::edge	bush	mod	rose	0.1.1.1.0	0.1.1.1	
# ::edge	grow-01	ARG0	one	0.2	0.2.0	
# ::edge	grow-01	ARG1	it	0.2	0.2.1	
# ::edge	grow-01	condition	wish-01	0.2	0	
# ::edge	or	op1	sprig	0.1.1.0	0.1.1	
# ::edge	sprig	poss	rose	0.1.1	0.1.1.1	
# ::edge	sprout	domain	radish	0.1	0.1.0	
# ::edge	sprout	part	sprig	0.1	0.1.1	
# ::edge	wish-01	ARG0	only	0	0.0	
# ::edge	wish-01	ARG1	sprout	0	0.1	
(w2 / wish-01 
      :ARG0 (o3 / only) 
      :ARG1 (s / sprout 
            :domain (r / radish) 
            :part (s2 / sprig 
                  :op-of (o2 / or) 
                  :poss (r2 / rose 
                        :mod-of (b2 / bush)))) 
      :condition-of (g / grow-01 
            :ARG0 (o / one) 
            :ARG1 (i / it)))

# ::snt But when it is a bad plant , one must destroy it as soon as possible , the very first instant that one recognizes it .
# ::tok But when it is a bad plant , one must destroy it as soon as possible , the very first instant that one recognizes it .
# ::alignments 0-1|0 10-11|0.1 13-14|0.1.2.1.0.0 15-16|0.1.2.1.0 20-21|0.1.2.1 8-9|0.1.0 18-19|0.0 23-24|0.1.2 22-23|0.1.2.0 6-7|0.1.1.0 2-3|0.1.1 5-6|0.1.1.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:40.817
# ::node	0	contrast-01	0-1
# ::node	0.0	very	18-19
# ::node	0.1	destroy-01	10-11
# ::node	0.1.0	1	8-9
# ::node	0.1.1	it	2-3
# ::node	0.1.1.0	plant	6-7
# ::node	0.1.1.0.0	bad-07	5-6
# ::node	0.1.2	recognize-01	23-24
# ::node	0.1.2.0	one	22-23
# ::node	0.1.2.1	instant	20-21
# ::node	0.1.2.1.0	possible-01	15-16
# ::node	0.1.2.1.0.0	soon	13-14
# ::root	0	contrast-01
# ::edge	bad-07	ARG1	plant	0.1.1.0.0	0.1.1.0	
# ::edge	contrast-01	ARG1	very	0	0.0	
# ::edge	contrast-01	ARG2	destroy-01	0	0.1	
# ::edge	destroy-01	ARG0	1	0.1	0.1.0	
# ::edge	destroy-01	ARG1	it	0.1	0.1.1	
# ::edge	destroy-01	ARG2	recognize-01	0.1	0.1.2	
# ::edge	plant	domain	it	0.1.1.0	0.1.1	
# ::edge	possible-01	ARG0	instant	0.1.2.1.0	0.1.2.1	
# ::edge	possible-01	ARG1	soon	0.1.2.1.0	0.1.2.1.0.0	
# ::edge	recognize-01	ARG0	one	0.1.2	0.1.2.0	
# ::edge	recognize-01	ARG1	instant	0.1.2	0.1.2.1	
(c / contrast-01 
      :ARG1 (v / very) 
      :ARG2 (d / destroy-01 
            :ARG0 1 
            :ARG1 (i2 / it 
                  :domain-of (p / plant 
                        :ARG1-of (b / bad-07))) 
            :ARG2 (r / recognize-01 
                  :ARG0 (o2 / one) 
                  :ARG1 (i / instant 
                        :ARG0-of (p2 / possible-01 
                              :ARG1 (s / soon))))))

# ::snt Now there were some terrible seeds on the planet that was the home of the little prince ; and these were the seeds of the baobab .
# ::tok Now there were some terrible seeds on the planet that was the home of the little prince ; and these were the seeds of the baobab .
# ::alignments 5-6|0.0.0.1 25-26|0.0.0.3 3-4|0.0.0.1.0 4-5|0.0.0 8-9|0.0 12-13|0 16-17|0.0.0.0 15-16|0.0.0.0.0 0-1|0.0.0.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:40.980
# ::node	0	home	12-13
# ::node	0.0	planet	8-9
# ::node	0.0.0	terrible-01	4-5
# ::node	0.0.0.0	prince	16-17
# ::node	0.0.0.0.0	little	15-16
# ::node	0.0.0.1	seed	5-6
# ::node	0.0.0.1.0	some	3-4
# ::node	0.0.0.2	now	0-1
# ::node	0.0.0.3	baobab	25-26
# ::root	0	home
(h / home 
      :mod-of (p / planet 
            :location-of (t / terrible-01 
                  :ARG0 (p2 / prince 
                        :mod (l / little)) 
                  :ARG1 (s / seed 
                        :mod (s2 / some)) 
                  :ARG2 (n / now) 
                  :op-of (b / baobab))))

# ::snt The soil of that planet was infested with them .
# ::tok The soil of that planet was infested with them .
# ::alignments 6-7|0 1-2|0.0 4-5|0.0.0 3-4|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:40.991
# ::node	0	infest-01	6-7
# ::node	0.0	soil	1-2
# ::node	0.0.0	planet	4-5
# ::node	0.0.0.0	that	3-4
# ::root	0	infest-01
# ::edge	infest-01	ARG1	soil	0	0.0	
# ::edge	planet	mod	that	0.0.0	0.0.0.0	
# ::edge	soil	location	planet	0.0	0.0.0	
(i / infest-01 
      :ARG1 (s / soil 
            :location (p / planet 
                  :mod (t2 / that))))

# ::snt A baobab is something you will never , never be able to get rid of if you attend to it too late .
# ::tok A baobab is something you will never , never be able to get rid of if you attend to it too late .
# ::alignments 10-11|0 17-18|0.1.0 21-22|0.1.0.0 20-21|0.1.0.0.0 4-5|0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.067
# ::node	0	possible-01	10-11
# ::node	0.0	baobab	1-2
# ::node	0.1	you	4-5
# ::node	0.1.0	attend-02	17-18
# ::node	0.1.0.0	late	21-22
# ::node	0.1.0.0.0	too	20-21
# ::root	0	possible-01
# ::edge	attend-02	ARG0	you	0.1.0	0.1	
# ::edge	attend-02	ARG1	late	0.1.0	0.1.0.0	
# ::edge	late	degree	too	0.1.0.0	0.1.0.0.0	
# ::edge	possible-01	ARG0	baobab	0	0.0	
# ::edge	possible-01	ARG1	you	0	0.1	
(p / possible-01 
      :ARG0 (b / baobab) 
      :ARG1 (y / you 
            :ARG0-of (a / attend-02 
                  :ARG1 (l / late 
                        :degree (t / too)))))

# ::snt It spreads over the entire planet .
# ::tok It spreads over the entire planet .
# ::alignments 1-2|0 5-6|0.1 4-5|0.1.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.077
# ::node	0	spread-01	1-2
# ::node	0.0	it	0-1
# ::node	0.1	planet	5-6
# ::node	0.1.0	entire	4-5
# ::root	0	spread-01
# ::edge	planet	extent	entire	0.1	0.1.0	
# ::edge	spread-01	ARG1	it	0	0.0	
# ::edge	spread-01	location	planet	0	0.1	
(s / spread-01 
      :ARG1 (i / it) 
      :location (p / planet 
            :extent (e / entire)))

# ::snt It bores clear through it with its roots .
# ::tok It bores clear through it with its roots .
# ::alignments 1-2|0.1 7-8|0.1.2 3-4|0.1.1 2-3|0 0-1|0.1.0 4-5|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.138
# ::node	0	clear-03	2-3
# ::node	0.0	it	4-5
# ::node	0.1	bore-01	1-2
# ::node	0.1.0	it	0-1
# ::node	0.1.1	through	3-4
# ::node	0.1.2	root	7-8
# ::root	0	clear-03
# ::edge	bore-01	ARG0	it	0.1	0.1.0	
# ::edge	bore-01	ARG1	through	0.1	0.1.1	
# ::edge	bore-01	ARG2	root	0.1	0.1.2	
# ::edge	clear-03	ARG1	it	0	0.0	
# ::edge	clear-03	ARG3	bore-01	0	0.1	
(c / clear-03 
      :ARG1 (i / it) 
      :ARG3 (b / bore-01 
            :ARG0 (i2 / it) 
            :ARG1 (t2 / through) 
            :ARG2 (r / root)))

# ::snt And if the planet is too small , and the baobabs are too many , they split it in pieces ...
# ::tok And if the planet is too small , and the baobabs are too many , they split it in pieces ...
# ::alignments 0-1|0 16-17|0.0 8-9|0.0.0.2 10-11|0.0.0.1 13-14|0.0.0 5-6|0.0.0.2.0.0 6-7|0.0.0.2.0 3-4|0.0.0.2.0.1 12-13|0.0.0.0 19-20|0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.206
# ::node	0	and	0-1
# ::node	0.0	split-01	16-17
# ::node	0.0.0	many	13-14
# ::node	0.0.0.0	too	12-13
# ::node	0.0.0.1	baobab	10-11
# ::node	0.0.0.2	and	8-9
# ::node	0.0.0.2.0	small	6-7
# ::node	0.0.0.2.0.0	too	5-6
# ::node	0.0.0.2.0.1	planet	3-4
# ::node	0.0.1	piece	19-20
# ::root	0	and
# ::edge	and	op1	small	0.0.0.2	0.0.0.2.0	
# ::edge	and	op1	split-01	0	0.0	
# ::edge	and	op2	many	0.0.0.2	0.0.0	
# ::edge	many	degree	too	0.0.0	0.0.0.0	
# ::edge	many	domain	baobab	0.0.0	0.0.0.1	
# ::edge	small	degree	too	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	small	domain	planet	0.0.0.2.0	0.0.0.2.0.1	
# ::edge	split-01	ARG1	many	0.0	0.0.0	
# ::edge	split-01	ARG2	piece	0.0	0.0.1	
(a / and 
      :op1 (s / split-01 
            :ARG1 (m / many 
                  :degree (t2 / too) 
                  :domain (b / baobab) 
                  :op-of (a2 / and 
                        :op1 (s2 / small 
                              :degree (t3 / too) 
                              :domain (p2 / planet)))) 
            :ARG2 (p / piece)))

# ::snt " It is a question of discipline , " the little prince said to me later on .
# ::tok " It is a question of discipline , " the little prince said to me later on .
# ::alignments 12-13|0 15-16|0.2 4-5|0.1 1-2|0.1.0 6-7|0.0.1 11-12|0.0 10-11|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.291
# ::node	0	say-01	12-13
# ::node	0.0	prince	11-12
# ::node	0.0.0	little	10-11
# ::node	0.0.1	discipline	6-7
# ::node	0.1	question	4-5
# ::node	0.1.0	it	1-2
# ::node	0.2	late	15-16
# ::root	0	say-01
# ::edge	discipline	poss	prince	0.0.1	0.0	
# ::edge	late	op1	say-01	0.2	0	
# ::edge	prince	mod	little	0.0	0.0.0	
# ::edge	question	domain	it	0.1	0.1.0	
# ::edge	say-01	ARG0	prince	0	0.0	
# ::edge	say-01	ARG1	question	0	0.1	
(s / say-01 
      :ARG0 (p / prince 
            :mod (l / little) 
            :poss-of (d / discipline)) 
      :ARG1 (q / question 
            :domain (i / it)) 
      :op-of (l2 / late))

# ::snt " When you 've finished your own toilet in the morning , then it is time to attend to the toilet of your planet , just so , with the greatest care .
# ::tok " When you 've finished your own toilet in the morning , then it is time to attend to the toilet of your planet , just so , with the greatest care .
# ::alignments 17-18|0.1.0 4-5|0 10-11|0.2 7-8|0.1 2-3|0.0 31-32|0.2.0 30-31|0.2.0.0+0.2.0.0.0 20-21|0.1.0.0 23-24|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.510
# ::node	0	finish-01	4-5
# ::node	0.0	you	2-3
# ::node	0.1	toilet	7-8
# ::node	0.1.0	attend-02	17-18
# ::node	0.1.0.0	toilet	20-21
# ::node	0.1.0.0.0	planet	23-24
# ::node	0.2	morning	10-11
# ::node	0.2.0	care-04	31-32
# ::node	0.2.0.0	great	30-31
# ::node	0.2.0.0.0	most	30-31
# ::root	0	finish-01
# ::edge	attend-02	ARG0	toilet	0.1.0	0.1	
# ::edge	attend-02	ARG1	toilet	0.1.0	0.1.0.0	
# ::edge	care-04	ARG0	morning	0.2.0	0.2	
# ::edge	care-04	degree	great	0.2.0	0.2.0.0	
# ::edge	finish-01	ARG0	you	0	0.0	
# ::edge	finish-01	ARG1	toilet	0	0.1	
# ::edge	finish-01	location	morning	0	0.2	
# ::edge	great	degree	most	0.2.0.0	0.2.0.0.0	
# ::edge	toilet	location	planet	0.1.0.0	0.1.0.0.0	
(f / finish-01 
      :ARG0 (y / you) 
      :ARG1 (t / toilet 
            :ARG0-of (a / attend-02 
                  :ARG1 (t2 / toilet 
                        :location (p / planet)))) 
      :location (m / morning 
            :ARG0-of (c / care-04 
                  :degree (g / great 
                        :degree (m2 / most)))))

# ::snt You must see to it that you pull up regularly all the baobabs , at the very first moment when they can be distinguished from the rosebushes which they resemble so closely in their earliest youth .
# ::tok You must see to it that you pull up regularly all the baobabs , at the very first moment when they can be distinguished from the rosebushes which they resemble so closely in their earliest youth .
# ::alignments 7-8|0.2.0.0.0 18-19|0.2.0.0.0.0.0.0.1 21-22|0.2.0.0.0.0.0 23-24|0.2.0.0.0.0.0.0 26-27|0.0 29-30|0 34-35|0.1.0+0.1.0.0 35-36|0.1 30-31|0.2.0 16-17|0.2.0.0.0.0.0.0.0 12-13|0.2.0.0.0.1 10-11|0.2.0.0.0.1.0 0-1|0.2.0.0.0.0 31-32|0.2 9-10|0.2.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.726
# ::node	0	resemble-01	29-30
# ::node	0.0	rosebush	26-27
# ::node	0.1	youth	35-36
# ::node	0.1.0	early	34-35
# ::node	0.1.0.0	most	34-35
# ::node	0.2	close-10	31-32
# ::node	0.2.0	so	30-31
# ::node	0.2.0.0	regular-02	9-10
# ::node	0.2.0.0.0	pull-01	7-8
# ::node	0.2.0.0.0.0	you	0-1
# ::node	0.2.0.0.0.0.0	possible-01	21-22
# ::node	0.2.0.0.0.0.0.0	distinguish-01	23-24
# ::node	0.2.0.0.0.0.0.0.0	very	16-17
# ::node	0.2.0.0.0.0.0.0.1	moment	18-19
# ::node	0.2.0.0.0.1	baobab	12-13
# ::node	0.2.0.0.0.1.0	all	10-11
# ::root	0	resemble-01
# ::edge	baobab	mod	all	0.2.0.0.0.1	0.2.0.0.0.1.0	
# ::edge	close-10	ARG1	resemble-01	0.2	0	
# ::edge	close-10	degree	so	0.2	0.2.0	
# ::edge	distinguish-01	ARG0	very	0.2.0.0.0.0.0.0	0.2.0.0.0.0.0.0.0	
# ::edge	distinguish-01	ARG1	moment	0.2.0.0.0.0.0.0	0.2.0.0.0.0.0.0.1	
# ::edge	early	degree	most	0.1.0	0.1.0.0	
# ::edge	possible-01	ARG0	you	0.2.0.0.0.0.0	0.2.0.0.0.0	
# ::edge	possible-01	ARG1	distinguish-01	0.2.0.0.0.0.0	0.2.0.0.0.0.0.0	
# ::edge	pull-01	ARG0	you	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	pull-01	ARG1	baobab	0.2.0.0.0	0.2.0.0.0.1	
# ::edge	regular-02	ARG0	so	0.2.0.0	0.2.0	
# ::edge	regular-02	ARG1	pull-01	0.2.0.0	0.2.0.0.0	
# ::edge	resemble-01	ARG0	rosebush	0	0.0	
# ::edge	resemble-01	ARG1	youth	0	0.1	
# ::edge	youth	degree	early	0.1	0.1.0	
(r3 / resemble-01 
      :ARG0 (r2 / rosebush) 
      :ARG1 (y2 / youth 
            :degree (e / early 
                  :degree (m2 / most))) 
      :ARG1-of (c / close-10 
            :degree (s / so 
                  :ARG0-of (r / regular-02 
                        :ARG1 (p / pull-01 
                              :ARG0 (y / you 
                                    :ARG0-of (p2 / possible-01 
                                          :ARG1 (d / distinguish-01 
                                                :ARG0 (v / very) 
                                                :ARG1 (m / moment)))) 
                              :ARG1 (b / baobab 
                                    :mod (a / all)))))))

# ::snt It is very tedious work , " the little prince added , " but very easy . "
# ::tok It is very tedious work , " the little prince added , " but very easy . "
# ::alignments 10-11|0 13-14|0.1 15-16|0.1.0.0 2-3|0.0.0.0.0 3-4|0.0.0.0 4-5|0.0.0 14-15|0.1.0 9-10|0.0 8-9|0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.766
# ::node	0	add-01	10-11
# ::node	0.0	prince	9-10
# ::node	0.0.0	work-01	4-5
# ::node	0.0.0.0	tedious	3-4
# ::node	0.0.0.0.0	very	2-3
# ::node	0.0.1	little	8-9
# ::node	0.1	contrast-01	13-14
# ::node	0.1.0	very	14-15
# ::node	0.1.0.0	easy-05	15-16
# ::root	0	add-01
# ::edge	add-01	ARG0	prince	0	0.0	
# ::edge	add-01	ARG1	contrast-01	0	0.1	
# ::edge	contrast-01	ARG0	very	0.1	0.1.0	
# ::edge	easy-05	ARG1	very	0.1.0.0	0.1.0	
# ::edge	prince	mod	little	0.0	0.0.1	
# ::edge	tedious	degree	very	0.0.0.0	0.0.0.0.0	
# ::edge	work-01	ARG0	prince	0.0.0	0.0	
# ::edge	work-01	mod	tedious	0.0.0	0.0.0.0	
(a / add-01 
      :ARG0 (p / prince 
            :ARG0-of (w / work-01 
                  :mod (t / tedious 
                        :degree (v2 / very))) 
            :mod (l / little)) 
      :ARG1 (c / contrast-01 
            :ARG0 (v / very 
                  :ARG1-of (e / easy-05))))

# ::snt And one day he said to me : " You ought to make a beautiful drawing , so that the children where you live can see exactly how all this is .
# ::tok And one day he said to me : " You ought to make a beautiful drawing , so that the children where you live can see exactly how all this is .
# ::alignments 0-1|0.2 4-5|0 2-3|0.3 1-2|0.3.0 15-16|0.0.0 24-25|0.1 25-26|0.1.0 29-30|0.1.0.1.0 28-29|0.1.0.1.0.0 20-21|0.1.0.1.1 23-24|0.1.0.1 14-15|0.0.0.0 3-4|0.0 26-27|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:41.985
# ::node	0	say-01	4-5
# ::node	0.0	he	3-4
# ::node	0.0.0	draw-01	15-16
# ::node	0.0.0.0	beautiful-02	14-15
# ::node	0.1	possible-01	24-25
# ::node	0.1.0	see-01	25-26
# ::node	0.1.0.0	exact	26-27
# ::node	0.1.0.1	live-01	23-24
# ::node	0.1.0.1.0	this	29-30
# ::node	0.1.0.1.0.0	all	28-29
# ::node	0.1.0.1.1	child	20-21
# ::node	0.2	and	0-1
# ::node	0.3	day	2-3
# ::node	0.3.0	one	1-2
# ::root	0	say-01
# ::edge	and	op1	say-01	0.2	0	
# ::edge	beautiful-02	ARG1	draw-01	0.0.0.0	0.0.0	
# ::edge	child	location	live-01	0.1.0.1.1	0.1.0.1	
# ::edge	day	mod	one	0.3	0.3.0	
# ::edge	draw-01	ARG0	he	0.0.0	0.0	
# ::edge	live-01	ARG0	this	0.1.0.1	0.1.0.1.0	
# ::edge	possible-01	ARG1	see-01	0.1	0.1.0	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	possible-01	0	0.1	
# ::edge	say-01	time	day	0	0.3	
# ::edge	see-01	ARG0	exact	0.1.0	0.1.0.0	
# ::edge	see-01	ARG1	live-01	0.1.0	0.1.0.1	
# ::edge	this	mod	all	0.1.0.1.0	0.1.0.1.0.0	
(s / say-01 
      :ARG0 (h / he 
            :ARG0-of (d3 / draw-01 
                  :ARG1-of (b / beautiful-02))) 
      :ARG1 (p / possible-01 
            :ARG1 (s2 / see-01 
                  :ARG0 (e / exact) 
                  :ARG1 (l / live-01 
                        :ARG0 (t / this 
                              :mod (a2 / all)) 
                        :location-of (c / child)))) 
      :op-of (a / and) 
      :time (d / day 
            :mod (o / one)))

# ::snt That would be very useful to them if they were to travel some day .
# ::tok That would be very useful to them if they were to travel some day .
# ::alignments 4-5|0 11-12|0.1.0 13-14|0.1.0.0 12-13|0.1.0.0.0 3-4|0.2 0-1|0.0 8-9|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:42.022
# ::node	0	useful-05	4-5
# ::node	0.0	that	0-1
# ::node	0.1	they	8-9
# ::node	0.1.0	travel-01	11-12
# ::node	0.1.0.0	day	13-14
# ::node	0.1.0.0.0	some	12-13
# ::node	0.2	very	3-4
# ::root	0	useful-05
# ::edge	day	mod	some	0.1.0.0	0.1.0.0.0	
# ::edge	travel-01	ARG1	they	0.1.0	0.1	
# ::edge	travel-01	time	day	0.1.0	0.1.0.0	
# ::edge	useful-05	ARG0	that	0	0.0	
# ::edge	useful-05	ARG1	they	0	0.1	
# ::edge	useful-05	degree	very	0	0.2	
(u / useful-05 
      :ARG0 (t / that) 
      :ARG1 (t2 / they 
            :ARG1-of (t3 / travel-01 
                  :time (d / day 
                        :mod (s / some)))) 
      :degree (v / very))

# ::snt Sometimes , " he added , " there is no harm in putting off a piece of work until another day .
# ::tok Sometimes , " he added , " there is no harm in putting off a piece of work until another day .
# ::alignments 9-10|0.0.2 4-5|0 10-11|0.0 0-1|0.0.1 17-18|0.1+0.1.0 15-16|0.1.1 20-21|0.0.0 19-20|0.0.0.0 3-4|0.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:42.197
# ::node	0	add-01	4-5
# ::node	0.0	harm-01	10-11
# ::node	0.0.0	day	20-21
# ::node	0.0.0.0	another	19-20
# ::node	0.0.1	sometimes	0-1
# ::node	0.0.2	-	9-10
# ::node	0.1	thing	17-18
# ::node	0.1.0	work-01	17-18
# ::node	0.1.1	piece	15-16
# ::node	0.2	he	3-4
# ::root	0	add-01
# ::edge	add-01	ARG0	harm-01	0	0.0	
# ::edge	add-01	ARG1	thing	0	0.1	
# ::edge	add-01	ARG2	he	0	0.2	
# ::edge	day	mod	another	0.0.0	0.0.0.0	
# ::edge	harm-01	ARG0	day	0.0	0.0.0	
# ::edge	harm-01	ARG1	sometimes	0.0	0.0.1	
# ::edge	harm-01	polarity	-	0.0	0.0.2	
# ::edge	thing	mod	piece	0.1	0.1.1	
# ::edge	work-01	ARG1	thing	0.1.0	0.1	
(a / add-01 
      :ARG0 (h2 / harm-01 
            :ARG0 (d / day 
                  :mod (a2 / another)) 
            :ARG1 (s / sometimes) 
            :polarity (- / -)) 
      :ARG1 (t / thing 
            :ARG1-of (w / work-01) 
            :mod (p3 / piece)) 
      :ARG2 (h / he))

# ::snt But when it is a matter of baobabs , that always means a catastrophe .
# ::tok But when it is a matter of baobabs , that always means a catastrophe .
# ::alignments 0-1|0 11-12|0.1 7-8|0.0 10-11|0.1.1 13-14|0.1.0 9-10|0.1.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:42.252
# ::node	0	contrast-01	0-1
# ::node	0.0	baobab	7-8
# ::node	0.1	mean-01	11-12
# ::node	0.1.0	catastrophe	13-14
# ::node	0.1.1	always	10-11
# ::node	0.1.1.0	that	9-10
# ::root	0	contrast-01
# ::edge	always	domain	that	0.1.1	0.1.1.0	
# ::edge	contrast-01	ARG0	baobab	0	0.0	
# ::edge	contrast-01	ARG2	mean-01	0	0.1	
# ::edge	mean-01	ARG1	catastrophe	0.1	0.1.0	
# ::edge	mean-01	time	always	0.1	0.1.1	
(c2 / contrast-01 
      :ARG0 (b / baobab) 
      :ARG2 (m3 / mean-01 
            :ARG1 (c / catastrophe) 
            :time (a / always 
                  :domain (t / that))))

# ::snt I knew a planet that was inhabited by a lazy man .
# ::tok I knew a planet that was inhabited by a lazy man .
# ::alignments 1-2|0.1.0 3-4|0.1 6-7|0 10-11|0.0 9-10|0.0.0 0-1|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:42.276
# ::node	0	inhabit-01	6-7
# ::node	0.0	man	10-11
# ::node	0.0.0	lazy	9-10
# ::node	0.1	planet	3-4
# ::node	0.1.0	know-02	1-2
# ::node	0.1.0.0	i	0-1
# ::root	0	inhabit-01
# ::edge	inhabit-01	ARG0	man	0	0.0	
# ::edge	inhabit-01	ARG1	planet	0	0.1	
# ::edge	know-02	ARG0	i	0.1.0	0.1.0.0	
# ::edge	know-02	ARG1	planet	0.1.0	0.1	
# ::edge	man	mod	lazy	0.0	0.0.0	
(i2 / inhabit-01 
      :ARG0 (m / man 
            :mod (l / lazy)) 
      :ARG1 (p / planet 
            :ARG1-of (k / know-02 
                  :ARG0 (i / i))))

# ::snt He neglected three little bushes ... "
# ::tok He neglected three little bushes ... "
# ::alignments 1-2|0 4-5|0.0.0 2-3|0.0.0.1 3-4|0.0.0.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:42.293
# ::node	0	neglect-01	1-2
# ::node	0.0	he	0-1
# ::node	0.0.0	bush	4-5
# ::node	0.0.0.0	little	3-4
# ::node	0.0.0.1	3	2-3
# ::root	0	neglect-01
# ::edge	bush	mod	little	0.0.0	0.0.0.0	
# ::edge	bush	poss	he	0.0.0	0.0	
# ::edge	bush	quant	3	0.0.0	0.0.0.1	
# ::edge	neglect-01	ARG0	he	0	0.0	
(n / neglect-01 
      :ARG0 (h / he 
            :poss-of (b / bush 
                  :mod (l / little) 
                  :quant 3)))

# ::snt So , as the little prince described it to me , I have made a drawing of that planet .
# ::tok So , as the little prince described it to me , I have made a drawing of that planet .
# ::alignments 15-16|0 6-7|0.2 5-6|0.2.0 4-5|0.2.0.0 18-19|0.1 17-18|0.1.0 11-12|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:42.369
# ::node	0	draw-01	15-16
# ::node	0.0	i	11-12
# ::node	0.1	planet	18-19
# ::node	0.1.0	that	17-18
# ::node	0.2	describe-01	6-7
# ::node	0.2.0	prince	5-6
# ::node	0.2.0.0	little	4-5
# ::root	0	draw-01
# ::edge	describe-01	ARG0	prince	0.2	0.2.0	
# ::edge	describe-01	ARG1	draw-01	0.2	0	
# ::edge	draw-01	ARG0	i	0	0.0	
# ::edge	draw-01	ARG1	planet	0	0.1	
# ::edge	planet	mod	that	0.1	0.1.0	
# ::edge	prince	mod	little	0.2.0	0.2.0.0	
(d / draw-01 
      :ARG0 (i / i) 
      :ARG1 (p / planet 
            :mod (t / that)) 
      :ARG1-of (d2 / describe-01 
            :ARG0 (p2 / prince 
                  :mod (l / little))))

# ::snt I do not much like to take the tone of a moralist .
# ::tok I do not much like to take the tone of a moralist .
# ::alignments 4-5|0 3-4|0.2 6-7|0.1 8-9|0.1.0 11-12|0.1.0.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:42.441
# ::node	0	like-01	4-5
# ::node	0.0	i	0-1
# ::node	0.1	take-01	6-7
# ::node	0.1.0	tone	8-9
# ::node	0.1.0.0	moralist	11-12
# ::node	0.2	much	3-4
# ::root	0	like-01
# ::edge	like-01	ARG0	i	0	0.0	
# ::edge	like-01	ARG1	take-01	0	0.1	
# ::edge	like-01	degree	much	0	0.2	
# ::edge	take-01	ARG1	tone	0.1	0.1.0	
# ::edge	tone	poss	moralist	0.1.0	0.1.0.0	
(l / like-01 
      :ARG0 (i / i) 
      :ARG1 (t / take-01 
            :ARG1 (t2 / tone 
                  :poss (m2 / moralist))) 
      :degree (m / much))

# ::snt But the danger of the baobabs is so little understood , and such considerable risks would be run by anyone who might get lost on an asteroid , that for once I am breaking through my reserve .
# ::tok But the danger of the baobabs is so little understood , and such considerable risks would be run by anyone who might get lost on an asteroid , that for once I am breaking through my reserve .
# ::alignments 0-1|0 11-12|0.1 14-15|0.1.0.2 13-14|0.1.0.2.1 12-13|0.1.0.2.0 19-20|0.1.0.0.0.1.1 23-24|0.1.0.0.0.1 26-27|0.1.0.0.0.1.0 9-10|0.1.0 8-9|0.1.0.3 7-8|0.1.0.3.0 2-3|0.1.0.1 5-6|0.0 31-32|0.1.0.0 36-37|0.1.0.0.0.0 33-34|0.1.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.001
# ::node	0	contrast-01	0-1
# ::node	0.0	baobab	5-6
# ::node	0.1	and	11-12
# ::node	0.1.0	understand-01	9-10
# ::node	0.1.0.0	i	31-32
# ::node	0.1.0.0.0	break-away-14	33-34
# ::node	0.1.0.0.0.0	reserve	36-37
# ::node	0.1.0.0.0.1	lose-02	23-24
# ::node	0.1.0.0.0.1.0	asteroid	26-27
# ::node	0.1.0.0.0.1.1	anyone	19-20
# ::node	0.1.0.1	danger	2-3
# ::node	0.1.0.2	risk-01	14-15
# ::node	0.1.0.2.0	such	12-13
# ::node	0.1.0.2.1	considerable	13-14
# ::node	0.1.0.3	little	8-9
# ::node	0.1.0.3.0	so	7-8
# ::root	0	contrast-01
# ::edge	and	op1	understand-01	0.1	0.1.0	
# ::edge	break-away-14	ARG0	i	0.1.0.0.0	0.1.0.0	
# ::edge	break-away-14	ARG1	reserve	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	contrast-01	ARG0	baobab	0	0.0	
# ::edge	contrast-01	ARG2	and	0	0.1	
# ::edge	little	degree	so	0.1.0.3	0.1.0.3.0	
# ::edge	lose-02	ARG0	asteroid	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	lose-02	ARG1	anyone	0.1.0.0.0.1	0.1.0.0.0.1.1	
# ::edge	lose-02	ARG2	break-away-14	0.1.0.0.0.1	0.1.0.0.0	
# ::edge	risk-01	ARG1	understand-01	0.1.0.2	0.1.0	
# ::edge	risk-01	mod	considerable	0.1.0.2	0.1.0.2.1	
# ::edge	risk-01	mod	such	0.1.0.2	0.1.0.2.0	
# ::edge	understand-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	understand-01	ARG1	danger	0.1.0	0.1.0.1	
# ::edge	understand-01	time	little	0.1.0	0.1.0.3	
(c2 / contrast-01 
      :ARG0 (b2 / baobab) 
      :ARG2 (a / and 
            :op1 (u / understand-01 
                  :ARG0 (i / i 
                        :ARG0-of (b3 / break-away-14 
                              :ARG1 (r3 / reserve) 
                              :ARG2-of (l2 / lose-02 
                                    :ARG0 (a3 / asteroid) 
                                    :ARG1 (a2 / anyone)))) 
                  :ARG1 (d / danger) 
                  :ARG1-of (r / risk-01 
                        :mod (s2 / such) 
                        :mod (c / considerable)) 
                  :time (l / little 
                        :degree (s / so)))))

# ::snt " Children , "
# ::tok " Children , "
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.007
# ::node	0	child	1-2
# ::root	0	child
(c2 / child)

# ::snt I say plainly , " watch out for the baobabs ! "
# ::tok I say plainly , " watch out for the baobabs ! "
# ::alignments 1-2|0 9-10|0.0.0.1 0-1|0.0 2-3|0.0.0.0 5-6|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.051
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::node	0.0.0	watch-out-02	5-6
# ::node	0.0.0.0	plain	2-3
# ::node	0.0.0.1	baobab	9-10
# ::root	0	say-01
# ::edge	say-01	ARG2	i	0	0.0	
# ::edge	watch-out-02	ARG0	i	0.0.0	0.0	
# ::edge	watch-out-02	ARG1	plain	0.0.0	0.0.0.0	
# ::edge	watch-out-02	ARG2	baobab	0.0.0	0.0.0.1	
(s / say-01 
      :ARG2 (i / i 
            :ARG0-of (w / watch-out-02 
                  :ARG1 (p / plain) 
                  :ARG2 (b / baobab))))

# ::snt My friends , like myself , have been skirting this danger for a long time , without ever knowing it ; and so it is for them that I have worked so hard over this drawing .
# ::tok My friends , like myself , have been skirting this danger for a long time , without ever knowing it ; and so it is for them that I have worked so hard over this drawing .
# ::alignments 8-9|0.0 13-14|0.0.0.1 18-19|0.0.2 17-18|0.0.2.1 10-11|0.0.0 9-10|0.0.0.2 20-21|0 28-29|0.0.0.0.0.0 1-2|0.0.2.0 30-31|0.0.0.0.0 32-33|0.0.0.0 22-23|0.0.0.0.0.1 35-36|0.0.0.0.0.0.0 34-35|0.0.0.0.0.0.0.0 6-7|0.0.1.0+0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.368
# ::node	0	and	20-21
# ::node	0.0	skirt-02	8-9
# ::node	0.0.0	danger	10-11
# ::node	0.0.0.0	hard-02	32-33
# ::node	0.0.0.0.0	work-01	30-31
# ::node	0.0.0.0.0.0	i	28-29
# ::node	0.0.0.0.0.0.0	draw-01	35-36
# ::node	0.0.0.0.0.0.0.0	this	34-35
# ::node	0.0.0.0.0.1	so	22-23
# ::node	0.0.0.1	long-03	13-14
# ::node	0.0.0.2	this	9-10
# ::node	0.0.1	have-rel-role-91	6-7
# ::node	0.0.1.0	person	6-7
# ::node	0.0.2	know-01	18-19
# ::node	0.0.2.0	friend	1-2
# ::node	0.0.2.1	ever	17-18
# ::root	0	and
# ::edge	and	op1	skirt-02	0	0.0	
# ::edge	danger	mod	this	0.0.0	0.0.0.2	
# ::edge	draw-01	ARG0	i	0.0.0.0.0.0.0	0.0.0.0.0.0	
# ::edge	draw-01	ARG2	this	0.0.0.0.0.0.0	0.0.0.0.0.0.0.0	
# ::edge	hard-02	ARG0	danger	0.0.0.0	0.0.0	
# ::edge	hard-02	ARG1	work-01	0.0.0.0	0.0.0.0.0	
# ::edge	have-rel-role-91	ARG0	person	0.0.1	0.0.1.0	
# ::edge	have-rel-role-91	ARG1	skirt-02	0.0.1	0.0	
# ::edge	know-01	ARG0	friend	0.0.2	0.0.2.0	
# ::edge	know-01	ARG1	skirt-02	0.0.2	0.0	
# ::edge	know-01	time	ever	0.0.2	0.0.2.1	
# ::edge	long-03	ARG1	danger	0.0.0.1	0.0.0	
# ::edge	skirt-02	ARG1	danger	0.0	0.0.0	
# ::edge	work-01	ARG0	i	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	work-01	ARG1	so	0.0.0.0.0	0.0.0.0.0.1	
(a / and 
      :op1 (s / skirt-02 
            :ARG1 (d / danger 
                  :ARG0-of (h / hard-02 
                        :ARG1 (w / work-01 
                              :ARG0 (i / i 
                                    :ARG0-of (d2 / draw-01 
                                          :ARG2 (t3 / this))) 
                              :ARG1 (s2 / so))) 
                  :ARG1-of (l / long-03) 
                  :mod (t / this)) 
            :ARG1-of (h2 / have-rel-role-91 
                  :ARG0 (p2 / person)) 
            :ARG1-of (k / know-01 
                  :ARG0 (f / friend) 
                  :time (e / ever))))

# ::snt The lesson which I pass on by this means is worth all the trouble it has cost me .
# ::tok The lesson which I pass on by this means is worth all the trouble it has cost me .
# ::alignments 10-11|0 13-14|0.0.0 11-12|0.0 16-17|0.0.0.0 1-2|0.1 3-4|0.1.0.0 7-8|0.0.0.0.0 4-5|0.1.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.517
# ::node	0	worth-02	10-11
# ::node	0.0	all	11-12
# ::node	0.0.0	trouble	13-14
# ::node	0.0.0.0	cost-01	16-17
# ::node	0.0.0.0.0	this	7-8
# ::node	0.1	lesson	1-2
# ::node	0.1.0	pass-on-09	4-5
# ::node	0.1.0.0	i	3-4
# ::root	0	worth-02
# ::edge	cost-01	ARG0	this	0.0.0.0	0.0.0.0.0	
# ::edge	cost-01	ARG1	trouble	0.0.0.0	0.0.0	
# ::edge	pass-on-09	ARG0	i	0.1.0	0.1.0.0	
# ::edge	pass-on-09	ARG1	lesson	0.1.0	0.1	
# ::edge	trouble	mod	all	0.0.0	0.0	
# ::edge	worth-02	ARG0	all	0	0.0	
# ::edge	worth-02	ARG1	lesson	0	0.1	
(w / worth-02 
      :ARG0 (a / all 
            :mod-of (t / trouble 
                  :ARG1-of (c / cost-01 
                        :ARG0 (t2 / this)))) 
      :ARG1 (l / lesson 
            :ARG1-of (p / pass-on-09 
                  :ARG0 (i / i))))

# ::snt Perhaps you will ask me , " Why are there no other drawing in this book as magnificent and impressive as this drawing of the baobabs ? "
# ::tok Perhaps you will ask me , " Why are there no other drawing in this book as magnificent and impressive as this drawing of the baobabs ? "
# ::alignments 10-11|0.0.1.0.1.0 3-4|0 12-13|0.0.1.0 11-12|0.0.1.0.1 15-16|0.0.1.0.0 14-15|0.0.1.0.0.0 17-18|0.1 22-23|0.0.0 21-22|0.0.0.1 25-26|0.0.0.0 1-2|0.0 19-20|0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.793
# ::node	0	ask-01	3-4
# ::node	0.0	you	1-2
# ::node	0.0.0	draw-01	22-23
# ::node	0.0.0.0	baobab	25-26
# ::node	0.0.0.1	this	21-22
# ::node	0.0.1	impress-01	19-20
# ::node	0.0.1.0	draw-01	12-13
# ::node	0.0.1.0.0	book	15-16
# ::node	0.0.1.0.0.0	this	14-15
# ::node	0.0.1.0.1	other	11-12
# ::node	0.0.1.0.1.0	-	10-11
# ::node	0.1	magnificent	17-18
# ::root	0	ask-01
# ::edge	ask-01	ARG0	you	0	0.0	
# ::edge	ask-01	ARG1	magnificent	0	0.1	
# ::edge	book	mod	this	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	draw-01	ARG0	book	0.0.1.0	0.0.1.0.0	
# ::edge	draw-01	ARG0	you	0.0.0	0.0	
# ::edge	draw-01	ARG1	baobab	0.0.0	0.0.0.0	
# ::edge	draw-01	ARG1	impress-01	0.0.1.0	0.0.1	
# ::edge	draw-01	ARG2	this	0.0.0	0.0.0.1	
# ::edge	draw-01	mod	other	0.0.1.0	0.0.1.0.1	
# ::edge	impress-01	ARG1	you	0.0.1	0.0	
# ::edge	other	mod	-	0.0.1.0.1	0.0.1.0.1.0	
(a / ask-01 
      :ARG0 (y / you 
            :ARG0-of (d2 / draw-01 
                  :ARG1 (b2 / baobab) 
                  :ARG2 (t2 / this)) 
            :ARG1-of (i / impress-01 
                  :ARG1-of (d / draw-01 
                        :ARG0 (b / book 
                              :mod (t / this)) 
                        :mod (o / other 
                              :mod (- / -))))) 
      :ARG1 (m / magnificent))

# ::snt The reply is simple .
# ::tok The reply is simple .
# ::alignments 3-4|0 1-2|0.0+0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.800
# ::node	0	simple-02	3-4
# ::node	0.0	thing	1-2
# ::node	0.0.0	reply-01	1-2
# ::root	0	simple-02
# ::edge	reply-01	ARG2	thing	0.0.0	0.0	
# ::edge	simple-02	ARG1	thing	0	0.0	
(s / simple-02 
      :ARG1 (t / thing 
            :ARG2-of (r / reply-01)))

# ::snt I have tried .
# ::tok I have tried .
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.804
# ::node	0	try-01	2-3
# ::node	0.0	i	0-1
# ::root	0	try-01
# ::edge	try-01	ARG0	i	0	0.0	
(t / try-01 
      :ARG0 (i / i))

# ::snt But with the others I have not been successful .
# ::tok But with the others I have not been successful .
# ::alignments 0-1|0 4-5|0.1.0 3-4|0.0 8-9|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.816
# ::node	0	contrast-01	0-1
# ::node	0.0	other	3-4
# ::node	0.1	succeed-01	8-9
# ::node	0.1.0	i	4-5
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	other	0	0.0	
# ::edge	contrast-01	ARG2	succeed-01	0	0.1	
# ::edge	succeed-01	ARG1	i	0.1	0.1.0	
(c / contrast-01 
      :ARG1 (o / other) 
      :ARG2 (s / succeed-01 
            :ARG1 (i / i)))

# ::snt When I made the drawing of the baobabs I was carried beyond myself by the inspiring force of urgent necessity .
# ::tok When I made the drawing of the baobabs I was carried beyond myself by the inspiring force of urgent necessity .
# ::alignments 10-11|0 4-5|0.0.0 7-8|0.0.0.0 11-12|0.1 1-2|0.0 16-17|0.0.1 15-16|0.0.1.1 19-20|0.0.1.0 18-19|0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.889
# ::node	0	carry-01	10-11
# ::node	0.0	i	1-2
# ::node	0.0.0	draw-01	4-5
# ::node	0.0.0.0	baobab	7-8
# ::node	0.0.1	force-01	16-17
# ::node	0.0.1.0	necessity	19-20
# ::node	0.0.1.0.0	urgent	18-19
# ::node	0.0.1.1	inspire-01	15-16
# ::node	0.1	beyond	11-12
# ::root	0	carry-01
# ::edge	carry-01	ARG0	i	0	0.0	
# ::edge	carry-01	ARG2	beyond	0	0.1	
# ::edge	draw-01	ARG0	i	0.0.0	0.0	
# ::edge	draw-01	ARG1	baobab	0.0.0	0.0.0.0	
# ::edge	force-01	ARG0	necessity	0.0.1	0.0.1.0	
# ::edge	force-01	ARG1	i	0.0.1	0.0	
# ::edge	inspire-01	ARG1	force-01	0.0.1.1	0.0.1	
# ::edge	necessity	mod	urgent	0.0.1.0	0.0.1.0.0	
(c / carry-01 
      :ARG0 (i / i 
            :ARG0-of (d / draw-01 
                  :ARG1 (b2 / baobab)) 
            :ARG1-of (f / force-01 
                  :ARG0 (n / necessity 
                        :mod (u / urgent)) 
                  :ARG1-of (i2 / inspire-01))) 
      :ARG2 (b / beyond))

# ::snt Chapter 6 .
# ::tok Chapter 6 .
# ::alignments 0-1|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.893
# ::node	0	chapter	0-1
# ::node	0.0	6	1-2
# ::root	0	chapter
# ::edge	chapter	mod	6	0	0.0	
(c / chapter 
      :mod 6)

# ::snt Oh , little prince !
# ::tok Oh , little prince !
# ::alignments 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.900
# ::node	0	prince	3-4
# ::node	0.0	little	2-3
# ::root	0	prince
# ::edge	prince	mod	little	0	0.0	
(p / prince 
      :mod (l / little))

# ::snt Bit by bit I came to understand the secrets of your sad little life ...
# ::tok Bit by bit I came to understand the secrets of your sad little life ...
# ::alignments 6-7|0 8-9|0.1 13-14|0.2 11-12|0.2.0 12-13|0.2.1 3-4|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.931
# ::node	0	understand-01	6-7
# ::node	0.0	i	3-4
# ::node	0.1	secret	8-9
# ::node	0.2	life	13-14
# ::node	0.2.0	sad-02	11-12
# ::node	0.2.1	little	12-13
# ::root	0	understand-01
# ::edge	life	mod	little	0.2	0.2.1	
# ::edge	sad-02	ARG1	life	0.2.0	0.2	
# ::edge	understand-01	ARG0	i	0	0.0	
# ::edge	understand-01	ARG1	secret	0	0.1	
# ::edge	understand-01	location	life	0	0.2	
(u / understand-01 
      :ARG0 (i / i) 
      :ARG1 (s / secret) 
      :location (l / life 
            :ARG1-of (s2 / sad-02) 
            :mod (l2 / little)))

# ::snt For a long time you had found your only entertainment in the quiet pleasure of looking at the sunset .
# ::tok For a long time you had found your only entertainment in the quiet pleasure of looking at the sunset .
# ::alignments 6-7|0.1.1 2-3|0.1.1.2 15-16|0 13-14|0.1 12-13|0.1.0 18-19|0.0 8-9|0.1.1.1.0 4-5|0.1.1.0 9-10|0.1.1.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:43.988
# ::node	0	look-01	15-16
# ::node	0.0	sunset	18-19
# ::node	0.1	pleasure	13-14
# ::node	0.1.0	quiet-04	12-13
# ::node	0.1.1	find-01	6-7
# ::node	0.1.1.0	you	4-5
# ::node	0.1.1.1	entertain-01	9-10
# ::node	0.1.1.1.0	only	8-9
# ::node	0.1.1.2	long-03	2-3
# ::root	0	look-01
# ::edge	entertain-01	mod	only	0.1.1.1	0.1.1.1.0	
# ::edge	find-01	ARG0	you	0.1.1	0.1.1.0	
# ::edge	find-01	ARG1	entertain-01	0.1.1	0.1.1.1	
# ::edge	find-01	location	pleasure	0.1.1	0.1	
# ::edge	long-03	ARG1	find-01	0.1.1.2	0.1.1	
# ::edge	look-01	ARG1	sunset	0	0.0	
# ::edge	pleasure	purpose	look-01	0.1	0	
# ::edge	quiet-04	ARG1	pleasure	0.1.0	0.1	
(l2 / look-01 
      :ARG1 (s / sunset) 
      :purpose-of (p / pleasure 
            :ARG1-of (q / quiet-04) 
            :location-of (f / find-01 
                  :ARG0 (y / you) 
                  :ARG1 (e / entertain-01 
                        :mod (o / only)) 
                  :ARG1-of (l / long-03))))

# ::snt I learned that new detail on the morning of the fourth day , when you said to me : " I am very fond of sunsets .
# ::tok I learned that new detail on the morning of the fourth day , when you said to me : " I am very fond of sunsets .
# ::alignments 1-2|0.2 15-16|0 25-26|0.1 22-23|0.2.1.0.0 14-15|0.0 7-8|0.2.2 11-12|0.2.3 4-5|0.2.1 2-3|0.2.1.0.1 3-4|0.2.1.0 0-1|0.2.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.338
# ::node	0	say-01	15-16
# ::node	0.0	you	14-15
# ::node	0.1	sunset	25-26
# ::node	0.2	learn-01	1-2
# ::node	0.2.0	i	0-1
# ::node	0.2.1	detail	4-5
# ::node	0.2.1.0	new-01	3-4
# ::node	0.2.1.0.0	very	22-23
# ::node	0.2.1.0.1	that	2-3
# ::node	0.2.2	morning	7-8
# ::node	0.2.3	day	11-12
# ::root	0	say-01
# ::edge	learn-01	ARG0	i	0.2	0.2.0	
# ::edge	learn-01	ARG1	detail	0.2	0.2.1	
# ::edge	learn-01	ARG2	morning	0.2	0.2.2	
# ::edge	learn-01	condition	say-01	0.2	0	
# ::edge	learn-01	manner	day	0.2	0.2.3	
# ::edge	new-01	ARG0	very	0.2.1.0	0.2.1.0.0	
# ::edge	new-01	ARG1	detail	0.2.1.0	0.2.1	
# ::edge	new-01	ARG2	that	0.2.1.0	0.2.1.0.1	
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	sunset	0	0.1	
(s / say-01 
      :ARG0 (y / you) 
      :ARG1 (s2 / sunset) 
      :condition-of (l / learn-01 
            :ARG0 (i / i) 
            :ARG1 (d / detail 
                  :ARG1-of (n / new-01 
                        :ARG0 (v / very) 
                        :ARG2 (t / that))) 
            :ARG2 (m / morning) 
            :manner (d2 / day)))

# ::snt Come , let us go look at a sunset now . "
# ::tok Come , let us go look at a sunset now . "
# ::alignments 0-1|0.1.1 4-5|0.1 5-6|0 9-10|0.1.0 8-9|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.361
# ::node	0	look-01	5-6
# ::node	0.0	sunset	8-9
# ::node	0.1	go-05	4-5
# ::node	0.1.0	now	9-10
# ::node	0.1.1	come-01	0-1
# ::root	0	look-01
# ::edge	come-01	ARG1	go-05	0.1.1	0.1	
# ::edge	go-05	ARG0	now	0.1	0.1.0	
# ::edge	go-05	ARG1	look-01	0.1	0	
# ::edge	look-01	ARG1	sunset	0	0.0	
(l / look-01 
      :ARG1 (s / sunset) 
      :ARG1-of (g / go-05 
            :ARG0 (n / now) 
            :ARG1-of (c / come-01)))

# ::snt " But we must wait , "
# ::tok " But we must wait , "
# ::alignments 1-2|0 4-5|0.0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.370
# ::node	0	contrast-01	1-2
# ::node	0.0	wait-01	4-5
# ::node	0.0.0	we	2-3
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	wait-01	0	0.0	
# ::edge	wait-01	ARG0	we	0.0	0.0.0	
(c / contrast-01 
      :ARG1 (w2 / wait-01 
            :ARG0 (w / we)))

# ::snt I said .
# ::tok I said .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.374
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
(s / say-01 
      :ARG0 (i / i))

# ::snt " Wait ?
# ::tok " Wait ?
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.376
# ::node	0	wait-01	1-2
# ::root	0	wait-01
(w / wait-01)

# ::snt For what ? "
# ::tok For what ? "
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.387
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt " For the sunset .
# ::tok " For the sunset .
# ::alignments 3-4|0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.401
# ::node	0	sunset	3-4
# ::root	0	sunset
(s / sunset)

# ::snt We must wait until it is time . "
# ::tok We must wait until it is time . "
# ::alignments 2-3|0 3-4|0.1 6-7|0.2 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.420
# ::node	0	wait-01	2-3
# ::node	0.0	we	0-1
# ::node	0.1	until	3-4
# ::node	0.2	time	6-7
# ::root	0	wait-01
# ::edge	wait-01	ARG0	we	0	0.0	
# ::edge	wait-01	ARG1	until	0	0.1	
# ::edge	wait-01	time	time	0	0.2	
(w2 / wait-01 
      :ARG0 (w / we) 
      :ARG1 (u / until) 
      :time (t / time))

# ::snt At first you seemed to be very much surprised .
# ::tok At first you seemed to be very much surprised .
# ::alignments 3-4|0 8-9|0.0.0 7-8|0.0.0.0 6-7|0.0.0.0.0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.441
# ::node	0	seem-01	3-4
# ::node	0.0	you	2-3
# ::node	0.0.0	surprise-01	8-9
# ::node	0.0.0.0	much	7-8
# ::node	0.0.0.0.0	very	6-7
# ::root	0	seem-01
# ::edge	much	degree	very	0.0.0.0	0.0.0.0.0	
# ::edge	seem-01	ARG0	you	0	0.0	
# ::edge	surprise-01	ARG1	you	0.0.0	0.0	
# ::edge	surprise-01	degree	much	0.0.0	0.0.0.0	
(s / seem-01 
      :ARG0 (y / you 
            :ARG1-of (s2 / surprise-01 
                  :degree (m / much 
                        :degree (v / very)))))

# ::snt And then you laughed to yourself .
# ::tok And then you laughed to yourself .
# ::alignments 0-1|0 3-4|0.0 1-2|0.0.1 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.453
# ::node	0	and	0-1
# ::node	0.0	laugh-01	3-4
# ::node	0.0.0	you	2-3
# ::node	0.0.1	then	1-2
# ::root	0	and
# ::edge	and	op1	laugh-01	0	0.0	
# ::edge	laugh-01	ARG0	you	0.0	0.0.0	
# ::edge	laugh-01	time	then	0.0	0.0.1	
(a / and 
      :op1 (l / laugh-01 
            :ARG0 (y / you) 
            :time (t / then)))

# ::snt You said to me : " I am always thinking that I am at home ! "
# ::tok You said to me : " I am always thinking that I am at home ! "
# ::alignments 1-2|0 6-7|0.1.0 9-10|0.1 8-9|0.1.2 14-15|0.1.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.578
# ::node	0	say-01	1-2
# ::node	0.0	you	0-1
# ::node	0.1	think-01	9-10
# ::node	0.1.0	i	6-7
# ::node	0.1.1	home	14-15
# ::node	0.1.2	always	8-9
# ::root	0	say-01
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	think-01	0	0.1	
# ::edge	think-01	ARG0	i	0.1	0.1.0	
# ::edge	think-01	ARG1	home	0.1	0.1.1	
# ::edge	think-01	time	always	0.1	0.1.2	
(s / say-01 
      :ARG0 (y / you) 
      :ARG1 (t / think-01 
            :ARG0 (i / i) 
            :ARG1 (h / home) 
            :time (a / always)))

# ::snt Just so .
# ::tok Just so .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.583
# ::node	0	so	1-2
# ::node	0.0	just	0-1
# ::root	0	so
(s / so 
      :mod-of (j / just))

# ::snt Everybody knows that when it is noon in the United States the sun is setting over France .
# ::tok Everybody knows that when it is noon in the United States the sun is setting over France .
# ::alignments 16-17|0.1.1+0.1.1.0+0.1.1.0.0 9-11|0.2+0.2.0+0.2.0.1+0.2.0.0 1-2|0 14-15|0.1 12-13|0.1.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:44.806
# ::node	0	know-01	1-2
# ::node	0.0	everybody	0-1
# ::node	0.1	set-11	14-15
# ::node	0.1.0	sun	12-13
# ::node	0.1.1	country	16-17
# ::node	0.1.1.0	name	16-17
# ::node	0.1.1.0.0	"France"	16-17
# ::node	0.2	country	9-11
# ::node	0.2.0	name	9-11
# ::node	0.2.0.0	"United"	9-11
# ::node	0.2.0.1	"States"	9-11
# ::root	0	know-01
# ::edge	country	name	name	0.1.1	0.1.1.0	
# ::edge	country	name	name	0.2	0.2.0	
# ::edge	know-01	ARG0	everybody	0	0.0	
# ::edge	know-01	ARG1	set-11	0	0.1	
# ::edge	know-01	ARG2	country	0	0.2	
# ::edge	name	op1	"France"	0.1.1.0	0.1.1.0.0	
# ::edge	name	op1	"United"	0.2.0	0.2.0.0	
# ::edge	name	op2	"States"	0.2.0	0.2.0.1	
# ::edge	set-11	ARG0	sun	0.1	0.1.0	
# ::edge	set-11	ARG1	country	0.1	0.1.1	
(k / know-01 
      :ARG0 (e / everybody) 
      :ARG1 (s / set-11 
            :ARG0 (s2 / sun) 
            :ARG1 (c2 / country 
                  :name (n3 / name 
                        :op1 "France"))) 
      :ARG2 (c / country 
            :name (n2 / name 
                  :op1 "United" 
                  :op2 "States")))

# ::snt If you could fly to France in one minute , you could go straight into the sunset , right from noon .
# ::tok If you could fly to France in one minute , you could go straight into the sunset , right from noon .
# ::alignments 5-6|0.0.0.0.2+0.0.0.0.2.0+0.0.0.0.2.0.0 2-3|0.0.0.0.1 11-12|0 3-4|0.0.0.0 7-8|0.0.0.0.0.0 8-9|0.0.0.0.0+0.0.0.0.0.1 1-2|0.0.0 12-13|0.0 13-14|0.0.1.0 16-17|0.0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.003
# ::node	0	possible-01	11-12
# ::node	0.0	go-02	12-13
# ::node	0.0.0	you	1-2
# ::node	0.0.0.0	fly-01	3-4
# ::node	0.0.0.0.0	temporal-quantity	8-9
# ::node	0.0.0.0.0.0	1	7-8
# ::node	0.0.0.0.0.1	minute	8-9
# ::node	0.0.0.0.1	possible-01	2-3
# ::node	0.0.0.0.2	country	5-6
# ::node	0.0.0.0.2.0	name	5-6
# ::node	0.0.0.0.2.0.0	"France"	5-6
# ::node	0.0.1	sunset	16-17
# ::node	0.0.1.0	straight-04	13-14
# ::root	0	possible-01
# ::edge	country	name	name	0.0.0.0.2	0.0.0.0.2.0	
# ::edge	fly-01	ARG0	you	0.0.0.0	0.0.0	
# ::edge	fly-01	ARG1	temporal-quantity	0.0.0.0	0.0.0.0.0	
# ::edge	fly-01	ARG2	country	0.0.0.0	0.0.0.0.2	
# ::edge	go-02	ARG0	you	0.0	0.0.0	
# ::edge	go-02	ARG1	sunset	0.0	0.0.1	
# ::edge	name	op1	"France"	0.0.0.0.2.0	0.0.0.0.2.0.0	
# ::edge	possible-01	ARG1	fly-01	0.0.0.0.1	0.0.0.0	
# ::edge	possible-01	ARG1	go-02	0	0.0	
# ::edge	straight-04	ARG0	sunset	0.0.1.0	0.0.1	
# ::edge	temporal-quantity	quant	1	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	temporal-quantity	unit	minute	0.0.0.0.0	0.0.0.0.0.1	
(p2 / possible-01 
      :ARG1 (g / go-02 
            :ARG0 (y / you 
                  :ARG0-of (f / fly-01 
                        :ARG1 (t / temporal-quantity 
                              :quant 1 
                              :unit (m / minute)) 
                        :ARG1-of (p / possible-01) 
                        :ARG2 (c / country 
                              :name (n / name 
                                    :op1 "France")))) 
            :ARG1 (s / sunset 
                  :ARG0-of (s2 / straight-04))))

# ::snt Unfortunately , France is too far away for that .
# ::tok Unfortunately , France is too far away for that .
# ::alignments 2-3|0+0.1+0.1.0 6-7|0.0.1 5-6|0.0 4-5|0.0.0 8-9|0.2 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.023
# ::node	0	country	2-3
# ::node	0.0	far	5-6
# ::node	0.0.0	too	4-5
# ::node	0.0.1	away	6-7
# ::node	0.1	name	2-3
# ::node	0.1.0	"France"	2-3
# ::node	0.2	that	8-9
# ::root	0	country
# ::edge	away	extent	far	0.0.1	0.0	
# ::edge	country	mod	far	0	0.0	
# ::edge	country	name	name	0	0.1	
# ::edge	far	degree	too	0.0	0.0.0	
# ::edge	name	op1	"France"	0.1	0.1.0	
# ::edge	that	poss	country	0.2	0	
(c / country 
      :mod (f2 / far 
            :degree (t / too) 
            :extent-of (a / away)) 
      :name (n / name 
            :op1 "France") 
      :poss-of (t2 / that))

# ::snt But on your tiny planet , my little prince , all you need do is move your chair a few steps .
# ::tok But on your tiny planet , my little prince , all you need do is move your chair a few steps .
# ::alignments 0-1|0 15-16|0.1 20-21|0.1.1 19-20|0.1.1.0 17-18|0.1.0 4-5|0.0 8-9|0.1.2 7-8|0.1.2.0 3-4|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.231
# ::node	0	contrast-01	0-1
# ::node	0.0	planet	4-5
# ::node	0.0.0	tiny	3-4
# ::node	0.1	move-01	15-16
# ::node	0.1.0	chair	17-18
# ::node	0.1.1	step	20-21
# ::node	0.1.1.0	few	19-20
# ::node	0.1.2	prince	8-9
# ::node	0.1.2.0	little	7-8
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	planet	0	0.0	
# ::edge	contrast-01	ARG2	move-01	0	0.1	
# ::edge	move-01	ARG0	chair	0.1	0.1.0	
# ::edge	move-01	ARG1	step	0.1	0.1.1	
# ::edge	move-01	ARG2	prince	0.1	0.1.2	
# ::edge	planet	mod	tiny	0.0	0.0.0	
# ::edge	prince	mod	little	0.1.2	0.1.2.0	
# ::edge	step	mod	few	0.1.1	0.1.1.0	
(c2 / contrast-01 
      :ARG1 (p / planet 
            :mod (t / tiny)) 
      :ARG2 (m / move-01 
            :ARG0 (c / chair) 
            :ARG1 (s / step 
                  :mod (f / few)) 
            :ARG2 (p2 / prince 
                  :mod (l / little))))

# ::snt You can see the day end and the twilight falling whenever you like ...
# ::tok You can see the day end and the twilight falling whenever you like ...
# ::alignments 1-2|0 2-3|0.0 12-13|0.0.1.0.0.0.0 6-7|0.0.1.1 9-10|0.0.1.0.0.0 8-9|0.0.1.0.0 5-6|0.0.1 4-5|0.0.1.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.277
# ::node	0	possible-01	1-2
# ::node	0.0	see-01	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	end-01	5-6
# ::node	0.0.1.0	day	4-5
# ::node	0.0.1.0.0	twilight	8-9
# ::node	0.0.1.0.0.0	fall-04	9-10
# ::node	0.0.1.0.0.0.0	like-02	12-13
# ::node	0.0.1.1	and	6-7
# ::root	0	possible-01
# ::edge	and	op1	end-01	0.0.1.1	0.0.1	
# ::edge	end-01	ARG1	day	0.0.1	0.0.1.0	
# ::edge	fall-04	ARG1	twilight	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	fall-04	time	like-02	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	possible-01	ARG1	see-01	0	0.0	
# ::edge	see-01	ARG0	you	0.0	0.0.0	
# ::edge	see-01	ARG1	end-01	0.0	0.0.1	
# ::edge	twilight	mod	day	0.0.1.0.0	0.0.1.0	
(p / possible-01 
      :ARG1 (s / see-01 
            :ARG0 (y / you) 
            :ARG1 (e / end-01 
                  :ARG1 (d / day 
                        :mod-of (t / twilight 
                              :ARG1-of (f / fall-04 
                                    :time (l / like-02)))) 
                  :op-of (a / and))))

# ::snt " One day , " you said to me , " I saw the sunset forty - four times ! "
# ::tok " One day , " you said to me , " I saw the sunset forty - four times ! "
# ::alignments 6-7|0 11-12|0.1.0 12-13|0.1 2-3|0.3 1-2|0.3.0 14-15|0.2 5-6|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.408
# ::node	0	say-01	6-7
# ::node	0.0	you	5-6
# ::node	0.1	see-01	12-13
# ::node	0.1.0	i	11-12
# ::node	0.2	sunset	14-15
# ::node	0.3	day	2-3
# ::node	0.3.0	one	1-2
# ::root	0	say-01
# ::edge	day	mod	one	0.3	0.3.0	
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	see-01	0	0.1	
# ::edge	say-01	ARG2	sunset	0	0.2	
# ::edge	say-01	time	day	0	0.3	
# ::edge	see-01	ARG0	i	0.1	0.1.0	
(s / say-01 
      :ARG0 (y / you) 
      :ARG1 (s2 / see-01 
            :ARG0 (i / i)) 
      :ARG2 (s3 / sunset) 
      :time (d / day 
            :mod (o / one)))

# ::snt And a little later you added : " You know -- one loves the sunset , when one is so sad ... "
# ::tok And a little later you added : " You know -- one loves the sunset , when one is so sad ... "
# ::alignments 0-1|0 5-6|0.0 3-4|0.0.3 2-3|0.0.2 12-13|0.0.1.0 20-21|0.0.1.0.0.0 19-20|0.0.1.0.0.0.0 14-15|0.0.1.0.0 11-12|0.0.1 4-5|0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.502
# ::node	0	and	0-1
# ::node	0.0	add-01	5-6
# ::node	0.0.0	you	4-5
# ::node	0.0.1	one	11-12
# ::node	0.0.1.0	love-01	12-13
# ::node	0.0.1.0.0	sunset	14-15
# ::node	0.0.1.0.0.0	sad-02	20-21
# ::node	0.0.1.0.0.0.0	so	19-20
# ::node	0.0.2	little	2-3
# ::node	0.0.3	late	3-4
# ::root	0	and
# ::edge	add-01	ARG0	you	0.0	0.0.0	
# ::edge	add-01	ARG1	one	0.0	0.0.1	
# ::edge	add-01	degree	little	0.0	0.0.2	
# ::edge	add-01	time	late	0.0	0.0.3	
# ::edge	and	op1	add-01	0	0.0	
# ::edge	love-01	ARG0	one	0.0.1.0	0.0.1	
# ::edge	love-01	ARG1	sunset	0.0.1.0	0.0.1.0.0	
# ::edge	sad-02	ARG1	sunset	0.0.1.0.0.0	0.0.1.0.0	
# ::edge	sad-02	degree	so	0.0.1.0.0.0	0.0.1.0.0.0.0	
(a / and 
      :op1 (a2 / add-01 
            :ARG0 (y / you) 
            :ARG1 (o / one 
                  :ARG0-of (l3 / love-01 
                        :ARG1 (s / sunset 
                              :ARG1-of (s2 / sad-02 
                                    :degree (s3 / so))))) 
            :degree (l2 / little) 
            :time (l / late)))

# ::snt " Were you so sad , then ? "
# ::tok " Were you so sad , then ? "
# ::alignments 4-5|0 3-4|0.0 6-7|0.2 2-3|0.1 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.512
# ::node	0	sad-02	4-5
# ::node	0.0	so	3-4
# ::node	0.1	you	2-3
# ::node	0.2	then	6-7
# ::root	0	sad-02
# ::edge	sad-02	ARG1	so	0	0.0	
# ::edge	sad-02	time	then	0	0.2	
# ::edge	you	location	sad-02	0.1	0	
(s / sad-02 
      :ARG1 (s2 / so) 
      :location-of (y / you) 
      :time (t / then))

# ::snt I asked , " on the day of the forty - four sunsets ? "
# ::tok I asked , " on the day of the forty - four sunsets ? "
# ::alignments 1-2|0 6-7|0.2 12-13|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.535
# ::node	0	ask-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	sunset	12-13
# ::node	0.2	day	6-7
# ::root	0	ask-01
# ::edge	ask-01	ARG0	i	0	0.0	
# ::edge	ask-01	ARG1	sunset	0	0.1	
# ::edge	ask-01	ARG2	day	0	0.2	
(a / ask-01 
      :ARG0 (i / i) 
      :ARG1 (s / sunset) 
      :ARG2 (d / day))

# ::snt But the little prince made no reply .
# ::tok But the little prince made no reply .
# ::alignments 5-6|0.0.1 0-1|0 6-7|0.0 3-4|0.0.0 2-3|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2017-01-11T20:20:45.547
# ::node	0	contrast-01	0-1
# ::node	0.0	reply-01	6-7
# ::node	0.0.0	prince	3-4
# ::node	0.0.0.0	little	2-3
# ::node	0.0.1	-	5-6
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	reply-01	0	0.0	
# ::edge	prince	mod	little	0.0.0	0.0.0.0	
# ::edge	reply-01	ARG0	prince	0.0	0.0.0	
# ::edge	reply-01	polarity	-	0.0	0.0.1	
(c / contrast-01 
      :ARG2 (r / reply-01 
            :ARG0 (p / prince 
                  :mod (l / little)) 
            :polarity (- / -)))

