Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Chapter 4 .

Spans:
Span 0-1:  Chapter => chapter

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  4 => 4
Oracle Span 0-1:  Chapter => chapter

Missing span: 4 => 4
Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	4	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 4 / 4)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false)),Map(0 -> chapter),Map(c -> chapter))),[Ljava.lang.String;@41e36e46,Annotation([Ljava.lang.String;@15c43bd9,[Ljava.lang.String;@3d74bf60,[Ljava.lang.String;@4f209819),Annotation([Ljava.lang.String;@15eb5ee5,[Ljava.lang.String;@2145b572,[Ledu.cmu.lti.nlp.amr.Dependency;@39529185),Annotation([Ljava.lang.String;@72f926e6,[Ljava.lang.String;@3daa422a,[Ljava.lang.String;@31c88ec8),Annotation([Ljava.lang.String;@1cbbffcd,[Ljava.lang.String;@27ce24aa,[Ledu.cmu.lti.nlp.amr.Entity;@481a996b))
AMR:


Decoded in 298,614 microseconds
Sentence: I had thus learned a second fact of great importance : this was that the planet the little prince came from was scarcely any larger than a house !

Spans:
Span 23-24:  any => any
Span 19-20:  came => come-01
Span 8-9:  great => great
Span 27-28:  house => house
Span 0-1:  I => i
Span 9-10:  importance => important
Span 24-25:  larger => large
Span 3-4:  learned => learn-01
Span 17-18:  little => little
Span 15-16:  planet => planet
Span 18-19:  prince => prince
Span 22-23:  scarcely => scarce
Span 5-6:  second => (temporal-quantity :unit second)
Span 11-12:  this => this

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 23-24:  any => any
Oracle Span 19-20:  came => come-01
Oracle Span 6-7:  fact => fact
Oracle Span 8-9:  great => great
Oracle Span 27-28:  house => house
Oracle Span 0-1:  I => i
Oracle Span 9-10:  importance => important
Oracle Span 24-25:  larger => large
Oracle Span 3-4:  learned => learn-01
Oracle Span 17-18:  little => little
Oracle Span 15-16:  planet => planet
Oracle Span 18-19:  prince => prince
Oracle Span 22-23:  scarcely => scarce

Extra span: this => this
Extra span: second => (temporal-quantity :unit second)
Missing span: fact => fact
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	had	_	VBD	VBD	_	4	aux	_	_
3	thus	_	RB	RB	_	4	advmod	_	_
4	learned	_	VBN	VBN	_	0	root	_	_
5	a	_	DT	DT	_	7	det	_	_
6	second	_	JJ	JJ	_	7	amod	_	_
7	fact	_	NN	NN	_	4	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	great	_	JJ	JJ	_	10	amod	_	_
10	importance	_	NN	NN	_	8	pobj	_	_
11	:	_	:	:	_	4	punct	_	_
12	this	_	DT	DT	_	13	nsubj	_	_
13	was	_	VBD	VBD	_	4	parataxis	_	_
14	that	_	IN	IN	_	25	mark	_	_
15	the	_	DT	DT	_	16	det	_	_
16	planet	_	NN	NN	_	25	nsubj	_	_
17	the	_	DT	DT	_	19	det	_	_
18	little	_	JJ	JJ	_	19	amod	_	_
19	prince	_	NN	NN	_	20	nsubj	_	_
20	came	_	VBD	VBD	_	16	rcmod	_	_
21	from	_	IN	IN	_	20	prep	_	_
22	was	_	VBD	VBD	_	25	cop	_	_
23	scarcely	_	RB	RB	_	25	advmod	_	_
24	any	_	RB	RB	_	25	advmod	_	_
25	larger	_	JJR	JJR	_	13	ccomp	_	_
26	than	_	IN	IN	_	25	prep	_	_
27	a	_	DT	DT	_	28	det	_	_
28	house	_	NN	NN	_	26	pobj	_	_
29	!	_	.	.	_	4	punct	_	_

Oracle:
(a / any, degree, s2 / scarce)
(c / come-01, ARG1, p2 / prince)
(c / come-01, ARG3, p / planet)
(f / fact, domain, l2 / large)
(f / fact, mod, i2 / important)
(i2 / important, degree, g / great)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, f / fact)
(l2 / large, compared-to, h / house)
(l2 / large, domain, p / planet)
(p2 / prince, mod, l3 / little)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),house,house,false), Span(24,25,List(1),larger,large,false), Span(23,24,List(2),any,any,false), Span(22,23,List(3),scarcely,scarce,false), Span(19,20,List(4),came,come-01,false), Span(18,19,List(5),prince,prince,false), Span(17,18,List(6),little,little,false), Span(15,16,List(7),planet,planet,false), Span(11,12,List(8),this,this,false), Span(9,10,List(9),importance,important,false), Span(8,9,List(10),great,great,false), Span(5,6,List(12, 11),second,(temporal-quantity :unit second),false), Span(3,4,List(13),learned,learn-01,false), Span(0,1,List(14),I,i,false)),Map(2 -> any, 5 -> prince, 12 -> second, 8 -> this, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> temporal-quantity, 14 -> i, 6 -> little, 0 -> house, 9 -> important, 3 -> scarce, 10 -> great, 13 -> learn-01),Map(h -> house, s2 -> second, t -> this, p2 -> planet, l3 -> learn-01, s -> scarce, p -> prince, g -> great, a -> any, i2 -> i, t2 -> temporal-quantity, l2 -> little, i -> important, c -> come-01, l -> large))),[Ljava.lang.String;@49ec71f8,Annotation([Ljava.lang.String;@1d2adfbe,[Ljava.lang.String;@36902638,[Ljava.lang.String;@223d2c72),Annotation([Ljava.lang.String;@8f4ea7c,[Ljava.lang.String;@436813f3,[Ledu.cmu.lti.nlp.amr.Dependency;@74fe5c40),Annotation([Ljava.lang.String;@3febb011,[Ljava.lang.String;@10e31a9a,[Ljava.lang.String;@131774fe),Annotation([Ljava.lang.String;@158d2680,[Ljava.lang.String;@77847718,[Ledu.cmu.lti.nlp.amr.Entity;@7f3b84b8))
AMR:
(a / any, mod, s / scarce)
(c / come-01, ARG0, l / large)
(c / come-01, ARG1, p / prince)
(c / come-01, ARG2, s / scarce)
(c / come-01, ARG4, p2 / planet)
(i / important, mod, g / great)
(i / important, quant, t2 / temporal-quantity)
(l / large, compared-to, h / house)
(l3 / learn-01, ARG0, i2 / i)
(l3 / learn-01, ARG1, i / important)
(l3 / learn-01, ARG2, t / this)
(p / prince, mod, l2 / little)
(p2 / planet, domain, t / this)
(t2 / temporal-quantity, unit, s2 / second)

Decoded in 1,250,133 microseconds
Sentence: But that did not really surprise me much .

Spans:
Span 0-1:  But => contrast-01
Span 7-8:  much => much
Span 4-5:  really => real-04

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 7-8:  much => much
Oracle Span 4-5:  really => real-04
Oracle Span 5-6:  surprise => surprise-01
Oracle Span 1-2:  that => that

Missing span: surprise => surprise-01
Missing span: that => that
Dependencies:
1	But	_	CC	CC	_	6	cc	_	_
2	that	_	DT	DT	_	6	nsubj	_	_
3	did	_	VBD	VBD	_	6	aux	_	_
4	not	_	RB	RB	_	6	neg	_	_
5	really	_	RB	RB	_	6	advmod	_	_
6	surprise	_	VB	VB	_	0	root	_	_
7	me	_	PRP	PRP	_	8	nsubj	_	_
8	much	_	JJ	JJ	_	6	xcomp	_	_
9	.	_	.	.	_	6	punct	_	_

Oracle:
(c / contrast-01, ARG2, s / surprise-01)
(r / real-04, ARG1, s / surprise-01)
(s / surprise-01, ARG0, t / that)
(s / surprise-01, degree, m / much)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),much,much,false), Span(4,5,List(1),really,real-04,false), Span(0,1,List(2),But,contrast-01,false)),Map(2 -> contrast-01, 1 -> real-04, 0 -> much),Map(m -> much, r -> real-04, c -> contrast-01))),[Ljava.lang.String;@1b7cc17c,Annotation([Ljava.lang.String;@59662a0b,[Ljava.lang.String;@77fbd92c,[Ljava.lang.String;@67c27493),Annotation([Ljava.lang.String;@1a482e36,[Ljava.lang.String;@72967906,[Ledu.cmu.lti.nlp.amr.Dependency;@5b8dfcc1),Annotation([Ljava.lang.String;@2f9f7dcf,[Ljava.lang.String;@747ddf94,[Ljava.lang.String;@35e2d654),Annotation([Ljava.lang.String;@1bd4fdd,[Ljava.lang.String;@55183b20,[Ledu.cmu.lti.nlp.amr.Entity;@4f83df68))
AMR:
(c / contrast-01, ARG1, m / much)
(r / real-04, ARG1, m / much)

Decoded in 29,455 microseconds
Sentence: I knew very well that in addition to the great planets -- such as the Earth , Jupiter , Mars , Venus -- to which we have given names , there are also hundreds of others , some of which are so small that one has a hard time seeing them through the telescope .

NER Entity: (country :name (name :op "Earth"))
NER Entity: (person :name (name :op "Mars"))
NER Entity: (person :name (name :op "Venus"))
NER Entity: (country :name (name :op "Earth"))
Spans:
Span 32-33:  also => also
Span 15-16:  Earth => (planet :name (name :op "Earth"))
Span 27-28:  given => give-01
Span 9-10:  great => great
Span 45-46:  has => have-03
Span 0-1:  I => i
Span 1-2:  knew => know-01
Span 35-36:  others => other
Span 10-11:  planets => planet
Span 42-43:  small => small
Span 41-42:  so => so
Span 37-38:  some => some
Span 12-13:  such => such
Span 30-31:  there => there
Span 51-52:  through => through
Span 48-49:  time => time
Span 2-3:  very => very
Span 25-26:  we => we
Span 3-4:  well => well

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 32-33:  also => include-91
Oracle Span 15-16:  Earth => (planet :name (name :op "Earth"))
Oracle Span 9-10:  great => great
Oracle Span 0-1:  I => i
Oracle Span 17-18:  Jupiter => (planet :name (name :op "Jupiter"))
Oracle Span 1-2:  knew => know-01
Oracle Span 19-20:  Mars => (planet :name (name :op "Mars"))
Oracle Span 28-29:  names => name-01
Oracle Span 35-36:  others => other
Oracle Span 10-11:  planets => planet
Oracle Span 49-50:  seeing => see-01
Oracle Span 42-43:  small => small
Oracle Span 41-42:  so => so
Oracle Span 53-54:  telescope => telescope
Oracle Span 21-22:  Venus => (planet :name (name :op "Venus"))
Oracle Span 2-3:  very => very
Oracle Span 25-26:  we => we
Oracle Span 3-4:  well => well

Extra span: through => through
Extra span: time => time
Extra span: has => have-03
Extra span: some => some
Incorrect span: also => also
Extra span: there => there
Extra span: given => give-01
Extra span: such => such
Missing span: Jupiter => (planet :name (name :op "Jupiter"))
Missing span: Mars => (planet :name (name :op "Mars"))
Missing span: Venus => (planet :name (name :op "Venus"))
Missing span: names => name-01
Missing span: also => include-91
Missing span: seeing => see-01
Missing span: telescope => telescope
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	knew	_	VBD	VBD	_	0	root	_	_
3	very	_	RB	RB	_	4	advmod	_	_
4	well	_	RB	RB	_	2	advmod	_	_
5	that	_	IN	IN	_	32	mark	_	_
6	in	_	IN	IN	_	32	prep	_	_
7	addition	_	NN	NN	_	6	pobj	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	great	_	JJ	JJ	_	11	amod	_	_
11	planets	_	NNS	NNS	_	8	pobj	_	_
12	--	_	:	:	_	20	punct	_	_
13	such	_	JJ	JJ	_	14	mwe	_	_
14	as	_	IN	IN	_	20	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	Earth	_	NN	NN	_	14	pobj	_	_
17	,	_	,	,	_	16	punct	_	_
18	Jupiter	_	NNP	NNP	_	16	appos	_	_
19	,	_	,	,	_	20	punct	_	_
20	Mars	_	NNP	NNP	_	11	dep	_	_
21	,	_	,	,	_	20	punct	_	_
22	Venus	_	NNP	NNP	_	20	appos	_	_
23	--	_	:	:	_	20	punct	_	_
24	to	_	TO	TO	_	28	prep	_	_
25	which	_	WDT	WDT	_	24	pobj	_	_
26	we	_	PRP	PRP	_	28	nsubj	_	_
27	have	_	VBP	VBP	_	28	aux	_	_
28	given	_	VBN	VBN	_	11	rcmod	_	_
29	names	_	NNS	NNS	_	28	dobj	_	_
30	,	_	,	,	_	32	punct	_	_
31	there	_	EX	EX	_	32	expl	_	_
32	are	_	VBP	VBP	_	2	ccomp	_	_
33	also	_	RB	RB	_	32	advmod	_	_
34	hundreds	_	NNS	NNS	_	32	nsubj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	others	_	NNS	NNS	_	35	pobj	_	_
37	,	_	,	,	_	36	punct	_	_
38	some	_	DT	DT	_	43	nsubj	_	_
39	of	_	IN	IN	_	38	prep	_	_
40	which	_	WDT	WDT	_	39	pobj	_	_
41	are	_	VBP	VBP	_	43	cop	_	_
42	so	_	RB	RB	_	43	advmod	_	_
43	small	_	JJ	JJ	_	36	rcmod	_	_
44	that	_	IN	IN	_	46	mark	_	_
45	one	_	PRP	PRP	_	46	nsubj	_	_
46	has	_	VBZ	VBZ	_	43	ccomp	_	_
47	a	_	DT	DT	_	49	det	_	_
48	hard	_	JJ	JJ	_	49	amod	_	_
49	time	_	NN	NN	_	46	dobj	_	_
50	seeing	_	VBG	VBG	_	49	vmod	_	_
51	them	_	PRP	PRP	_	50	dobj	_	_
52	through	_	IN	IN	_	50	prep	_	_
53	the	_	DT	DT	_	54	det	_	_
54	telescope	_	NN	NN	_	52	pobj	_	_
55	.	_	.	.	_	2	punct	_	_

Oracle:
(k / know-01, ARG0, i / i)
(k / know-01, mod, w / well)
(n / name, op, "Earth")
(n2 / name, op, "Jupiter")
(n3 / name, op, "Mars")
(n4 / name, op, "Venus")
(n5 / name-01, ARG0, w3 / we)
(n5 / name-01, ARG1, p / planet)
(p / planet, example, p2 / planet)
(p / planet, example, p3 / planet)
(p / planet, example, p4 / planet)
(p / planet, example, p5 / planet)
(p / planet, mod, g / great)
(p2 / planet, name, n / name)
(p3 / planet, name, n2 / name)
(p4 / planet, name, n3 / name)
(p5 / planet, name, n4 / name)
(s2 / small, degree, s3 / so)
(s4 / see-01, instrument, t / telescope)
(w / well, degree, v / very)

Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(0),through,through,false), Span(48,49,List(1),time,time,false), Span(45,46,List(2),has,have-03,false), Span(42,43,List(3),small,small,false), Span(41,42,List(4),so,so,false), Span(37,38,List(5),some,some,false), Span(35,36,List(6),others,other,false), Span(32,33,List(7),also,also,false), Span(30,31,List(8),there,there,false), Span(27,28,List(9),given,give-01,false), Span(25,26,List(10),we,we,false), Span(15,16,List(13, 12, 11),Earth,(planet :name (name :op "Earth")),false), Span(12,13,List(14),such,such,false), Span(10,11,List(15),planets,planet,false), Span(9,10,List(16),great,great,false), Span(3,4,List(17),well,well,false), Span(2,3,List(18),very,very,false), Span(1,2,List(19),knew,know-01,false), Span(0,1,List(20),I,i,false)),Map(2 -> have-03, 5 -> some, 12 -> name, 15 -> planet, 8 -> there, 18 -> very, 7 -> also, 17 -> well, 1 -> time, 4 -> so, 11 -> planet, 14 -> such, 20 -> i, 6 -> other, 0 -> through, 9 -> give-01, 16 -> great, 19 -> know-01, 3 -> small, 10 -> we, 13 -> "Earth"),Map(w -> we, n -> name, h -> have-03, s2 -> so, k -> know-01, t -> through, p2 -> planet, s -> small, v -> very, s4 -> such, g2 -> great, t3 -> there, g -> give-01, p -> planet, a -> also, t2 -> time, w2 -> well, i -> i, s3 -> some, o -> other))),[Ljava.lang.String;@3349e9bb,Annotation([Ljava.lang.String;@409bf450,[Ljava.lang.String;@38d8f54a,[Ljava.lang.String;@49e53c76),Annotation([Ljava.lang.String;@351d00c0,[Ljava.lang.String;@2a3b5b47,[Ledu.cmu.lti.nlp.amr.Dependency;@55b699ef),Annotation([Ljava.lang.String;@35d019a3,[Ljava.lang.String;@689604d9,[Ljava.lang.String;@18078bef),Annotation([Ljava.lang.String;@799f10e1,[Ljava.lang.String;@4c371370,[Ledu.cmu.lti.nlp.amr.Entity;@145f66e3))
AMR:
(g / give-01, ARG0, w / we)
(g / give-01, ARG1, p2 / planet)
(g / give-01, ARG2, t3 / there)
(g / give-01, accompanier, p / planet)
(g / give-01, condition, k / know-01)
(h / have-03, ARG0, s3 / some)
(h / have-03, ARG1, t2 / time)
(h / have-03, ARG2, s / small)
(h / have-03, condition, k / know-01)
(k / know-01, ARG0, i / i)
(k / know-01, ARG2, s4 / such)
(k / know-01, degree, w2 / well)
(n / name, op, "Earth")
(o / other, mod, s / small)
(p / planet, name, n / name)
(p2 / planet, mod, g2 / great)
(s / small, degree, s2 / so)
(t / through, op, g / give-01)
(t3 / there, op, a / also)
(w2 / well, degree, v / very)

Decoded in 1,313,955 microseconds
Sentence: When an astronomer discovers one of these he does not give it a name , but only a number .

Spans:
Span 15-16:  but => contrast-01
Span 10-11:  give => give-01
Span 7-8:  he => he
Span 11-12:  it => it
Span 18-19:  number => number
Span 16-17:  only => only

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 2-3:  astronomer => astronomer
Oracle Span 3-4:  discovers => discover-01
Oracle Span 10-11:  give => give-01
Oracle Span 13-14:  name => name-01
Oracle Span 18-19:  number => number
Oracle Span 5-6:  of => (thing :ARG1-of include-91)
Oracle Span 4-5:  one => 1
Oracle Span 16-17:  only => only

Extra span: but => contrast-01
Extra span: it => it
Extra span: he => he
Missing span: name => name-01
Missing span: discovers => discover-01
Missing span: one => 1
Missing span: of => (thing :ARG1-of include-91)
Missing span: astronomer => astronomer
Dependencies:
1	When	_	WRB	WRB	_	4	advmod	_	_
2	an	_	DT	DT	_	3	det	_	_
3	astronomer	_	NN	NN	_	4	nsubj	_	_
4	discovers	_	VBZ	VBZ	_	11	advcl	_	_
5	one	_	CD	CD	_	4	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	these	_	DT	DT	_	6	pobj	_	_
8	he	_	PRP	PRP	_	11	nsubj	_	_
9	does	_	VBZ	VBZ	_	11	aux	_	_
10	not	_	RB	RB	_	11	neg	_	_
11	give	_	VB	VB	_	0	root	_	_
12	it	_	PRP	PRP	_	11	iobj	_	_
13	a	_	DT	DT	_	14	det	_	_
14	name	_	NN	NN	_	11	dobj	_	_
15	,	_	,	,	_	14	punct	_	_
16	but	_	CC	CC	_	17	cc	_	_
17	only	_	RB	RB	_	14	cc	_	_
18	a	_	DT	DT	_	19	det	_	_
19	number	_	NN	NN	_	14	conj	_	_
20	.	_	.	.	_	11	punct	_	_

Oracle:
(d / discover-01, ARG0, a / astronomer)
(d / discover-01, ARG1, t / thing)
(g / give-01, ARG0, a / astronomer)
(g / give-01, ARG1, n2 / number)
(g / give-01, ARG2, t / thing)
(g / give-01, mod, o2 / only)
(g / give-01, time, d / discover-01)
(i / include-91, ARG1, t / thing)
(n3 / name-01, ARG0, a / astronomer)
(n3 / name-01, ARG1, t / thing)
(t / thing, quant, 1 / 1)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),number,number,false), Span(16,17,List(1),only,only,false), Span(15,16,List(2),but,contrast-01,false), Span(11,12,List(3),it,it,false), Span(10,11,List(4),give,give-01,false), Span(7,8,List(5),he,he,false)),Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 0 -> number, 3 -> it),Map(n -> number, h -> he, g -> give-01, i -> it, c -> contrast-01, o -> only))),[Ljava.lang.String;@3023df74,Annotation([Ljava.lang.String;@313ac989,[Ljava.lang.String;@4562e04d,[Ljava.lang.String;@2a65fe7c),Annotation([Ljava.lang.String;@4135c3b,[Ljava.lang.String;@6302bbb1,[Ledu.cmu.lti.nlp.amr.Dependency;@31304f14),Annotation([Ljava.lang.String;@34a3d150,[Ljava.lang.String;@2a4fb17b,[Ljava.lang.String;@5c6648b0),Annotation([Ljava.lang.String;@6f1de4c7,[Ljava.lang.String;@459e9125,[Ledu.cmu.lti.nlp.amr.Entity;@128d2484))
AMR:
(c / contrast-01, ARG0, o / only)
(c / contrast-01, ARG1, n / number)
(g / give-01, ARG0, h / he)
(g / give-01, ARG1, o / only)
(g / give-01, ARG2, i / it)

Decoded in 64,213 microseconds
Sentence: He might call it , for example , " Asteroid 325 . "

NER Entity: (thing :name (name :op "Asteroid" :op "325"))
Spans:
Span 10-11:  325 => (asteroid :name (name :op 325))
Span 2-3:  call => call-on-05
Span 0-1:  He => he
Span 3-4:  it => it

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 9-11:  Asteroid 325 => (name :op 325 :op "Asteroid")
Oracle Span 2-3:  call => call-01
Oracle Span 0-1:  He => he
Oracle Span 3-4:  it => it

Extra span: 325 => (asteroid :name (name :op 325))
Incorrect span: call => call-on-05
Missing span: Asteroid 325 => (name :op 325 :op "Asteroid")
Missing span: call => call-01
Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	might	_	MD	MD	_	3	aux	_	_
3	call	_	VB	VB	_	0	root	_	_
4	it	_	PRP	PRP	_	3	dobj	_	_
5	,	_	,	,	_	3	punct	_	_
6	for	_	IN	IN	_	3	prep	_	_
7	example	_	NN	NN	_	6	pobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	"	_	''	''	_	7	punct	_	_
10	Asteroid	_	NNP	NNP	_	11	nn	_	_
11	325	_	NNP	NNP	_	7	dep	_	_
12	.	_	.	.	_	3	punct	_	_
13	"	_	''	''	_	3	punct	_	_

Oracle:
(c / call-01, ARG0, h / he)
(c / call-01, ARG1, i / it)
(c / call-01, ARG2, n2 / name)
(n2 / name, op, "Asteroid")
(n2 / name, op, 325)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),325,(asteroid :name (name :op 325)),false), Span(3,4,List(3),it,it,false), Span(2,3,List(4),call,call-on-05,false), Span(0,1,List(5),He,he,false)),Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-on-05, 0 -> asteroid, 3 -> it),Map(n -> name, h -> he, a -> asteroid, i -> it, c -> call-on-05, 3 -> 325))),[Ljava.lang.String;@7cc0cdad,Annotation([Ljava.lang.String;@7c7b252e,[Ljava.lang.String;@4d5d943d,[Ljava.lang.String;@368f2016),Annotation([Ljava.lang.String;@4c583ecf,[Ljava.lang.String;@692f203f,[Ledu.cmu.lti.nlp.amr.Dependency;@48f2bd5b),Annotation([Ljava.lang.String;@7b2bbc3,[Ljava.lang.String;@a1153bc,[Ljava.lang.String;@1aafa419),Annotation([Ljava.lang.String;@47eaca72,[Ljava.lang.String;@55141def,[Ledu.cmu.lti.nlp.amr.Entity;@55182842))
AMR:
(a / asteroid, name, n / name)
(c / call-on-05, ARG0, h / he)
(c / call-on-05, ARG1, i / it)
(c / call-on-05, ARG2, a / asteroid)
(n / name, op, 3 / 325)

Decoded in 142,429 microseconds
Sentence: I have serious reason to believe that the planet from which the little prince came is the asteroid known as B-612 .

NER Entity: (organization :name (name :op "B" :op "-" :op "612"))
Spans:
Span 5-6:  believe => believe-01
Span 14-15:  came => come-01
Span 0-1:  I => i
Span 18-19:  known => know-01
Span 12-13:  little => little
Span 8-9:  planet => planet
Span 13-14:  prince => prince
Span 3-4:  reason => reason-01
Span 2-3:  serious => serious-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 17-18:  asteroid => asteroid
Oracle Span 20-21:  B => (name :op "B-612")
Oracle Span 5-6:  believe => believe-01
Oracle Span 14-15:  came => come-01
Oracle Span 0-1:  I => i
Oracle Span 12-13:  little => little
Oracle Span 8-9:  planet => planet
Oracle Span 13-14:  prince => prince
Oracle Span 3-4:  reason => reason
Oracle Span 2-3:  serious => serious-02

Extra span: known => know-01
Incorrect span: reason => reason-01
Incorrect span: serious => serious-01
Missing span: B => (name :op "B-612")
Missing span: reason => reason
Missing span: serious => serious-02
Missing span: asteroid => asteroid
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	have	_	VBP	VBP	_	0	root	_	_
3	serious	_	JJ	JJ	_	4	amod	_	_
4	reason	_	NN	NN	_	2	dobj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	believe	_	VB	VB	_	4	vmod	_	_
7	that	_	IN	IN	_	18	mark	_	_
8	the	_	DT	DT	_	9	det	_	_
9	planet	_	NN	NN	_	18	nsubj	_	_
10	from	_	IN	IN	_	15	prep	_	_
11	which	_	WDT	WDT	_	10	pobj	_	_
12	the	_	DT	DT	_	14	det	_	_
13	little	_	JJ	JJ	_	14	amod	_	_
14	prince	_	NN	NN	_	15	nsubj	_	_
15	came	_	VBD	VBD	_	9	rcmod	_	_
16	is	_	VBZ	VBZ	_	18	cop	_	_
17	the	_	DT	DT	_	18	det	_	_
18	asteroid	_	NN	NN	_	6	ccomp	_	_
19	known	_	VBN	VBN	_	18	vmod	_	_
20	as	_	IN	IN	_	19	prep	_	_
21	B-612	_	NN	NN	_	20	pobj	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(a / asteroid, domain, p / planet)
(a / asteroid, name, n4 / name)
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, c2 / come-01)
(c2 / come-01, ARG1, p2 / prince)
(c2 / come-01, ARG3, a / asteroid)
(n4 / name, op, "B-612")
(p2 / prince, mod, l / little)
(s / serious-02, ARG1, r / reason)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),known,know-01,false), Span(14,15,List(1),came,come-01,false), Span(13,14,List(2),prince,prince,false), Span(12,13,List(3),little,little,false), Span(8,9,List(4),planet,planet,false), Span(5,6,List(5),believe,believe-01,false), Span(3,4,List(6),reason,reason-01,false), Span(2,3,List(7),serious,serious-01,false), Span(0,1,List(8),I,i,false)),Map(2 -> prince, 5 -> believe-01, 8 -> i, 7 -> serious-01, 1 -> come-01, 4 -> planet, 6 -> reason-01, 0 -> know-01, 3 -> little),Map(b -> believe-01, k -> know-01, p2 -> planet, s -> serious-01, p -> prince, i -> i, r -> reason-01, l -> little, c -> come-01))),[Ljava.lang.String;@3270d194,Annotation([Ljava.lang.String;@235834f2,[Ljava.lang.String;@5656be13,[Ljava.lang.String;@4218d6a3),Annotation([Ljava.lang.String;@76505305,[Ljava.lang.String;@14cd1699,[Ledu.cmu.lti.nlp.amr.Dependency;@77888435),Annotation([Ljava.lang.String;@73a1e9a9,[Ljava.lang.String;@71d44a3,[Ljava.lang.String;@7b98f307),Annotation([Ljava.lang.String;@4802796d,[Ljava.lang.String;@34123d65,[Ledu.cmu.lti.nlp.amr.Entity;@59474f18))
AMR:
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, p2 / planet)
(c / come-01, ARG0, p2 / planet)
(c / come-01, ARG1, p / prince)
(k / know-01, ARG0, p2 / planet)
(p / prince, mod, l / little)
(r / reason-01, ARG1, b / believe-01)
(s / serious-01, ARG1, r / reason-01)

Decoded in 140,040 microseconds
Sentence: This asteroid has only once been seen through the telescope .

Spans:
Span 2-3:  has => have-03
Span 4-5:  once => once
Span 3-4:  only => only
Span 6-7:  seen => see-01
Span 0-1:  This => this
Span 7-8:  through => through

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 1-2:  asteroid => asteroid
Oracle Span 2-3:  has => have-frequency-91
Oracle Span 3-4:  only => only
Oracle Span 6-7:  seen => see-01
Oracle Span 9-10:  telescope => telescope
Oracle Span 0-1:  This => this

Extra span: through => through
Extra span: once => once
Incorrect span: has => have-03
Missing span: telescope => telescope
Missing span: asteroid => asteroid
Missing span: has => have-frequency-91
Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	asteroid	_	NN	NN	_	7	nsubjpass	_	_
3	has	_	VBZ	VBZ	_	7	aux	_	_
4	only	_	RB	RB	_	5	advmod	_	_
5	once	_	RB	RB	_	7	advmod	_	_
6	been	_	VBN	VBN	_	7	auxpass	_	_
7	seen	_	VBN	VBN	_	0	root	_	_
8	through	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	telescope	_	NN	NN	_	8	pobj	_	_
11	.	_	.	.	_	7	punct	_	_

Oracle:
(a / asteroid, mod, t / this)
(h / have-frequency-91, ARG1, s / see-01)
(h / have-frequency-91, mod, o / only)
(s / see-01, ARG1, a / asteroid)
(s / see-01, instrument, t2 / telescope)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),through,through,false), Span(6,7,List(1),seen,see-01,false), Span(4,5,List(2),once,once,false), Span(3,4,List(3),only,only,false), Span(2,3,List(4),has,have-03,false), Span(0,1,List(5),This,this,false)),Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only),Map(h -> have-03, t -> through, s -> see-01, o2 -> only, t2 -> this, o -> once))),[Ljava.lang.String;@65fb9ffc,Annotation([Ljava.lang.String;@3e694b3f,[Ljava.lang.String;@1bb5a082,[Ljava.lang.String;@78691363),Annotation([Ljava.lang.String;@41d477ed,[Ljava.lang.String;@3590fc5b,[Ledu.cmu.lti.nlp.amr.Dependency;@397fbdb),Annotation([Ljava.lang.String;@33d512c1,[Ljava.lang.String;@515c6049,[Ljava.lang.String;@639c2c1d),Annotation([Ljava.lang.String;@5fe94a96,[Ljava.lang.String;@443118b0,[Ledu.cmu.lti.nlp.amr.Entity;@765d7657))
AMR:
(h / have-03, ARG0, t2 / this)
(h / have-03, ARG1, s / see-01)
(o / once, degree, o2 / only)
(s / see-01, ARG1, o2 / only)
(s / see-01, ARG2, t / through)

Decoded in 104,320 microseconds
Sentence: That was by a Turkish astronomer , in 1909 .

NER Entity: (thing :name (name :op "Turkish"))
Spans:
Span 8-9:  1909 => (date-entity :year 1909)
Span 0-1:  That => that

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  1909 => (date-entity :year 1909)
Oracle Span 5-6:  astronomer => astronomer
Oracle Span 4-5:  Turkish => (country :name (name :op "Turkey"))

Extra span: That => that
Missing span: Turkish => (country :name (name :op "Turkey"))
Missing span: astronomer => astronomer
Dependencies:
1	That	_	DT	DT	_	2	nsubj	_	_
2	was	_	VBD	VBD	_	0	root	_	_
3	by	_	IN	IN	_	2	prep	_	_
4	a	_	DT	DT	_	6	det	_	_
5	Turkish	_	JJ	JJ	_	6	amod	_	_
6	astronomer	_	NN	NN	_	3	pobj	_	_
7	,	_	,	,	_	2	punct	_	_
8	in	_	IN	IN	_	2	prep	_	_
9	1909	_	CD	CD	_	8	pobj	_	_
10	.	_	.	.	_	2	punct	_	_

Oracle:
(a / astronomer, mod, c / country)
(c / country, name, n / name)
(d / date-entity, year, 1909)
(n / name, op, "Turkey")

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(1, 0),1909,(date-entity :year 1909),false), Span(0,1,List(2),That,that,false)),Map(2 -> that, 1 -> 1909, 0 -> date-entity),Map(t -> that, d -> date-entity, 1 -> 1909))),[Ljava.lang.String;@2d3379b4,Annotation([Ljava.lang.String;@30c15d8b,[Ljava.lang.String;@5e0e82ae,[Ljava.lang.String;@6771beb3),Annotation([Ljava.lang.String;@51399530,[Ljava.lang.String;@6b2ea799,[Ledu.cmu.lti.nlp.amr.Dependency;@411f53a0),Annotation([Ljava.lang.String;@2b71e916,[Ljava.lang.String;@36fc695d,[Ljava.lang.String;@28701274),Annotation([Ljava.lang.String;@13c9d689,[Ljava.lang.String;@3754a4bf,[Ledu.cmu.lti.nlp.amr.Entity;@62379589))
AMR:
(d / date-entity, year, 1 / 1909)
(t / that, op, d / date-entity)

Decoded in 31,540 microseconds
Sentence: On making his discovery , the astronomer had presented it to the International Astronomical Congress , in a great demonstration .

NER Entity: (organization :name (name :op "International" :op "Astronomical" :op "Congress"))
Spans:
Span 3-4:  discovery => discover-01
Span 18-19:  great => great
Span 9-10:  it => it
Span 1-2:  making => make-02

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 6-7:  astronomer => astronomer
Oracle Span 19-20:  demonstration => demonstrate-01
Oracle Span 3-4:  discovery => discover-01
Oracle Span 18-19:  great => great
Oracle Span 12-15:  International Astronomical Congress => (organization :name (name :op "Congress" :op "Astronomical" :op "International"))
Oracle Span 9-10:  it => it
Oracle Span 8-9:  presented => present-01

Extra span: making => make-02
Missing span: International Astronomical Congress => (organization :name (name :op "Congress" :op "Astronomical" :op "International"))
Missing span: presented => present-01
Missing span: astronomer => astronomer
Missing span: demonstration => demonstrate-01
Dependencies:
1	On	_	IN	IN	_	9	prep	_	_
2	making	_	VBG	VBG	_	1	pcomp	_	_
3	his	_	PRP$	PRP$	_	4	poss	_	_
4	discovery	_	NN	NN	_	2	dobj	_	_
5	,	_	,	,	_	9	punct	_	_
6	the	_	DT	DT	_	7	det	_	_
7	astronomer	_	NN	NN	_	9	nsubj	_	_
8	had	_	VBD	VBD	_	9	aux	_	_
9	presented	_	VBN	VBN	_	0	root	_	_
10	it	_	PRP	PRP	_	9	dobj	_	_
11	to	_	TO	TO	_	9	prep	_	_
12	the	_	DT	DT	_	15	det	_	_
13	International	_	NNP	NNP	_	15	nn	_	_
14	Astronomical	_	NNP	NNP	_	15	nn	_	_
15	Congress	_	NNP	NNP	_	11	pobj	_	_
16	,	_	,	,	_	9	punct	_	_
17	in	_	IN	IN	_	9	prep	_	_
18	a	_	DT	DT	_	20	det	_	_
19	great	_	JJ	JJ	_	20	amod	_	_
20	demonstration	_	NN	NN	_	17	pobj	_	_
21	.	_	.	.	_	9	punct	_	_

Oracle:
(d2 / demonstrate-01, ARG0, a / astronomer)
(d2 / demonstrate-01, mod, g / great)
(d3 / discover-01, ARG0, a / astronomer)
(n / name, op, "Astronomical")
(n / name, op, "Congress")
(n / name, op, "International")
(o / organization, name, n / name)
(p / present-01, ARG0, a / astronomer)
(p / present-01, ARG1, i / it)
(p / present-01, ARG2, o / organization)
(p / present-01, manner, d2 / demonstrate-01)
(p / present-01, time, d3 / discover-01)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),great,great,false), Span(9,10,List(1),it,it,false), Span(3,4,List(2),discovery,discover-01,false), Span(1,2,List(3),making,make-02,false)),Map(2 -> discover-01, 1 -> it, 0 -> great, 3 -> make-02),Map(m -> make-02, d -> discover-01, g -> great, i -> it))),[Ljava.lang.String;@4afcd809,Annotation([Ljava.lang.String;@175c2241,[Ljava.lang.String;@5bf0d49,[Ljava.lang.String;@5b7a5baa),Annotation([Ljava.lang.String;@776aec5c,[Ljava.lang.String;@1d296da,[Ledu.cmu.lti.nlp.amr.Dependency;@7c7a06ec),Annotation([Ljava.lang.String;@75d4a5c2,[Ljava.lang.String;@557caf28,[Ljava.lang.String;@408d971b),Annotation([Ljava.lang.String;@6c6cb480,[Ljava.lang.String;@3c46e67a,[Ledu.cmu.lti.nlp.amr.Entity;@c730b35))
AMR:
(d / discover-01, ARG0, i / it)
(d / discover-01, ARG1, g / great)
(m / make-02, ARG1, d / discover-01)

Decoded in 50,987 microseconds
Sentence: But he was in Turkish costume , and so nobody would believe what he said .

NER Entity: (thing :name (name :op "Turkish"))
Spans:
Span 7-8:  and => and
Span 11-12:  believe => believe-01
Span 0-1:  But => contrast-01
Span 13-14:  he => he
Span 1-2:  he => he
Span 9-10:  nobody => nobody
Span 14-15:  said => say-01
Span 8-9:  so => so

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 11-12:  believe => believe-01
Oracle Span 0-1:  But => contrast-01
Oracle Span 5-6:  costume => costume-01
Oracle Span 1-2:  he => he
Oracle Span 14-15:  said => (thing :ARG1-of say-01)
Oracle Span 4-5:  Turkish => (country :name (name :op "Turkey"))

Incorrect span: said => say-01
Extra span: he => he
Extra span: nobody => nobody
Extra span: so => so
Extra span: and => and
Missing span: Turkish => (country :name (name :op "Turkey"))
Missing span: costume => costume-01
Missing span: said => (thing :ARG1-of say-01)
Dependencies:
1	But	_	CC	CC	_	3	cc	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	was	_	VBD	VBD	_	0	root	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Turkish	_	JJ	JJ	_	6	amod	_	_
6	costume	_	NN	NN	_	4	pobj	_	_
7	,	_	,	,	_	3	punct	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	so	_	IN	IN	_	3	conj	_	_
10	nobody	_	NN	NN	_	12	nsubj	_	_
11	would	_	MD	MD	_	12	aux	_	_
12	believe	_	VB	VB	_	3	ccomp	_	_
13	what	_	WP	WP	_	15	dobj	_	_
14	he	_	PRP	PRP	_	15	nsubj	_	_
15	said	_	VBD	VBD	_	12	ccomp	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(b2 / believe-01, ARG1, t / thing)
(c / costume-01, ARG1, h / he)
(c / costume-01, manner, c2 / country)
(c2 / country, name, n / name)
(c4 / contrast-01, ARG2, c / costume-01)
(n / name, op, "Turkey")
(s2 / say-01, ARG0, h / he)
(s2 / say-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),said,say-01,false), Span(13,14,List(1),he,he,false), Span(11,12,List(2),believe,believe-01,false), Span(9,10,List(3),nobody,nobody,false), Span(8,9,List(4),so,so,false), Span(7,8,List(5),and,and,false), Span(1,2,List(6),he,he,false), Span(0,1,List(7),But,contrast-01,false)),Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody),Map(n -> nobody, h -> he, h2 -> he, s2 -> so, b -> believe-01, s -> say-01, a -> and, c -> contrast-01))),[Ljava.lang.String;@206a70ef,Annotation([Ljava.lang.String;@292b08d6,[Ljava.lang.String;@22555ebf,[Ljava.lang.String;@36ebc363),Annotation([Ljava.lang.String;@45752059,[Ljava.lang.String;@34e9fd99,[Ledu.cmu.lti.nlp.amr.Dependency;@3c41ed1d),Annotation([Ljava.lang.String;@54d9d12d,[Ljava.lang.String;@38425407,[Ljava.lang.String;@43bc63a3),Annotation([Ljava.lang.String;@702657cc,[Ljava.lang.String;@6a6cb05c,[Ledu.cmu.lti.nlp.amr.Entity;@40a4337a))
AMR:
(a / and, op, s / say-01)
(b / believe-01, ARG0, h2 / he)
(b / believe-01, ARG1, n / nobody)
(c / contrast-01, ARG1, s2 / so)
(c / contrast-01, ARG2, a / and)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, b / believe-01)

Decoded in 245,664 microseconds
Sentence: Grown - ups are like that ...

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Grown => grown-up
Oracle Span 5-6:  that => that

Incorrect span:  => amr-empty
Missing span: that => that
Missing span: Grown => grown-up
Dependencies:
1	Grown	_	NNP	NNP	_	3	nn	_	_
2	-	_	NNP	NNP	_	3	nn	_	_
3	ups	_	NNS	NNS	_	4	nsubj	_	_
4	are	_	VBP	VBP	_	0	root	_	_
5	like	_	IN	IN	_	4	prep	_	_
6	that	_	DT	DT	_	5	pobj	_	_
7	...	_	:	:	_	4	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@6025e1b6,Annotation([Ljava.lang.String;@22ff4249,[Ljava.lang.String;@2d1ef81a,[Ljava.lang.String;@4c402120),Annotation([Ljava.lang.String;@327514f,[Ljava.lang.String;@5b12b668,[Ledu.cmu.lti.nlp.amr.Dependency;@1165b38),Annotation([Ljava.lang.String;@4c12331b,[Ljava.lang.String;@7586beff,[Ljava.lang.String;@3b69e7d1),Annotation([Ljava.lang.String;@815b41f,[Ljava.lang.String;@5542c4ed,[Ledu.cmu.lti.nlp.amr.Entity;@1573f9fc))
AMR:


Decoded in 16,356 microseconds
Sentence: Fortunately , however , for the reputation of Asteroid B-612 , a Turkish dictator made a law that his subjects , under pain of death , should change to European costume .

NER Entity: (person :name (name :op "Asteroid" :op "B" :op "-" :op "612"))
NER Entity: (thing :name (name :op "Turkish"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (thing :name (name :op "European"))
Spans:
Span 29-30:  change => change-01
Span 26-27:  death => die-01
Span 6-7:  reputation => reputation
Span 28-29:  should => recommend-01
Span 21-22:  subjects => subject
Span 23-24:  under => under

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 8-10:  Asteroid B => (planet :name (name :op "B-612" :op "Asteroid"))
Oracle Span 29-30:  change => change-01
Oracle Span 32-33:  costume => costume
Oracle Span 26-27:  death => die-01
Oracle Span 15-16:  dictator => (have-org-role-91 :ARG2 dictator)
Oracle Span 31-32:  European => (continent :name (name :op "Europe"))
Oracle Span 0-1:  Fortunately => fortunate-01
Oracle Span 18-19:  law => law
Oracle Span 16-17:  made => make-01
Oracle Span 6-7:  reputation => reputation
Oracle Span 21-22:  subjects => subject
Oracle Span 14-15:  Turkish => (country :name (name :op "Turkey"))

Extra span: should => recommend-01
Extra span: under => under
Missing span: Asteroid B => (planet :name (name :op "B-612" :op "Asteroid"))
Missing span: Turkish => (country :name (name :op "Turkey"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: made => make-01
Missing span: law => law
Missing span: costume => costume
Missing span: dictator => (have-org-role-91 :ARG2 dictator)
Missing span: Fortunately => fortunate-01
Dependencies:
1	Fortunately	_	RB	RB	_	15	advmod	_	_
2	,	_	,	,	_	15	punct	_	_
3	however	_	RB	RB	_	15	advmod	_	_
4	,	_	,	,	_	15	punct	_	_
5	for	_	IN	IN	_	15	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	reputation	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	Asteroid	_	NNP	NNP	_	10	nn	_	_
10	B-612	_	NNP	NNP	_	8	pobj	_	_
11	,	_	,	,	_	15	punct	_	_
12	a	_	DT	DT	_	14	det	_	_
13	Turkish	_	JJ	JJ	_	14	amod	_	_
14	dictator	_	NN	NN	_	15	nsubj	_	_
15	made	_	VBD	VBD	_	0	root	_	_
16	a	_	DT	DT	_	17	det	_	_
17	law	_	NN	NN	_	15	dobj	_	_
18	that	_	IN	IN	_	28	mark	_	_
19	his	_	PRP$	PRP$	_	20	poss	_	_
20	subjects	_	NNS	NNS	_	28	nsubj	_	_
21	,	_	,	,	_	28	punct	_	_
22	under	_	IN	IN	_	28	prep	_	_
23	pain	_	NN	NN	_	22	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	death	_	NN	NN	_	24	pobj	_	_
26	,	_	,	,	_	28	punct	_	_
27	should	_	MD	MD	_	28	aux	_	_
28	change	_	VB	VB	_	15	ccomp	_	_
29	to	_	TO	TO	_	28	prep	_	_
30	European	_	JJ	JJ	_	31	amod	_	_
31	costume	_	NN	NN	_	29	pobj	_	_
32	.	_	.	.	_	15	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / change-01, ARG0, s / subject)
(c2 / change-01, ARG3, c3 / costume)
(c3 / costume, mod, c4 / continent)
(c4 / continent, name, n2 / name)
(d2 / die-01, ARG1, s / subject)
(f / fortunate-01, ARG1, r / reputation)
(f / fortunate-01, ARG2, m / make-01)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, d / dictator)
(l / law, topic, c2 / change-01)
(m / make-01, ARG1, l / law)
(n / name, op, "Turkey")
(n2 / name, op, "Europe")
(n3 / name, op, "Asteroid")
(n3 / name, op, "B-612")
(p2 / planet, name, n3 / name)
(r / reputation, poss, p2 / planet)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),change,change-01,false), Span(28,29,List(1),should,recommend-01,false), Span(26,27,List(2),death,die-01,false), Span(23,24,List(3),under,under,false), Span(21,22,List(4),subjects,subject,false), Span(6,7,List(5),reputation,reputation,false)),Map(2 -> die-01, 5 -> reputation, 1 -> recommend-01, 4 -> subject, 0 -> change-01, 3 -> under),Map(s -> subject, d -> die-01, r2 -> reputation, r -> recommend-01, u -> under, c -> change-01))),[Ljava.lang.String;@6150c3ec,Annotation([Ljava.lang.String;@44c03695,[Ljava.lang.String;@7e6f74c,[Ljava.lang.String;@dd05255),Annotation([Ljava.lang.String;@6a78afa0,[Ljava.lang.String;@2f4948e4,[Ledu.cmu.lti.nlp.amr.Dependency;@1f2586d6),Annotation([Ljava.lang.String;@10683d9d,[Ljava.lang.String;@3fc2959f,[Ljava.lang.String;@5aa9e4eb),Annotation([Ljava.lang.String;@6989da5e,[Ljava.lang.String;@385c9627,[Ledu.cmu.lti.nlp.amr.Entity;@139982de))
AMR:
(c / change-01, ARG1, s / subject)
(c / change-01, time, u / under)
(r / recommend-01, ARG0, r2 / reputation)
(r / recommend-01, ARG1, c / change-01)
(u / under, op, d / die-01)

Decoded in 242,275 microseconds
Sentence: So in 1920 the astronomer gave his demonstration all over again , dressed with impressive style and elegance .

Spans:
Span 2-3:  1920 => (date-entity :year 1920)
Span 10-11:  again => again
Span 8-9:  all => all
Span 16-17:  and => and
Span 12-13:  dressed => dress-01
Span 5-6:  gave => give-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 2-3:  1920 => (date-entity :year 1920)
Oracle Span 10-11:  again => again
Oracle Span 16-17:  and => and
Oracle Span 4-5:  astronomer => astronomer
Oracle Span 7-8:  demonstration => demonstrate-01
Oracle Span 12-13:  dressed => dress-01
Oracle Span 17-18:  elegance => elegance
Oracle Span 14-15:  impressive => impress-01
Oracle Span 15-16:  style => style

Extra span: all => all
Extra span: gave => give-01
Missing span: astronomer => astronomer
Missing span: elegance => elegance
Missing span: style => style
Missing span: demonstration => demonstrate-01
Missing span: impressive => impress-01
Dependencies:
1	So	_	RB	RB	_	6	advmod	_	_
2	in	_	IN	IN	_	6	prep	_	_
3	1920	_	CD	CD	_	2	pobj	_	_
4	the	_	DT	DT	_	5	det	_	_
5	astronomer	_	NN	NN	_	6	nsubj	_	_
6	gave	_	VBD	VBD	_	0	root	_	_
7	his	_	PRP$	PRP$	_	8	poss	_	_
8	demonstration	_	NN	NN	_	6	dobj	_	_
9	all	_	DT	DT	_	10	dep	_	_
10	over	_	IN	IN	_	6	advmod	_	_
11	again	_	RB	RB	_	10	advmod	_	_
12	,	_	,	,	_	6	punct	_	_
13	dressed	_	VBN	VBN	_	6	vmod	_	_
14	with	_	IN	IN	_	13	prep	_	_
15	impressive	_	JJ	JJ	_	16	amod	_	_
16	style	_	NN	NN	_	14	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	elegance	_	NN	NN	_	16	conj	_	_
19	.	_	.	.	_	6	punct	_	_

Oracle:
(a4 / and, op, e / elegance)
(a4 / and, op, s / style)
(d2 / dress-01, ARG1, a / astronomer)
(d2 / dress-01, ARG2, a4 / and)
(d3 / date-entity, year, 1920)
(d4 / demonstrate-01, ARG0, a / astronomer)
(d4 / demonstrate-01, mod, a3 / again)
(d4 / demonstrate-01, time, d3 / date-entity)
(i / impress-01, ARG0, a4 / and)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),and,and,false), Span(12,13,List(1),dressed,dress-01,false), Span(10,11,List(2),again,again,false), Span(8,9,List(3),all,all,false), Span(5,6,List(4),gave,give-01,false), Span(2,3,List(6, 5),1920,(date-entity :year 1920),false)),Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all),Map(a3 -> all, d -> dress-01, 1 -> 1920, g -> give-01, a -> and, d2 -> date-entity, a2 -> again))),[Ljava.lang.String;@682b2fa,Annotation([Ljava.lang.String;@217ed35e,[Ljava.lang.String;@7dcf94f8,[Ljava.lang.String;@229f66ed),Annotation([Ljava.lang.String;@31190526,[Ljava.lang.String;@662ac478,[Ledu.cmu.lti.nlp.amr.Dependency;@6743e411),Annotation([Ljava.lang.String;@3eb25e1a,[Ljava.lang.String;@477b4cdf,[Ljava.lang.String;@77c2494c),Annotation([Ljava.lang.String;@f5958c9,[Ljava.lang.String;@233795b6,[Ledu.cmu.lti.nlp.amr.Entity;@3eb738bb))
AMR:
(d / dress-01, ARG0, d2 / date-entity)
(d / dress-01, ARG1, g / give-01)
(d / dress-01, ARG2, a / and)
(d2 / date-entity, year, 1 / 1920)
(g / give-01, ARG0, a2 / again)
(g / give-01, ARG1, a3 / all)

Decoded in 186,161 microseconds
Sentence: And this time everybody accepted his report .

Spans:
Span 0-1:  And => and
Span 1-2:  this => this
Span 2-3:  time => time

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  accepted => accept-01
Oracle Span 0-1:  And => and
Oracle Span 3-4:  everybody => everybody
Oracle Span 6-7:  report => (thing :ARG1-of report-01)
Oracle Span 1-2:  this => this
Oracle Span 2-3:  time => time

Missing span: accepted => accept-01
Missing span: report => (thing :ARG1-of report-01)
Missing span: everybody => everybody
Dependencies:
1	And	_	CC	CC	_	5	cc	_	_
2	this	_	DT	DT	_	4	det	_	_
3	time	_	NN	NN	_	4	nn	_	_
4	everybody	_	NN	NN	_	5	nsubj	_	_
5	accepted	_	VBD	VBD	_	0	root	_	_
6	his	_	PRP$	PRP$	_	7	poss	_	_
7	report	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, a2 / accept-01)
(a2 / accept-01, ARG0, e / everybody)
(a2 / accept-01, ARG1, t3 / thing)
(a2 / accept-01, time, t / time)
(r / report-01, ARG1, t3 / thing)
(t / time, mod, t2 / this)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),time,time,false), Span(1,2,List(1),this,this,false), Span(0,1,List(2),And,and,false)),Map(2 -> and, 1 -> this, 0 -> time),Map(t -> time, a -> and, t2 -> this))),[Ljava.lang.String;@5bda8e08,Annotation([Ljava.lang.String;@1e800aaa,[Ljava.lang.String;@185a6e9,[Ljava.lang.String;@6f03482),Annotation([Ljava.lang.String;@9d5509a,[Ljava.lang.String;@179ece50,[Ledu.cmu.lti.nlp.amr.Dependency;@3b0090a4),Annotation([Ljava.lang.String;@3cd3e762,[Ljava.lang.String;@1fa121e2,[Ljava.lang.String;@7eac9008),Annotation([Ljava.lang.String;@4116aac9,[Ljava.lang.String;@62ddbd7e,[Ledu.cmu.lti.nlp.amr.Entity;@74e52ef6))
AMR:
(a / and, concession, t / time)
(t / time, mod, t2 / this)

Decoded in 28,935 microseconds
Sentence: If I have told you these details about the asteroid , and made a note of its number for you , it is on account of the grown - ups and their ways .

Spans:
Span 24-25:  account => account
Span 30-31:  and => and
Span 11-12:  and => and
Span 27-28:  grown => grown-up
Span 1-2:  I => i
Span 21-22:  it => it
Span 16-17:  its => it
Span 14-15:  note => note-02
Span 17-18:  number => number
Span 3-4:  told => tell-01
Span 19-20:  you => you
Span 4-5:  you => you

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Oracle Span 24-25:  account => account-01
Oracle Span 11-12:  and => and
Oracle Span 30-31:  and => and
Oracle Span 9-10:  asteroid => asteroid
Oracle Span 6-7:  details => detail
Oracle Span 27-28:  grown => grown-up
Oracle Span 1-2:  I => i
Oracle Span 14-15:  note => note-01
Oracle Span 17-18:  number => number
Oracle Span 3-4:  told => tell-01
Oracle Span 32-33:  ways => way
Oracle Span 4-5:  you => you

Incorrect span: account => account
Extra span: it => it
Extra span: you => you
Extra span: its => it
Incorrect span: note => note-02
Missing span: account => account-01
Missing span: note => note-01
Missing span: details => detail
Missing span: asteroid => asteroid
Missing span: ways => way
Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	I	_	PRP	PRP	_	4	nsubj	_	_
3	have	_	VBP	VBP	_	4	aux	_	_
4	told	_	VBN	VBN	_	23	advcl	_	_
5	you	_	PRP	PRP	_	7	nsubj	_	_
6	these	_	DT	DT	_	7	det	_	_
7	details	_	NNS	NNS	_	4	xcomp	_	_
8	about	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	asteroid	_	NN	NN	_	8	pobj	_	_
11	,	_	,	,	_	4	punct	_	_
12	and	_	CC	CC	_	4	cc	_	_
13	made	_	VBN	VBN	_	4	conj	_	_
14	a	_	DT	DT	_	15	det	_	_
15	note	_	NN	NN	_	13	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	its	_	PRP$	PRP$	_	18	poss	_	_
18	number	_	NN	NN	_	16	pobj	_	_
19	for	_	IN	IN	_	13	prep	_	_
20	you	_	PRP	PRP	_	19	pobj	_	_
21	,	_	,	,	_	23	punct	_	_
22	it	_	PRP	PRP	_	23	nsubj	_	_
23	is	_	VBZ	VBZ	_	0	root	_	_
24	on	_	IN	IN	_	23	prep	_	_
25	account	_	NN	NN	_	24	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	grown	_	JJ	JJ	_	26	pobj	_	_
29	-	_	:	:	_	25	punct	_	_
30	ups	_	NNS	NNS	_	25	dep	_	_
31	and	_	CC	CC	_	30	cc	_	_
32	their	_	PRP$	PRP$	_	33	poss	_	_
33	ways	_	NNS	NNS	_	30	conj	_	_
34	.	_	.	.	_	23	punct	_	_

Oracle:
(a / account-01, ARG1, a3 / and)
(a / account-01, ARG2, a2 / and)
(a / account-01, condition, a3 / and)
(a2 / and, op, g / grown-up)
(a2 / and, op, w / way)
(a3 / and, op, n3 / note-01)
(a3 / and, op, t / tell-01)
(d / detail, topic, a4 / asteroid)
(n3 / note-01, ARG0, i / i)
(n3 / note-01, ARG1, n4 / number)
(n3 / note-01, ARG2, y / you)
(n4 / number, poss, a4 / asteroid)
(t / tell-01, ARG0, i / i)
(t / tell-01, ARG1, d / detail)
(t / tell-01, ARG2, y / you)
(w / way, poss, g / grown-up)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),and,and,false), Span(27,28,List(1),grown,grown-up,false), Span(24,25,List(2),account,account,false), Span(21,22,List(3),it,it,false), Span(19,20,List(4),you,you,false), Span(17,18,List(5),number,number,false), Span(16,17,List(6),its,it,false), Span(14,15,List(7),note,note-02,false), Span(11,12,List(8),and,and,false), Span(4,5,List(9),you,you,false), Span(3,4,List(10),told,tell-01,false), Span(1,2,List(11),I,i,false)),Map(2 -> account, 5 -> number, 8 -> and, 7 -> note-02, 1 -> grown-up, 11 -> i, 4 -> you, 6 -> it, 9 -> you, 0 -> and, 10 -> tell-01, 3 -> it),Map(n -> number, t -> tell-01, a3 -> and, i3 -> i, y -> you, g -> grown-up, a -> and, i2 -> it, i -> it, a2 -> account, y2 -> you, n2 -> note-02))),[Ljava.lang.String;@6ed3ccb2,Annotation([Ljava.lang.String;@1a677343,[Ljava.lang.String;@15de0b3c,[Ljava.lang.String;@489115ef),Annotation([Ljava.lang.String;@3857f613,[Ljava.lang.String;@198b6731,[Ledu.cmu.lti.nlp.amr.Dependency;@7c6908d7),Annotation([Ljava.lang.String;@3c9754d8,[Ljava.lang.String;@3bf7ca37,[Ljava.lang.String;@79079097),Annotation([Ljava.lang.String;@4d1c00d0,[Ljava.lang.String;@4b2bac3f,[Ledu.cmu.lti.nlp.amr.Entity;@4e08711f))
AMR:
(a / and, op, t / tell-01)
(a2 / account, poss, i3 / i)
(a3 / and, op, n2 / note-02)
(a3 / and, op, t / tell-01)
(n / number, poss, i2 / it)
(n2 / note-02, ARG0, y / you)
(n2 / note-02, ARG1, n / number)
(t / tell-01, ARG0, i3 / i)
(t / tell-01, ARG1, y2 / you)
(t / tell-01, ARG2, g / grown-up)
(t / tell-01, time, i / it)

Decoded in 824,675 microseconds
Sentence: WHen you tell them that you have made a new friend , they never ask you any questions about essential matters .

Spans:
Span 16-17:  any => any
Span 14-15:  ask => ask-02
Span 19-20:  essential => essential
Span 10-11:  friend => friend
Span 20-21:  matters => matter
Span 9-10:  new => new-01
Span 17-18:  questions => question-01
Span 2-3:  tell => tell-01
Span 12-13:  they => they
Span 15-16:  you => you
Span 5-6:  you => you
Span 1-2:  you => you

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 16-17:  any => any
Oracle Span 19-20:  essential => essential
Oracle Span 10-11:  friend => friend
Oracle Span 6-7:  have => have-rel-role-91
Oracle Span 7-8:  made => make-01
Oracle Span 20-21:  matters => matter
Oracle Span 9-10:  new => new-01
Oracle Span 17-18:  questions => question-01
Oracle Span 2-3:  tell => tell-01
Oracle Span 12-13:  they => they
Oracle Span 1-2:  you => you

Extra span: you => you
Extra span: ask => ask-02
Extra span: you => you
Missing span: made => make-01
Missing span: have => have-rel-role-91
Dependencies:
1	WHen	_	VBN	VBN	_	15	vmod	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	tell	_	VB	VB	_	1	ccomp	_	_
4	them	_	PRP	PRP	_	3	dobj	_	_
5	that	_	IN	IN	_	8	mark	_	_
6	you	_	PRP	PRP	_	8	nsubj	_	_
7	have	_	VBP	VBP	_	8	aux	_	_
8	made	_	VBN	VBN	_	3	ccomp	_	_
9	a	_	DT	DT	_	11	det	_	_
10	new	_	JJ	JJ	_	11	amod	_	_
11	friend	_	NN	NN	_	8	dobj	_	_
12	,	_	,	,	_	15	punct	_	_
13	they	_	PRP	PRP	_	15	nsubj	_	_
14	never	_	RB	RB	_	15	neg	_	_
15	ask	_	VBP	VBP	_	0	root	_	_
16	you	_	PRP	PRP	_	18	nsubj	_	_
17	any	_	DT	DT	_	18	det	_	_
18	questions	_	NNS	NNS	_	15	xcomp	_	_
19	about	_	IN	IN	_	18	prep	_	_
20	essential	_	JJ	JJ	_	21	amod	_	_
21	matters	_	NNS	NNS	_	19	pobj	_	_
22	.	_	.	.	_	15	punct	_	_

Oracle:
(h / have-rel-role-91, ARG1, y / you)
(h / have-rel-role-91, ARG2, f / friend)
(m / matter, mod, e / essential)
(m2 / make-01, ARG0, y / you)
(m2 / make-01, ARG1, h / have-rel-role-91)
(n / new-01, ARG1, h / have-rel-role-91)
(q2 / question-01, ARG1, m / matter)
(q2 / question-01, ARG2, y / you)
(q2 / question-01, mod, a2 / any)
(q2 / question-01, time, t3 / tell-01)
(t3 / tell-01, ARG0, y / you)
(t3 / tell-01, ARG1, m2 / make-01)
(t3 / tell-01, ARG2, t / they)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),matters,matter,false), Span(19,20,List(1),essential,essential,false), Span(17,18,List(2),questions,question-01,false), Span(16,17,List(3),any,any,false), Span(15,16,List(4),you,you,false), Span(14,15,List(5),ask,ask-02,false), Span(12,13,List(6),they,they,false), Span(10,11,List(7),friend,friend,false), Span(9,10,List(8),new,new-01,false), Span(5,6,List(9),you,you,false), Span(2,3,List(10),tell,tell-01,false), Span(1,2,List(11),you,you,false)),Map(2 -> question-01, 5 -> ask-02, 8 -> new-01, 7 -> friend, 1 -> essential, 11 -> you, 4 -> you, 6 -> they, 9 -> you, 0 -> matter, 10 -> tell-01, 3 -> any),Map(n -> new-01, e -> essential, q -> question-01, t -> they, m -> matter, y -> you, y3 -> you, a -> any, t2 -> tell-01, a2 -> ask-02, f -> friend, y2 -> you))),[Ljava.lang.String;@bcec361,Annotation([Ljava.lang.String;@26794848,[Ljava.lang.String;@302552ec,[Ljava.lang.String;@3d285d7e),Annotation([Ljava.lang.String;@40005471,[Ljava.lang.String;@2cd76f31,[Ledu.cmu.lti.nlp.amr.Dependency;@367ffa75),Annotation([Ljava.lang.String;@49438269,[Ljava.lang.String;@ba2f4ec,[Ljava.lang.String;@1c1bbc4e),Annotation([Ljava.lang.String;@55fe41ea,[Ljava.lang.String;@fbd1f6,[Ledu.cmu.lti.nlp.amr.Entity;@1ce24091))
AMR:
(a2 / ask-02, ARG0, t / they)
(a2 / ask-02, ARG1, q / question-01)
(a2 / ask-02, ARG2, y / you)
(a2 / ask-02, condition, t2 / tell-01)
(m / matter, mod, e / essential)
(n / new-01, ARG1, f / friend)
(q / question-01, ARG0, m / matter)
(q / question-01, ARG2, a / any)
(t2 / tell-01, ARG0, y3 / you)
(t2 / tell-01, ARG1, f / friend)
(t2 / tell-01, ARG2, y2 / you)

Decoded in 525,815 microseconds
Sentence: They never say to you , " What does his voice sound like ?

Spans:
Span 2-3:  say => say-01
Span 11-12:  sound => sound-02
Span 0-1:  They => they
Span 10-11:  voice => voice
Span 4-5:  you => you

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 2-3:  say => say-01
Oracle Span 11-12:  sound => sound-01
Oracle Span 0-1:  They => they
Oracle Span 10-11:  voice => voice
Oracle Span 4-5:  you => you

Incorrect span: sound => sound-02
Missing span: sound => sound-01
Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	never	_	RB	RB	_	3	neg	_	_
3	say	_	VBP	VBP	_	9	dep	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	you	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	"	_	''	''	_	9	punct	_	_
8	What	_	WP	WP	_	9	dobj	_	_
9	does	_	VBZ	VBZ	_	0	root	_	_
10	his	_	PRP$	PRP$	_	12	poss	_	_
11	voice	_	NN	NN	_	12	nn	_	_
12	sound	_	NN	NN	_	9	dobj	_	_
13	like	_	IN	IN	_	9	prep	_	_
14	?	_	.	.	_	9	punct	_	_

Oracle:
(s / say-01, ARG0, t / they)
(s / say-01, ARG1, s2 / sound-01)
(s / say-01, ARG2, y / you)
(s2 / sound-01, ARG1, v / voice)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),sound,sound-02,false), Span(10,11,List(1),voice,voice,false), Span(4,5,List(2),you,you,false), Span(2,3,List(3),say,say-01,false), Span(0,1,List(4),They,they,false)),Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01),Map(t -> they, s2 -> say-01, s -> sound-02, v -> voice, y -> you))),[Ljava.lang.String;@5dda768f,Annotation([Ljava.lang.String;@7a8c8dcf,[Ljava.lang.String;@24269709,[Ljava.lang.String;@2aceadd4),Annotation([Ljava.lang.String;@24aed80c,[Ljava.lang.String;@3a52dba3,[Ledu.cmu.lti.nlp.amr.Dependency;@2a5c8d3f),Annotation([Ljava.lang.String;@752325ad,[Ljava.lang.String;@279fedbd,[Ljava.lang.String;@b3ca52e),Annotation([Ljava.lang.String;@45c7e403,[Ljava.lang.String;@2925bf5b,[Ledu.cmu.lti.nlp.amr.Entity;@710f4dc7))
AMR:
(s / sound-02, ARG0, t / they)
(s / sound-02, ARG1, v / voice)
(s2 / say-01, ARG0, t / they)
(s2 / say-01, ARG1, y / you)

Decoded in 125,496 microseconds
Sentence: What games does he love best ?

Spans:
Span 5-6:  best => (well :degree most)
Span 3-4:  he => he
Span 4-5:  love => love-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  best => (good :degree most)
Oracle Span 1-2:  games => game
Oracle Span 3-4:  he => he
Oracle Span 4-5:  love => love-01

Incorrect span: best => (well :degree most)
Missing span: best => (good :degree most)
Missing span: games => game
Dependencies:
1	What	_	WDT	WDT	_	2	det	_	_
2	games	_	NNS	NNS	_	5	dobj	_	_
3	does	_	VBZ	VBZ	_	5	aux	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	love	_	VB	VB	_	0	root	_	_
6	best	_	RBS	RBS	_	5	advmod	_	_
7	?	_	.	.	_	5	punct	_	_

Oracle:
(g / good, degree, m / most)
(l / love-01, ARG0, h / he)
(l / love-01, degree, g / good)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(1, 0),best,(well :degree most),false), Span(4,5,List(2),love,love-01,false), Span(3,4,List(3),he,he,false)),Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he),Map(w -> well, h -> he, m -> most, l -> love-01))),[Ljava.lang.String;@1ff4931d,Annotation([Ljava.lang.String;@65e98b1c,[Ljava.lang.String;@61322f9d,[Ljava.lang.String;@6ad82709),Annotation([Ljava.lang.String;@510f3d34,[Ljava.lang.String;@7817fd62,[Ledu.cmu.lti.nlp.amr.Dependency;@8297b3a),Annotation([Ljava.lang.String;@2362f559,[Ljava.lang.String;@b2c9a9c,[Ljava.lang.String;@4c178a76),Annotation([Ljava.lang.String;@fa4c865,[Ljava.lang.String;@3bd82cf5,[Ledu.cmu.lti.nlp.amr.Entity;@544fa968))
AMR:
(l / love-01, ARG0, h / he)
(l / love-01, ARG1, w / well)
(w / well, degree, m / most)

Decoded in 12,675 microseconds
Sentence: Does he collect butterflies ? "

Spans:
Span 3-4:  butterflies => butterfly
Span 1-2:  he => he

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  butterflies => butterfly
Oracle Span 2-3:  collect => collect-01
Oracle Span 1-2:  he => he

Missing span: collect => collect-01
Dependencies:
1	Does	_	MD	MD	_	3	aux	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	collect	_	VBP	VBP	_	0	root	_	_
4	butterflies	_	NNS	NNS	_	3	dobj	_	_
5	?	_	.	.	_	3	punct	_	_
6	"	_	''	''	_	3	punct	_	_

Oracle:
(c / collect-01, ARG0, h / he)
(c / collect-01, ARG1, b / butterfly)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),butterflies,butterfly,false), Span(1,2,List(1),he,he,false)),Map(1 -> he, 0 -> butterfly),Map(h -> he, b -> butterfly))),[Ljava.lang.String;@247bddad,Annotation([Ljava.lang.String;@d35dea7,[Ljava.lang.String;@7770f470,[Ljava.lang.String;@5e5d171f),Annotation([Ljava.lang.String;@24313fcc,[Ljava.lang.String;@7d20d0b,[Ledu.cmu.lti.nlp.amr.Dependency;@77f1baf5),Annotation([Ljava.lang.String;@41a2befb,[Ljava.lang.String;@6c40365c,[Ljava.lang.String;@7bedc48a),Annotation([Ljava.lang.String;@131ef10,[Ljava.lang.String;@55b0dcab,[Ledu.cmu.lti.nlp.amr.Entity;@38afe297))
AMR:
(b / butterfly, quant, h / he)

Decoded in 7,049 microseconds
Sentence: Instead , they demand : " How old is he ?

Spans:
Span 9-10:  he => he
Span 7-8:  old => old
Span 2-3:  they => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  demand => demand-01
Oracle Span 9-10:  he => he
Oracle Span 0-1:  Instead => instead-of-91
Oracle Span 2-3:  they => they

Extra span: old => old
Missing span: demand => demand-01
Missing span: Instead => instead-of-91
Dependencies:
1	Instead	_	RB	RB	_	4	advmod	_	_
2	,	_	,	,	_	4	punct	_	_
3	they	_	PRP	PRP	_	4	nsubj	_	_
4	demand	_	VBP	VBP	_	0	root	_	_
5	:	_	:	:	_	4	punct	_	_
6	"	_	''	''	_	4	punct	_	_
7	How	_	WRB	WRB	_	8	advmod	_	_
8	old	_	JJ	JJ	_	10	dep	_	_
9	is	_	VBZ	VBZ	_	10	cop	_	_
10	he	_	PRP	PRP	_	4	dep	_	_
11	?	_	.	.	_	4	punct	_	_

Oracle:
(d / demand-01, ARG0, t / they)
(i2 / instead-of-91, ARG1, d / demand-01)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),he,he,false), Span(7,8,List(1),old,old,false), Span(2,3,List(2),they,they,false)),Map(2 -> they, 1 -> old, 0 -> he),Map(h -> he, t -> they, o -> old))),[Ljava.lang.String;@2df3b89c,Annotation([Ljava.lang.String;@23348b5d,[Ljava.lang.String;@70325e14,[Ljava.lang.String;@37ceb1df),Annotation([Ljava.lang.String;@7c9d8e2,[Ljava.lang.String;@20d525,[Ledu.cmu.lti.nlp.amr.Dependency;@6200f9cb),Annotation([Ljava.lang.String;@2002fc1d,[Ljava.lang.String;@69453e37,[Ljava.lang.String;@6f4a47c7),Annotation([Ljava.lang.String;@ae13544,[Ljava.lang.String;@3d34d211,[Ledu.cmu.lti.nlp.amr.Entity;@7dc0f706))
AMR:
(h / he, poss, t / they)
(o / old, op, h / he)

Decoded in 14,071 microseconds
Sentence: How many brothers has he ?

Spans:
Span 3-4:  has => have-03
Span 4-5:  he => he
Span 1-2:  many => many

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  brothers => brother
Oracle Span 3-4:  has => have-rel-role-91
Oracle Span 4-5:  he => he

Incorrect span: has => have-03
Extra span: many => many
Missing span: brothers => brother
Missing span: has => have-rel-role-91
Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	many	_	JJ	JJ	_	3	amod	_	_
3	brothers	_	NNS	NNS	_	4	nsubj	_	_
4	has	_	VBZ	VBZ	_	0	root	_	_
5	he	_	PRP	PRP	_	4	dobj	_	_
6	?	_	.	.	_	4	punct	_	_

Oracle:
(h / have-rel-role-91, ARG1, h2 / he)
(h / have-rel-role-91, ARG2, b / brother)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),he,he,false), Span(3,4,List(1),has,have-03,false), Span(1,2,List(2),many,many,false)),Map(2 -> many, 1 -> have-03, 0 -> he),Map(h -> he, h2 -> have-03, m -> many))),[Ljava.lang.String;@4009e306,Annotation([Ljava.lang.String;@43c1b556,[Ljava.lang.String;@587e5365,[Ljava.lang.String;@22fcf7ab),Annotation([Ljava.lang.String;@2de23121,[Ljava.lang.String;@63475ace,[Ledu.cmu.lti.nlp.amr.Dependency;@4988d8b8),Annotation([Ljava.lang.String;@c0c2f8d,[Ljava.lang.String;@305b7c14,[Ljava.lang.String;@6913c1fb),Annotation([Ljava.lang.String;@66d18979,[Ljava.lang.String;@bccb269,[Ledu.cmu.lti.nlp.amr.Entity;@609cd4d8))
AMR:
(h2 / have-03, ARG0, m / many)
(h2 / have-03, ARG1, h / he)

Decoded in 8,829 microseconds
Sentence: How much does he weigh ?

Spans:
Span 3-4:  he => he
Span 1-2:  much => much

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  he => he
Oracle Span 4-5:  weigh => weigh-01

Extra span: much => much
Missing span: weigh => weigh-01
Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	much	_	JJ	JJ	_	5	dep	_	_
3	does	_	VBZ	VBZ	_	5	aux	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	weigh	_	VB	VB	_	0	root	_	_
6	?	_	.	.	_	5	punct	_	_

Oracle:
(w / weigh-01, ARG1, h / he)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),he,he,false), Span(1,2,List(1),much,much,false)),Map(1 -> much, 0 -> he),Map(h -> he, m -> much))),[Ljava.lang.String;@17f7cd29,Annotation([Ljava.lang.String;@7d8704ef,[Ljava.lang.String;@13b6aecc,[Ljava.lang.String;@158a8276),Annotation([Ljava.lang.String;@3c3d9b6b,[Ljava.lang.String;@79d8407f,[Ledu.cmu.lti.nlp.amr.Dependency;@5fbe4146),Annotation([Ljava.lang.String;@1e66f1f5,[Ljava.lang.String;@4e50c791,[Ljava.lang.String;@7530ad9c),Annotation([Ljava.lang.String;@58a9760d,[Ljava.lang.String;@71e9ddb4,[Ledu.cmu.lti.nlp.amr.Entity;@394df057))
AMR:
(m / much, op, h / he)

Decoded in 8,546 microseconds
Sentence: How much money does his father make ? "

Spans:
Span 1-2:  much => much

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  father => (have-rel-role-91 :ARG2 father)
Oracle Span 6-7:  make => make-05
Oracle Span 2-3:  money => monetary-quantity

Extra span: much => much
Missing span: make => make-05
Missing span: father => (have-rel-role-91 :ARG2 father)
Missing span: money => monetary-quantity
Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	much	_	JJ	JJ	_	3	amod	_	_
3	money	_	NN	NN	_	7	dobj	_	_
4	does	_	VBZ	VBZ	_	7	aux	_	_
5	his	_	PRP$	PRP$	_	6	poss	_	_
6	father	_	NN	NN	_	7	nsubj	_	_
7	make	_	VB	VB	_	0	root	_	_
8	?	_	.	.	_	7	punct	_	_
9	"	_	''	''	_	7	punct	_	_

Oracle:
(h2 / have-rel-role-91, ARG2, f / father)
(m / make-05, ARG1, m2 / monetary-quantity)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),much,much,false)),Map(0 -> much),Map(m -> much))),[Ljava.lang.String;@4961f6af,Annotation([Ljava.lang.String;@5aebe890,[Ljava.lang.String;@65d09a04,[Ljava.lang.String;@33c911a1),Annotation([Ljava.lang.String;@75db5df9,[Ljava.lang.String;@707194ba,[Ledu.cmu.lti.nlp.amr.Dependency;@1190200a),Annotation([Ljava.lang.String;@6a2f6f80,[Ljava.lang.String;@45b4c3a9,[Ljava.lang.String;@399c4be1),Annotation([Ljava.lang.String;@291caca8,[Ljava.lang.String;@385e9564,[Ledu.cmu.lti.nlp.amr.Entity;@5b94b04d))
AMR:


Decoded in 7,630 microseconds
Sentence: Only from these figures do they think they have learned anything about him .

Spans:
Span 10-11:  anything => anything
Span 3-4:  figures => figure
Span 9-10:  learned => learn-01
Span 0-1:  Only => only
Span 7-8:  they => they
Span 5-6:  they => they
Span 6-7:  think => think-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 10-11:  anything => anything
Oracle Span 3-4:  figures => figure
Oracle Span 9-10:  learned => learn-01
Oracle Span 0-1:  Only => only
Oracle Span 5-6:  they => they
Oracle Span 6-7:  think => think-01

Extra span: they => they
Dependencies:
1	Only	_	JJ	JJ	_	5	nsubj	_	_
2	from	_	IN	IN	_	1	prep	_	_
3	these	_	DT	DT	_	4	det	_	_
4	figures	_	NNS	NNS	_	2	pobj	_	_
5	do	_	VBP	VBP	_	0	root	_	_
6	they	_	PRP	PRP	_	7	nsubj	_	_
7	think	_	VBP	VBP	_	5	ccomp	_	_
8	they	_	PRP	PRP	_	10	nsubj	_	_
9	have	_	VBP	VBP	_	10	aux	_	_
10	learned	_	VBN	VBN	_	7	ccomp	_	_
11	anything	_	NN	NN	_	10	dobj	_	_
12	about	_	IN	IN	_	10	prep	_	_
13	him	_	PRP	PRP	_	12	pobj	_	_
14	.	_	.	.	_	5	punct	_	_

Oracle:
(l / learn-01, ARG0, t2 / they)
(l / learn-01, ARG1, a / anything)
(l / learn-01, source, f / figure)
(t / think-01, ARG0, t2 / they)
(t / think-01, ARG1, l / learn-01)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),anything,anything,false), Span(9,10,List(1),learned,learn-01,false), Span(7,8,List(2),they,they,false), Span(6,7,List(3),think,think-01,false), Span(5,6,List(4),they,they,false), Span(3,4,List(5),figures,figure,false), Span(0,1,List(6),Only,only,false)),Map(2 -> they, 5 -> figure, 1 -> learn-01, 4 -> they, 6 -> only, 0 -> anything, 3 -> think-01),Map(t -> they, t3 -> they, a -> anything, t2 -> think-01, l -> learn-01, o -> only, f -> figure))),[Ljava.lang.String;@8c3b9d,Annotation([Ljava.lang.String;@4c39bec8,[Ljava.lang.String;@f79e,[Ljava.lang.String;@7ee8290b),Annotation([Ljava.lang.String;@1f59a598,[Ljava.lang.String;@1e178745,[Ledu.cmu.lti.nlp.amr.Dependency;@192c3f1e),Annotation([Ljava.lang.String;@26b3fd41,[Ljava.lang.String;@7494f96a,[Ljava.lang.String;@561b6512),Annotation([Ljava.lang.String;@2e377400,[Ljava.lang.String;@1757cd72,[Ledu.cmu.lti.nlp.amr.Entity;@445b295b))
AMR:
(l / learn-01, ARG0, t / they)
(l / learn-01, ARG1, a / anything)
(t2 / think-01, ARG0, t3 / they)
(t2 / think-01, ARG1, l / learn-01)
(t2 / think-01, ARG2, o / only)
(t2 / think-01, ARG3, f / figure)

Decoded in 162,511 microseconds
Sentence: If you were to say to the grown - ups : " I saw a beautiful house made of rosy brick , with geraniums in the windows and doves on the roof , " they would not be able to get any idea of that house at all .

Spans:
Span 38-39:  able => possible-01
Span 47-48:  all => all
Span 27-28:  and => and
Span 41-42:  any => any
Span 15-16:  beautiful => beautiful-02
Span 40-41:  get => get-01
Span 7-8:  grown => grown-up
Span 45-46:  house => house
Span 16-17:  house => house
Span 12-13:  I => i
Span 42-43:  idea => idea
Span 13-14:  saw => see-01
Span 4-5:  say => say-01
Span 34-35:  they => they
Span 1-2:  you => you

Langrangian relaxation converged after 74 iterations. Delta = 0.0
Oracle Span 38-39:  able => possible-01
Oracle Span 47-48:  all => all
Oracle Span 27-28:  and => and
Oracle Span 41-42:  any => any
Oracle Span 46-47:  at => at
Oracle Span 15-16:  beautiful => beautiful-02
Oracle Span 20-21:  brick => brick
Oracle Span 28-29:  doves => dove
Oracle Span 23-24:  geraniums => geranium
Oracle Span 40-41:  get => get-01
Oracle Span 7-8:  grown => grown-up
Oracle Span 16-17:  house => house
Oracle Span 42-43:  idea => idea
Oracle Span 17-18:  made => make-01
Oracle Span 31-32:  roof => roof
Oracle Span 19-20:  rosy => rosy
Oracle Span 13-14:  saw => see-01
Oracle Span 4-5:  say => say-01
Oracle Span 26-27:  windows => window
Oracle Span 1-2:  you => you

Extra span: house => house
Extra span: they => they
Extra span: I => i
Missing span: doves => dove
Missing span: roof => roof
Missing span: geraniums => geranium
Missing span: windows => window
Missing span: made => make-01
Missing span: brick => brick
Missing span: rosy => rosy
Missing span: at => at
Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	were	_	VBD	VBD	_	14	advcl	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	say	_	VB	VB	_	3	xcomp	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	grown	_	JJ	JJ	_	6	pobj	_	_
9	-	_	:	:	_	8	punct	_	_
10	ups	_	NNS	NNS	_	8	dep	_	_
11	:	_	:	:	_	8	punct	_	_
12	"	_	''	''	_	5	punct	_	_
13	I	_	PRP	PRP	_	14	nsubj	_	_
14	saw	_	VBD	VBD	_	39	ccomp	_	_
15	a	_	DT	DT	_	17	det	_	_
16	beautiful	_	JJ	JJ	_	17	amod	_	_
17	house	_	NN	NN	_	18	nsubj	_	_
18	made	_	VBD	VBD	_	14	ccomp	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	rosy	_	JJ	JJ	_	21	amod	_	_
21	brick	_	NN	NN	_	19	pobj	_	_
22	,	_	,	,	_	18	punct	_	_
23	with	_	IN	IN	_	18	prep	_	_
24	geraniums	_	NNS	NNS	_	23	pobj	_	_
25	in	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	windows	_	NNS	NNS	_	25	pobj	_	_
28	and	_	CC	CC	_	27	cc	_	_
29	doves	_	NNS	NNS	_	27	conj	_	_
30	on	_	IN	IN	_	27	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	roof	_	NN	NN	_	30	pobj	_	_
33	,	_	,	,	_	39	punct	_	_
34	"	_	''	''	_	39	punct	_	_
35	they	_	PRP	PRP	_	39	nsubj	_	_
36	would	_	MD	MD	_	39	aux	_	_
37	not	_	RB	RB	_	39	neg	_	_
38	be	_	VB	VB	_	39	cop	_	_
39	able	_	JJ	JJ	_	0	root	_	_
40	to	_	TO	TO	_	41	aux	_	_
41	get	_	VB	VB	_	39	xcomp	_	_
42	any	_	DT	DT	_	43	det	_	_
43	idea	_	NN	NN	_	41	dobj	_	_
44	of	_	IN	IN	_	43	prep	_	_
45	that	_	DT	DT	_	46	det	_	_
46	house	_	NN	NN	_	44	pobj	_	_
47	at	_	IN	IN	_	46	advmod	_	_
48	all	_	DT	DT	_	47	pobj	_	_
49	.	_	.	.	_	39	punct	_	_

Oracle:
(a2 / at, mod, a3 / all)
(a4 / and, op, d / dove)
(a4 / and, op, g3 / geranium)
(b / brick, mod, r / rosy)
(b2 / beautiful-02, ARG1, h2 / house)
(d / dove, location, r2 / roof)
(g / get-01, ARG0, g2 / grown-up)
(g / get-01, ARG1, i / idea)
(g3 / geranium, location, w / window)
(h2 / house, accompanier, a4 / and)
(i / idea, mod, a / any)
(i / idea, mod, a2 / at)
(i / idea, topic, h2 / house)
(m / make-01, ARG1, h2 / house)
(m / make-01, ARG2, b / brick)
(p / possible-01, ARG1, g / get-01)
(p / possible-01, condition, s / say-01)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, g2 / grown-up)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, h2 / house)

Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),all,all,false), Span(45,46,List(1),house,house,false), Span(42,43,List(2),idea,idea,false), Span(41,42,List(3),any,any,false), Span(40,41,List(4),get,get-01,false), Span(38,39,List(5),able,possible-01,false), Span(34,35,List(6),they,they,false), Span(27,28,List(7),and,and,false), Span(16,17,List(8),house,house,false), Span(15,16,List(9),beautiful,beautiful-02,false), Span(13,14,List(10),saw,see-01,false), Span(12,13,List(11),I,i,false), Span(7,8,List(12),grown,grown-up,false), Span(4,5,List(13),say,say-01,false), Span(1,2,List(14),you,you,false)),Map(2 -> idea, 5 -> possible-01, 12 -> grown-up, 8 -> house, 7 -> and, 1 -> house, 4 -> get-01, 11 -> i, 14 -> you, 6 -> they, 0 -> all, 9 -> beautiful-02, 3 -> any, 10 -> see-01, 13 -> say-01),Map(h -> house, s2 -> say-01, h2 -> house, t -> they, b -> beautiful-02, a3 -> and, s -> see-01, g2 -> grown-up, y -> you, g -> get-01, p -> possible-01, a -> all, i2 -> i, i -> idea, a2 -> any))),[Ljava.lang.String;@49e5f737,Annotation([Ljava.lang.String;@5c671d7f,[Ljava.lang.String;@757277dc,[Ljava.lang.String;@687e99d8),Annotation([Ljava.lang.String;@e4487af,[Ljava.lang.String;@6aaceffd,[Ledu.cmu.lti.nlp.amr.Dependency;@c86b9e3),Annotation([Ljava.lang.String;@10aa41f2,[Ljava.lang.String;@3af9c5b7,[Ljava.lang.String;@37271612),Annotation([Ljava.lang.String;@ed7f8b4,[Ljava.lang.String;@4c309d4d,[Ledu.cmu.lti.nlp.amr.Entity;@38102d01))
AMR:
(b / beautiful-02, ARG0, a / all)
(b / beautiful-02, ARG1, h2 / house)
(g / get-01, ARG0, t / they)
(g / get-01, ARG1, i / idea)
(i / idea, mod, a2 / any)
(i / idea, topic, h / house)
(p / possible-01, ARG0, g2 / grown-up)
(p / possible-01, ARG1, g / get-01)
(p / possible-01, ARG2, s / see-01)
(s / see-01, ARG0, h2 / house)
(s / see-01, ARG1, y / you)
(s / see-01, ARG2, i2 / i)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, a3 / and)

Decoded in 1,447,920 microseconds
Sentence: You would have to say to them : " I saw a house that cost $ 20,000 . "

Spans:
Span 12-13:  house => house
Span 9-10:  I => i
Span 10-11:  saw => see-01
Span 4-5:  say => say-01
Span 0-1:  You => you

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 14-15:  cost => cost-01
Oracle Span 12-13:  house => house
Oracle Span 10-11:  saw => see-01
Oracle Span 4-5:  say => say-01
Oracle Span 0-1:  You => you

Extra span: I => i
Missing span: cost => cost-01
Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	would	_	MD	MD	_	3	aux	_	_
3	have	_	VB	VB	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	say	_	VB	VB	_	3	xcomp	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	:	_	:	:	_	3	punct	_	_
9	"	_	''	''	_	3	punct	_	_
10	I	_	PRP	PRP	_	11	nsubj	_	_
11	saw	_	VBD	VBD	_	3	ccomp	_	_
12	a	_	DT	DT	_	13	det	_	_
13	house	_	NN	NN	_	11	dobj	_	_
14	that	_	WDT	WDT	_	15	nsubj	_	_
15	cost	_	VBD	VBD	_	13	rcmod	_	_
16	$	_	$	$	_	15	dobj	_	_
17	20,000	_	CD	CD	_	16	num	_	_
18	.	_	.	.	_	3	punct	_	_
19	"	_	''	''	_	3	punct	_	_

Oracle:
(c / cost-01, ARG1, h / house)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, h / house)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),house,house,false), Span(10,11,List(1),saw,see-01,false), Span(9,10,List(2),I,i,false), Span(4,5,List(3),say,say-01,false), Span(0,1,List(4),You,you,false)),Map(2 -> i, 1 -> see-01, 4 -> you, 0 -> house, 3 -> say-01),Map(h -> house, s2 -> say-01, s -> see-01, y -> you, i -> i))),[Ljava.lang.String;@37883b97,Annotation([Ljava.lang.String;@6ab778a,[Ljava.lang.String;@4e3958e7,[Ljava.lang.String;@77f80c04),Annotation([Ljava.lang.String;@1dac5ef,[Ljava.lang.String;@5c90e579,[Ledu.cmu.lti.nlp.amr.Dependency;@58ea606c),Annotation([Ljava.lang.String;@6f45df59,[Ljava.lang.String;@38e79ae3,[Ljava.lang.String;@63070bab),Annotation([Ljava.lang.String;@68e5eea7,[Ljava.lang.String;@291b4bf5,[Ledu.cmu.lti.nlp.amr.Entity;@2d2ffcb7))
AMR:
(s / see-01, ARG0, i / i)
(s / see-01, ARG1, h / house)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, s / see-01)

Decoded in 79,318 microseconds
Sentence: Then they would exclaim : " Oh , what a pretty house that is ! "

Spans:
Span 11-12:  house => house
Span 6-7:  Oh => oh
Span 10-11:  pretty => pretty
Span 0-1:  Then => then
Span 1-2:  they => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  exclaim => exclaim-01
Oracle Span 11-12:  house => house
Oracle Span 10-11:  pretty => pretty
Oracle Span 12-13:  that => that
Oracle Span 0-1:  Then => then
Oracle Span 1-2:  they => they

Extra span: Oh => oh
Missing span: exclaim => exclaim-01
Missing span: that => that
Dependencies:
1	Then	_	RB	RB	_	4	advmod	_	_
2	they	_	PRP	PRP	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	exclaim	_	VB	VB	_	0	root	_	_
5	:	_	:	:	_	4	punct	_	_
6	"	_	''	''	_	4	punct	_	_
7	Oh	_	UH	UH	_	14	discourse	_	_
8	,	_	,	,	_	14	punct	_	_
9	what	_	WP	WP	_	12	dep	_	_
10	a	_	DT	DT	_	12	det	_	_
11	pretty	_	JJ	JJ	_	12	amod	_	_
12	house	_	NN	NN	_	14	dep	_	_
13	that	_	DT	DT	_	14	nsubj	_	_
14	is	_	VBZ	VBZ	_	4	ccomp	_	_
15	!	_	.	.	_	4	punct	_	_
16	"	_	''	''	_	4	punct	_	_

Oracle:
(e / exclaim-01, ARG0, t / they)
(e / exclaim-01, ARG1, p2 / pretty)
(e / exclaim-01, time, t3 / then)
(h2 / house, mod, t4 / that)
(p2 / pretty, domain, h2 / house)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),house,house,false), Span(10,11,List(1),pretty,pretty,false), Span(6,7,List(2),Oh,oh,false), Span(1,2,List(3),they,they,false), Span(0,1,List(4),Then,then,false)),Map(2 -> oh, 1 -> pretty, 4 -> then, 0 -> house, 3 -> they),Map(h -> house, t -> they, p -> pretty, t2 -> then, o -> oh))),[Ljava.lang.String;@762ef0ea,Annotation([Ljava.lang.String;@31f9b85e,[Ljava.lang.String;@424e1977,[Ljava.lang.String;@10d68fcd),Annotation([Ljava.lang.String;@117e949d,[Ljava.lang.String;@6db9f5a4,[Ledu.cmu.lti.nlp.amr.Dependency;@5f8edcc5),Annotation([Ljava.lang.String;@7b02881e,[Ljava.lang.String;@1ebd319f,[Ljava.lang.String;@3c0be339),Annotation([Ljava.lang.String;@15ca7889,[Ljava.lang.String;@7a675056,[Ledu.cmu.lti.nlp.amr.Entity;@d21a74c))
AMR:
(h / house, domain, o / oh)
(h / house, mod, p / pretty)
(h / house, poss, t / they)
(t2 / then, poss, p / pretty)

Decoded in 28,040 microseconds
Sentence: Just so , you might say to them : " The proof that the little prince existed is that he was charming , that he laughed , and that he was looking for a sheep .

Spans:
Span 27-28:  and => and
Span 21-22:  charming => charm-01
Span 29-30:  he => he
Span 24-25:  he => he
Span 19-20:  he => he
Span 0-1:  Just => just
Span 25-26:  laughed => laugh-01
Span 14-15:  little => little
Span 31-32:  looking => look-01
Span 15-16:  prince => prince
Span 5-6:  say => say-01
Span 34-35:  sheep => sheep
Span 1-2:  so => so
Span 3-4:  you => you

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 27-28:  and => and
Oracle Span 21-22:  charming => charming
Oracle Span 16-17:  existed => exist-01
Oracle Span 19-20:  he => he
Oracle Span 0-1:  Just => just-so
Oracle Span 25-26:  laughed => laugh-01
Oracle Span 14-15:  little => little
Oracle Span 31-32:  looking => look-01
Oracle Span 15-16:  prince => prince
Oracle Span 5-6:  say => say-01
Oracle Span 34-35:  sheep => sheep
Oracle Span 3-4:  you => you

Extra span: he => he
Extra span: he => he
Incorrect span: charming => charm-01
Extra span: so => so
Incorrect span: Just => just
Missing span: charming => charming
Missing span: existed => exist-01
Missing span: Just => just-so
Dependencies:
1	Just	_	RB	RB	_	2	advmod	_	_
2	so	_	RB	RB	_	6	advmod	_	_
3	,	_	,	,	_	6	punct	_	_
4	you	_	PRP	PRP	_	6	nsubj	_	_
5	might	_	MD	MD	_	6	aux	_	_
6	say	_	VB	VB	_	0	root	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	them	_	PRP	PRP	_	7	pobj	_	_
9	:	_	:	:	_	6	punct	_	_
10	"	_	''	''	_	6	punct	_	_
11	The	_	DT	DT	_	12	det	_	_
12	proof	_	NN	NN	_	18	nsubj	_	_
13	that	_	IN	IN	_	17	mark	_	_
14	the	_	DT	DT	_	16	det	_	_
15	little	_	JJ	JJ	_	16	amod	_	_
16	prince	_	NN	NN	_	17	nsubj	_	_
17	existed	_	VBD	VBD	_	12	dep	_	_
18	is	_	VBZ	VBZ	_	6	ccomp	_	_
19	that	_	IN	IN	_	22	mark	_	_
20	he	_	PRP	PRP	_	22	nsubj	_	_
21	was	_	VBD	VBD	_	22	cop	_	_
22	charming	_	JJ	JJ	_	18	ccomp	_	_
23	,	_	,	,	_	22	punct	_	_
24	that	_	IN	IN	_	26	mark	_	_
25	he	_	PRP	PRP	_	26	nsubj	_	_
26	laughed	_	VBD	VBD	_	22	ccomp	_	_
27	,	_	,	,	_	26	punct	_	_
28	and	_	CC	CC	_	26	cc	_	_
29	that	_	IN	IN	_	32	mark	_	_
30	he	_	PRP	PRP	_	32	nsubj	_	_
31	was	_	VBD	VBD	_	32	aux	_	_
32	looking	_	VBG	VBG	_	26	conj	_	_
33	for	_	IN	IN	_	32	prep	_	_
34	a	_	DT	DT	_	35	det	_	_
35	sheep	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c / charming)
(a / and, op, l / laugh-01)
(a / and, op, l2 / look-01)
(c / charming, domain, h / he)
(e / exist-01, ARG1, p3 / prince)
(l / laugh-01, ARG0, h / he)
(l2 / look-01, ARG0, h / he)
(l2 / look-01, ARG1, s3 / sheep)
(p3 / prince, mod, l3 / little)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, manner, j / just-so)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),sheep,sheep,false), Span(31,32,List(1),looking,look-01,false), Span(29,30,List(2),he,he,false), Span(27,28,List(3),and,and,false), Span(25,26,List(4),laughed,laugh-01,false), Span(24,25,List(5),he,he,false), Span(21,22,List(6),charming,charm-01,false), Span(19,20,List(7),he,he,false), Span(15,16,List(8),prince,prince,false), Span(14,15,List(9),little,little,false), Span(5,6,List(10),say,say-01,false), Span(3,4,List(11),you,you,false), Span(1,2,List(12),so,so,false), Span(0,1,List(13),Just,just,false)),Map(2 -> he, 5 -> he, 12 -> so, 8 -> prince, 7 -> he, 1 -> look-01, 4 -> laugh-01, 11 -> you, 6 -> charm-01, 0 -> sheep, 9 -> little, 3 -> and, 10 -> say-01, 13 -> just),Map(h -> he, h2 -> he, s2 -> say-01, j -> just, l3 -> little, s -> sheep, p -> prince, y -> you, a -> and, l2 -> laugh-01, c -> charm-01, h3 -> he, s3 -> so, l -> look-01))),[Ljava.lang.String;@683dbc2c,Annotation([Ljava.lang.String;@68267da0,[Ljava.lang.String;@2638011,[Ljava.lang.String;@6ff29830),Annotation([Ljava.lang.String;@6a2b953e,[Ljava.lang.String;@313b2ea6,[Ledu.cmu.lti.nlp.amr.Dependency;@2f465398),Annotation([Ljava.lang.String;@548e6d58,[Ljava.lang.String;@623a8092,[Ljava.lang.String;@a1cdc6d),Annotation([Ljava.lang.String;@175b9425,[Ljava.lang.String;@3098cf3b,[Ledu.cmu.lti.nlp.amr.Entity;@610f7aa))
AMR:
(a / and, op, l / look-01)
(a / and, op, l2 / laugh-01)
(c / charm-01, ARG0, j / just)
(c / charm-01, ARG1, h3 / he)
(c / charm-01, ARG2, l2 / laugh-01)
(l / look-01, ARG0, h / he)
(l / look-01, ARG1, s / sheep)
(l2 / laugh-01, ARG0, h2 / he)
(p / prince, mod, l3 / little)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, s3 / so)
(s2 / say-01, ARG2, p / prince)
(s3 / so, mod, j / just)

Decoded in 373,292 microseconds
Sentence: If anybody wants a sheep , that is a proof that he exists . "

Spans:
Span 1-2:  anybody => anybody
Span 11-12:  he => he
Span 4-5:  sheep => sheep

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  anybody => anybody
Oracle Span 12-13:  exists => exist-01
Oracle Span 4-5:  sheep => sheep
Oracle Span 2-3:  wants => want-01

Extra span: he => he
Missing span: wants => want-01
Missing span: exists => exist-01
Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	anybody	_	NN	NN	_	3	nsubj	_	_
3	wants	_	VBZ	VBZ	_	10	advcl	_	_
4	a	_	DT	DT	_	5	det	_	_
5	sheep	_	NN	NN	_	3	dobj	_	_
6	,	_	,	,	_	10	punct	_	_
7	that	_	DT	DT	_	10	nsubj	_	_
8	is	_	VBZ	VBZ	_	10	cop	_	_
9	a	_	DT	DT	_	10	det	_	_
10	proof	_	NN	NN	_	0	root	_	_
11	that	_	IN	IN	_	13	mark	_	_
12	he	_	PRP	PRP	_	13	nsubj	_	_
13	exists	_	VBZ	VBZ	_	10	ccomp	_	_
14	.	_	.	.	_	10	punct	_	_
15	"	_	''	''	_	10	punct	_	_

Oracle:
(e / exist-01, ARG1, a / anybody)
(w / want-01, ARG0, a / anybody)
(w / want-01, ARG1, s / sheep)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),he,he,false), Span(4,5,List(1),sheep,sheep,false), Span(1,2,List(2),anybody,anybody,false)),Map(2 -> anybody, 1 -> sheep, 0 -> he),Map(h -> he, s -> sheep, a -> anybody))),[Ljava.lang.String;@6a03bcb1,Annotation([Ljava.lang.String;@21b2e768,[Ljava.lang.String;@57250572,[Ljava.lang.String;@5609159b),Annotation([Ljava.lang.String;@2118cddf,[Ljava.lang.String;@17a7f733,[Ledu.cmu.lti.nlp.amr.Dependency;@68567e20),Annotation([Ljava.lang.String;@76ed1b7c,[Ljava.lang.String;@11fc564b,[Ljava.lang.String;@394a2528),Annotation([Ljava.lang.String;@6236eb5f,[Ljava.lang.String;@7c1e2a9e,[Ledu.cmu.lti.nlp.amr.Entity;@fa36558))
AMR:
(s / sheep, op, a / anybody)
(s / sheep, poss, h / he)

Decoded in 19,031 microseconds
Sentence: And what good would it do to tell them that ?

Spans:
Span 0-1:  And => and
Span 2-3:  good => good-04
Span 4-5:  it => it
Span 7-8:  tell => tell-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 5-6:  do => do-02
Oracle Span 2-3:  good => good-04
Oracle Span 7-8:  tell => tell-01
Oracle Span 9-10:  that => that

Extra span: it => it
Missing span: do => do-02
Missing span: that => that
Dependencies:
1	And	_	CC	CC	_	6	cc	_	_
2	what	_	WDT	WDT	_	3	det	_	_
3	good	_	NN	NN	_	6	dep	_	_
4	would	_	MD	MD	_	6	aux	_	_
5	it	_	PRP	PRP	_	6	nsubj	_	_
6	do	_	VB	VB	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	tell	_	VB	VB	_	6	xcomp	_	_
9	them	_	PRP	PRP	_	8	iobj	_	_
10	that	_	DT	DT	_	8	dobj	_	_
11	?	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, d / do-02)
(d / do-02, ARG0, t / tell-01)
(d / do-02, ARG1, g / good-04)
(t / tell-01, ARG1, t3 / that)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),tell,tell-01,false), Span(4,5,List(1),it,it,false), Span(2,3,List(2),good,good-04,false), Span(0,1,List(3),And,and,false)),Map(2 -> good-04, 1 -> it, 0 -> tell-01, 3 -> and),Map(t -> tell-01, g -> good-04, a -> and, i -> it))),[Ljava.lang.String;@672872e1,Annotation([Ljava.lang.String;@32910148,[Ljava.lang.String;@3f56875e,[Ljava.lang.String;@2b4bac49),Annotation([Ljava.lang.String;@fd07cbb,[Ljava.lang.String;@3571b748,[Ledu.cmu.lti.nlp.amr.Dependency;@3e96bacf),Annotation([Ljava.lang.String;@484970b0,[Ljava.lang.String;@4470f8a6,[Ljava.lang.String;@7c83dc97),Annotation([Ljava.lang.String;@7748410a,[Ljava.lang.String;@740773a3,[Ledu.cmu.lti.nlp.amr.Entity;@37f1104d))
AMR:
(g / good-04, ARG0, a / and)
(g / good-04, ARG1, i / it)
(t / tell-01, ARG1, i / it)

Decoded in 32,624 microseconds
Sentence: They would shrug their shoulders , and treat you like a child .

Spans:
Span 6-7:  and => and
Span 11-12:  child => child
Span 4-5:  shoulders => shoulder
Span 0-1:  They => they
Span 7-8:  treat => treat-02
Span 8-9:  you => you

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 11-12:  child => child
Oracle Span 4-5:  shoulders => shoulder
Oracle Span 2-3:  shrug => shrug-01
Oracle Span 0-1:  They => they
Oracle Span 7-8:  treat => treat-01
Oracle Span 8-9:  you => you

Incorrect span: treat => treat-02
Missing span: treat => treat-01
Missing span: shrug => shrug-01
Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	would	_	MD	MD	_	3	aux	_	_
3	shrug	_	VB	VB	_	0	root	_	_
4	their	_	PRP$	PRP$	_	5	poss	_	_
5	shoulders	_	NNS	NNS	_	3	dobj	_	_
6	,	_	,	,	_	3	punct	_	_
7	and	_	CC	CC	_	3	cc	_	_
8	treat	_	VB	VB	_	3	conj	_	_
9	you	_	PRP	PRP	_	8	dobj	_	_
10	like	_	IN	IN	_	8	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	child	_	NN	NN	_	10	pobj	_	_
13	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, s / shrug-01)
(a / and, op, t2 / treat-01)
(s / shrug-01, ARG0, t / they)
(s / shrug-01, ARG1, s2 / shoulder)
(s2 / shoulder, poss, t / they)
(t2 / treat-01, ARG0, t / they)
(t2 / treat-01, ARG1, y / you)
(t2 / treat-01, ARG2, c / child)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),child,child,false), Span(8,9,List(1),you,you,false), Span(7,8,List(2),treat,treat-02,false), Span(6,7,List(3),and,and,false), Span(4,5,List(4),shoulders,shoulder,false), Span(0,1,List(5),They,they,false)),Map(2 -> treat-02, 5 -> they, 1 -> you, 4 -> shoulder, 0 -> child, 3 -> and),Map(t -> treat-02, s -> shoulder, y -> you, a -> and, t2 -> they, c -> child))),[Ljava.lang.String;@55740540,Annotation([Ljava.lang.String;@60015ef5,[Ljava.lang.String;@2f54a33d,[Ljava.lang.String;@1018bde2),Annotation([Ljava.lang.String;@65b3f4a4,[Ljava.lang.String;@f2ff811,[Ledu.cmu.lti.nlp.amr.Dependency;@568ff82),Annotation([Ljava.lang.String;@50caa560,[Ljava.lang.String;@2a266d09,[Ljava.lang.String;@5ab9e72c),Annotation([Ljava.lang.String;@186f8716,[Ljava.lang.String;@1d8bd0de,[Ledu.cmu.lti.nlp.amr.Entity;@45ca843))
AMR:
(a / and, op, t / treat-02)
(t / treat-02, ARG0, t2 / they)
(t / treat-02, ARG1, y / you)
(t / treat-02, ARG2, c / child)
(t / treat-02, beneficiary, s / shoulder)

Decoded in 182,622 microseconds
Sentence: But if you said to them : " The planet he came from is Asteroid B-612 , " then they would be convinced , and leave you in peace from their questions .

NER Entity: (thing :name (name :op "Asteroid" :op "B" :op "-" :op "612"))
Spans:
Span 26-27:  and => and
Span 0-1:  But => contrast-01
Span 11-12:  came => come-01
Span 10-11:  he => he
Span 27-28:  leave => leave-15
Span 30-31:  peace => peace
Span 9-10:  planet => planet
Span 33-34:  questions => question-01
Span 3-4:  said => say-01
Span 20-21:  then => then
Span 21-22:  they => they
Span 28-29:  you => you
Span 2-3:  you => you

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 26-27:  and => and
Oracle Span 14-16:  Asteroid B => (name :op "B-612" :op "Asteroid")
Oracle Span 0-1:  But => contrast-01
Oracle Span 11-12:  came => come-01
Oracle Span 24-25:  convinced => convince-01
Oracle Span 10-11:  he => he
Oracle Span 27-28:  leave => leave-14
Oracle Span 30-31:  peace => peace
Oracle Span 9-10:  planet => planet
Oracle Span 33-34:  questions => question-01
Oracle Span 3-4:  said => say-01
Oracle Span 21-22:  they => they
Oracle Span 2-3:  you => you

Extra span: you => you
Incorrect span: leave => leave-15
Extra span: then => then
Missing span: Asteroid B => (name :op "B-612" :op "Asteroid")
Missing span: leave => leave-14
Missing span: convinced => convince-01
Dependencies:
1	But	_	CC	CC	_	23	cc	_	_
2	if	_	IN	IN	_	4	mark	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	said	_	VBD	VBD	_	23	advcl	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	them	_	PRP	PRP	_	5	pobj	_	_
7	:	_	:	:	_	6	punct	_	_
8	"	_	''	''	_	4	punct	_	_
9	The	_	DT	DT	_	10	det	_	_
10	planet	_	NN	NN	_	4	dobj	_	_
11	he	_	PRP	PRP	_	12	nsubj	_	_
12	came	_	VBD	VBD	_	10	rcmod	_	_
13	from	_	IN	IN	_	16	mark	_	_
14	is	_	VBZ	VBZ	_	16	cop	_	_
15	Asteroid	_	NNP	NNP	_	16	nn	_	_
16	B-612	_	NNP	NNP	_	12	advcl	_	_
17	,	_	,	,	_	4	punct	_	_
18	"	_	''	''	_	4	punct	_	_
19	then	_	RB	RB	_	23	advmod	_	_
20	they	_	PRP	PRP	_	23	nsubj	_	_
21	would	_	MD	MD	_	23	aux	_	_
22	be	_	VB	VB	_	23	cop	_	_
23	convinced	_	JJ	JJ	_	0	root	_	_
24	,	_	,	,	_	23	punct	_	_
25	and	_	CC	CC	_	23	cc	_	_
26	leave	_	VB	VB	_	23	conj	_	_
27	you	_	PRP	PRP	_	26	dobj	_	_
28	in	_	IN	IN	_	26	prep	_	_
29	peace	_	NN	NN	_	28	pobj	_	_
30	from	_	IN	IN	_	26	prep	_	_
31	their	_	PRP$	PRP$	_	32	poss	_	_
32	questions	_	NNS	NNS	_	30	pobj	_	_
33	.	_	.	.	_	23	punct	_	_

Oracle:
(a / and, condition, s / say-01)
(a / and, op, c / convince-01)
(a / and, op, l / leave-14)
(c / convince-01, ARG1, t / they)
(c2 / come-01, ARG1, h / he)
(c2 / come-01, ARG3, p / planet)
(c3 / contrast-01, ARG2, a / and)
(l / leave-14, ARG0, t / they)
(l / leave-14, ARG1, p2 / peace)
(n / name, op, "Asteroid")
(n / name, op, "B-612")
(p / planet, name, n / name)
(p2 / peace, domain, y / you)
(p2 / peace, topic, q2 / question-01)
(q2 / question-01, ARG0, t / they)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, c2 / come-01)
(s / say-01, ARG2, t / they)

Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),questions,question-01,false), Span(30,31,List(1),peace,peace,false), Span(28,29,List(2),you,you,false), Span(27,28,List(3),leave,leave-15,false), Span(26,27,List(4),and,and,false), Span(21,22,List(5),they,they,false), Span(20,21,List(6),then,then,false), Span(11,12,List(7),came,come-01,false), Span(10,11,List(8),he,he,false), Span(9,10,List(9),planet,planet,false), Span(3,4,List(10),said,say-01,false), Span(2,3,List(11),you,you,false), Span(0,1,List(12),But,contrast-01,false)),Map(2 -> you, 5 -> they, 12 -> contrast-01, 8 -> he, 7 -> come-01, 1 -> peace, 4 -> and, 11 -> you, 6 -> then, 0 -> question-01, 9 -> planet, 3 -> leave-15, 10 -> say-01),Map(h -> he, q -> question-01, t -> they, p2 -> planet, s -> say-01, p -> peace, y -> you, a -> and, t2 -> then, c -> come-01, l -> leave-15, y2 -> you, c2 -> contrast-01))),[Ljava.lang.String;@11c9af63,Annotation([Ljava.lang.String;@757acd7b,[Ljava.lang.String;@36b4fe2a,[Ljava.lang.String;@574b560f),Annotation([Ljava.lang.String;@ba54932,[Ljava.lang.String;@28975c28,[Ledu.cmu.lti.nlp.amr.Dependency;@3943a2be),Annotation([Ljava.lang.String;@343570b7,[Ljava.lang.String;@157853da,[Ljava.lang.String;@71c3b41),Annotation([Ljava.lang.String;@236e3f4e,[Ljava.lang.String;@3cc1435c,[Ledu.cmu.lti.nlp.amr.Entity;@6bf0219d))
AMR:
(a / and, op, l / leave-15)
(c / come-01, ARG0, p2 / planet)
(c / come-01, ARG1, h / he)
(c2 / contrast-01, ARG0, p / peace)
(c2 / contrast-01, ARG1, s / say-01)
(c2 / contrast-01, ARG2, a / and)
(l / leave-15, ARG0, t / they)
(l / leave-15, ARG1, y / you)
(l / leave-15, manner, q / question-01)
(q / question-01, ARG0, t2 / then)
(s / say-01, ARG0, y2 / you)
(s / say-01, ARG1, p2 / planet)

Decoded in 446,050 microseconds
Sentence: They are like that .

Spans:
Span 0-1:  They => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  that => that
Oracle Span 0-1:  They => they

Missing span: that => that
Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	are	_	VBP	VBP	_	0	root	_	_
3	like	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	3	pobj	_	_
5	.	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),They,they,false)),Map(0 -> they),Map(t -> they))),[Ljava.lang.String;@dd0c991,Annotation([Ljava.lang.String;@5f16132a,[Ljava.lang.String;@69fb6037,[Ljava.lang.String;@36d585c),Annotation([Ljava.lang.String;@87a85e1,[Ljava.lang.String;@671a5887,[Ledu.cmu.lti.nlp.amr.Dependency;@5552768b),Annotation([Ljava.lang.String;@3c947bc5,[Ljava.lang.String;@609db43b,[Ljava.lang.String;@55f616cf),Annotation([Ljava.lang.String;@1356d4d4,[Ljava.lang.String;@c03cf28,[Ledu.cmu.lti.nlp.amr.Entity;@1329eff))
AMR:


Decoded in 7,551 microseconds
Sentence: One must not hold it against them .

Spans:
Span 5-6:  against => again
Span 4-5:  it => it
Span 0-1:  One => one

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  against => against
Oracle Span 3-4:  hold => hold-01
Oracle Span 4-5:  it => it
Oracle Span 0-1:  One => one

Incorrect span: against => again
Missing span: hold => hold-01
Missing span: against => against
Dependencies:
1	One	_	PRP	PRP	_	4	nsubj	_	_
2	must	_	MD	MD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	hold	_	VB	VB	_	0	root	_	_
5	it	_	PRP	PRP	_	4	dobj	_	_
6	against	_	IN	IN	_	4	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	.	_	.	.	_	4	punct	_	_

Oracle:
(h / hold-01, ARG0, o2 / one)
(h / hold-01, ARG1, i / it)
(h / hold-01, ARG2, a / against)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),against,again,false), Span(4,5,List(1),it,it,false), Span(0,1,List(2),One,one,false)),Map(2 -> one, 1 -> it, 0 -> again),Map(a -> again, i -> it, o -> one))),[Ljava.lang.String;@6497b078,Annotation([Ljava.lang.String;@41c2284a,[Ljava.lang.String;@53aad5d5,[Ljava.lang.String;@46fa7c39),Annotation([Ljava.lang.String;@1fb700ee,[Ljava.lang.String;@4f67eb2a,[Ledu.cmu.lti.nlp.amr.Dependency;@4a668b6e),Annotation([Ljava.lang.String;@5f683daf,[Ljava.lang.String;@78ffe6dc,[Ljava.lang.String;@8317c52),Annotation([Ljava.lang.String;@76f2bbc1,[Ljava.lang.String;@68e965f5,[Ledu.cmu.lti.nlp.amr.Entity;@6f27a732))
AMR:
(i / it, mod, a / again)
(o / one, poss, i / it)

Decoded in 14,082 microseconds
Sentence: Children should always show great forbearance toward grown - up people .

Spans:
Span 2-3:  always => always
Span 4-5:  great => great
Span 7-8:  grown => grown-up
Span 1-2:  should => recommend-01
Span 3-4:  show => show-01
Span 6-7:  toward => toward
Span 9-10:  up => up

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 2-3:  always => always
Oracle Span 0-1:  Children => child
Oracle Span 5-6:  forbearance => forbearance
Oracle Span 4-5:  great => great
Oracle Span 7-8:  grown => grown-up
Oracle Span 1-2:  should => recommend-01
Oracle Span 3-4:  show => show-01

Extra span: up => up
Extra span: toward => toward
Missing span: forbearance => forbearance
Missing span: Children => child
Dependencies:
1	Children	_	NNP	NNP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	always	_	RB	RB	_	4	advmod	_	_
4	show	_	VB	VB	_	0	root	_	_
5	great	_	JJ	JJ	_	6	amod	_	_
6	forbearance	_	NN	NN	_	4	dobj	_	_
7	toward	_	IN	IN	_	4	prep	_	_
8	grown	_	JJ	JJ	_	7	pobj	_	_
9	-	_	:	:	_	8	punct	_	_
10	up	_	IN	IN	_	8	advmod	_	_
11	people	_	NNS	NNS	_	8	dep	_	_
12	.	_	.	.	_	4	punct	_	_

Oracle:
(f / forbearance, mod, g / great)
(r / recommend-01, ARG1, s / show-01)
(s / show-01, ARG0, c / child)
(s / show-01, ARG1, f / forbearance)
(s / show-01, ARG2, g2 / grown-up)
(s / show-01, time, a / always)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),up,up,false), Span(7,8,List(1),grown,grown-up,false), Span(6,7,List(2),toward,toward,false), Span(4,5,List(3),great,great,false), Span(3,4,List(4),show,show-01,false), Span(2,3,List(5),always,always,false), Span(1,2,List(6),should,recommend-01,false)),Map(2 -> toward, 5 -> always, 1 -> grown-up, 4 -> show-01, 6 -> recommend-01, 0 -> up, 3 -> great),Map(t -> toward, s -> show-01, g2 -> great, g -> grown-up, a -> always, r -> recommend-01, u -> up))),[Ljava.lang.String;@6c779568,Annotation([Ljava.lang.String;@f381794,[Ljava.lang.String;@2cdd0d4b,[Ljava.lang.String;@7e9131d5),Annotation([Ljava.lang.String;@2e1d27ba,[Ljava.lang.String;@61d6015a,[Ledu.cmu.lti.nlp.amr.Dependency;@2525ff7e),Annotation([Ljava.lang.String;@524d6d96,[Ljava.lang.String;@152aa092,[Ljava.lang.String;@44a7bfbc),Annotation([Ljava.lang.String;@4ef37659,[Ljava.lang.String;@776b83cc,[Ledu.cmu.lti.nlp.amr.Entity;@37858383))
AMR:
(r / recommend-01, ARG0, g2 / great)
(r / recommend-01, ARG1, s / show-01)
(s / show-01, ARG0, u / up)
(s / show-01, ARG1, g / grown-up)
(s / show-01, ARG2, t / toward)
(s / show-01, time, a / always)

Decoded in 97,784 microseconds
Sentence: But certainly , for us who understand life , figures are a matter of indifference .

Spans:
Span 0-1:  But => contrast-01
Span 1-2:  certainly => certain
Span 9-10:  figures => figure
Span 7-8:  life => life
Span 12-13:  matter => matter
Span 6-7:  understand => understand-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  certainly => certain
Oracle Span 9-10:  figures => figure
Oracle Span 14-15:  indifference => indifferent-01
Oracle Span 7-8:  life => life
Oracle Span 6-7:  understand => understand-01

Extra span: matter => matter
Missing span: indifference => indifferent-01
Dependencies:
1	But	_	CC	CC	_	13	cc	_	_
2	certainly	_	RB	RB	_	13	advmod	_	_
3	,	_	,	,	_	13	punct	_	_
4	for	_	IN	IN	_	13	prep	_	_
5	us	_	PRP	PRP	_	4	pobj	_	_
6	who	_	WP	WP	_	7	nsubj	_	_
7	understand	_	VBP	VBP	_	5	rcmod	_	_
8	life	_	NN	NN	_	7	dobj	_	_
9	,	_	,	,	_	13	punct	_	_
10	figures	_	NNS	NNS	_	13	nsubj	_	_
11	are	_	VBP	VBP	_	13	cop	_	_
12	a	_	DT	DT	_	13	det	_	_
13	matter	_	NN	NN	_	0	root	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	indifference	_	NN	NN	_	14	pobj	_	_
16	.	_	.	.	_	13	punct	_	_

Oracle:
(c / certain, domain, i2 / indifferent-01)
(c2 / contrast-01, ARG2, c / certain)
(i2 / indifferent-01, ARG2, f2 / figure)
(u / understand-01, ARG1, l / life)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),matter,matter,false), Span(9,10,List(1),figures,figure,false), Span(7,8,List(2),life,life,false), Span(6,7,List(3),understand,understand-01,false), Span(1,2,List(4),certainly,certain,false), Span(0,1,List(5),But,contrast-01,false)),Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01),Map(m -> matter, c -> certain, u -> understand-01, l -> life, f -> figure, c2 -> contrast-01))),[Ljava.lang.String;@4e268090,Annotation([Ljava.lang.String;@1bb266b3,[Ljava.lang.String;@306cf3ea,[Ljava.lang.String;@2beee7ff),Annotation([Ljava.lang.String;@5136d012,[Ljava.lang.String;@5939a379,[Ledu.cmu.lti.nlp.amr.Dependency;@e1de817),Annotation([Ljava.lang.String;@52102734,[Ljava.lang.String;@3541cb24,[Ljava.lang.String;@2177849e),Annotation([Ljava.lang.String;@40cb8df7,[Ljava.lang.String;@13b13b5d,[Ledu.cmu.lti.nlp.amr.Entity;@2892dae4))
AMR:
(c2 / contrast-01, ARG0, m / matter)
(c2 / contrast-01, ARG1, c / certain)
(c2 / contrast-01, time, f / figure)
(u / understand-01, ARG0, m / matter)
(u / understand-01, ARG1, l / life)

Decoded in 53,988 microseconds
Sentence: I should have liked to begin this story in the fashion of the fairy - tales .

Spans:
Span 5-6:  begin => begin-01
Span 0-1:  I => i
Span 3-4:  liked => like-02
Span 1-2:  should => recommend-01
Span 7-8:  story => story
Span 6-7:  this => this

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 5-6:  begin => begin-01
Oracle Span 13-14:  fairy => fairy
Oracle Span 10-11:  fashion => fashion
Oracle Span 0-1:  I => i
Oracle Span 3-4:  liked => like-02
Oracle Span 7-8:  story => story
Oracle Span 15-16:  tales => tale
Oracle Span 6-7:  this => this

Extra span: should => recommend-01
Missing span: fashion => fashion
Missing span: tales => tale
Missing span: fairy => fairy
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	have	_	VB	VB	_	4	aux	_	_
4	liked	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	begin	_	VB	VB	_	4	xcomp	_	_
7	this	_	DT	DT	_	8	det	_	_
8	story	_	NN	NN	_	6	dobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	fashion	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	fairy	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	8	punct	_	_
16	tales	_	NNS	NNS	_	8	dep	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, s / story)
(b / begin-01, manner, f / fashion)
(f / fashion, mod, t2 / tale)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, b / begin-01)
(s / story, mod, t / this)
(t2 / tale, mod, f2 / fairy)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),story,story,false), Span(6,7,List(1),this,this,false), Span(5,6,List(2),begin,begin-01,false), Span(3,4,List(3),liked,like-02,false), Span(1,2,List(4),should,recommend-01,false), Span(0,1,List(5),I,i,false)),Map(2 -> begin-01, 5 -> i, 1 -> this, 4 -> recommend-01, 0 -> story, 3 -> like-02),Map(b -> begin-01, t -> this, s -> story, i -> i, r -> recommend-01, l -> like-02))),[Ljava.lang.String;@355ce81c,Annotation([Ljava.lang.String;@29647f75,[Ljava.lang.String;@3315d2d7,[Ljava.lang.String;@d6e7bab),Annotation([Ljava.lang.String;@5fa07e12,[Ljava.lang.String;@55b53d44,[Ledu.cmu.lti.nlp.amr.Dependency;@482bce4f),Annotation([Ljava.lang.String;@366647c2,[Ljava.lang.String;@6a6afff2,[Ljava.lang.String;@1649b0e6),Annotation([Ljava.lang.String;@865dd6,[Ljava.lang.String;@4da4253,[Ledu.cmu.lti.nlp.amr.Entity;@3972a855))
AMR:
(b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, s / story)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, b / begin-01)
(r / recommend-01, ARG1, l / like-02)
(s / story, mod, t / this)

Decoded in 78,081 microseconds
Sentence: I should have like to say : " Once upon a time there was a little prince who lived on a planet that was scarcely any bigger than himself , and who had need of a sheep ... "

Spans:
Span 30-31:  and => and
Span 25-26:  any => any
Span 0-1:  I => i
Span 15-16:  little => little
Span 18-19:  lived => live-01
Span 33-34:  need => need-01
Span 21-22:  planet => planet
Span 16-17:  prince => prince
Span 5-6:  say => say-01
Span 24-25:  scarcely => scarce
Span 36-37:  sheep => sheep
Span 1-2:  should => recommend-01
Span 12-13:  there => there
Span 11-12:  time => time

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 26-27:  bigger => big
Oracle Span 0-1:  I => i
Oracle Span 3-4:  like => like-02
Oracle Span 15-16:  little => little
Oracle Span 18-19:  lived => live-01
Oracle Span 33-34:  need => need-01
Oracle Span 8-9:  Once => once-upon-a-time
Oracle Span 21-22:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 5-6:  say => say-01
Oracle Span 24-25:  scarcely => scarce
Oracle Span 36-37:  sheep => sheep

Extra span: and => and
Extra span: any => any
Extra span: there => there
Extra span: time => time
Extra span: should => recommend-01
Missing span: like => like-02
Missing span: bigger => big
Missing span: Once => once-upon-a-time
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	have	_	VB	VB	_	4	aux	_	_
4	like	_	VBP	VBP	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	say	_	VB	VB	_	4	xcomp	_	_
7	:	_	:	:	_	4	punct	_	_
8	"	_	''	''	_	4	punct	_	_
9	Once	_	RB	RB	_	14	advmod	_	_
10	upon	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	time	_	NN	NN	_	10	pobj	_	_
13	there	_	EX	EX	_	14	expl	_	_
14	was	_	VBD	VBD	_	4	ccomp	_	_
15	a	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	nsubj	_	_
18	who	_	WP	WP	_	19	nsubj	_	_
19	lived	_	VBD	VBD	_	17	rcmod	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	a	_	DT	DT	_	22	det	_	_
22	planet	_	NN	NN	_	20	pobj	_	_
23	that	_	WDT	WDT	_	27	nsubj	_	_
24	was	_	VBD	VBD	_	27	cop	_	_
25	scarcely	_	RB	RB	_	27	advmod	_	_
26	any	_	RB	RB	_	27	advmod	_	_
27	bigger	_	JJR	JJR	_	19	dep	_	_
28	than	_	IN	IN	_	27	prep	_	_
29	himself	_	PRP	PRP	_	28	pobj	_	_
30	,	_	,	,	_	27	punct	_	_
31	and	_	CC	CC	_	27	cc	_	_
32	who	_	WP	WP	_	33	nsubj	_	_
33	had	_	VBD	VBD	_	27	conj	_	_
34	need	_	NN	NN	_	33	dobj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	a	_	DT	DT	_	37	det	_	_
37	sheep	_	NN	NN	_	35	pobj	_	_
38	...	_	.	.	_	4	punct	_	_
39	"	_	''	''	_	4	punct	_	_

Oracle:
(b / big, compared-to, p / prince)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, s / say-01)
(l3 / live-01, ARG0, p / prince)
(l3 / live-01, location, p2 / planet)
(n / need-01, ARG0, p / prince)
(n / need-01, ARG1, s3 / sheep)
(p / prince, mod, l2 / little)
(p / prince, time, o / once-upon-a-time)
(p2 / planet, mod, b / big)
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, p / prince)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),sheep,sheep,false), Span(33,34,List(1),need,need-01,false), Span(30,31,List(2),and,and,false), Span(25,26,List(3),any,any,false), Span(24,25,List(4),scarcely,scarce,false), Span(21,22,List(5),planet,planet,false), Span(18,19,List(6),lived,live-01,false), Span(16,17,List(7),prince,prince,false), Span(15,16,List(8),little,little,false), Span(12,13,List(9),there,there,false), Span(11,12,List(10),time,time,false), Span(5,6,List(11),say,say-01,false), Span(1,2,List(12),should,recommend-01,false), Span(0,1,List(13),I,i,false)),Map(2 -> and, 5 -> planet, 12 -> recommend-01, 8 -> little, 7 -> prince, 1 -> need-01, 4 -> scarce, 11 -> say-01, 6 -> live-01, 0 -> sheep, 9 -> there, 3 -> any, 10 -> time, 13 -> i),Map(n -> need-01, s2 -> scarce, t -> there, p2 -> prince, s -> sheep, p -> planet, a -> and, t2 -> time, l2 -> little, i -> i, a2 -> any, r -> recommend-01, s3 -> say-01, l -> live-01))),[Ljava.lang.String;@6a370f4,Annotation([Ljava.lang.String;@2abf4075,[Ljava.lang.String;@770d3326,[Ljava.lang.String;@4cc8eb05),Annotation([Ljava.lang.String;@51f116b8,[Ljava.lang.String;@19d481b,[Ledu.cmu.lti.nlp.amr.Dependency;@1f97cf0d),Annotation([Ljava.lang.String;@140c9f39,[Ljava.lang.String;@4d910fd6,[Ljava.lang.String;@26275bef),Annotation([Ljava.lang.String;@7690781,[Ljava.lang.String;@77eca502,[Ledu.cmu.lti.nlp.amr.Entity;@3246fb96))
AMR:
(l / live-01, ARG0, p2 / prince)
(l / live-01, ARG1, a2 / any)
(l / live-01, ARG2, s2 / scarce)
(l / live-01, location, p / planet)
(n / need-01, ARG0, t2 / time)
(n / need-01, ARG1, s / sheep)
(n / need-01, condition, s3 / say-01)
(p2 / prince, mod, l2 / little)
(r / recommend-01, ARG0, t / there)
(r / recommend-01, ARG2, i / i)
(s3 / say-01, ARG0, i / i)
(s3 / say-01, ARG1, a / and)
(s3 / say-01, ARG2, p2 / prince)

Decoded in 486,275 microseconds
Sentence: To those who understand life , that would have given a much greater air of truth to my story .

Spans:
Span 13-14:  air => air
Span 9-10:  given => give-01
Span 4-5:  life => life
Span 11-12:  much => much
Span 18-19:  story => story
Span 15-16:  truth => truth
Span 3-4:  understand => understand-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 13-14:  air => air
Oracle Span 9-10:  given => give-01
Oracle Span 12-13:  greater => great
Oracle Span 4-5:  life => life
Oracle Span 11-12:  much => much
Oracle Span 18-19:  story => story
Oracle Span 6-7:  that => that
Oracle Span 15-16:  truth => truth
Oracle Span 3-4:  understand => (person :ARG0-of understand-01)

Incorrect span: understand => understand-01
Missing span: understand => (person :ARG0-of understand-01)
Missing span: greater => great
Missing span: that => that
Dependencies:
1	To	_	TO	TO	_	10	prep	_	_
2	those	_	DT	DT	_	1	pobj	_	_
3	who	_	WP	WP	_	4	nsubj	_	_
4	understand	_	VBP	VBP	_	2	rcmod	_	_
5	life	_	NN	NN	_	4	dobj	_	_
6	,	_	,	,	_	10	punct	_	_
7	that	_	DT	DT	_	10	nsubj	_	_
8	would	_	MD	MD	_	10	aux	_	_
9	have	_	VB	VB	_	10	aux	_	_
10	given	_	VBN	VBN	_	0	root	_	_
11	a	_	DT	DT	_	14	det	_	_
12	much	_	RB	RB	_	13	advmod	_	_
13	greater	_	JJR	JJR	_	14	amod	_	_
14	air	_	NN	NN	_	10	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	truth	_	NN	NN	_	15	pobj	_	_
17	to	_	TO	TO	_	10	prep	_	_
18	my	_	PRP$	PRP$	_	19	poss	_	_
19	story	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	10	punct	_	_

Oracle:
(a / air, mod, g2 / great)
(g / give-01, ARG0, t / that)
(g / give-01, ARG1, t3 / truth)
(g / give-01, ARG2, s / story)
(g / give-01, beneficiary, p / person)
(t3 / truth, quant, a / air)
(u / understand-01, ARG0, p / person)
(u / understand-01, ARG1, l / life)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),story,story,false), Span(15,16,List(1),truth,truth,false), Span(13,14,List(2),air,air,false), Span(11,12,List(3),much,much,false), Span(9,10,List(4),given,give-01,false), Span(4,5,List(5),life,life,false), Span(3,4,List(6),understand,understand-01,false)),Map(2 -> air, 5 -> life, 1 -> truth, 4 -> give-01, 6 -> understand-01, 0 -> story, 3 -> much),Map(t -> truth, s -> story, m -> much, g -> give-01, a -> air, u -> understand-01, l -> life))),[Ljava.lang.String;@2e222612,Annotation([Ljava.lang.String;@61386958,[Ljava.lang.String;@73ee04c8,[Ljava.lang.String;@7671cb68),Annotation([Ljava.lang.String;@49dc7102,[Ljava.lang.String;@6b8ca3c8,[Ledu.cmu.lti.nlp.amr.Dependency;@68c72235),Annotation([Ljava.lang.String;@10959ece,[Ljava.lang.String;@3a6bb9bf,[Ljava.lang.String;@34f7cfd9),Annotation([Ljava.lang.String;@65f095f8,[Ljava.lang.String;@59af0466,[Ledu.cmu.lti.nlp.amr.Entity;@3e6ef8ad))
AMR:
(a / air, domain, t / truth)
(g / give-01, ARG1, a / air)
(g / give-01, ARG2, u / understand-01)
(g / give-01, destination, s / story)
(u / understand-01, ARG0, m / much)
(u / understand-01, ARG1, l / life)

Decoded in 58,894 microseconds
Sentence: For I do not want any one to read my book carelessly .

Spans:
Span 5-6:  any => any
Span 10-11:  book => book
Span 1-2:  I => i
Span 4-5:  want => want-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 10-11:  book => book
Oracle Span 11-12:  carelessly => careless
Oracle Span 1-2:  I => i
Oracle Span 8-9:  read => read-01
Oracle Span 4-5:  want => want-01

Extra span: any => any
Missing span: read => read-01
Missing span: carelessly => careless
Dependencies:
1	For	_	IN	IN	_	5	dep	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	do	_	VBP	VBP	_	5	aux	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	want	_	VB	VB	_	0	root	_	_
6	any	_	DT	DT	_	7	det	_	_
7	one	_	NN	NN	_	5	dobj	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	read	_	VB	VB	_	7	vmod	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	book	_	NN	NN	_	9	dobj	_	_
12	carelessly	_	RB	RB	_	9	advmod	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(b / book, poss, i / i)
(r / read-01, ARG1, b / book)
(r / read-01, manner, c2 / careless)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, r / read-01)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),book,book,false), Span(5,6,List(1),any,any,false), Span(4,5,List(2),want,want-01,false), Span(1,2,List(3),I,i,false)),Map(2 -> want-01, 1 -> any, 0 -> book, 3 -> i),Map(w -> want-01, b -> book, a -> any, i -> i))),[Ljava.lang.String;@346d61be,Annotation([Ljava.lang.String;@55536d9e,[Ljava.lang.String;@747edf66,[Ljava.lang.String;@3d1cfad4),Annotation([Ljava.lang.String;@62230c58,[Ljava.lang.String;@2cd2a21f,[Ledu.cmu.lti.nlp.amr.Dependency;@2e55dd0c),Annotation([Ljava.lang.String;@74455848,[Ljava.lang.String;@e7edb54,[Ljava.lang.String;@378542de),Annotation([Ljava.lang.String;@3738449f,[Ljava.lang.String;@69e1dd28,[Ledu.cmu.lti.nlp.amr.Entity;@11bd0f3b))
AMR:
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, a / any)
(w / want-01, ARG2, b / book)

Decoded in 62,172 microseconds
Sentence: I have suffered too much grief in setting down these memories .

Spans:
Span 8-9:  down => down
Span 5-6:  grief => grieve-01
Span 0-1:  I => i
Span 10-11:  memories => memory
Span 4-5:  much => much
Span 3-4:  too => too

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 5-6:  grief => grief
Oracle Span 0-1:  I => i
Oracle Span 10-11:  memories => memory
Oracle Span 4-5:  much => much
Oracle Span 2-3:  suffered => suffer-01
Oracle Span 3-4:  too => too

Extra span: down => down
Incorrect span: grief => grieve-01
Missing span: suffered => suffer-01
Missing span: grief => grief
Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	suffered	_	VBN	VBN	_	0	root	_	_
4	too	_	RB	RB	_	6	advmod	_	_
5	much	_	RB	RB	_	6	advmod	_	_
6	grief	_	JJ	JJ	_	3	acomp	_	_
7	in	_	IN	IN	_	3	prep	_	_
8	setting	_	VBG	VBG	_	7	pcomp	_	_
9	down	_	RP	RP	_	8	prt	_	_
10	these	_	DT	DT	_	11	det	_	_
11	memories	_	NNS	NNS	_	8	dobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(g / grief, quant, m / much)
(m / much, degree, t / too)
(s / suffer-01, ARG0, i / i)
(s / suffer-01, ARG1, g / grief)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),memories,memory,false), Span(8,9,List(1),down,down,false), Span(5,6,List(2),grief,grieve-01,false), Span(4,5,List(3),much,much,false), Span(3,4,List(4),too,too,false), Span(0,1,List(5),I,i,false)),Map(2 -> grieve-01, 5 -> i, 1 -> down, 4 -> too, 0 -> memory, 3 -> much),Map(t -> too, m2 -> much, d -> down, m -> memory, g -> grieve-01, i -> i))),[Ljava.lang.String;@c333c60,Annotation([Ljava.lang.String;@79da8dc5,[Ljava.lang.String;@1eb5174b,[Ljava.lang.String;@67080771),Annotation([Ljava.lang.String;@72cde7cc,[Ljava.lang.String;@5fd4f8f5,[Ledu.cmu.lti.nlp.amr.Dependency;@696da30b),Annotation([Ljava.lang.String;@4e7912d8,[Ljava.lang.String;@53976f5c,[Ljava.lang.String;@2bfc268b),Annotation([Ljava.lang.String;@2f8dad04,[Ljava.lang.String;@29e495ff,[Ledu.cmu.lti.nlp.amr.Entity;@41e1e210))
AMR:
(d / down, op, m / memory)
(g / grieve-01, ARG0, d / down)
(g / grieve-01, ARG1, i / i)
(g / grieve-01, degree, m2 / much)
(g / grieve-01, mod, t / too)

Decoded in 38,057 microseconds
Sentence: Six years have already passed since my friend went away from me , with his sheep .

Spans:
Span 3-4:  already => already
Span 9-10:  away => away
Span 7-8:  friend => friend
Span 15-16:  sheep => sheep
Span 5-6:  since => since
Span 1-2:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  already => already
Oracle Span 9-10:  away => away
Oracle Span 7-8:  friend => friend
Oracle Span 2-3:  have => (person :ARG0-of have-rel-role-91)
Oracle Span 15-16:  sheep => sheep
Oracle Span 0-1:  Six => 6
Oracle Span 8-9:  went => go-02
Oracle Span 1-2:  years => (temporal-quantity :unit year)

Extra span: since => since
Missing span: went => go-02
Missing span: Six => 6
Missing span: have => (person :ARG0-of have-rel-role-91)
Dependencies:
1	Six	_	CD	CD	_	2	num	_	_
2	years	_	NNS	NNS	_	5	nsubj	_	_
3	have	_	VBP	VBP	_	5	aux	_	_
4	already	_	RB	RB	_	5	advmod	_	_
5	passed	_	VBN	VBN	_	0	root	_	_
6	since	_	IN	IN	_	9	mark	_	_
7	my	_	PRP$	PRP$	_	8	poss	_	_
8	friend	_	NN	NN	_	9	nsubj	_	_
9	went	_	VBD	VBD	_	5	advcl	_	_
10	away	_	RB	RB	_	9	advmod	_	_
11	from	_	IN	IN	_	9	prep	_	_
12	me	_	PRP	PRP	_	11	pobj	_	_
13	,	_	,	,	_	9	punct	_	_
14	with	_	IN	IN	_	9	prep	_	_
15	his	_	PRP$	PRP$	_	16	poss	_	_
16	sheep	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	5	punct	_	_

Oracle:
(g / go-02, ARG0, p / person)
(g / go-02, accompanier, s / sheep)
(g / go-02, direction, a / away)
(g / go-02, time, a3 / already)
(h / have-rel-role-91, ARG0, p / person)
(h / have-rel-role-91, ARG2, f / friend)
(s / sheep, poss, p / person)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),sheep,sheep,false), Span(9,10,List(1),away,away,false), Span(7,8,List(2),friend,friend,false), Span(5,6,List(3),since,since,false), Span(3,4,List(4),already,already,false), Span(1,2,List(6, 5),years,(temporal-quantity :unit year),false)),Map(2 -> friend, 5 -> temporal-quantity, 1 -> away, 4 -> already, 6 -> year, 0 -> sheep, 3 -> since),Map(t -> temporal-quantity, s2 -> since, s -> sheep, y -> year, a -> away, a2 -> already, f -> friend))),[Ljava.lang.String;@be35cd9,Annotation([Ljava.lang.String;@4944252c,[Ljava.lang.String;@44821a96,[Ljava.lang.String;@a3d8174),Annotation([Ljava.lang.String;@1ba9117e,[Ljava.lang.String;@732c2a62,[Ledu.cmu.lti.nlp.amr.Dependency;@272ed83b),Annotation([Ljava.lang.String;@41fecb8b,[Ljava.lang.String;@120f102b,[Ljava.lang.String;@625732),Annotation([Ljava.lang.String;@51dcb805,[Ljava.lang.String;@66498326,[Ledu.cmu.lti.nlp.amr.Entity;@cad498c))
AMR:
(a / away, domain, s2 / since)
(f / friend, poss, t / temporal-quantity)
(s / sheep, domain, a2 / already)
(s / sheep, poss, s2 / since)
(s2 / since, op, f / friend)
(t / temporal-quantity, unit, y / year)

Decoded in 41,828 microseconds
Sentence: If I try to describe him here , it is to make sure that I shall not forget him .

Spans:
Span 4-5:  describe => describe-01
Span 17-18:  forget => forget-01
Span 6-7:  here => here
Span 14-15:  I => i
Span 1-2:  I => i
Span 8-9:  it => it
Span 12-13:  sure => sure-02
Span 2-3:  try => try-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 4-5:  describe => describe-01
Oracle Span 17-18:  forget => forget-01
Oracle Span 6-7:  here => here
Oracle Span 1-2:  I => i
Oracle Span 2-3:  try => try-01

Extra span: I => i
Extra span: sure => sure-02
Extra span: it => it
Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	try	_	VBP	VBP	_	10	advcl	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	describe	_	VB	VB	_	3	xcomp	_	_
6	him	_	PRP	PRP	_	5	dobj	_	_
7	here	_	RB	RB	_	5	advmod	_	_
8	,	_	,	,	_	10	punct	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	is	_	VBZ	VBZ	_	0	root	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	make	_	VB	VB	_	10	xcomp	_	_
13	sure	_	JJ	JJ	_	12	acomp	_	_
14	that	_	IN	IN	_	18	mark	_	_
15	I	_	PRP	PRP	_	18	nsubj	_	_
16	shall	_	MD	MD	_	18	aux	_	_
17	not	_	RB	RB	_	18	neg	_	_
18	forget	_	VB	VB	_	12	ccomp	_	_
19	him	_	PRP	PRP	_	18	dobj	_	_
20	.	_	.	.	_	10	punct	_	_

Oracle:
(d / describe-01, ARG0, i / i)
(d / describe-01, location, h2 / here)
(f / forget-01, ARG0, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, d / describe-01)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),forget,forget-01,false), Span(14,15,List(1),I,i,false), Span(12,13,List(2),sure,sure-02,false), Span(8,9,List(3),it,it,false), Span(6,7,List(4),here,here,false), Span(4,5,List(5),describe,describe-01,false), Span(2,3,List(6),try,try-01,false), Span(1,2,List(7),I,i,false)),Map(2 -> sure-02, 5 -> describe-01, 7 -> i, 1 -> i, 4 -> here, 6 -> try-01, 0 -> forget-01, 3 -> it),Map(h -> here, t -> try-01, s -> sure-02, d -> describe-01, i3 -> i, i2 -> it, i -> i, f -> forget-01))),[Ljava.lang.String;@1e6454ec,Annotation([Ljava.lang.String;@2accdbb5,[Ljava.lang.String;@b62d79,[Ljava.lang.String;@6631f5ca),Annotation([Ljava.lang.String;@5ace1ed4,[Ljava.lang.String;@1613674b,[Ledu.cmu.lti.nlp.amr.Dependency;@27ff5d15),Annotation([Ljava.lang.String;@4e096385,[Ljava.lang.String;@649bec2e,[Ljava.lang.String;@693fe6c9),Annotation([Ljava.lang.String;@34f5090e,[Ljava.lang.String;@31e5415e,[Ledu.cmu.lti.nlp.amr.Entity;@a2431d0))
AMR:
(d / describe-01, ARG0, i3 / i)
(d / describe-01, ARG1, i2 / it)
(d / describe-01, location, h / here)
(f / forget-01, ARG0, i / i)
(f / forget-01, ARG1, t / try-01)
(s / sure-02, ARG1, f / forget-01)
(t / try-01, ARG1, d / describe-01)
(t / try-01, ARG2, i3 / i)

Decoded in 142,985 microseconds
Sentence: To forget a friend is sad .

Spans:
Span 1-2:  forget => forget-01
Span 3-4:  friend => friend
Span 5-6:  sad => sad-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  forget => forget-01
Oracle Span 3-4:  friend => (have-rel-role-91 :ARG2 friend)
Oracle Span 5-6:  sad => sad-02

Incorrect span: friend => friend
Missing span: friend => (have-rel-role-91 :ARG2 friend)
Dependencies:
1	To	_	TO	TO	_	2	aux	_	_
2	forget	_	VB	VB	_	6	csubj	_	_
3	a	_	DT	DT	_	4	det	_	_
4	friend	_	NN	NN	_	2	dobj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	sad	_	JJ	JJ	_	0	root	_	_
7	.	_	.	.	_	6	punct	_	_

Oracle:
(h / have-rel-role-91, ARG2, f / friend)
(s / sad-02, ARG0, f3 / forget-01)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),sad,sad-02,false), Span(3,4,List(1),friend,friend,false), Span(1,2,List(2),forget,forget-01,false)),Map(2 -> forget-01, 1 -> friend, 0 -> sad-02),Map(s -> sad-02, f2 -> forget-01, f -> friend))),[Ljava.lang.String;@1cbb87f3,Annotation([Ljava.lang.String;@1a4013,[Ljava.lang.String;@1b6e1eff,[Ljava.lang.String;@306f16f3),Annotation([Ljava.lang.String;@702b8b12,[Ljava.lang.String;@22e357dc,[Ledu.cmu.lti.nlp.amr.Dependency;@49912c99),Annotation([Ljava.lang.String;@10163d6,[Ljava.lang.String;@2dde1bff,[Ljava.lang.String;@15bbf42f),Annotation([Ljava.lang.String;@550ee7e5,[Ljava.lang.String;@5f9b2141,[Ledu.cmu.lti.nlp.amr.Entity;@247d8ae))
AMR:
(f2 / forget-01, ARG1, f / friend)
(s / sad-02, ARG1, f / friend)

Decoded in 7,401 microseconds
Sentence: Not every one has had a friend .

Spans:
Span 1-2:  every => every
Span 6-7:  friend => friend
Span 3-4:  has => have-03

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  every => everyone
Oracle Span 6-7:  friend => friend
Oracle Span 4-5:  had => (person :ARG0-of have-rel-role-91)
Oracle Span 3-4:  has => have-03

Incorrect span: every => every
Missing span: had => (person :ARG0-of have-rel-role-91)
Missing span: every => everyone
Dependencies:
1	Not	_	RB	RB	_	5	neg	_	_
2	every	_	DT	DT	_	3	det	_	_
3	one	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	had	_	VBN	VBN	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	friend	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(h / have-03, ARG0, e / everyone)
(h / have-03, ARG1, p / person)
(h2 / have-rel-role-91, ARG0, p / person)
(h2 / have-rel-role-91, ARG1, e / everyone)
(h2 / have-rel-role-91, ARG2, f / friend)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),friend,friend,false), Span(3,4,List(1),has,have-03,false), Span(1,2,List(2),every,every,false)),Map(2 -> every, 1 -> have-03, 0 -> friend),Map(e -> every, h -> have-03, f -> friend))),[Ljava.lang.String;@48974e45,Annotation([Ljava.lang.String;@6a84a97d,[Ljava.lang.String;@6c130c45,[Ljava.lang.String;@50ad3bc1),Annotation([Ljava.lang.String;@223aa2f7,[Ljava.lang.String;@6d3a388c,[Ledu.cmu.lti.nlp.amr.Dependency;@193f604a),Annotation([Ljava.lang.String;@20f5239f,[Ljava.lang.String;@57af006c,[Ljava.lang.String;@6bedbc4d),Annotation([Ljava.lang.String;@932bc4a,[Ljava.lang.String;@d29f28,[Ledu.cmu.lti.nlp.amr.Entity;@2fd1433e))
AMR:
(h / have-03, ARG0, f / friend)
(h / have-03, ARG1, e / every)

Decoded in 11,930 microseconds
Sentence: And if I forget him , I may become like the grown - ups who are no longer interested in anything but figures ...

Spans:
Span 0-1:  And => and
Span 20-21:  anything => anything
Span 8-9:  become => become-01
Span 21-22:  but => contrast-01
Span 22-23:  figures => figure
Span 3-4:  forget => forget-01
Span 11-12:  grown => grown-up
Span 6-7:  I => i
Span 2-3:  I => i
Span 18-19:  interested => interest-01
Span 17-18:  longer => long-03
Span 7-8:  may => (date-entity :month 5)
Span 16-17:  no => -

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 20-21:  anything => anything
Oracle Span 22-23:  figures => figure
Oracle Span 3-4:  forget => forget-01
Oracle Span 11-12:  grown => grown-up
Oracle Span 2-3:  I => i
Oracle Span 18-19:  interested => interest-01
Oracle Span 7-8:  may => possible-01
Oracle Span 16-17:  no => -

Extra span: but => contrast-01
Extra span: longer => long-03
Extra span: become => become-01
Incorrect span: may => (date-entity :month 5)
Extra span: I => i
Missing span: may => possible-01
Dependencies:
1	And	_	CC	CC	_	9	cc	_	_
2	if	_	IN	IN	_	4	mark	_	_
3	I	_	PRP	PRP	_	4	nsubj	_	_
4	forget	_	VB	VB	_	9	advcl	_	_
5	him	_	PRP	PRP	_	4	dobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	I	_	PRP	PRP	_	9	nsubj	_	_
8	may	_	MD	MD	_	9	aux	_	_
9	become	_	VB	VB	_	0	root	_	_
10	like	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	grown	_	JJ	JJ	_	10	pobj	_	_
13	-	_	:	:	_	12	punct	_	_
14	ups	_	NNS	NNS	_	12	dep	_	_
15	who	_	WP	WP	_	19	nsubjpass	_	_
16	are	_	VBP	VBP	_	19	auxpass	_	_
17	no	_	RB	RB	_	18	advmod	_	_
18	longer	_	RBR	RBR	_	19	advmod	_	_
19	interested	_	VBN	VBN	_	14	rcmod	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	anything	_	NN	NN	_	20	pobj	_	_
22	but	_	CC	CC	_	19	cc	_	_
23	figures	_	VBZ	VBZ	_	19	conj	_	_
24	...	_	:	:	_	9	punct	_	_

Oracle:
(a / and, op, p / possible-01)
(f2 / forget-01, ARG0, i / i)
(i2 / interest-01, ARG1, g / grown-up)
(i2 / interest-01, ARG2, a2 / anything)
(i2 / interest-01, polarity, - / -)
(p / possible-01, condition, f2 / forget-01)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),figures,figure,false), Span(21,22,List(1),but,contrast-01,false), Span(20,21,List(2),anything,anything,false), Span(18,19,List(3),interested,interest-01,false), Span(17,18,List(4),longer,long-03,false), Span(16,17,List(5),no,-,false), Span(11,12,List(6),grown,grown-up,false), Span(8,9,List(7),become,become-01,false), Span(7,8,List(9, 8),may,(date-entity :month 5),false), Span(6,7,List(10),I,i,false), Span(3,4,List(11),forget,forget-01,false), Span(2,3,List(12),I,i,false), Span(0,1,List(13),And,and,false)),Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long-03, 11 -> forget-01, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> and),Map(5 -> 5, b -> become-01, d -> date-entity, i3 -> i, g -> grown-up, a -> anything, i2 -> i, i -> interest-01, a2 -> and, - -> -, c -> contrast-01, l -> long-03, f2 -> forget-01, f -> figure))),[Ljava.lang.String;@212b5695,Annotation([Ljava.lang.String;@446293d,[Ljava.lang.String;@69997e9d,[Ljava.lang.String;@793be5ca),Annotation([Ljava.lang.String;@2df9b86,[Ljava.lang.String;@37654521,[Ledu.cmu.lti.nlp.amr.Dependency;@15aab8c6),Annotation([Ljava.lang.String;@33990a0c,[Ljava.lang.String;@4de4b452,[Ljava.lang.String;@50b5ac82),Annotation([Ljava.lang.String;@101952da,[Ljava.lang.String;@6babf3bf,[Ledu.cmu.lti.nlp.amr.Entity;@3059cbc))
AMR:
(a2 / and, op, b / become-01)
(b / become-01, ARG0, i2 / i)
(b / become-01, ARG1, g / grown-up)
(b / become-01, time, f2 / forget-01)
(c / contrast-01, ARG1, i / interest-01)
(c / contrast-01, ARG2, f / figure)
(d / date-entity, month, 5 / 5)
(f2 / forget-01, ARG0, i3 / i)
(f2 / forget-01, ARG1, d / date-entity)
(i / interest-01, ARG0, g / grown-up)
(i / interest-01, ARG1, a / anything)
(l / long-03, ARG1, i / interest-01)
(l / long-03, mod, - / -)

Decoded in 468,825 microseconds
Sentence: It is for that purpose , again , that I have bought a box of paints and some pencils .

Spans:
Span 6-7:  again => again
Span 16-17:  and => and
Span 13-14:  box => box
Span 9-10:  I => i
Span 0-1:  It => it
Span 17-18:  some => some

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 11-12:  bought => buy-01
Oracle Span 13-14:  box => box
Oracle Span 9-10:  I => i
Oracle Span 15-16:  paints => paint
Oracle Span 18-19:  pencils => pencil
Oracle Span 17-18:  some => some
Oracle Span 3-4:  that => that

Extra span: again => again
Extra span: It => it
Missing span: bought => buy-01
Missing span: that => that
Missing span: pencils => pencil
Missing span: paints => paint
Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	for	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	5	det	_	_
5	purpose	_	NN	NN	_	3	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	again	_	RB	RB	_	2	advmod	_	_
8	,	_	,	,	_	2	punct	_	_
9	that	_	IN	IN	_	12	mark	_	_
10	I	_	PRP	PRP	_	12	nsubj	_	_
11	have	_	VBP	VBP	_	12	aux	_	_
12	bought	_	VBN	VBN	_	2	ccomp	_	_
13	a	_	DT	DT	_	14	det	_	_
14	box	_	NN	NN	_	12	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	paints	_	NNS	NNS	_	15	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	some	_	DT	DT	_	19	det	_	_
19	pencils	_	NNS	NNS	_	16	conj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, p / paint)
(a / and, op, p2 / pencil)
(b / buy-01, ARG0, i / i)
(b / buy-01, ARG1, a / and)
(b / buy-01, purpose, t2 / that)
(p / paint, location, b2 / box)
(p2 / pencil, quant, s / some)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),some,some,false), Span(16,17,List(1),and,and,false), Span(13,14,List(2),box,box,false), Span(9,10,List(3),I,i,false), Span(6,7,List(4),again,again,false), Span(0,1,List(5),It,it,false)),Map(2 -> box, 5 -> it, 1 -> and, 4 -> again, 0 -> some, 3 -> i),Map(b -> box, s -> some, a -> and, i2 -> it, a2 -> again, i -> i))),[Ljava.lang.String;@7ea9e1e2,Annotation([Ljava.lang.String;@24fcf36f,[Ljava.lang.String;@10feca44,[Ljava.lang.String;@3fb1549b),Annotation([Ljava.lang.String;@ea6147e,[Ljava.lang.String;@4d02f94e,[Ledu.cmu.lti.nlp.amr.Dependency;@2b48a640),Annotation([Ljava.lang.String;@1e683a3e,[Ljava.lang.String;@2053d869,[Ljava.lang.String;@7a419da4),Annotation([Ljava.lang.String;@14555e0a,[Ljava.lang.String;@4bb33f74,[Ledu.cmu.lti.nlp.amr.Entity;@759d26fb))
AMR:
(a / and, op, b / box)
(a2 / again, poss, a / and)
(b / box, poss, i2 / it)
(i / i, part, b / box)
(i2 / it, poss, s / some)

Decoded in 31,769 microseconds
Sentence: It is hard to take up drawing again at my age , when I have never made any pictures except those of the boa constrictor from the outside and the boa constrictor from the inside , since I was six .

Spans:
Span 7-8:  again => again
Span 28-29:  and => and
Span 17-18:  any => any
Span 30-31:  boa => boa
Span 23-24:  boa => boa
Span 19-20:  except => except-01
Span 37-38:  I => i
Span 13-14:  I => i
Span 34-35:  inside => inside
Span 0-1:  It => it
Span 27-28:  outside => outside
Span 36-37:  since => since
Span 39-40:  six => 6
Span 5-6:  up => up

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 7-8:  again => again
Oracle Span 10-11:  age => age-01
Oracle Span 28-29:  and => and
Oracle Span 17-18:  any => any
Oracle Span 23-24:  boa => boa
Oracle Span 30-31:  boa => boa
Oracle Span 24-25:  constrictor => constrictor
Oracle Span 31-32:  constrictor => constrictor
Oracle Span 6-7:  drawing => draw-01
Oracle Span 19-20:  except => except-01
Oracle Span 25-26:  from => from
Oracle Span 32-33:  from => from
Oracle Span 2-3:  hard => hard-02
Oracle Span 13-14:  I => i
Oracle Span 34-35:  inside => inside
Oracle Span 16-17:  made => make-01
Oracle Span 27-28:  outside => outside
Oracle Span 18-19:  pictures => picture
Oracle Span 36-37:  since => since
Oracle Span 39-40:  six => 6
Oracle Span 4-5:  take => take-up-31

Extra span: I => i
Extra span: up => up
Extra span: It => it
Missing span: hard => hard-02
Missing span: made => make-01
Missing span: age => age-01
Missing span: pictures => picture
Missing span: from => from
Missing span: constrictor => constrictor
Missing span: from => from
Missing span: constrictor => constrictor
Missing span: drawing => draw-01
Missing span: take => take-up-31
Dependencies:
1	It	_	PRP	PRP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	cop	_	_
3	hard	_	JJ	JJ	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	take	_	VB	VB	_	3	xcomp	_	_
6	up	_	RP	RP	_	5	prt	_	_
7	drawing	_	VBG	VBG	_	5	xcomp	_	_
8	again	_	RB	RB	_	7	advmod	_	_
9	at	_	IN	IN	_	7	prep	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	age	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	when	_	WRB	WRB	_	17	advmod	_	_
14	I	_	PRP	PRP	_	17	nsubj	_	_
15	have	_	VBP	VBP	_	17	aux	_	_
16	never	_	RB	RB	_	17	neg	_	_
17	made	_	VBN	VBN	_	11	rcmod	_	_
18	any	_	DT	DT	_	19	det	_	_
19	pictures	_	NNS	NNS	_	17	dobj	_	_
20	except	_	IN	IN	_	19	prep	_	_
21	those	_	DT	DT	_	20	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	25	det	_	_
24	boa	_	NN	NN	_	25	nn	_	_
25	constrictor	_	NN	NN	_	22	pobj	_	_
26	from	_	IN	IN	_	17	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	outside	_	NN	NN	_	26	pobj	_	_
29	and	_	CC	CC	_	28	cc	_	_
30	the	_	DT	DT	_	32	det	_	_
31	boa	_	NN	NN	_	32	nn	_	_
32	constrictor	_	NN	NN	_	28	conj	_	_
33	from	_	IN	IN	_	17	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	inside	_	NN	NN	_	33	pobj	_	_
36	,	_	,	,	_	3	punct	_	_
37	since	_	IN	IN	_	40	mark	_	_
38	I	_	PRP	PRP	_	40	nsubj	_	_
39	was	_	VBD	VBD	_	40	cop	_	_
40	six	_	CD	CD	_	3	advcl	_	_
41	.	_	.	.	_	3	punct	_	_

Oracle:
(a3 / age-01, ARG1, i / i)
(b / boa, direction, f / from)
(b / boa, mod, c2 / constrictor)
(b2 / boa, direction, f2 / from)
(b2 / boa, mod, c3 / constrictor)
(e2 / except-01, ARG1, a6 / and)
(e2 / except-01, ARG2, p / picture)
(f / from, op, o / outside)
(f2 / from, op, i2 / inside)
(h / hard-02, ARG1, t / take-up-31)
(m / make-01, ARG1, p / picture)
(m / make-01, time, s / since)
(p / picture, mod, a5 / any)
(s / since, op, a3 / age-01)
(t / take-up-31, ARG0, i / i)
(t / take-up-31, ARG1, d / draw-01)
(t / take-up-31, mod, a / again)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),six,6,false), Span(37,38,List(1),I,i,false), Span(36,37,List(2),since,since,false), Span(34,35,List(3),inside,inside,false), Span(30,31,List(4),boa,boa,false), Span(28,29,List(5),and,and,false), Span(27,28,List(6),outside,outside,false), Span(23,24,List(7),boa,boa,false), Span(19,20,List(8),except,except-01,false), Span(17,18,List(9),any,any,false), Span(13,14,List(10),I,i,false), Span(7,8,List(11),again,again,false), Span(5,6,List(12),up,up,false), Span(0,1,List(13),It,it,false)),Map(2 -> since, 5 -> and, 12 -> up, 8 -> except-01, 7 -> boa, 1 -> i, 4 -> boa, 11 -> again, 6 -> outside, 0 -> 6, 9 -> any, 3 -> inside, 10 -> i, 13 -> it),Map(e -> except-01, i4 -> it, b -> boa, b2 -> boa, a3 -> again, s -> since, i3 -> i, a -> and, i2 -> inside, i -> i, a2 -> any, 6 -> 6, u -> up, o -> outside))),[Ljava.lang.String;@3c73951,Annotation([Ljava.lang.String;@3d5c822d,[Ljava.lang.String;@6f46426d,[Ljava.lang.String;@73700b80),Annotation([Ljava.lang.String;@49c7b90e,[Ljava.lang.String;@10d307f1,[Ledu.cmu.lti.nlp.amr.Dependency;@4d5b6aac),Annotation([Ljava.lang.String;@3e84448c,[Ljava.lang.String;@4a7f959b,[Ljava.lang.String;@429bffaa),Annotation([Ljava.lang.String;@5403f35f,[Ljava.lang.String;@483f6d77,[Ledu.cmu.lti.nlp.amr.Entity;@7e5afaa6))
AMR:
(a / and, op, o / outside)
(b / boa, part, o / outside)
(b2 / boa, poss, i4 / it)
(e / except-01, ARG1, 6 / 6)
(e / except-01, ARG2, a2 / any)
(e / except-01, ARG3, b2 / boa)
(e / except-01, accompanier, a3 / again)
(e / except-01, mod, a / and)
(e / except-01, mod, i / i)
(e / except-01, mod, u / up)
(i / i, mod, s / since)
(i2 / inside, poss, i / i)
(i3 / i, part, i2 / inside)

Decoded in 219,845 microseconds
Sentence: I shall certainly try to make my portraits as true to life as possible .

Spans:
Span 2-3:  certainly => certain
Span 0-1:  I => i
Span 11-12:  life => life
Span 13-14:  possible => possible-01
Span 9-10:  true => true-01
Span 3-4:  try => try-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  certainly => certain
Oracle Span 0-1:  I => i
Oracle Span 11-12:  life => life
Oracle Span 5-6:  make => make-02
Oracle Span 7-8:  portraits => portrait
Oracle Span 13-14:  possible => possible-01
Oracle Span 9-10:  true => true-02
Oracle Span 3-4:  try => try-01

Incorrect span: true => true-01
Missing span: make => make-02
Missing span: true => true-02
Missing span: portraits => portrait
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	shall	_	MD	MD	_	4	aux	_	_
3	certainly	_	RB	RB	_	4	advmod	_	_
4	try	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	my	_	PRP$	PRP$	_	8	poss	_	_
8	portraits	_	NNS	NNS	_	10	nsubj	_	_
9	as	_	RB	RB	_	10	advmod	_	_
10	true	_	JJ	JJ	_	6	xcomp	_	_
11	to	_	TO	TO	_	10	prep	_	_
12	life	_	NN	NN	_	11	pobj	_	_
13	as	_	RB	RB	_	14	advmod	_	_
14	possible	_	JJ	JJ	_	12	amod	_	_
15	.	_	.	.	_	4	punct	_	_

Oracle:
(m / make-02, ARG0, i / i)
(m / make-02, ARG1, t2 / true-02)
(p / portrait, topic, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, m / make-02)
(t / try-01, mod, c / certain)
(t2 / true-02, ARG1, p / portrait)
(t2 / true-02, ARG2, l / life)
(t2 / true-02, compared-to, p2 / possible-01)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),possible,possible-01,false), Span(11,12,List(1),life,life,false), Span(9,10,List(2),true,true-01,false), Span(3,4,List(3),try,try-01,false), Span(2,3,List(4),certainly,certain,false), Span(0,1,List(5),I,i,false)),Map(2 -> true-01, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible-01, 3 -> try-01),Map(t -> true-01, p -> possible-01, t2 -> try-01, i -> i, c -> certain, l -> life))),[Ljava.lang.String;@63a12c68,Annotation([Ljava.lang.String;@28f3b248,[Ljava.lang.String;@1b1426f4,[Ljava.lang.String;@32b260fa),Annotation([Ljava.lang.String;@581ac8a8,[Ljava.lang.String;@6d4e5011,[Ledu.cmu.lti.nlp.amr.Dependency;@57d7f8ca),Annotation([Ljava.lang.String;@76c3e77a,[Ljava.lang.String;@78123e82,[Ljava.lang.String;@67c33749),Annotation([Ljava.lang.String;@fba92d3,[Ljava.lang.String;@662b4c69,[Ledu.cmu.lti.nlp.amr.Entity;@fa49800))
AMR:
(p / possible-01, ARG1, l / life)
(t / true-01, ARG1, t2 / try-01)
(t / true-01, ARG2, l / life)
(t2 / try-01, ARG0, i / i)
(t2 / try-01, ARG1, c / certain)

Decoded in 30,598 microseconds
Sentence: But I am not at all sure of success .

Spans:
Span 5-6:  all => all
Span 0-1:  But => contrast-01
Span 1-2:  I => i
Span 6-7:  sure => sure-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  all => all
Oracle Span 4-5:  at => at
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  I => i
Oracle Span 8-9:  success => succeed-01
Oracle Span 6-7:  sure => sure-02

Missing span: at => at
Missing span: success => succeed-01
Dependencies:
1	But	_	CC	CC	_	7	cc	_	_
2	I	_	PRP	PRP	_	7	nsubj	_	_
3	am	_	VBP	VBP	_	7	cop	_	_
4	not	_	RB	RB	_	7	neg	_	_
5	at	_	IN	IN	_	7	advmod	_	_
6	all	_	DT	DT	_	5	pobj	_	_
7	sure	_	JJ	JJ	_	0	root	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	success	_	NN	NN	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(a / at, op, a2 / all)
(c / contrast-01, ARG2, s / sure-02)
(s / sure-02, ARG0, i / i)
(s / sure-02, degree, a / at)
(s2 / succeed-01, ARG0, i / i)
(s2 / succeed-01, ARG1, s / sure-02)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),sure,sure-02,false), Span(5,6,List(1),all,all,false), Span(1,2,List(2),I,i,false), Span(0,1,List(3),But,contrast-01,false)),Map(2 -> i, 1 -> all, 0 -> sure-02, 3 -> contrast-01),Map(s -> sure-02, a -> all, i -> i, c -> contrast-01))),[Ljava.lang.String;@71238fc2,Annotation([Ljava.lang.String;@2a54a73f,[Ljava.lang.String;@16a0ee18,[Ljava.lang.String;@3d6f0054),Annotation([Ljava.lang.String;@505fc5a4,[Ljava.lang.String;@5fbdfdcf,[Ledu.cmu.lti.nlp.amr.Dependency;@4efc180e),Annotation([Ljava.lang.String;@bd4dc25,[Ljava.lang.String;@25084a1e,[Ljava.lang.String;@156b88f5),Annotation([Ljava.lang.String;@3bf9ce3e,[Ljava.lang.String;@16610890,[Ledu.cmu.lti.nlp.amr.Entity;@71def8f8))
AMR:
(c / contrast-01, ARG2, s / sure-02)
(s / sure-02, ARG0, i / i)
(s / sure-02, ARG1, a / all)

Decoded in 12,908 microseconds
Sentence: One drawing goes along all right , and another has no resemblance to its subject .

Spans:
Span 4-5:  all => all
Span 3-4:  along => along
Span 7-8:  and => and
Span 8-9:  another => another
Span 2-3:  goes => go-02
Span 9-10:  has => have-03
Span 13-14:  its => it
Span 10-11:  no => -
Span 0-1:  One => one
Span 14-15:  subject => subject

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  along => along
Oracle Span 7-8:  and => and
Oracle Span 8-9:  another => another
Oracle Span 1-2:  drawing => draw-01
Oracle Span 2-3:  goes => go-06
Oracle Span 10-11:  no => -
Oracle Span 0-1:  One => 1
Oracle Span 11-12:  resemblance => resemble-01
Oracle Span 14-15:  subject => subject

Extra span: its => it
Extra span: has => have-03
Extra span: all => all
Incorrect span: goes => go-02
Incorrect span: One => one
Missing span: drawing => draw-01
Missing span: goes => go-06
Missing span: One => 1
Missing span: resemblance => resemble-01
Dependencies:
1	One	_	CD	CD	_	2	num	_	_
2	drawing	_	NN	NN	_	3	nsubj	_	_
3	goes	_	VBZ	VBZ	_	0	root	_	_
4	along	_	RB	RB	_	3	advmod	_	_
5	all	_	DT	DT	_	4	det	_	_
6	right	_	NN	NN	_	4	dep	_	_
7	,	_	,	,	_	3	punct	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	another	_	DT	DT	_	10	nsubj	_	_
10	has	_	VBZ	VBZ	_	3	conj	_	_
11	no	_	DT	DT	_	12	det	_	_
12	resemblance	_	NN	NN	_	10	dobj	_	_
13	to	_	TO	TO	_	12	prep	_	_
14	its	_	PRP$	PRP$	_	15	poss	_	_
15	subject	_	NN	NN	_	13	pobj	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, g / go-06)
(a / and, op, r2 / resemble-01)
(g / go-06, ARG2, a2 / along)
(r2 / resemble-01, ARG2, s / subject)
(r2 / resemble-01, polarity, - / -)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),subject,subject,false), Span(13,14,List(1),its,it,false), Span(10,11,List(2),no,-,false), Span(9,10,List(3),has,have-03,false), Span(8,9,List(4),another,another,false), Span(7,8,List(5),and,and,false), Span(4,5,List(6),all,all,false), Span(3,4,List(7),along,along,false), Span(2,3,List(8),goes,go-02,false), Span(0,1,List(9),One,one,false)),Map(2 -> -, 5 -> and, 8 -> go-02, 7 -> along, 1 -> it, 4 -> another, 6 -> all, 9 -> one, 0 -> subject, 3 -> have-03),Map(h -> have-03, a3 -> all, s -> subject, g -> go-02, a -> another, a2 -> and, i -> it, - -> -, o -> one, a4 -> along))),[Ljava.lang.String;@383bfa16,Annotation([Ljava.lang.String;@4d465b11,[Ljava.lang.String;@53fdffa1,[Ljava.lang.String;@5562c41e),Annotation([Ljava.lang.String;@32ee6fee,[Ljava.lang.String;@4d0f2471,[Ledu.cmu.lti.nlp.amr.Dependency;@7133da86),Annotation([Ljava.lang.String;@3232a28a,[Ljava.lang.String;@73e22a3d,[Ljava.lang.String;@47faa49c),Annotation([Ljava.lang.String;@28f2a10f,[Ljava.lang.String;@f736069,[Ledu.cmu.lti.nlp.amr.Entity;@6da21078))
AMR:
(a2 / and, op, g / go-02)
(a2 / and, op, h / have-03)
(g / go-02, ARG0, o / one)
(g / go-02, ARG1, a3 / all)
(g / go-02, time, a4 / along)
(h / have-03, ARG0, i / it)
(h / have-03, ARG1, a / another)
(h / have-03, polarity, - / -)
(s / subject, poss, i / it)

Decoded in 59,419 microseconds
Sentence: I make some errors , too , in the little prince 's height : in one place he is too tall and in another too short .

Spans:
Span 21-22:  and => and
Span 23-24:  another => another
Span 17-18:  he => he
Span 0-1:  I => i
Span 9-10:  little => little
Span 16-17:  place => place
Span 10-11:  prince => prince
Span 25-26:  short => short-07
Span 2-3:  some => some
Span 24-25:  too => too
Span 19-20:  too => too
Span 5-6:  too => too

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 21-22:  and => and
Oracle Span 23-24:  another => another
Oracle Span 0-1:  I => i
Oracle Span 9-10:  little => little
Oracle Span 15-16:  one => one
Oracle Span 16-17:  place => place
Oracle Span 10-11:  prince => prince
Oracle Span 25-26:  short => short-07
Oracle Span 2-3:  some => some
Oracle Span 20-21:  tall => tall
Oracle Span 5-6:  too => too
Oracle Span 19-20:  too => too
Oracle Span 24-25:  too => too

Extra span: he => he
Missing span: tall => tall
Missing span: one => one
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	make	_	VBP	VBP	_	0	root	_	_
3	some	_	DT	DT	_	4	det	_	_
4	errors	_	NNS	NNS	_	2	dobj	_	_
5	,	_	,	,	_	2	punct	_	_
6	too	_	RB	RB	_	2	advmod	_	_
7	,	_	,	,	_	2	punct	_	_
8	in	_	IN	IN	_	2	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	little	_	JJ	JJ	_	11	amod	_	_
11	prince	_	NN	NN	_	13	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	height	_	NN	NN	_	8	pobj	_	_
14	:	_	:	:	_	2	punct	_	_
15	in	_	IN	IN	_	21	prep	_	_
16	one	_	CD	CD	_	17	num	_	_
17	place	_	NN	NN	_	15	pobj	_	_
18	he	_	PRP	PRP	_	21	nsubj	_	_
19	is	_	VBZ	VBZ	_	21	cop	_	_
20	too	_	RB	RB	_	21	advmod	_	_
21	tall	_	JJ	JJ	_	2	parataxis	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	in	_	IN	IN	_	21	conj	_	_
24	another	_	DT	DT	_	26	det	_	_
25	too	_	RB	RB	_	26	advmod	_	_
26	short	_	JJ	JJ	_	23	pobj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, s / short-07)
(a / and, op, t2 / tall)
(p / prince, mod, l / little)
(p3 / place, mod, a2 / another)
(s / short-07, ARG1, p / prince)
(s / short-07, degree, t4 / too)
(s / short-07, location, p3 / place)
(t2 / tall, degree, t3 / too)
(t2 / tall, domain, p / prince)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),short,short-07,false), Span(24,25,List(1),too,too,false), Span(23,24,List(2),another,another,false), Span(21,22,List(3),and,and,false), Span(19,20,List(4),too,too,false), Span(17,18,List(5),he,he,false), Span(16,17,List(6),place,place,false), Span(10,11,List(7),prince,prince,false), Span(9,10,List(8),little,little,false), Span(5,6,List(9),too,too,false), Span(2,3,List(10),some,some,false), Span(0,1,List(11),I,i,false)),Map(2 -> another, 5 -> he, 8 -> little, 7 -> prince, 1 -> too, 11 -> i, 4 -> too, 6 -> place, 9 -> too, 0 -> short-07, 10 -> some, 3 -> and),Map(h -> he, s2 -> some, t -> too, p2 -> prince, s -> short-07, t3 -> too, p -> place, a -> another, t2 -> too, i -> i, a2 -> and, l -> little))),[Ljava.lang.String;@7fee8714,Annotation([Ljava.lang.String;@4229bb3f,[Ljava.lang.String;@56cdfb3b,[Ljava.lang.String;@2b91004a),Annotation([Ljava.lang.String;@20ccf40b,[Ljava.lang.String;@2fb3536e,[Ledu.cmu.lti.nlp.amr.Dependency;@169e6180),Annotation([Ljava.lang.String;@35aea049,[Ljava.lang.String;@7205765b,[Ljava.lang.String;@47987356),Annotation([Ljava.lang.String;@22ef9844,[Ljava.lang.String;@6283d8b8,[Ledu.cmu.lti.nlp.amr.Entity;@3b6ddd1d))
AMR:
(a2 / and, degree, t2 / too)
(p / place, poss, h / he)
(p2 / prince, mod, l / little)
(s / short-07, ARG0, i / i)
(s / short-07, ARG1, t3 / too)
(s / short-07, ARG3, h / he)
(s / short-07, degree, t / too)
(s / short-07, mod, a / another)
(s / short-07, mod, l / little)
(s / short-07, time, t2 / too)
(s2 / some, op, s / short-07)

Decoded in 147,290 microseconds
Sentence: And I feel some doubts about the color of his costume .

Spans:
Span 0-1:  And => and
Span 7-8:  color => color
Span 2-3:  feel => feel-01
Span 1-2:  I => i
Span 3-4:  some => some

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 7-8:  color => color
Oracle Span 10-11:  costume => costume
Oracle Span 4-5:  doubts => doubt-01
Oracle Span 2-3:  feel => feel-01
Oracle Span 1-2:  I => i
Oracle Span 3-4:  some => some

Missing span: doubts => doubt-01
Missing span: costume => costume
Dependencies:
1	And	_	CC	CC	_	3	cc	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	feel	_	VBP	VBP	_	0	root	_	_
4	some	_	DT	DT	_	5	det	_	_
5	doubts	_	NNS	NNS	_	3	dobj	_	_
6	about	_	IN	IN	_	3	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	color	_	NN	NN	_	6	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	his	_	PRP$	PRP$	_	11	poss	_	_
11	costume	_	NN	NN	_	9	pobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, f / feel-01)
(c / color, poss, c2 / costume)
(d / doubt-01, ARG0, i / i)
(d / doubt-01, ARG1, c / color)
(d / doubt-01, quant, s / some)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, d / doubt-01)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),color,color,false), Span(3,4,List(1),some,some,false), Span(2,3,List(2),feel,feel-01,false), Span(1,2,List(3),I,i,false), Span(0,1,List(4),And,and,false)),Map(2 -> feel-01, 1 -> some, 4 -> and, 0 -> color, 3 -> i),Map(s -> some, a -> and, i -> i, c -> color, f -> feel-01))),[Ljava.lang.String;@3f6b0be5,Annotation([Ljava.lang.String;@611889f4,[Ljava.lang.String;@1da2cb77,[Ljava.lang.String;@48f278eb),Annotation([Ljava.lang.String;@2f217633,[Ljava.lang.String;@a530d0a,[Ledu.cmu.lti.nlp.amr.Dependency;@1a18644),Annotation([Ljava.lang.String;@5acf93bb,[Ljava.lang.String;@7e7be63f,[Ljava.lang.String;@6cd28fa7),Annotation([Ljava.lang.String;@614ca7df,[Ljava.lang.String;@4738a206,[Ledu.cmu.lti.nlp.amr.Entity;@66d3eec0))
AMR:
(a / and, op, f / feel-01)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, s / some)
(f / feel-01, ARG2, c / color)

Decoded in 17,891 microseconds
Sentence: So I fumble along as best I can , now good , now bad , and I hope generally fair - to - middling .

Spans:
Span 3-4:  along => along
Span 15-16:  and => and
Span 13-14:  bad => bad-07
Span 5-6:  best => (well :degree most)
Span 7-8:  can => possible-01
Span 19-20:  fair => fair-01
Span 10-11:  good => good-04
Span 17-18:  hope => hopeful-03
Span 16-17:  I => i
Span 6-7:  I => i
Span 1-2:  I => i
Span 12-13:  now => now
Span 9-10:  now => now

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 3-4:  along => along
Oracle Span 13-14:  bad => bad-02
Oracle Span 5-6:  best => (good-03 :degree most)
Oracle Span 7-8:  can => possible-01
Oracle Span 19-20:  fair => fair-04
Oracle Span 2-3:  fumble => fumble-01
Oracle Span 18-19:  generally => general-02
Oracle Span 10-11:  good => good-03
Oracle Span 17-18:  hope => hope-01
Oracle Span 1-2:  I => i
Oracle Span 23-24:  middling => middling
Oracle Span 9-10:  now => now
Oracle Span 12-13:  now => now

Incorrect span: fair => fair-01
Incorrect span: hope => hopeful-03
Extra span: I => i
Extra span: and => and
Incorrect span: bad => bad-07
Incorrect span: good => good-04
Extra span: I => i
Incorrect span: best => (well :degree most)
Missing span: fumble => fumble-01
Missing span: best => (good-03 :degree most)
Missing span: fair => fair-04
Missing span: middling => middling
Missing span: hope => hope-01
Missing span: bad => bad-02
Missing span: good => good-03
Missing span: generally => general-02
Dependencies:
1	So	_	CC	CC	_	3	cc	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	fumble	_	VBP	VBP	_	0	root	_	_
4	along	_	RP	RP	_	3	prt	_	_
5	as	_	IN	IN	_	3	prep	_	_
6	best	_	JJS	JJS	_	5	pobj	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	can	_	MD	MD	_	6	rcmod	_	_
9	,	_	,	,	_	3	punct	_	_
10	now	_	RB	RB	_	11	advmod	_	_
11	good	_	JJ	JJ	_	3	dep	_	_
12	,	_	,	,	_	11	punct	_	_
13	now	_	RB	RB	_	14	advmod	_	_
14	bad	_	JJ	JJ	_	11	dep	_	_
15	,	_	,	,	_	3	punct	_	_
16	and	_	CC	CC	_	3	cc	_	_
17	I	_	PRP	PRP	_	18	nsubj	_	_
18	hope	_	VBP	VBP	_	3	conj	_	_
19	generally	_	RB	RB	_	20	advmod	_	_
20	fair	_	JJ	JJ	_	18	acomp	_	_
21	-	_	:	:	_	20	punct	_	_
22	to	_	TO	TO	_	20	prep	_	_
23	-	_	:	:	_	20	punct	_	_
24	middling	_	JJ	JJ	_	20	dep	_	_
25	.	_	.	.	_	3	punct	_	_

Oracle:
(b / bad-02, time, n2 / now)
(f / fumble-01, ARG0, i / i)
(f / fumble-01, ARG1, a / along)
(f / fumble-01, manner, g / good-03)
(f2 / fair-04, prep-to, m2 / middling)
(g / good-03, compared-to, p / possible-01)
(g / good-03, degree, m / most)
(g / good-03, example, b / bad-02)
(g / good-03, example, f2 / fair-04)
(g / good-03, example, g2 / good-03)
(g2 / good-03, time, n / now)
(g3 / general-02, ARG1, f2 / fair-04)
(h / hope-01, ARG0, i / i)
(h / hope-01, ARG1, f2 / fair-04)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),fair,fair-01,false), Span(17,18,List(1),hope,hopeful-03,false), Span(16,17,List(2),I,i,false), Span(15,16,List(3),and,and,false), Span(13,14,List(4),bad,bad-07,false), Span(12,13,List(5),now,now,false), Span(10,11,List(6),good,good-04,false), Span(9,10,List(7),now,now,false), Span(7,8,List(8),can,possible-01,false), Span(6,7,List(9),I,i,false), Span(5,6,List(11, 10),best,(well :degree most),false), Span(3,4,List(12),along,along,false), Span(1,2,List(13),I,i,false)),Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible-01, 7 -> now, 1 -> hopeful-03, 4 -> bad-07, 11 -> most, 6 -> good-04, 0 -> fair-01, 9 -> i, 3 -> and, 10 -> well, 13 -> i),Map(n -> now, w -> well, h -> hopeful-03, b -> bad-07, m -> most, i3 -> i, g -> good-04, p -> possible-01, a -> and, i2 -> i, i -> i, a2 -> along, f -> fair-01, n2 -> now))),[Ljava.lang.String;@1e04fa0a,Annotation([Ljava.lang.String;@1af2d44a,[Ljava.lang.String;@18d87d80,[Ljava.lang.String;@618425b5),Annotation([Ljava.lang.String;@58695725,[Ljava.lang.String;@543588e6,[Ledu.cmu.lti.nlp.amr.Dependency;@f5acb9d),Annotation([Ljava.lang.String;@4fb3ee4e,[Ljava.lang.String;@5d7148e2,[Ljava.lang.String;@25fb8912),Annotation([Ljava.lang.String;@7c24b813,[Ljava.lang.String;@2c35e847,[Ledu.cmu.lti.nlp.amr.Entity;@7bd4937b))
AMR:
(a / and, op, h / hopeful-03)
(b / bad-07, ARG1, g / good-04)
(b / bad-07, time, n / now)
(f / fair-01, ARG1, h / hopeful-03)
(g / good-04, ARG0, a2 / along)
(g / good-04, ARG1, i3 / i)
(g / good-04, time, n2 / now)
(h / hopeful-03, ARG0, i3 / i)
(h / hopeful-03, ARG2, i / i)
(p / possible-01, ARG1, g / good-04)
(p / possible-01, ARG2, i2 / i)
(w / well, compared-to, p / possible-01)
(w / well, degree, m / most)

Decoded in 291,332 microseconds
Sentence: In certain more important details I shall make mistakes , also .

Spans:
Span 10-11:  also => also
Span 1-2:  certain => certain
Span 5-6:  I => i
Span 3-4:  important => important
Span 8-9:  mistakes => mistake-02
Span 2-3:  more => more

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 10-11:  also => also
Oracle Span 1-2:  certain => certain
Oracle Span 4-5:  details => detail
Oracle Span 5-6:  I => i
Oracle Span 3-4:  important => important
Oracle Span 8-9:  mistakes => mistake-02
Oracle Span 2-3:  more => more

Missing span: details => detail
Dependencies:
1	In	_	IN	IN	_	8	prep	_	_
2	certain	_	JJ	JJ	_	5	amod	_	_
3	more	_	RBR	RBR	_	4	advmod	_	_
4	important	_	JJ	JJ	_	5	amod	_	_
5	details	_	NNS	NNS	_	1	pobj	_	_
6	I	_	PRP	PRP	_	8	nsubj	_	_
7	shall	_	MD	MD	_	8	aux	_	_
8	make	_	VB	VB	_	0	root	_	_
9	mistakes	_	NNS	NNS	_	8	dobj	_	_
10	,	_	,	,	_	8	punct	_	_
11	also	_	RB	RB	_	8	advmod	_	_
12	.	_	.	.	_	8	punct	_	_

Oracle:
(d / detail, mod, c / certain)
(d / detail, mod, i2 / important)
(i2 / important, degree, m3 / more)
(m2 / mistake-02, ARG0, i / i)
(m2 / mistake-02, ARG1, d / detail)
(m2 / mistake-02, mod, a / also)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),also,also,false), Span(8,9,List(1),mistakes,mistake-02,false), Span(5,6,List(2),I,i,false), Span(3,4,List(3),important,important,false), Span(2,3,List(4),more,more,false), Span(1,2,List(5),certain,certain,false)),Map(2 -> i, 5 -> certain, 1 -> mistake-02, 4 -> more, 0 -> also, 3 -> important),Map(m2 -> more, m -> mistake-02, a -> also, i2 -> important, i -> i, c -> certain))),[Ljava.lang.String;@21e360a,Annotation([Ljava.lang.String;@5ba3f27a,[Ljava.lang.String;@58d75e99,[Ljava.lang.String;@74751b3),Annotation([Ljava.lang.String;@741a8937,[Ljava.lang.String;@306e95ec,[Ledu.cmu.lti.nlp.amr.Dependency;@52af26ee),Annotation([Ljava.lang.String;@6fd83fc1,[Ljava.lang.String;@4f2b503c,[Ljava.lang.String;@bae7dc0),Annotation([Ljava.lang.String;@209da20d,[Ljava.lang.String;@e15b7e8,[Ledu.cmu.lti.nlp.amr.Entity;@1b2abca6))
AMR:
(i2 / important, degree, m2 / more)
(m / mistake-02, ARG0, i / i)
(m / mistake-02, ARG1, c / certain)
(m / mistake-02, ARG2, i2 / important)
(m / mistake-02, mod, a / also)

Decoded in 64,551 microseconds
Sentence: But that is something that will not be my fault .

Spans:
Span 0-1:  But => contrast-01
Span 9-10:  fault => fault-01
Span 3-4:  something => something

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 9-10:  fault => fault-01
Oracle Span 3-4:  something => something
Oracle Span 1-2:  that => that

Missing span: that => that
Dependencies:
1	But	_	CC	CC	_	4	cc	_	_
2	that	_	DT	DT	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	something	_	NN	NN	_	0	root	_	_
5	that	_	WDT	WDT	_	10	nsubj	_	_
6	will	_	MD	MD	_	10	aux	_	_
7	not	_	RB	RB	_	10	neg	_	_
8	be	_	VB	VB	_	10	cop	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	fault	_	NN	NN	_	4	rcmod	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(c / contrast-01, ARG2, f2 / fault-01)
(f2 / fault-01, ARG2, s2 / something)
(s2 / something, mod, t2 / that)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),fault,fault-01,false), Span(3,4,List(1),something,something,false), Span(0,1,List(2),But,contrast-01,false)),Map(2 -> contrast-01, 1 -> something, 0 -> fault-01),Map(s -> something, c -> contrast-01, f -> fault-01))),[Ljava.lang.String;@6392827e,Annotation([Ljava.lang.String;@2ed2d9cb,[Ljava.lang.String;@d5b810e,[Ljava.lang.String;@43dac38f),Annotation([Ljava.lang.String;@342c38f8,[Ljava.lang.String;@c88a337,[Ledu.cmu.lti.nlp.amr.Dependency;@5d0a1059),Annotation([Ljava.lang.String;@485966cc,[Ljava.lang.String;@1de76cc7,[Ljava.lang.String;@54bff557),Annotation([Ljava.lang.String;@593aaf41,[Ljava.lang.String;@5a56cdac,[Ledu.cmu.lti.nlp.amr.Entity;@7c711375))
AMR:
(c / contrast-01, ARG0, s / something)
(c / contrast-01, ARG1, f / fault-01)

Decoded in 11,292 microseconds
Sentence: My friend never explained anything to me .

Spans:
Span 4-5:  anything => anything
Span 1-2:  friend => friend

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  anything => anything
Oracle Span 3-4:  explained => explain-01
Oracle Span 1-2:  friend => (have-rel-role-91 :ARG2 friend)

Incorrect span: friend => friend
Missing span: explained => explain-01
Missing span: friend => (have-rel-role-91 :ARG2 friend)
Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	friend	_	NN	NN	_	4	nsubj	_	_
3	never	_	RB	RB	_	4	neg	_	_
4	explained	_	VBD	VBD	_	0	root	_	_
5	anything	_	NN	NN	_	4	dobj	_	_
6	to	_	TO	TO	_	4	prep	_	_
7	me	_	PRP	PRP	_	6	pobj	_	_
8	.	_	.	.	_	4	punct	_	_

Oracle:
(e / explain-01, ARG1, a / anything)
(h / have-rel-role-91, ARG2, f / friend)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),anything,anything,false), Span(1,2,List(1),friend,friend,false)),Map(1 -> friend, 0 -> anything),Map(a -> anything, f -> friend))),[Ljava.lang.String;@57cf54e1,Annotation([Ljava.lang.String;@5b03b9fe,[Ljava.lang.String;@37d4349f,[Ljava.lang.String;@434a63ab),Annotation([Ljava.lang.String;@6e0f5f7f,[Ljava.lang.String;@2805d709,[Ledu.cmu.lti.nlp.amr.Dependency;@3ee37e5a),Annotation([Ljava.lang.String;@2ea41516,[Ljava.lang.String;@3a44431a,[Ljava.lang.String;@3c7f66c4),Annotation([Ljava.lang.String;@194bcebf,[Ljava.lang.String;@17497425,[Ledu.cmu.lti.nlp.amr.Entity;@f0da945))
AMR:
(a / anything, poss, f / friend)

Decoded in 11,505 microseconds
Sentence: He thought , perhaps , that I was like himself .

Spans:
Span 0-1:  He => he
Span 6-7:  I => i
Span 3-4:  perhaps => perhaps
Span 1-2:  thought => think-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 0-1:  He => he
Oracle Span 6-7:  I => i
Oracle Span 3-4:  perhaps => perhaps
Oracle Span 1-2:  thought => think-01

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	thought	_	VBD	VBD	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	perhaps	_	RB	RB	_	2	advmod	_	_
5	,	_	,	,	_	2	punct	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	was	_	VBD	VBD	_	2	ccomp	_	_
9	like	_	IN	IN	_	8	prep	_	_
10	himself	_	PRP	PRP	_	9	pobj	_	_
11	.	_	.	.	_	2	punct	_	_

Oracle:
(t / think-01, ARG0, h / he)
(t / think-01, mod, p / perhaps)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),I,i,false), Span(3,4,List(1),perhaps,perhaps,false), Span(1,2,List(2),thought,think-01,false), Span(0,1,List(3),He,he,false)),Map(2 -> think-01, 1 -> perhaps, 0 -> i, 3 -> he),Map(h -> he, t -> think-01, p -> perhaps, i -> i))),[Ljava.lang.String;@4803b726,Annotation([Ljava.lang.String;@ffaa6af,[Ljava.lang.String;@53ce1329,[Ljava.lang.String;@316bcf94),Annotation([Ljava.lang.String;@6404f418,[Ljava.lang.String;@3e11f9e9,[Ledu.cmu.lti.nlp.amr.Dependency;@1de5f259),Annotation([Ljava.lang.String;@729d991e,[Ljava.lang.String;@31fa1761,[Ljava.lang.String;@957e06),Annotation([Ljava.lang.String;@32502377,[Ljava.lang.String;@2c1b194a,[Ledu.cmu.lti.nlp.amr.Entity;@4dbb42b7))
AMR:
(t / think-01, ARG0, h / he)
(t / think-01, ARG2, i / i)
(t / think-01, mod, p / perhaps)

Decoded in 49,189 microseconds
Sentence: But I , alas , do not know how to see sheep through the walls of boxes .

Spans:
Span 0-1:  But => contrast-01
Span 1-2:  I => i
Span 10-11:  see => see-01
Span 11-12:  sheep => sheep
Span 12-13:  through => through

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  alas => alas
Oracle Span 16-17:  boxes => box
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  I => i
Oracle Span 7-8:  know => know-01
Oracle Span 10-11:  see => (thing :manner-of see-01)
Oracle Span 11-12:  sheep => sheep
Oracle Span 12-13:  through => through
Oracle Span 14-15:  walls => wall

Incorrect span: see => see-01
Missing span: alas => alas
Missing span: know => know-01
Missing span: see => (thing :manner-of see-01)
Missing span: walls => wall
Missing span: boxes => box
Dependencies:
1	But	_	CC	CC	_	8	cc	_	_
2	I	_	PRP	PRP	_	8	nsubj	_	_
3	,	_	,	,	_	8	punct	_	_
4	alas	_	UH	UH	_	6	discourse	_	_
5	,	_	,	,	_	6	punct	_	_
6	do	_	VB	VB	_	8	dep	_	_
7	not	_	RB	RB	_	6	neg	_	_
8	know	_	VBP	VBP	_	0	root	_	_
9	how	_	WRB	WRB	_	11	advmod	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	see	_	VB	VB	_	8	ccomp	_	_
12	sheep	_	NN	NN	_	11	dobj	_	_
13	through	_	IN	IN	_	11	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	walls	_	NNS	NNS	_	13	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	boxes	_	NNS	NNS	_	16	pobj	_	_
18	.	_	.	.	_	8	punct	_	_

Oracle:
(b2 / box, consist, w / wall)
(c / contrast-01, ARG2, k / know-01)
(c / contrast-01, mod, a / alas)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t2 / thing)
(s / see-01, ARG1, s2 / sheep)
(s / see-01, manner, t2 / thing)
(s / see-01, path, t / through)
(t / through, op, w / wall)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),through,through,false), Span(11,12,List(1),sheep,sheep,false), Span(10,11,List(2),see,see-01,false), Span(1,2,List(3),I,i,false), Span(0,1,List(4),But,contrast-01,false)),Map(2 -> see-01, 1 -> sheep, 4 -> contrast-01, 0 -> through, 3 -> i),Map(s2 -> see-01, t -> through, s -> sheep, i -> i, c -> contrast-01))),[Ljava.lang.String;@66f57048,Annotation([Ljava.lang.String;@550dbc7a,[Ljava.lang.String;@21282ed8,[Ljava.lang.String;@36916eb0),Annotation([Ljava.lang.String;@7bab3f1a,[Ljava.lang.String;@437da279,[Ledu.cmu.lti.nlp.amr.Dependency;@23c30a20),Annotation([Ljava.lang.String;@1e1a0406,[Ljava.lang.String;@3cebbb30,[Ljava.lang.String;@12aba8be),Annotation([Ljava.lang.String;@290222c1,[Ljava.lang.String;@67f639d3,[Ledu.cmu.lti.nlp.amr.Entity;@6253c26))
AMR:
(c / contrast-01, ARG2, s2 / see-01)
(s / sheep, direction, t / through)
(s2 / see-01, ARG0, i / i)
(s2 / see-01, ARG1, s / sheep)

Decoded in 29,391 microseconds
Sentence: Perhaps I am a little like the grown - ups .

Spans:
Span 7-8:  grown => grown-up
Span 1-2:  I => i
Span 4-5:  little => little

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  grown => grown-up
Oracle Span 1-2:  I => i
Oracle Span 4-5:  little => little
Oracle Span 0-1:  Perhaps => perhaps

Missing span: Perhaps => perhaps
Dependencies:
1	Perhaps	_	RB	RB	_	3	advmod	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	am	_	VBP	VBP	_	0	root	_	_
4	a	_	DT	DT	_	5	det	_	_
5	little	_	JJ	JJ	_	6	npadvmod	_	_
6	like	_	IN	IN	_	3	prep	_	_
7	the	_	DT	DT	_	10	det	_	_
8	grown	_	JJ	JJ	_	10	amod	_	_
9	-	_	CD	CD	_	10	num	_	_
10	ups	_	NNS	NNS	_	6	pobj	_	_
11	.	_	.	.	_	3	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),grown,grown-up,false), Span(4,5,List(1),little,little,false), Span(1,2,List(2),I,i,false)),Map(2 -> i, 1 -> little, 0 -> grown-up),Map(g -> grown-up, i -> i, l -> little))),[Ljava.lang.String;@49049a04,Annotation([Ljava.lang.String;@71a8adcf,[Ljava.lang.String;@27462a88,[Ljava.lang.String;@82de64a),Annotation([Ljava.lang.String;@659499f1,[Ljava.lang.String;@51e69659,[Ledu.cmu.lti.nlp.amr.Dependency;@47e2e487),Annotation([Ljava.lang.String;@201a4587,[Ljava.lang.String;@61001b64,[Ljava.lang.String;@4310d43),Annotation([Ljava.lang.String;@54a7079e,[Ljava.lang.String;@26e356f0,[Ledu.cmu.lti.nlp.amr.Entity;@47d9a273))
AMR:
(g / grown-up, poss, i / i)
(i / i, op, l / little)

Decoded in 17,378 microseconds
Sentence: I have had to grow old .

Spans:
Span 4-5:  grow => grow-02
Span 0-1:  I => i
Span 5-6:  old => old

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  grow => grow-02
Oracle Span 0-1:  I => i
Oracle Span 5-6:  old => old

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	had	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	grow	_	VB	VB	_	3	xcomp	_	_
6	old	_	JJ	JJ	_	5	acomp	_	_
7	.	_	.	.	_	3	punct	_	_

Oracle:
(g / grow-02, ARG1, i / i)
(g / grow-02, ARG2, o2 / old)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),old,old,false), Span(4,5,List(1),grow,grow-02,false), Span(0,1,List(2),I,i,false)),Map(2 -> i, 1 -> grow-02, 0 -> old),Map(g -> grow-02, i -> i, o -> old))),[Ljava.lang.String;@4b8ee4de,Annotation([Ljava.lang.String;@27f981c6,[Ljava.lang.String;@1b11171f,[Ljava.lang.String;@1151e434),Annotation([Ljava.lang.String;@2dc54ad4,[Ljava.lang.String;@4659191b,[Ledu.cmu.lti.nlp.amr.Dependency;@55634720),Annotation([Ljava.lang.String;@4b0d79fc,[Ljava.lang.String;@4c1909a3,[Ljava.lang.String;@428640fa),Annotation([Ljava.lang.String;@d9345cd,[Ljava.lang.String;@2d710f1a,[Ledu.cmu.lti.nlp.amr.Entity;@29215f06))
AMR:
(g / grow-02, ARG0, i / i)
(g / grow-02, ARG2, o / old)

Decoded in 10,561 microseconds
Sentence: Chapter 5 .

Spans:
Span 0-1:  Chapter => chapter

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  5 => 5
Oracle Span 0-1:  Chapter => chapter

Missing span: 5 => 5
Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	5	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 5 / 5)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false)),Map(0 -> chapter),Map(c -> chapter))),[Ljava.lang.String;@59505b48,Annotation([Ljava.lang.String;@4efac082,[Ljava.lang.String;@6bd61f98,[Ljava.lang.String;@48aca48b),Annotation([Ljava.lang.String;@13fd2ccd,[Ljava.lang.String;@b9b00e0,[Ledu.cmu.lti.nlp.amr.Dependency;@506ae4d4),Annotation([Ljava.lang.String;@7d4f9aae,[Ljava.lang.String;@72e5a8e,[Ljava.lang.String;@54e1c68b),Annotation([Ljava.lang.String;@53aac487,[Ljava.lang.String;@52b1beb6,[Ledu.cmu.lti.nlp.amr.Entity;@273e7444))
AMR:


Decoded in 5,525 microseconds
Sentence: As each day passed I would learn , in our talk , something about the little prince 's planet , his departure from it , his journey .

Spans:
Span 2-3:  day => day
Span 21-22:  departure => depart-01
Span 1-2:  each => each
Span 4-5:  I => i
Span 23-24:  it => it
Span 26-27:  journey => journey-01
Span 15-16:  little => little
Span 18-19:  planet => planet
Span 16-17:  prince => prince
Span 12-13:  something => something
Span 10-11:  talk => talk-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Oracle Span 2-3:  day => day
Oracle Span 21-22:  departure => depart-01
Oracle Span 1-2:  each => each
Oracle Span 4-5:  I => i
Oracle Span 26-27:  journey => journey-01
Oracle Span 6-7:  learn => learn-01
Oracle Span 15-16:  little => little
Oracle Span 3-4:  passed => pass-03
Oracle Span 18-19:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 12-13:  something => something
Oracle Span 10-11:  talk => talk-01

Extra span: it => it
Missing span: learn => learn-01
Missing span: passed => pass-03
Dependencies:
1	As	_	IN	IN	_	4	mark	_	_
2	each	_	DT	DT	_	3	det	_	_
3	day	_	NN	NN	_	4	nsubj	_	_
4	passed	_	VBD	VBD	_	19	advcl	_	_
5	I	_	PRP	PRP	_	7	nsubj	_	_
6	would	_	MD	MD	_	7	aux	_	_
7	learn	_	VB	VB	_	4	ccomp	_	_
8	,	_	,	,	_	19	punct	_	_
9	in	_	IN	IN	_	19	prep	_	_
10	our	_	PRP$	PRP$	_	11	poss	_	_
11	talk	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	19	punct	_	_
13	something	_	NN	NN	_	19	nsubj	_	_
14	about	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	pobj	_	_
18	's	_	VBZ	VBZ	_	19	cop	_	_
19	planet	_	NN	NN	_	0	root	_	_
20	,	_	,	,	_	19	punct	_	_
21	his	_	PRP$	PRP$	_	22	poss	_	_
22	departure	_	NN	NN	_	19	appos	_	_
23	from	_	IN	IN	_	22	prep	_	_
24	it	_	PRP	PRP	_	23	pobj	_	_
25	,	_	,	,	_	19	punct	_	_
26	his	_	PRP$	PRP$	_	27	poss	_	_
27	journey	_	NN	NN	_	19	appos	_	_
28	.	_	.	.	_	19	punct	_	_

Oracle:
(d / day, mod, e / each)
(d2 / depart-01, ARG0, p3 / prince)
(d2 / depart-01, ARG1, p2 / planet)
(j / journey-01, ARG0, p3 / prince)
(l / learn-01, ARG0, i / i)
(l / learn-01, source, t / talk-01)
(l / learn-01, time, p / pass-03)
(p / pass-03, ARG1, d / day)
(p2 / planet, poss, p3 / prince)
(p3 / prince, mod, l2 / little)
(s / something, topic, p2 / planet)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),journey,journey-01,false), Span(23,24,List(1),it,it,false), Span(21,22,List(2),departure,depart-01,false), Span(18,19,List(3),planet,planet,false), Span(16,17,List(4),prince,prince,false), Span(15,16,List(5),little,little,false), Span(12,13,List(6),something,something,false), Span(10,11,List(7),talk,talk-01,false), Span(4,5,List(8),I,i,false), Span(2,3,List(9),day,day,false), Span(1,2,List(10),each,each,false)),Map(2 -> depart-01, 5 -> little, 8 -> i, 7 -> talk-01, 1 -> it, 4 -> prince, 6 -> something, 9 -> day, 0 -> journey-01, 10 -> each, 3 -> planet),Map(e -> each, t -> talk-01, p2 -> prince, s -> something, j -> journey-01, d -> depart-01, p -> planet, d2 -> day, i2 -> i, i -> it, l -> little))),[Ljava.lang.String;@7db12bb6,Annotation([Ljava.lang.String;@783a467b,[Ljava.lang.String;@272113c4,[Ljava.lang.String;@73e9cf30),Annotation([Ljava.lang.String;@771a660,[Ljava.lang.String;@2d52216b,[Ledu.cmu.lti.nlp.amr.Dependency;@242b836),Annotation([Ljava.lang.String;@3f6f6701,[Ljava.lang.String;@3527942a,[Ljava.lang.String;@942a29c),Annotation([Ljava.lang.String;@1ed6388a,[Ljava.lang.String;@5a45133e,[Ledu.cmu.lti.nlp.amr.Entity;@534a5a98))
AMR:
(d / depart-01, ARG0, s / something)
(d / depart-01, ARG1, i / it)
(d2 / day, mod, e / each)
(j / journey-01, ARG0, p2 / prince)
(j / journey-01, ARG2, i2 / i)
(p / planet, domain, s / something)
(p2 / prince, mod, l / little)
(t / talk-01, ARG0, d2 / day)
(t / talk-01, condition, d / depart-01)
(t / talk-01, condition, j / journey-01)

Decoded in 430,528 microseconds
Sentence: The information would come very slowly , as it might chance to fall from his thoughts .

Spans:
Span 10-11:  chance => chance-02
Span 8-9:  it => it
Span 5-6:  slowly => slow-05
Span 4-5:  very => very

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  chance => chance-01
Oracle Span 3-4:  come => come-01
Oracle Span 12-13:  fall => fall-01
Oracle Span 1-2:  information => information
Oracle Span 5-6:  slowly => slow-05
Oracle Span 4-5:  very => very

Incorrect span: chance => chance-02
Extra span: it => it
Missing span: come => come-01
Missing span: fall => fall-01
Missing span: chance => chance-01
Missing span: information => information
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	information	_	NN	NN	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	come	_	VB	VB	_	0	root	_	_
5	very	_	RB	RB	_	6	advmod	_	_
6	slowly	_	RB	RB	_	4	advmod	_	_
7	,	_	,	,	_	6	punct	_	_
8	as	_	IN	IN	_	10	mark	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	might	_	MD	MD	_	6	ccomp	_	_
11	chance	_	NN	NN	_	10	dobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	fall	_	VB	VB	_	10	xcomp	_	_
14	from	_	IN	IN	_	13	prep	_	_
15	his	_	PRP$	PRP$	_	16	poss	_	_
16	thoughts	_	NNS	NNS	_	14	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(c / come-01, ARG1, i / information)
(c / come-01, time, f / fall-01)
(c2 / chance-01, ARG1, f / fall-01)
(f / fall-01, ARG1, i / information)
(s / slow-05, ARG1, c / come-01)
(s / slow-05, degree, v / very)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),chance,chance-02,false), Span(8,9,List(1),it,it,false), Span(5,6,List(2),slowly,slow-05,false), Span(4,5,List(3),very,very,false)),Map(2 -> slow-05, 1 -> it, 0 -> chance-02, 3 -> very),Map(s -> slow-05, v -> very, i -> it, c -> chance-02))),[Ljava.lang.String;@4f80542f,Annotation([Ljava.lang.String;@60bd273d,[Ljava.lang.String;@121314f7,[Ljava.lang.String;@130c12b7),Annotation([Ljava.lang.String;@5e600dd5,[Ljava.lang.String;@576d5deb,[Ledu.cmu.lti.nlp.amr.Dependency;@5d534f5d),Annotation([Ljava.lang.String;@2e3967ea,[Ljava.lang.String;@70e9c95d,[Ljava.lang.String;@4d5650ae),Annotation([Ljava.lang.String;@a38c7fe,[Ljava.lang.String;@6fdbe764,[Ledu.cmu.lti.nlp.amr.Entity;@51c668e3))
AMR:
(c / chance-02, ARG1, i / it)
(s / slow-05, ARG1, i / it)
(s / slow-05, degree, v / very)

Decoded in 32,091 microseconds
Sentence: It was in this way that I heard , on the third day , about the catastrophe of the baobabs .

Spans:
Span 19-20:  baobabs => baobab
Span 12-13:  day => day
Span 7-8:  heard => hear-01
Span 6-7:  I => i
Span 0-1:  It => it
Span 3-4:  this => this
Span 4-5:  way => way

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 19-20:  baobabs => baobab
Oracle Span 16-17:  catastrophe => catastrophe
Oracle Span 12-13:  day => day
Oracle Span 7-8:  heard => hear-01
Oracle Span 6-7:  I => i
Oracle Span 3-4:  this => this

Extra span: way => way
Extra span: It => it
Missing span: catastrophe => catastrophe
Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	was	_	VBD	VBD	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	this	_	DT	DT	_	5	det	_	_
5	way	_	NN	NN	_	3	pobj	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	heard	_	VBD	VBD	_	2	ccomp	_	_
9	,	_	,	,	_	8	punct	_	_
10	on	_	IN	IN	_	8	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	third	_	JJ	JJ	_	13	amod	_	_
13	day	_	NN	NN	_	10	pobj	_	_
14	,	_	,	,	_	8	punct	_	_
15	about	_	IN	IN	_	8	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	catastrophe	_	NN	NN	_	15	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	baobabs	_	NNS	NNS	_	18	pobj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(c / catastrophe, poss, b / baobab)
(h / hear-01, ARG0, i / i)
(h / hear-01, ARG1, c / catastrophe)
(h / hear-01, manner, t / this)
(h / hear-01, time, d / day)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),baobabs,baobab,false), Span(12,13,List(1),day,day,false), Span(7,8,List(2),heard,hear-01,false), Span(6,7,List(3),I,i,false), Span(4,5,List(4),way,way,false), Span(3,4,List(5),this,this,false), Span(0,1,List(6),It,it,false)),Map(2 -> hear-01, 5 -> this, 1 -> day, 4 -> way, 6 -> it, 0 -> baobab, 3 -> i),Map(w -> way, h -> hear-01, t -> this, b -> baobab, d -> day, i2 -> it, i -> i))),[Ljava.lang.String;@2e6a8155,Annotation([Ljava.lang.String;@6221a451,[Ljava.lang.String;@52719fb6,[Ljava.lang.String;@3012646b),Annotation([Ljava.lang.String;@4a883b15,[Ljava.lang.String;@25641d39,[Ledu.cmu.lti.nlp.amr.Dependency;@7b36aa0c),Annotation([Ljava.lang.String;@5824a83d,[Ljava.lang.String;@537f60bf,[Ljava.lang.String;@5677323c),Annotation([Ljava.lang.String;@18df8434,[Ljava.lang.String;@65c7a252,[Ledu.cmu.lti.nlp.amr.Entity;@4d154ccd))
AMR:
(h / hear-01, ARG0, i / i)
(h / hear-01, ARG1, i2 / it)
(h / hear-01, ARG2, d / day)
(h / hear-01, accompanier, b / baobab)
(w / way, mod, t / this)
(w / way, poss, i / i)

Decoded in 119,082 microseconds
Sentence: This time , once more , I had the sheep to thank for it .

Spans:
Span 6-7:  I => i
Span 13-14:  it => it
Span 4-5:  more => more
Span 3-4:  once => once
Span 9-10:  sheep => sheep
Span 0-1:  This => this
Span 1-2:  time => time

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  I => i
Oracle Span 13-14:  it => it
Oracle Span 9-10:  sheep => sheep
Oracle Span 11-12:  thank => thank-01
Oracle Span 0-1:  This => this
Oracle Span 1-2:  time => time

Extra span: more => more
Extra span: once => once
Missing span: thank => thank-01
Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	time	_	NN	NN	_	8	nsubj	_	_
3	,	_	,	,	_	8	punct	_	_
4	once	_	RB	RB	_	5	advmod	_	_
5	more	_	RBR	RBR	_	8	advmod	_	_
6	,	_	,	,	_	8	punct	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	had	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	10	det	_	_
10	sheep	_	NN	NN	_	8	dobj	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	thank	_	VB	VB	_	10	vmod	_	_
13	for	_	IN	IN	_	12	prep	_	_
14	it	_	PRP	PRP	_	13	pobj	_	_
15	.	_	.	.	_	8	punct	_	_

Oracle:
(t / thank-01, ARG0, i / i)
(t / thank-01, ARG1, s / sheep)
(t / thank-01, ARG2, i2 / it)
(t2 / time, mod, t3 / this)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),it,it,false), Span(9,10,List(1),sheep,sheep,false), Span(6,7,List(2),I,i,false), Span(4,5,List(3),more,more,false), Span(3,4,List(4),once,once,false), Span(1,2,List(5),time,time,false), Span(0,1,List(6),This,this,false)),Map(2 -> i, 5 -> time, 1 -> sheep, 4 -> once, 6 -> this, 0 -> it, 3 -> more),Map(t -> time, s -> sheep, m -> more, t2 -> this, i2 -> i, i -> it, o -> once))),[Ljava.lang.String;@229c6181,Annotation([Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072,[Ljava.lang.String;@791f145a),Annotation([Ljava.lang.String;@38cee291,[Ljava.lang.String;@4b45a2f5,[Ledu.cmu.lti.nlp.amr.Dependency;@f09733f),Annotation([Ljava.lang.String;@e350b40,[Ljava.lang.String;@41a0aa7d,[Ljava.lang.String;@2794eab6),Annotation([Ljava.lang.String;@6340e5f0,[Ljava.lang.String;@45099dd3,[Ledu.cmu.lti.nlp.amr.Entity;@13e344d))
AMR:
(i / it, poss, o / once)
(m / more, domain, i2 / i)
(m / more, mod, o / once)
(s / sheep, mod, m / more)
(t / time, mod, t2 / this)
(t / time, part, s / sheep)

Decoded in 25,070 microseconds
Sentence: For the little prince asked me abruptly -- as if seized by a grave doubt -- " It is true , is n't it , that sheep eat little bushes ? "

Spans:
Span 4-5:  asked => ask-01
Span 29-30:  bushes => bush
Span 14-15:  doubt => doubt-01
Span 27-28:  eat => eat-01
Span 23-24:  it => it
Span 17-18:  It => it
Span 28-29:  little => little
Span 2-3:  little => little
Span 3-4:  prince => prince
Span 26-27:  sheep => sheep
Span 19-20:  true => true-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 6-7:  abruptly => abrupt
Oracle Span 4-5:  asked => ask-01
Oracle Span 29-30:  bushes => bush
Oracle Span 14-15:  doubt => doubt-01
Oracle Span 27-28:  eat => eat-01
Oracle Span 13-14:  grave => grave
Oracle Span 2-3:  little => little
Oracle Span 28-29:  little => little
Oracle Span 3-4:  prince => prince
Oracle Span 10-11:  seized => seize-01
Oracle Span 26-27:  sheep => sheep
Oracle Span 19-20:  true => true-01

Extra span: it => it
Extra span: It => it
Missing span: seized => seize-01
Missing span: grave => grave
Missing span: abruptly => abrupt
Dependencies:
1	For	_	IN	IN	_	5	dep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	asked	_	VBD	VBD	_	0	root	_	_
6	me	_	PRP	PRP	_	5	dobj	_	_
7	abruptly	_	RB	RB	_	5	advmod	_	_
8	--	_	:	:	_	7	punct	_	_
9	as	_	RB	RB	_	7	advmod	_	_
10	if	_	IN	IN	_	11	mark	_	_
11	seized	_	VBN	VBN	_	9	dep	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	grave	_	JJ	JJ	_	15	amod	_	_
15	doubt	_	NN	NN	_	12	pobj	_	_
16	--	_	:	:	_	5	punct	_	_
17	"	_	''	''	_	5	punct	_	_
18	It	_	PRP	PRP	_	20	nsubj	_	_
19	is	_	VBZ	VBZ	_	20	cop	_	_
20	true	_	JJ	JJ	_	5	ccomp	_	_
21	,	_	,	,	_	20	punct	_	_
22	is	_	VBZ	VBZ	_	24	cop	_	_
23	n't	_	RB	RB	_	24	neg	_	_
24	it	_	PRP	PRP	_	20	dep	_	_
25	,	_	,	,	_	20	punct	_	_
26	that	_	IN	IN	_	28	mark	_	_
27	sheep	_	NN	NN	_	28	nsubj	_	_
28	eat	_	VBP	VBP	_	20	ccomp	_	_
29	little	_	JJ	JJ	_	30	amod	_	_
30	bushes	_	NNS	NNS	_	28	dobj	_	_
31	?	_	.	.	_	5	punct	_	_
32	"	_	''	''	_	5	punct	_	_

Oracle:
(a / ask-01, ARG0, p / prince)
(a / ask-01, ARG1, t / true-01)
(a / ask-01, conj-as-if, s2 / seize-01)
(a / ask-01, manner, a2 / abrupt)
(b / bush, mod, l / little)
(d / doubt-01, ARG0, p / prince)
(d / doubt-01, mod, g / grave)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(p / prince, mod, l2 / little)
(s2 / seize-01, ARG0, d / doubt-01)
(s2 / seize-01, ARG1, p / prince)
(t / true-01, ARG1, e / eat-01)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),bushes,bush,false), Span(28,29,List(1),little,little,false), Span(27,28,List(2),eat,eat-01,false), Span(26,27,List(3),sheep,sheep,false), Span(23,24,List(4),it,it,false), Span(19,20,List(5),true,true-01,false), Span(17,18,List(6),It,it,false), Span(14,15,List(7),doubt,doubt-01,false), Span(4,5,List(8),asked,ask-01,false), Span(3,4,List(9),prince,prince,false), Span(2,3,List(10),little,little,false)),Map(2 -> eat-01, 5 -> true-01, 8 -> ask-01, 7 -> doubt-01, 1 -> little, 4 -> it, 6 -> it, 9 -> prince, 0 -> bush, 10 -> little, 3 -> sheep),Map(e -> eat-01, t -> true-01, b -> bush, s -> sheep, d -> doubt-01, p -> prince, a -> ask-01, i2 -> it, l2 -> little, i -> it, l -> little))),[Ljava.lang.String;@1ffaf86,Annotation([Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54,[Ljava.lang.String;@1c7696c6),Annotation([Ljava.lang.String;@60099951,[Ljava.lang.String;@20140db9,[Ledu.cmu.lti.nlp.amr.Dependency;@1e6a3214),Annotation([Ljava.lang.String;@368247b9,[Ljava.lang.String;@1a6d8329,[Ljava.lang.String;@1a942c18),Annotation([Ljava.lang.String;@55a147cc,[Ljava.lang.String;@71ba6d4e,[Ledu.cmu.lti.nlp.amr.Entity;@738dc9b))
AMR:
(a / ask-01, ARG0, p / prince)
(a / ask-01, ARG1, t / true-01)
(b / bush, mod, l / little)
(d / doubt-01, ARG0, i2 / it)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(p / prince, mod, l2 / little)
(t / true-01, ARG0, i / it)
(t / true-01, ARG1, i2 / it)
(t / true-01, ARG2, e / eat-01)

Decoded in 274,608 microseconds
Sentence: " Yes , that is true . "

Spans:
Span 5-6:  true => true-01
Span 1-2:  Yes => yes

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  that => that
Oracle Span 5-6:  true => true-01

Extra span: Yes => yes
Missing span: that => that
Dependencies:
1	"	_	''	''	_	6	punct	_	_
2	Yes	_	RB	RB	_	6	advmod	_	_
3	,	_	,	,	_	6	punct	_	_
4	that	_	DT	DT	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	true	_	JJ	JJ	_	0	root	_	_
7	.	_	.	.	_	6	punct	_	_
8	"	_	''	''	_	6	punct	_	_

Oracle:
(t / true-01, ARG1, t2 / that)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),true,true-01,false), Span(1,2,List(1),Yes,yes,false)),Map(1 -> yes, 0 -> true-01),Map(t -> true-01, y -> yes))),[Ljava.lang.String;@3c77d488,Annotation([Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8,[Ljava.lang.String;@d86a6f),Annotation([Ljava.lang.String;@2892d68,[Ljava.lang.String;@5ab956d7,[Ledu.cmu.lti.nlp.amr.Dependency;@3646a422),Annotation([Ljava.lang.String;@750e2b97,[Ljava.lang.String;@3e27aa33,[Ljava.lang.String;@2e385cce),Annotation([Ljava.lang.String;@2ddc9a9f,[Ljava.lang.String;@298a5e20,[Ledu.cmu.lti.nlp.amr.Entity;@2a7f1f10))
AMR:
(t / true-01, ARG1, y / yes)

Decoded in 8,106 microseconds
Sentence: " Ah !

Spans:
Span 1-2:  Ah => ah

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  Ah => ah

Dependencies:
1	"	_	VB	VB	_	0	root	_	_
2	Ah	_	UH	UH	_	1	dep	_	_
3	!	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),Ah,ah,false)),Map(0 -> ah),Map(a -> ah))),[Ljava.lang.String;@46cdf8bd,Annotation([Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06,[Ljava.lang.String;@26d9b808),Annotation([Ljava.lang.String;@f78a47e,[Ljava.lang.String;@644baf4a,[Ledu.cmu.lti.nlp.amr.Dependency;@7526515b),Annotation([Ljava.lang.String;@1ed4ae0f,[Ljava.lang.String;@54c5a2ff,[Ljava.lang.String;@6d4d66d2),Annotation([Ljava.lang.String;@2a265ea9,[Ljava.lang.String;@11392934,[Ledu.cmu.lti.nlp.amr.Entity;@6892b3b6))
AMR:


Decoded in 2,918 microseconds
Sentence: I am glad ! "

Spans:
Span 2-3:  glad => glad-02
Span 0-1:  I => i

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  glad => glad-02
Oracle Span 0-1:  I => i

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	am	_	VBP	VBP	_	3	cop	_	_
3	glad	_	JJ	JJ	_	0	root	_	_
4	!	_	.	.	_	3	punct	_	_
5	"	_	''	''	_	3	punct	_	_

Oracle:
(g / glad-02, ARG1, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),glad,glad-02,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> glad-02),Map(g -> glad-02, i -> i))),[Ljava.lang.String;@6e6f2380,Annotation([Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b,[Ljava.lang.String;@53fe15ff),Annotation([Ljava.lang.String;@449a4f23,[Ljava.lang.String;@1530c739,[Ledu.cmu.lti.nlp.amr.Dependency;@5b1669c0),Annotation([Ljava.lang.String;@78e4deb0,[Ljava.lang.String;@6e9175d8,[Ljava.lang.String;@7d0b7e3c),Annotation([Ljava.lang.String;@15bb5034,[Ljava.lang.String;@4b741d6d,[Ledu.cmu.lti.nlp.amr.Entity;@2eae8e6e))
AMR:
(g / glad-02, ARG1, i / i)

Decoded in 5,399 microseconds
Sentence: I did not understand why it was so important that sheep should eat little bushes .

Spans:
Span 14-15:  bushes => bush
Span 12-13:  eat => eat-01
Span 0-1:  I => i
Span 8-9:  important => important
Span 5-6:  it => it
Span 13-14:  little => little
Span 10-11:  sheep => sheep
Span 11-12:  should => recommend-01
Span 7-8:  so => so
Span 3-4:  understand => understand-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 14-15:  bushes => bush
Oracle Span 12-13:  eat => eat-01
Oracle Span 0-1:  I => i
Oracle Span 8-9:  important => important
Oracle Span 13-14:  little => little
Oracle Span 10-11:  sheep => sheep
Oracle Span 11-12:  should => recommend-01
Oracle Span 7-8:  so => so
Oracle Span 3-4:  understand => understand-01

Extra span: it => it
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	did	_	VBD	VBD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	understand	_	VB	VB	_	0	root	_	_
5	why	_	WRB	WRB	_	9	advmod	_	_
6	it	_	PRP	PRP	_	9	nsubj	_	_
7	was	_	VBD	VBD	_	9	cop	_	_
8	so	_	RB	RB	_	9	advmod	_	_
9	important	_	JJ	JJ	_	4	advcl	_	_
10	that	_	IN	IN	_	13	mark	_	_
11	sheep	_	NN	NN	_	13	nsubj	_	_
12	should	_	MD	MD	_	13	aux	_	_
13	eat	_	VB	VB	_	9	ccomp	_	_
14	little	_	JJ	JJ	_	15	amod	_	_
15	bushes	_	NNS	NNS	_	13	dobj	_	_
16	.	_	.	.	_	4	punct	_	_

Oracle:
(b / bush, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(i2 / important, domain, r / recommend-01)
(i2 / important, mod, s2 / so)
(r / recommend-01, ARG1, e / eat-01)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, i2 / important)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),bushes,bush,false), Span(13,14,List(1),little,little,false), Span(12,13,List(2),eat,eat-01,false), Span(11,12,List(3),should,recommend-01,false), Span(10,11,List(4),sheep,sheep,false), Span(8,9,List(5),important,important,false), Span(7,8,List(6),so,so,false), Span(5,6,List(7),it,it,false), Span(3,4,List(8),understand,understand-01,false), Span(0,1,List(9),I,i,false)),Map(2 -> eat-01, 5 -> important, 8 -> understand-01, 7 -> it, 1 -> little, 4 -> sheep, 6 -> so, 9 -> i, 0 -> bush, 3 -> recommend-01),Map(e -> eat-01, s2 -> so, b -> bush, s -> sheep, i3 -> i, i2 -> it, i -> important, r -> recommend-01, u -> understand-01, l -> little))),[Ljava.lang.String;@8f2ef19,Annotation([Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b,[Ljava.lang.String;@7674f035),Annotation([Ljava.lang.String;@69e153c5,[Ljava.lang.String;@173ed316,[Ledu.cmu.lti.nlp.amr.Dependency;@25ce9dc4),Annotation([Ljava.lang.String;@74ea2410,[Ljava.lang.String;@17f62e33,[Ljava.lang.String;@76b1e9b8),Annotation([Ljava.lang.String;@27406a17,[Ljava.lang.String;@2af004b,[Ledu.cmu.lti.nlp.amr.Entity;@248e319b))
AMR:
(b / bush, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(i / important, degree, s2 / so)
(i / important, domain, i2 / it)
(r / recommend-01, ARG0, i / important)
(r / recommend-01, ARG1, e / eat-01)
(u / understand-01, ARG0, i3 / i)
(u / understand-01, ARG1, i2 / it)

Decoded in 217,955 microseconds
Sentence: But the little prince added : " Then it follows that they also eat baobabs ? "

Spans:
Span 4-5:  added => add-01
Span 12-13:  also => also
Span 14-15:  baobabs => baobab
Span 0-1:  But => contrast-01
Span 13-14:  eat => eat-01
Span 8-9:  it => it
Span 2-3:  little => little
Span 3-4:  prince => prince
Span 7-8:  Then => then
Span 11-12:  they => they

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 4-5:  added => add-01
Oracle Span 12-13:  also => also
Oracle Span 14-15:  baobabs => baobab
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  eat => eat-01
Oracle Span 9-10:  follows => follow-05
Oracle Span 2-3:  little => little
Oracle Span 3-4:  prince => prince
Oracle Span 11-12:  they => they

Extra span: it => it
Extra span: Then => then
Missing span: follows => follow-05
Dependencies:
1	But	_	CC	CC	_	5	cc	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	added	_	VBD	VBD	_	0	root	_	_
6	:	_	:	:	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_
8	Then	_	RB	RB	_	10	advmod	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	follows	_	VBZ	VBZ	_	5	ccomp	_	_
11	that	_	IN	IN	_	14	mark	_	_
12	they	_	PRP	PRP	_	14	nsubj	_	_
13	also	_	RB	RB	_	14	advmod	_	_
14	eat	_	VBP	VBP	_	10	ccomp	_	_
15	baobabs	_	NNS	NNS	_	14	dobj	_	_
16	?	_	.	.	_	5	punct	_	_
17	"	_	''	''	_	5	punct	_	_

Oracle:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, f / follow-05)
(c / contrast-01, ARG1, a / add-01)
(e / eat-01, ARG0, t / they)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, mod, a2 / also)
(f / follow-05, ARG1, e / eat-01)
(p / prince, mod, l / little)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),baobabs,baobab,false), Span(13,14,List(1),eat,eat-01,false), Span(12,13,List(2),also,also,false), Span(11,12,List(3),they,they,false), Span(8,9,List(4),it,it,false), Span(7,8,List(5),Then,then,false), Span(4,5,List(6),added,add-01,false), Span(3,4,List(7),prince,prince,false), Span(2,3,List(8),little,little,false), Span(0,1,List(9),But,contrast-01,false)),Map(2 -> also, 5 -> then, 8 -> little, 7 -> prince, 1 -> eat-01, 4 -> it, 6 -> add-01, 9 -> contrast-01, 0 -> baobab, 3 -> they),Map(e -> eat-01, t -> they, b -> baobab, p -> prince, a -> also, t2 -> then, a2 -> add-01, i -> it, c -> contrast-01, l -> little))),[Ljava.lang.String;@5d0bf09b,Annotation([Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb,[Ljava.lang.String;@563f38c4),Annotation([Ljava.lang.String;@543295b0,[Ljava.lang.String;@54422e18,[Ledu.cmu.lti.nlp.amr.Dependency;@117159c0),Annotation([Ljava.lang.String;@3e27ba32,[Ljava.lang.String;@7ef82753,[Ljava.lang.String;@3b0fe47a),Annotation([Ljava.lang.String;@202b0582,[Ljava.lang.String;@235ecd9f,[Ledu.cmu.lti.nlp.amr.Entity;@1ca3b418))
AMR:
(a2 / add-01, ARG0, p / prince)
(a2 / add-01, ARG1, t2 / then)
(c / contrast-01, ARG2, a2 / add-01)
(e / eat-01, ARG0, t / they)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, ARG2, a2 / add-01)
(e / eat-01, beneficiary, i / it)
(e / eat-01, mod, a / also)
(p / prince, mod, l / little)

Decoded in 314,590 microseconds
Sentence: I pointed out to the little prince that baobabs were not little bushes , but , on the contrary , trees as big as castles ; and that even if he took a whole herd of elephants away with him , the herd would not eat up one single baobab .

Spans:
Span 25-26:  ; => and
Span 26-27:  and => and
Span 37-38:  away => away
Span 49-50:  baobab => baobab
Span 8-9:  baobabs => baobab
Span 22-23:  big => big
Span 12-13:  bushes => bush
Span 14-15:  but => contrast-01
Span 18-19:  contrary => contrary-01
Span 45-46:  eat => eat-01
Span 30-31:  he => he
Span 0-1:  I => i
Span 11-12:  little => little
Span 5-6:  little => little
Span 1-2:  pointed => pointed
Span 6-7:  prince => prince
Span 48-49:  single => single-02
Span 46-47:  up => up
Span 33-34:  whole => whole

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 25-26:  ; => and
Oracle Span 37-38:  away => away
Oracle Span 49-50:  baobab => baobab
Oracle Span 8-9:  baobabs => baobab
Oracle Span 22-23:  big => big
Oracle Span 12-13:  bushes => bush
Oracle Span 24-25:  castles => castle
Oracle Span 36-37:  elephants => elephant
Oracle Span 28-29:  even => even-if
Oracle Span 34-35:  herd => herd
Oracle Span 0-1:  I => i
Oracle Span 5-6:  little => little
Oracle Span 11-12:  little => little
Oracle Span 47-48:  one => 1
Oracle Span 1-2:  pointed => point-out-02
Oracle Span 6-7:  prince => prince
Oracle Span 48-49:  single => single-02
Oracle Span 31-32:  took => take-01
Oracle Span 20-21:  trees => tree
Oracle Span 33-34:  whole => whole

Extra span: up => up
Extra span: eat => eat-01
Extra span: he => he
Extra span: and => and
Extra span: contrary => contrary-01
Extra span: but => contrast-01
Incorrect span: pointed => pointed
Missing span: one => 1
Missing span: took => take-01
Missing span: herd => herd
Missing span: elephants => elephant
Missing span: trees => tree
Missing span: castles => castle
Missing span: pointed => point-out-02
Missing span: even => even-if
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	pointed	_	VBD	VBD	_	0	root	_	_
3	out	_	RP	RP	_	2	prt	_	_
4	to	_	TO	TO	_	2	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	little	_	JJ	JJ	_	7	amod	_	_
7	prince	_	NN	NN	_	4	pobj	_	_
8	that	_	IN	IN	_	13	mark	_	_
9	baobabs	_	NNS	NNS	_	13	nsubj	_	_
10	were	_	VBD	VBD	_	13	cop	_	_
11	not	_	RB	RB	_	13	neg	_	_
12	little	_	RB	RB	_	13	advmod	_	_
13	bushes	_	JJ	JJ	_	2	ccomp	_	_
14	,	_	,	,	_	13	punct	_	_
15	but	_	CC	CC	_	13	cc	_	_
16	,	_	,	,	_	13	punct	_	_
17	on	_	IN	IN	_	13	conj	_	_
18	the	_	DT	DT	_	19	det	_	_
19	contrary	_	NN	NN	_	17	pobj	_	_
20	,	_	,	,	_	19	punct	_	_
21	trees	_	NNS	NNS	_	19	appos	_	_
22	as	_	IN	IN	_	21	prep	_	_
23	big	_	JJ	JJ	_	22	pobj	_	_
24	as	_	IN	IN	_	23	prep	_	_
25	castles	_	NNS	NNS	_	24	pobj	_	_
26	;	_	:	:	_	13	punct	_	_
27	and	_	CC	CC	_	13	cc	_	_
28	that	_	IN	IN	_	46	mark	_	_
29	even	_	RB	RB	_	32	advmod	_	_
30	if	_	IN	IN	_	32	mark	_	_
31	he	_	PRP	PRP	_	32	nsubj	_	_
32	took	_	VBD	VBD	_	46	advcl	_	_
33	a	_	DT	DT	_	35	det	_	_
34	whole	_	JJ	JJ	_	35	amod	_	_
35	herd	_	NN	NN	_	32	dobj	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	elephants	_	NNS	NNS	_	36	pobj	_	_
38	away	_	RB	RB	_	39	advmod	_	_
39	with	_	IN	IN	_	32	prep	_	_
40	him	_	PRP	PRP	_	39	pobj	_	_
41	,	_	,	,	_	46	punct	_	_
42	the	_	DT	DT	_	43	det	_	_
43	herd	_	NN	NN	_	46	nsubj	_	_
44	would	_	MD	MD	_	46	aux	_	_
45	not	_	RB	RB	_	46	neg	_	_
46	eat	_	VB	VB	_	13	conj	_	_
47	up	_	RP	RP	_	46	prt	_	_
48	one	_	CD	CD	_	50	num	_	_
49	single	_	JJ	JJ	_	50	amod	_	_
50	baobab	_	NN	NN	_	46	dobj	_	_
51	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, t2 / tree)
(b / baobab, quant, 1 / 1)
(b3 / bush, domain, b2 / baobab)
(b3 / bush, mod, l3 / little)
(b5 / big, compared-to, c / castle)
(e2 / elephant, consist, h / herd)
(e3 / even-if, op, t / take-01)
(h / herd, mod, w / whole)
(p / prince, mod, l2 / little)
(p2 / point-out-02, ARG0, i / i)
(p2 / point-out-02, ARG1, a / and)
(p2 / point-out-02, beneficiary, p / prince)
(s / single-02, ARG1, b / baobab)
(t / take-01, ARG0, p / prince)
(t / take-01, ARG1, h / herd)
(t / take-01, ARG3, a2 / away)
(t2 / tree, domain, b2 / baobab)
(t2 / tree, mod, b5 / big)

Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),baobab,baobab,false), Span(48,49,List(1),single,single-02,false), Span(46,47,List(2),up,up,false), Span(45,46,List(3),eat,eat-01,false), Span(37,38,List(4),away,away,false), Span(33,34,List(5),whole,whole,false), Span(30,31,List(6),he,he,false), Span(26,27,List(7),and,and,false), Span(25,26,List(8),;,and,false), Span(22,23,List(9),big,big,false), Span(18,19,List(10),contrary,contrary-01,false), Span(14,15,List(11),but,contrast-01,false), Span(12,13,List(12),bushes,bush,false), Span(11,12,List(13),little,little,false), Span(8,9,List(14),baobabs,baobab,false), Span(6,7,List(15),prince,prince,false), Span(5,6,List(16),little,little,false), Span(1,2,List(17),pointed,pointed,false), Span(0,1,List(18),I,i,false)),Map(2 -> up, 5 -> whole, 12 -> bush, 15 -> prince, 8 -> and, 18 -> i, 7 -> and, 17 -> pointed, 1 -> single-02, 4 -> away, 11 -> contrast-01, 14 -> baobab, 6 -> he, 0 -> baobab, 9 -> big, 16 -> little, 3 -> eat-01, 10 -> contrary-01, 13 -> little),Map(e -> eat-01, w -> whole, b3 -> bush, h -> he, b -> baobab, b2 -> big, p2 -> pointed, a3 -> and, s -> single-02, p -> prince, a -> away, b4 -> baobab, l2 -> little, i -> i, a2 -> and, c -> contrary-01, l -> little, u -> up, c2 -> contrast-01))),[Ljava.lang.String;@58cbafc2,Annotation([Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0,[Ljava.lang.String;@74d1dc36),Annotation([Ljava.lang.String;@7161d8d1,[Ljava.lang.String;@74e28667,[Ledu.cmu.lti.nlp.amr.Dependency;@1cf6d1be),Annotation([Ljava.lang.String;@663c9e7a,[Ljava.lang.String;@19e4653c,[Ljava.lang.String;@795509d9),Annotation([Ljava.lang.String;@53045c6c,[Ljava.lang.String;@5149d738,[Ledu.cmu.lti.nlp.amr.Entity;@6bbe85a8))
AMR:
(a2 / and, op, a3 / and)
(a2 / and, op, e / eat-01)
(a2 / and, op, p2 / pointed)
(b3 / bush, degree, l / little)
(b3 / bush, domain, b4 / baobab)
(c / contrary-01, ARG0, w / whole)
(c / contrary-01, ARG1, b3 / bush)
(c2 / contrast-01, ARG0, a / away)
(c2 / contrast-01, ARG1, b3 / bush)
(c2 / contrast-01, ARG2, a2 / and)
(e / eat-01, ARG0, h / he)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, direction, u / up)
(p / prince, mod, l2 / little)
(p2 / pointed, ARG0, i / i)
(p2 / pointed, destination, p / prince)
(s / single-02, ARG0, b2 / big)
(s / single-02, ARG1, b / baobab)

Decoded in 1,077,879 microseconds
Sentence: The idea of the herd of elephants made the little prince laugh .

Spans:
Span 1-2:  idea => idea
Span 11-12:  laugh => laugh-01
Span 9-10:  little => little
Span 10-11:  prince => prince

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Oracle Span 6-7:  elephants => elephant
Oracle Span 4-5:  herd => herd
Oracle Span 1-2:  idea => idea
Oracle Span 11-12:  laugh => laugh-01
Oracle Span 9-10:  little => little
Oracle Span 7-8:  made => make-02
Oracle Span 10-11:  prince => prince

Missing span: made => make-02
Missing span: herd => herd
Missing span: elephants => elephant
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	idea	_	NN	NN	_	8	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	herd	_	NN	NN	_	3	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	elephants	_	NNS	NNS	_	6	pobj	_	_
8	made	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	12	det	_	_
10	little	_	JJ	JJ	_	12	amod	_	_
11	prince	_	NN	NN	_	12	nn	_	_
12	laugh	_	NN	NN	_	8	dobj	_	_
13	.	_	.	.	_	8	punct	_	_

Oracle:
(e / elephant, consist, h / herd)
(i / idea, topic, h / herd)
(l / laugh-01, ARG0, p / prince)
(m / make-02, ARG0, i / idea)
(m / make-02, ARG1, l / laugh-01)
(p / prince, mod, l2 / little)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),laugh,laugh-01,false), Span(10,11,List(1),prince,prince,false), Span(9,10,List(2),little,little,false), Span(1,2,List(3),idea,idea,false)),Map(2 -> little, 1 -> prince, 0 -> laugh-01, 3 -> idea),Map(p -> prince, i -> idea, l2 -> little, l -> laugh-01))),[Ljava.lang.String;@3a7442c7,Annotation([Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a,[Ljava.lang.String;@4b013c76),Annotation([Ljava.lang.String;@53fb3dab,[Ljava.lang.String;@cb0755b,[Ledu.cmu.lti.nlp.amr.Dependency;@33065d67),Annotation([Ljava.lang.String;@712625fd,[Ljava.lang.String;@7bba5817,[Ljava.lang.String;@742ff096),Annotation([Ljava.lang.String;@75437611,[Ljava.lang.String;@350aac89,[Ledu.cmu.lti.nlp.amr.Entity;@1c5920df))
AMR:
(l / laugh-01, ARG0, i / idea)
(l / laugh-01, mod, l2 / little)
(l / laugh-01, mod, p / prince)

Decoded in 73,055 microseconds
Sentence: " We would have to put them one on top of the other , " he said .

Spans:
Span 15-16:  he => he
Span 12-13:  other => other
Span 5-6:  put => put-01
Span 16-17:  said => say-01
Span 9-10:  top => top
Span 1-2:  We => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 15-16:  he => he
Oracle Span 16-17:  said => say-01
Oracle Span 1-2:  We => we

Extra span: other => other
Extra span: top => top
Extra span: put => put-01
Dependencies:
1	"	_	''	''	_	17	punct	_	_
2	We	_	PRP	PRP	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	have	_	VB	VB	_	17	ccomp	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	put	_	VB	VB	_	4	xcomp	_	_
7	them	_	PRP	PRP	_	8	nsubj	_	_
8	one	_	CD	CD	_	6	xcomp	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	top	_	NN	NN	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	other	_	JJ	JJ	_	11	pobj	_	_
14	,	_	,	,	_	17	punct	_	_
15	"	_	''	''	_	17	punct	_	_
16	he	_	PRP	PRP	_	17	nsubj	_	_
17	said	_	VBD	VBD	_	0	root	_	_
18	.	_	.	.	_	17	punct	_	_

Oracle:
(s / say-01, ARG0, h / he)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),said,say-01,false), Span(15,16,List(1),he,he,false), Span(12,13,List(2),other,other,false), Span(9,10,List(3),top,top,false), Span(5,6,List(4),put,put-01,false), Span(1,2,List(5),We,we,false)),Map(2 -> other, 5 -> we, 1 -> he, 4 -> put-01, 0 -> say-01, 3 -> top),Map(w -> we, h -> he, t -> top, s -> say-01, p -> put-01, o -> other))),[Ljava.lang.String;@17f9d882,Annotation([Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3,[Ljava.lang.String;@4c60d6e9),Annotation([Ljava.lang.String;@15043a2f,[Ljava.lang.String;@4a83a74a,[Ledu.cmu.lti.nlp.amr.Dependency;@1349883),Annotation([Ljava.lang.String;@4b29d1d2,[Ljava.lang.String;@7f485fda,[Ljava.lang.String;@28261e8e),Annotation([Ljava.lang.String;@d737b89,[Ljava.lang.String;@8519cb4,[Ledu.cmu.lti.nlp.amr.Entity;@35dab4eb))
AMR:
(p / put-01, ARG0, w / we)
(p / put-01, ARG1, t / top)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, o / other)
(s / say-01, purpose, p / put-01)

Decoded in 24,164 microseconds
Sentence: But he made a wise comment : " Before they grow so big , the baobabs start out by being little . "

Spans:
Span 15-16:  baobabs => baobab
Span 19-20:  being => being
Span 12-13:  big => big
Span 0-1:  But => contrast-01
Span 10-11:  grow => grow-02
Span 1-2:  he => he
Span 20-21:  little => little
Span 11-12:  so => so
Span 9-10:  they => they

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 15-16:  baobabs => baobab
Oracle Span 8-9:  Before => before
Oracle Span 12-13:  big => big
Oracle Span 0-1:  But => contrast-01
Oracle Span 5-6:  comment => comment-01
Oracle Span 10-11:  grow => grow-02
Oracle Span 1-2:  he => he
Oracle Span 20-21:  little => little
Oracle Span 11-12:  so => so
Oracle Span 16-17:  start => start-out-05
Oracle Span 4-5:  wise => wise

Extra span: being => being
Extra span: they => they
Missing span: comment => comment-01
Missing span: wise => wise
Missing span: Before => before
Missing span: start => start-out-05
Dependencies:
1	But	_	CC	CC	_	3	cc	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	made	_	VBD	VBD	_	0	root	_	_
4	a	_	DT	DT	_	6	det	_	_
5	wise	_	JJ	JJ	_	6	amod	_	_
6	comment	_	NN	NN	_	3	dobj	_	_
7	:	_	:	:	_	3	punct	_	_
8	"	_	''	''	_	3	punct	_	_
9	Before	_	IN	IN	_	11	mark	_	_
10	they	_	PRP	PRP	_	11	nsubj	_	_
11	grow	_	VBP	VBP	_	17	advcl	_	_
12	so	_	RB	RB	_	13	advmod	_	_
13	big	_	JJ	JJ	_	11	acomp	_	_
14	,	_	,	,	_	17	punct	_	_
15	the	_	DT	DT	_	16	det	_	_
16	baobabs	_	NNS	NNS	_	17	nsubj	_	_
17	start	_	VBP	VBP	_	3	ccomp	_	_
18	out	_	RP	RP	_	17	prt	_	_
19	by	_	IN	IN	_	17	prep	_	_
20	being	_	VBG	VBG	_	21	cop	_	_
21	little	_	JJ	JJ	_	19	pcomp	_	_
22	.	_	.	.	_	3	punct	_	_
23	"	_	''	''	_	3	punct	_	_

Oracle:
(b4 / before, op, g / grow-02)
(b5 / big, degree, s2 / so)
(c / comment-01, ARG0, h / he)
(c / comment-01, ARG1, s / start-out-05)
(c / comment-01, manner, w / wise)
(c2 / contrast-01, ARG2, c / comment-01)
(g / grow-02, ARG1, b2 / baobab)
(g / grow-02, ARG2, b5 / big)
(s / start-out-05, ARG0, b2 / baobab)
(s / start-out-05, ARG2, l / little)
(s / start-out-05, time, b4 / before)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),little,little,false), Span(19,20,List(1),being,being,false), Span(15,16,List(2),baobabs,baobab,false), Span(12,13,List(3),big,big,false), Span(11,12,List(4),so,so,false), Span(10,11,List(5),grow,grow-02,false), Span(9,10,List(6),they,they,false), Span(1,2,List(7),he,he,false), Span(0,1,List(8),But,contrast-01,false)),Map(2 -> baobab, 5 -> grow-02, 8 -> contrast-01, 7 -> he, 1 -> being, 4 -> so, 6 -> they, 0 -> little, 3 -> big),Map(b3 -> big, h -> he, t -> they, b -> being, b2 -> baobab, s -> so, g -> grow-02, c -> contrast-01, l -> little))),[Ljava.lang.String;@2d901eb0,Annotation([Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845,[Ljava.lang.String;@5f049ea1),Annotation([Ljava.lang.String;@72cc7e6f,[Ljava.lang.String;@5afa3c9,[Ledu.cmu.lti.nlp.amr.Dependency;@72035809),Annotation([Ljava.lang.String;@909217e,[Ljava.lang.String;@18271936,[Ljava.lang.String;@606e4010),Annotation([Ljava.lang.String;@8458f04,[Ljava.lang.String;@48075da3,[Ledu.cmu.lti.nlp.amr.Entity;@68c9133c))
AMR:
(b / being, mod, l / little)
(b3 / big, degree, s / so)
(b3 / big, domain, t / they)
(c / contrast-01, ARG0, b3 / big)
(c / contrast-01, ARG1, l / little)
(g / grow-02, ARG0, b2 / baobab)
(g / grow-02, ARG1, t / they)
(h / he, op, g / grow-02)

Decoded in 166,560 microseconds
Sentence: " That is strictly correct , "

Spans:
Span 1-2:  That => that

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  correct => correct-02
Oracle Span 3-4:  strictly => strict
Oracle Span 1-2:  That => that

Missing span: correct => correct-02
Missing span: strictly => strict
Dependencies:
1	"	_	VB	VB	_	0	root	_	_
2	That	_	DT	DT	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	strictly	_	RB	RB	_	5	advmod	_	_
5	correct	_	JJ	JJ	_	1	ccomp	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_

Oracle:
(c / correct-02, ARG1, t / that)
(c / correct-02, mod, s / strict)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),That,that,false)),Map(0 -> that),Map(t -> that))),[Ljava.lang.String;@7a35b0f5,Annotation([Ljava.lang.String;@5e2c3d18,[Ljava.lang.String;@2cb4893b,[Ljava.lang.String;@cc43f62),Annotation([Ljava.lang.String;@5b218417,[Ljava.lang.String;@645aa696,[Ledu.cmu.lti.nlp.amr.Dependency;@6caf0677),Annotation([Ljava.lang.String;@413d1baf,[Ljava.lang.String;@16eb3ea3,[Ljava.lang.String;@273444fe),Annotation([Ljava.lang.String;@33bc72d1,[Ljava.lang.String;@1a75e76a,[Ledu.cmu.lti.nlp.amr.Entity;@5524cca1))
AMR:


Decoded in 4,962 microseconds
Sentence: I said .

Spans:
Span 0-1:  I => i
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 1-2:  said => say-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	.	_	.	.	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),said,say-01,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> say-01),Map(s -> say-01, i -> i))),[Ljava.lang.String;@5032714f,Annotation([Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6,[Ljava.lang.String;@4681c175),Annotation([Ljava.lang.String;@57a78e3,[Ljava.lang.String;@402c4085,[Ledu.cmu.lti.nlp.amr.Dependency;@6fa51cd4),Annotation([Ljava.lang.String;@2767e23c,[Ljava.lang.String;@710c2b53,[Ljava.lang.String;@5386659f),Annotation([Ljava.lang.String;@14028087,[Ljava.lang.String;@cecf639,[Ledu.cmu.lti.nlp.amr.Entity;@1caa0244))
AMR:
(s / say-01, ARG0, i / i)

Decoded in 4,748 microseconds
Sentence: " But why do you want the sheep to eat the little baobabs ? "

Spans:
Span 12-13:  baobabs => baobab
Span 1-2:  But => contrast-01
Span 9-10:  eat => eat-01
Span 11-12:  little => little
Span 7-8:  sheep => sheep
Span 5-6:  want => want-01
Span 4-5:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  baobabs => baobab
Oracle Span 1-2:  But => contrast-01
Oracle Span 9-10:  eat => eat-01
Oracle Span 11-12:  little => little
Oracle Span 7-8:  sheep => sheep
Oracle Span 5-6:  want => want-01
Oracle Span 4-5:  you => you

Dependencies:
1	"	_	UH	UH	_	6	discourse	_	_
2	But	_	UH	UH	_	1	dep	_	_
3	why	_	WRB	WRB	_	6	advmod	_	_
4	do	_	VBP	VBP	_	6	aux	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	want	_	VB	VB	_	0	root	_	_
7	the	_	DT	DT	_	8	det	_	_
8	sheep	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	eat	_	VB	VB	_	8	vmod	_	_
11	the	_	DT	DT	_	13	det	_	_
12	little	_	JJ	JJ	_	13	amod	_	_
13	baobabs	_	NNS	NNS	_	10	dobj	_	_
14	?	_	.	.	_	6	punct	_	_
15	"	_	''	''	_	6	punct	_	_

Oracle:
(b / baobab, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / baobab)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, e / eat-01)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),baobabs,baobab,false), Span(11,12,List(1),little,little,false), Span(9,10,List(2),eat,eat-01,false), Span(7,8,List(3),sheep,sheep,false), Span(5,6,List(4),want,want-01,false), Span(4,5,List(5),you,you,false), Span(1,2,List(6),But,contrast-01,false)),Map(2 -> eat-01, 5 -> you, 1 -> little, 4 -> want-01, 6 -> contrast-01, 0 -> baobab, 3 -> sheep),Map(w -> want-01, e -> eat-01, b -> baobab, s -> sheep, y -> you, c -> contrast-01, l -> little))),[Ljava.lang.String;@7ce026d3,Annotation([Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb,[Ljava.lang.String;@5b247367),Annotation([Ljava.lang.String;@268f106e,[Ljava.lang.String;@6e9a5ed8,[Ledu.cmu.lti.nlp.amr.Dependency;@7e057f43),Annotation([Ljava.lang.String;@6c284af,[Ljava.lang.String;@5890e879,[Ljava.lang.String;@6440112d),Annotation([Ljava.lang.String;@31ea9581,[Ljava.lang.String;@231f98ef,[Ledu.cmu.lti.nlp.amr.Entity;@7c137fd5))
AMR:
(b / baobab, mod, l / little)
(c / contrast-01, ARG2, w / want-01)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / baobab)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, s / sheep)

Decoded in 24,808 microseconds
Sentence: He answered me at once , " Oh , come , come ! " , as if he were speaking of something that was self - evident .

Spans:
Span 1-2:  answered => answer-01
Span 17-18:  he => he
Span 0-1:  He => he
Span 7-8:  Oh => oh
Span 4-5:  once => once
Span 21-22:  something => something
Span 19-20:  speaking => speak-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of were in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of speaking in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of was in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of self in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of evident in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Langrangian relaxation converged after 61 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of were in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of speaking in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of was in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of self in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of evident in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Oracle Span 1-2:  answered => answer-01
Oracle Span 9-10:  come => come-on-25
Oracle Span 26-27:  evident => evidence-01
Oracle Span 0-1:  He => he
Oracle Span 21-22:  something => something
Oracle Span 19-20:  speaking => speak-01

Extra span: he => he
Extra span: Oh => oh
Extra span: once => once
Missing span: evident => evidence-01
Missing span: come => come-on-25
Dependencies:
1	He	_	PRP	PRP	_	12	nsubj	_	_
2	answered	_	VBN	VBN	_	1	vmod	_	_
3	me	_	PRP	PRP	_	2	dobj	_	_
4	at	_	IN	IN	_	2	prep	_	_
5	once	_	RB	RB	_	4	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	"	_	''	''	_	2	punct	_	_
8	Oh	_	UH	UH	_	10	discourse	_	_
9	,	_	,	,	_	10	punct	_	_
10	come	_	VB	VB	_	2	dep	_	_
11	,	_	,	,	_	12	punct	_	_
12	come	_	VB	VB	_	0	root	_	_
13	!	_	.	.	_	12	punct	_	_
14	"	_	''	''	_	12	punct	_	_
1	,	_	,	,	_	3	punct	_	_
2	as	_	RB	RB	_	3	advmod	_	_
3	if	_	IN	IN	_	6	nsubj	_	_
4	he	_	PRP	PRP	_	3	pobj	_	_
5	were	_	VBD	VBD	_	6	aux	_	_
6	speaking	_	VBG	VBG	_	0	root	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	something	_	NN	NN	_	7	pobj	_	_
9	that	_	WDT	WDT	_	11	nsubj	_	_
10	was	_	VBD	VBD	_	11	cop	_	_
11	self	_	JJ	JJ	_	8	rcmod	_	_
12	-	_	:	:	_	11	punct	_	_
13	evident	_	JJ	JJ	_	11	dep	_	_
14	.	_	.	.	_	6	punct	_	_

Oracle:
(a / answer-01, ARG0, h / he)
(a / answer-01, ARG2, c / come-on-25)
(a / answer-01, conj-as-if, s / speak-01)
(e / evidence-01, ARG0, s2 / something)
(e / evidence-01, ARG1, s2 / something)
(s / speak-01, ARG0, h / he)
(s / speak-01, ARG1, s2 / something)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),something,something,false), Span(19,20,List(1),speaking,speak-01,false), Span(17,18,List(2),he,he,false), Span(7,8,List(3),Oh,oh,false), Span(4,5,List(4),once,once,false), Span(1,2,List(5),answered,answer-01,false), Span(0,1,List(6),He,he,false)),Map(2 -> he, 5 -> answer-01, 1 -> speak-01, 4 -> once, 6 -> he, 0 -> something, 3 -> oh),Map(h -> he, h2 -> he, s2 -> speak-01, s -> something, a -> answer-01, o2 -> once, o -> oh))),[Ljava.lang.String;@183ec003,Annotation([Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4,[Ljava.lang.String;@451001e5),Annotation([Ljava.lang.String;@2b40ff9c,[Ljava.lang.String;@3e08ff24,[Ledu.cmu.lti.nlp.amr.Dependency;@4d1c005e),Annotation([Ljava.lang.String;@8462f31,[Ljava.lang.String;@24569dba,[Ljava.lang.String;@5ddeb7cb),Annotation([Ljava.lang.String;@70ed52de,[Ljava.lang.String;@496bc455,[Ledu.cmu.lti.nlp.amr.Entity;@59402b8f))
AMR:
(a / answer-01, ARG0, h2 / he)
(a / answer-01, ARG1, s / something)
(a / answer-01, ARG2, o2 / once)
(a / answer-01, time, o / oh)
(s2 / speak-01, ARG0, h2 / he)
(s2 / speak-01, ARG1, h / he)

Decoded in 384,858 microseconds
Sentence: And I was obliged to make a great mental effort to solve this problem , without any assistance .

Spans:
Span 0-1:  And => and
Span 16-17:  any => any
Span 9-10:  effort => effort-01
Span 7-8:  great => great
Span 1-2:  I => i
Span 3-4:  obliged => oblige-02
Span 13-14:  problem => problem
Span 11-12:  solve => solve-01
Span 12-13:  this => this

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 17-18:  assistance => assist-01
Oracle Span 9-10:  effort => effort-01
Oracle Span 7-8:  great => great
Oracle Span 1-2:  I => i
Oracle Span 8-9:  mental => mental
Oracle Span 3-4:  obliged => oblige-02
Oracle Span 13-14:  problem => problem
Oracle Span 11-12:  solve => solve-01
Oracle Span 12-13:  this => this

Extra span: any => any
Missing span: mental => mental
Missing span: assistance => assist-01
Dependencies:
1	And	_	CC	CC	_	4	cc	_	_
2	I	_	PRP	PRP	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	obliged	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	a	_	DT	DT	_	10	det	_	_
8	great	_	JJ	JJ	_	10	amod	_	_
9	mental	_	JJ	JJ	_	10	amod	_	_
10	effort	_	NN	NN	_	6	dobj	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	solve	_	VB	VB	_	6	xcomp	_	_
13	this	_	DT	DT	_	14	det	_	_
14	problem	_	NN	NN	_	12	dobj	_	_
15	,	_	,	,	_	12	punct	_	_
16	without	_	IN	IN	_	12	prep	_	_
17	any	_	DT	DT	_	18	det	_	_
18	assistance	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, o / oblige-02)
(a2 / assist-01, ARG1, i / i)
(a2 / assist-01, ARG2, s / solve-01)
(e / effort-01, ARG0, i / i)
(e / effort-01, ARG1, s / solve-01)
(e / effort-01, manner, m2 / mental)
(e / effort-01, mod, g / great)
(o / oblige-02, ARG2, e / effort-01)
(p / problem, mod, t / this)
(s / solve-01, ARG0, i / i)
(s / solve-01, ARG1, p / problem)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),any,any,false), Span(13,14,List(1),problem,problem,false), Span(12,13,List(2),this,this,false), Span(11,12,List(3),solve,solve-01,false), Span(9,10,List(4),effort,effort-01,false), Span(7,8,List(5),great,great,false), Span(3,4,List(6),obliged,oblige-02,false), Span(1,2,List(7),I,i,false), Span(0,1,List(8),And,and,false)),Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort-01, 6 -> oblige-02, 0 -> any, 3 -> solve-01),Map(e -> effort-01, t -> this, s -> solve-01, g -> great, p -> problem, a -> any, a2 -> and, i -> i, o -> oblige-02))),[Ljava.lang.String;@7188af83,Annotation([Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a,[Ljava.lang.String;@247310d0),Annotation([Ljava.lang.String;@1033576a,[Ljava.lang.String;@303cf2ba,[Ledu.cmu.lti.nlp.amr.Dependency;@76494737),Annotation([Ljava.lang.String;@4a003cbe,[Ljava.lang.String;@4082ba93,[Ljava.lang.String;@17fc391b),Annotation([Ljava.lang.String;@2b30a42c,[Ljava.lang.String;@609e8838,[Ledu.cmu.lti.nlp.amr.Entity;@359df09a))
AMR:
(a2 / and, op, o / oblige-02)
(e / effort-01, ARG0, o / oblige-02)
(e / effort-01, ARG1, s / solve-01)
(e / effort-01, mod, g / great)
(o / oblige-02, ARG0, a / any)
(o / oblige-02, ARG1, i / i)
(p / problem, mod, t / this)
(s / solve-01, ARG1, p / problem)

Decoded in 144,373 microseconds
Sentence: Indeed , as I learned , there were on the planet where the little prince lived -- as on all planets -- good plants and bad plants .

Spans:
Span 19-20:  all => all
Span 24-25:  and => and
Span 25-26:  bad => bad-07
Span 22-23:  good => good-04
Span 3-4:  I => i
Span 4-5:  learned => learn-01
Span 13-14:  little => little
Span 15-16:  lived => live-01
Span 10-11:  planet => planet
Span 20-21:  planets => planet
Span 14-15:  prince => prince
Span 6-7:  there => there

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 19-20:  all => all
Oracle Span 24-25:  and => and
Oracle Span 25-26:  bad => bad-07
Oracle Span 22-23:  good => good-02
Oracle Span 3-4:  I => i
Oracle Span 0-1:  Indeed => indeed
Oracle Span 4-5:  learned => learn-01
Oracle Span 13-14:  little => little
Oracle Span 15-16:  lived => live-01
Oracle Span 10-11:  planet => planet
Oracle Span 20-21:  planets => planet
Oracle Span 23-24:  plants => plant
Oracle Span 26-27:  plants => plant
Oracle Span 14-15:  prince => prince

Incorrect span: good => good-04
Extra span: there => there
Missing span: Indeed => indeed
Missing span: plants => plant
Missing span: plants => plant
Missing span: good => good-02
Dependencies:
1	Indeed	_	RB	RB	_	8	advmod	_	_
2	,	_	,	,	_	8	punct	_	_
3	as	_	IN	IN	_	5	mark	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	learned	_	VBD	VBD	_	8	advcl	_	_
6	,	_	,	,	_	8	punct	_	_
7	there	_	EX	EX	_	8	expl	_	_
8	were	_	VBD	VBD	_	0	root	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	planet	_	NN	NN	_	9	pobj	_	_
12	where	_	WRB	WRB	_	16	advmod	_	_
13	the	_	DT	DT	_	15	det	_	_
14	little	_	JJ	JJ	_	15	amod	_	_
15	prince	_	NN	NN	_	16	nsubj	_	_
16	lived	_	VBD	VBD	_	11	rcmod	_	_
17	--	_	:	:	_	19	punct	_	_
18	as	_	RB	RB	_	19	advmod	_	_
19	on	_	IN	IN	_	24	prep	_	_
20	all	_	DT	DT	_	21	det	_	_
21	planets	_	NNS	NNS	_	19	pobj	_	_
22	--	_	:	:	_	19	punct	_	_
23	good	_	JJ	JJ	_	24	amod	_	_
24	plants	_	NNS	NNS	_	16	dobj	_	_
25	and	_	CC	CC	_	11	cc	_	_
26	bad	_	JJ	JJ	_	27	amod	_	_
27	plants	_	NNS	NNS	_	11	conj	_	_
28	.	_	.	.	_	8	punct	_	_

Oracle:
(a3 / and, mod, i / indeed)
(a3 / and, op, p / plant)
(a3 / and, op, p2 / plant)
(b / bad-07, ARG1, p2 / plant)
(g / good-02, ARG1, p / plant)
(l / live-01, ARG0, p4 / prince)
(l / live-01, location, p3 / planet)
(l3 / learn-01, ARG0, i2 / i)
(p4 / prince, mod, l2 / little)
(p5 / planet, mod, a2 / all)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),bad,bad-07,false), Span(24,25,List(1),and,and,false), Span(22,23,List(2),good,good-04,false), Span(20,21,List(3),planets,planet,false), Span(19,20,List(4),all,all,false), Span(15,16,List(5),lived,live-01,false), Span(14,15,List(6),prince,prince,false), Span(13,14,List(7),little,little,false), Span(10,11,List(8),planet,planet,false), Span(6,7,List(9),there,there,false), Span(4,5,List(10),learned,learn-01,false), Span(3,4,List(11),I,i,false)),Map(2 -> good-04, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad-07, 10 -> learn-01, 3 -> planet),Map(t -> there, b -> bad-07, p2 -> prince, l3 -> learn-01, p -> planet, g -> good-04, a -> and, i -> i, l2 -> little, a2 -> all, l -> live-01, p3 -> planet))),[Ljava.lang.String;@43df23d3,Annotation([Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c,[Ljava.lang.String;@23e84203),Annotation([Ljava.lang.String;@19932c16,[Ljava.lang.String;@73eb439a,[Ledu.cmu.lti.nlp.amr.Dependency;@514646ef),Annotation([Ljava.lang.String;@305ffe9e,[Ljava.lang.String;@302c971f,[Ljava.lang.String;@1972e513),Annotation([Ljava.lang.String;@7ae0a9ec,[Ljava.lang.String;@35841320,[Ledu.cmu.lti.nlp.amr.Entity;@61c4eee0))
AMR:
(a / and, op, p3 / planet)
(b / bad-07, ARG0, a / and)
(b / bad-07, ARG1, g / good-04)
(g / good-04, ARG1, p / planet)
(l / live-01, ARG0, p2 / prince)
(l / live-01, ARG1, p3 / planet)
(l3 / learn-01, ARG0, i / i)
(l3 / learn-01, ARG1, t / there)
(p / planet, mod, a2 / all)
(p2 / prince, mod, l2 / little)
(p3 / planet, poss, i / i)

Decoded in 235,901 microseconds
Sentence: In consequence , there were good seeds from good plants , and bad seeds from bad plants .

Spans:
Span 11-12:  and => and
Span 15-16:  bad => bad-07
Span 12-13:  bad => bad-07
Span 1-2:  consequence => consequence
Span 8-9:  good => good-04
Span 5-6:  good => good-04
Span 3-4:  there => there

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 12-13:  bad => bad-07
Oracle Span 15-16:  bad => bad-07
Oracle Span 5-6:  good => good-02
Oracle Span 8-9:  good => good-02
Oracle Span 9-10:  plants => plant
Oracle Span 16-17:  plants => plant
Oracle Span 6-7:  seeds => seed
Oracle Span 13-14:  seeds => seed

Incorrect span: good => good-04
Incorrect span: good => good-04
Extra span: there => there
Extra span: consequence => consequence
Missing span: seeds => seed
Missing span: plants => plant
Missing span: seeds => seed
Missing span: plants => plant
Missing span: good => good-02
Missing span: good => good-02
Dependencies:
1	In	_	IN	IN	_	5	prep	_	_
2	consequence	_	NN	NN	_	1	pobj	_	_
3	,	_	,	,	_	5	punct	_	_
4	there	_	EX	EX	_	5	expl	_	_
5	were	_	VBD	VBD	_	0	root	_	_
6	good	_	JJ	JJ	_	7	amod	_	_
7	seeds	_	NNS	NNS	_	5	nsubj	_	_
8	from	_	IN	IN	_	7	prep	_	_
9	good	_	JJ	JJ	_	10	amod	_	_
10	plants	_	NNS	NNS	_	8	pobj	_	_
11	,	_	,	,	_	7	punct	_	_
12	and	_	CC	CC	_	7	cc	_	_
13	bad	_	JJ	JJ	_	14	amod	_	_
14	seeds	_	NNS	NNS	_	7	conj	_	_
15	from	_	IN	IN	_	14	prep	_	_
16	bad	_	JJ	JJ	_	17	amod	_	_
17	plants	_	NNS	NNS	_	15	pobj	_	_
18	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, s / seed)
(a / and, op, s2 / seed)
(b / bad-07, ARG1, s2 / seed)
(b2 / bad-07, ARG1, p2 / plant)
(g / good-02, ARG1, s / seed)
(g2 / good-02, ARG1, p / plant)
(s / seed, source, p / plant)
(s2 / seed, source, p2 / plant)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),bad,bad-07,false), Span(12,13,List(1),bad,bad-07,false), Span(11,12,List(2),and,and,false), Span(8,9,List(3),good,good-04,false), Span(5,6,List(4),good,good-04,false), Span(3,4,List(5),there,there,false), Span(1,2,List(6),consequence,consequence,false)),Map(2 -> and, 5 -> there, 1 -> bad-07, 4 -> good-04, 6 -> consequence, 0 -> bad-07, 3 -> good-04),Map(t -> there, b -> bad-07, b2 -> bad-07, g2 -> good-04, g -> good-04, a -> and, c -> consequence))),[Ljava.lang.String;@6f10d5b6,Annotation([Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a,[Ljava.lang.String;@433defed),Annotation([Ljava.lang.String;@2a693f59,[Ljava.lang.String;@3f4faf53,[Ledu.cmu.lti.nlp.amr.Dependency;@7fd50002),Annotation([Ljava.lang.String;@533bda92,[Ljava.lang.String;@304bb45b,[Ljava.lang.String;@723ca036),Annotation([Ljava.lang.String;@25be7b63,[Ljava.lang.String;@28dcca0c,[Ledu.cmu.lti.nlp.amr.Entity;@45d84a20))
AMR:
(b / bad-07, ARG0, c / consequence)
(b2 / bad-07, ARG0, a / and)
(b2 / bad-07, ARG3, b / bad-07)
(g2 / good-04, ARG0, a / and)
(g2 / good-04, ARG1, t / there)
(g2 / good-04, ARG3, g / good-04)

Decoded in 48,450 microseconds
Sentence: But seeds are invisible .

Spans:
Span 0-1:  But => contrast-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  seeds => seed

Missing span: seeds => seed
Dependencies:
1	But	_	CC	CC	_	4	cc	_	_
2	seeds	_	NNS	NNS	_	4	nsubj	_	_
3	are	_	VBP	VBP	_	4	cop	_	_
4	invisible	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),But,contrast-01,false)),Map(0 -> contrast-01),Map(c -> contrast-01))),[Ljava.lang.String;@52f27fbd,Annotation([Ljava.lang.String;@4c163e3,[Ljava.lang.String;@4a8355dd,[Ljava.lang.String;@4d0d9fe7),Annotation([Ljava.lang.String;@c430e6c,[Ljava.lang.String;@312aa7c,[Ledu.cmu.lti.nlp.amr.Dependency;@536f2a7e),Annotation([Ljava.lang.String;@72bc6553,[Ljava.lang.String;@66982506,[Ljava.lang.String;@70cf32e3),Annotation([Ljava.lang.String;@5a59ca5e,[Ljava.lang.String;@4bdeaabb,[Ledu.cmu.lti.nlp.amr.Entity;@6c4906d3))
AMR:


Decoded in 4,667 microseconds
Sentence: They sleep deep in the heart of the earth 's darkness , until some one among them is seized with the desire to awaken .

Spans:
Span 15-16:  among => among
Span 10-11:  darkness => darkness
Span 2-3:  deep => deep-02
Span 8-9:  earth => earth
Span 5-6:  heart => heart
Span 1-2:  sleep => sleep-01
Span 13-14:  some => some
Span 0-1:  They => they
Span 12-13:  until => until

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 10-11:  darkness => darkness
Oracle Span 2-3:  deep => deep-02
Oracle Span 21-22:  desire => desire-01
Oracle Span 8-9:  earth => earth
Oracle Span 5-6:  heart => heart
Oracle Span 6-7:  of => include-91
Oracle Span 18-19:  seized => seize-01
Oracle Span 1-2:  sleep => sleep-01
Oracle Span 13-14:  some => someone
Oracle Span 0-1:  They => they
Oracle Span 12-13:  until => until

Extra span: among => among
Incorrect span: some => some
Missing span: seized => seize-01
Missing span: of => include-91
Missing span: desire => desire-01
Missing span: some => someone
Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	sleep	_	VBP	VBP	_	0	root	_	_
3	deep	_	JJ	JJ	_	2	acomp	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	heart	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	earth	_	NN	NN	_	11	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	darkness	_	NNS	NNS	_	7	pobj	_	_
12	,	_	,	,	_	2	punct	_	_
13	until	_	IN	IN	_	19	mark	_	_
14	some	_	DT	DT	_	15	det	_	_
15	one	_	NN	NN	_	19	nsubjpass	_	_
16	among	_	IN	IN	_	15	prep	_	_
17	them	_	PRP	PRP	_	16	pobj	_	_
18	is	_	VBZ	VBZ	_	19	auxpass	_	_
19	seized	_	VBN	VBN	_	2	advcl	_	_
20	with	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	desire	_	NN	NN	_	20	pobj	_	_
23	to	_	TO	TO	_	19	prep	_	_
24	awaken	_	NN	NN	_	23	pobj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(d / deep-02, ARG2, h / heart)
(d2 / darkness, part, h / heart)
(d2 / darkness, poss, e / earth)
(i / include-91, ARG1, s3 / someone)
(i / include-91, ARG2, t / they)
(s / sleep-01, ARG0, t / they)
(s / sleep-01, location, h / heart)
(s / sleep-01, time, u / until)
(s2 / seize-01, ARG0, d3 / desire-01)
(s2 / seize-01, ARG1, s3 / someone)
(u / until, op, s2 / seize-01)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),among,among,false), Span(13,14,List(1),some,some,false), Span(12,13,List(2),until,until,false), Span(10,11,List(3),darkness,darkness,false), Span(8,9,List(4),earth,earth,false), Span(5,6,List(5),heart,heart,false), Span(2,3,List(6),deep,deep-02,false), Span(1,2,List(7),sleep,sleep-01,false), Span(0,1,List(8),They,they,false)),Map(2 -> until, 5 -> heart, 8 -> they, 7 -> sleep-01, 1 -> some, 4 -> earth, 6 -> deep-02, 0 -> among, 3 -> darkness),Map(e -> earth, h -> heart, t -> they, s2 -> sleep-01, s -> some, d -> darkness, a -> among, d2 -> deep-02, u -> until))),[Ljava.lang.String;@65987993,Annotation([Ljava.lang.String;@71075444,[Ljava.lang.String;@4f32a3ad,[Ljava.lang.String;@6b695b06),Annotation([Ljava.lang.String;@4d1bf319,[Ljava.lang.String;@6f53b8a,[Ledu.cmu.lti.nlp.amr.Dependency;@5c80cf32),Annotation([Ljava.lang.String;@7d900ecf,[Ljava.lang.String;@6f01b95f,[Ljava.lang.String;@4007f65e),Annotation([Ljava.lang.String;@1a245833,[Ljava.lang.String;@673fdbce,[Ledu.cmu.lti.nlp.amr.Entity;@5965d37))
AMR:
(d / darkness, poss, e / earth)
(d2 / deep-02, ARG0, a / among)
(d2 / deep-02, ARG1, d / darkness)
(d2 / deep-02, ARG3, s2 / sleep-01)
(s2 / sleep-01, ARG0, t / they)
(s2 / sleep-01, ARG1, s / some)
(s2 / sleep-01, ARG2, h / heart)
(s2 / sleep-01, time, u / until)

Decoded in 151,437 microseconds
Sentence: Then this little seed will stretch itself and begin -- timidly at first -- to push a charming little sprig inoffensively upward toward the sun .

Spans:
Span 7-8:  and => and
Span 8-9:  begin => begin-01
Span 17-18:  charming => charm-01
Span 18-19:  little => little
Span 2-3:  little => little
Span 3-4:  seed => seed
Span 24-25:  sun => sun
Span 0-1:  Then => then
Span 1-2:  this => this
Span 22-23:  toward => toward

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 8-9:  begin => begin-01
Oracle Span 17-18:  charming => charm-01
Oracle Span 20-21:  inoffensively => (offensive :polarity -)
Oracle Span 2-3:  little => little
Oracle Span 18-19:  little => little
Oracle Span 15-16:  push => push-01
Oracle Span 3-4:  seed => seed
Oracle Span 19-20:  sprig => sprig
Oracle Span 5-6:  stretch => stretch-01
Oracle Span 24-25:  sun => sun
Oracle Span 0-1:  Then => then
Oracle Span 1-2:  this => this
Oracle Span 10-11:  timidly => timid
Oracle Span 21-22:  upward => upward

Extra span: toward => toward
Missing span: push => push-01
Missing span: upward => upward
Missing span: sprig => sprig
Missing span: stretch => stretch-01
Missing span: timidly => timid
Missing span: inoffensively => (offensive :polarity -)
Dependencies:
1	Then	_	RB	RB	_	6	advmod	_	_
2	this	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	seed	_	NN	NN	_	6	nsubj	_	_
5	will	_	MD	MD	_	6	aux	_	_
6	stretch	_	VB	VB	_	0	root	_	_
7	itself	_	PRP	PRP	_	6	dobj	_	_
8	and	_	CC	CC	_	6	cc	_	_
9	begin	_	VB	VB	_	6	conj	_	_
10	--	_	:	:	_	12	punct	_	_
11	timidly	_	RB	RB	_	12	advmod	_	_
12	at	_	IN	IN	_	9	dep	_	_
13	first	_	JJ	JJ	_	12	pobj	_	_
14	--	_	:	:	_	12	punct	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	push	_	VB	VB	_	6	xcomp	_	_
17	a	_	DT	DT	_	21	det	_	_
18	charming	_	JJ	JJ	_	21	amod	_	_
19	little	_	JJ	JJ	_	21	amod	_	_
20	sprig	_	NN	NN	_	21	nn	_	_
21	inoffensively	_	NN	NN	_	16	dobj	_	_
22	upward	_	RB	RB	_	16	advmod	_	_
23	toward	_	IN	IN	_	16	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	sun	_	NN	NN	_	23	pobj	_	_
26	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, b / begin-01)
(a / and, op, s / stretch-01)
(a / and, time, t / then)
(b / begin-01, ARG0, s2 / seed)
(b / begin-01, ARG1, p / push-01)
(b / begin-01, manner, t3 / timid)
(c / charm-01, ARG0, s3 / sprig)
(o / offensive, polarity, -)
(p / push-01, ARG0, s2 / seed)
(p / push-01, ARG1, s3 / sprig)
(p / push-01, ARG2, u / upward)
(p / push-01, manner, o / offensive)
(s / stretch-01, ARG0, s2 / seed)
(s / stretch-01, ARG1, s2 / seed)
(s2 / seed, mod, l / little)
(s2 / seed, mod, t2 / this)
(s3 / sprig, mod, l2 / little)
(u / upward, direction, s4 / sun)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),sun,sun,false), Span(22,23,List(1),toward,toward,false), Span(18,19,List(2),little,little,false), Span(17,18,List(3),charming,charm-01,false), Span(8,9,List(4),begin,begin-01,false), Span(7,8,List(5),and,and,false), Span(3,4,List(6),seed,seed,false), Span(2,3,List(7),little,little,false), Span(1,2,List(8),this,this,false), Span(0,1,List(9),Then,then,false)),Map(2 -> little, 5 -> and, 8 -> this, 7 -> little, 1 -> toward, 4 -> begin-01, 6 -> seed, 9 -> then, 0 -> sun, 3 -> charm-01),Map(s2 -> seed, b -> begin-01, t -> toward, s -> sun, t3 -> then, a -> and, t2 -> this, l2 -> little, c -> charm-01, l -> little))),[Ljava.lang.String;@7a5ceedd,Annotation([Ljava.lang.String;@4201c465,[Ljava.lang.String;@5b799640,[Ljava.lang.String;@6cb107fd),Annotation([Ljava.lang.String;@710636b0,[Ljava.lang.String;@3de8f619,[Ledu.cmu.lti.nlp.amr.Dependency;@2ab4bc72),Annotation([Ljava.lang.String;@4e5ed836,[Ljava.lang.String;@eadd4fb,[Ljava.lang.String;@740fb309),Annotation([Ljava.lang.String;@7bd7d6d6,[Ljava.lang.String;@43f02ef2,[Ledu.cmu.lti.nlp.amr.Entity;@239a307b))
AMR:
(a / and, op, b / begin-01)
(b / begin-01, ARG0, s2 / seed)
(b / begin-01, ARG1, t / toward)
(c / charm-01, ARG0, l / little)
(c / charm-01, ARG1, b / begin-01)
(s2 / seed, mod, l2 / little)
(s2 / seed, mod, t2 / this)
(t / toward, op, s / sun)
(t2 / this, mod, t3 / then)

Decoded in 121,796 microseconds
Sentence: If it is only a sprout of radish or the sprig of a rose - bush , one would let it grow wherever it might wish .

Spans:
Span 21-22:  grow => grow-02
Span 23-24:  it => it
Span 20-21:  it => it
Span 1-2:  it => it
Span 19-20:  let => let-01
Span 3-4:  only => only
Span 8-9:  or => or
Span 13-14:  rose => rose
Span 5-6:  sprout => sprout
Span 25-26:  wish => wish-01

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 15-16:  bush => bush
Oracle Span 21-22:  grow => grow-01
Oracle Span 1-2:  it => it
Oracle Span 17-18:  one => one
Oracle Span 3-4:  only => only
Oracle Span 8-9:  or => or
Oracle Span 7-8:  radish => radish
Oracle Span 13-14:  rose => rose
Oracle Span 10-11:  sprig => sprig
Oracle Span 5-6:  sprout => sprout
Oracle Span 25-26:  wish => wish-01

Extra span: it => it
Incorrect span: grow => grow-02
Extra span: it => it
Extra span: let => let-01
Missing span: one => one
Missing span: grow => grow-01
Missing span: sprig => sprig
Missing span: bush => bush
Missing span: radish => radish
Dependencies:
1	If	_	IN	IN	_	6	mark	_	_
2	it	_	PRP	PRP	_	6	nsubj	_	_
3	is	_	VBZ	VBZ	_	6	cop	_	_
4	only	_	RB	RB	_	6	advmod	_	_
5	a	_	DT	DT	_	6	det	_	_
6	sprout	_	NN	NN	_	20	advcl	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	radish	_	NN	NN	_	7	pobj	_	_
9	or	_	CC	CC	_	6	cc	_	_
10	the	_	DT	DT	_	11	det	_	_
11	sprig	_	NN	NN	_	6	conj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	14	det	_	_
14	rose	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	14	punct	_	_
16	bush	_	NN	NN	_	14	dep	_	_
17	,	_	,	,	_	20	punct	_	_
18	one	_	PRP	PRP	_	20	nsubj	_	_
19	would	_	MD	MD	_	20	aux	_	_
20	let	_	VB	VB	_	0	root	_	_
21	it	_	PRP	PRP	_	22	nsubj	_	_
22	grow	_	VB	VB	_	20	ccomp	_	_
23	wherever	_	WRB	WRB	_	26	advmod	_	_
24	it	_	PRP	PRP	_	26	nsubj	_	_
25	might	_	MD	MD	_	26	aux	_	_
26	wish	_	VB	VB	_	22	advcl	_	_
27	.	_	.	.	_	20	punct	_	_

Oracle:
(b2 / bush, mod, r2 / rose)
(b2 / bush, part, s2 / sprig)
(g / grow-01, ARG1, i / it)
(g / grow-01, location, w2 / wish-01)
(o2 / or, domain, i / it)
(o2 / or, mod, o3 / only)
(o2 / or, op, s / sprout)
(o2 / or, op, s2 / sprig)
(r / radish, part, s / sprout)
(w2 / wish-01, ARG0, i / it)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),wish,wish-01,false), Span(23,24,List(1),it,it,false), Span(21,22,List(2),grow,grow-02,false), Span(20,21,List(3),it,it,false), Span(19,20,List(4),let,let-01,false), Span(13,14,List(5),rose,rose,false), Span(8,9,List(6),or,or,false), Span(5,6,List(7),sprout,sprout,false), Span(3,4,List(8),only,only,false), Span(1,2,List(9),it,it,false)),Map(2 -> grow-02, 5 -> rose, 8 -> only, 7 -> sprout, 1 -> it, 4 -> let-01, 6 -> or, 9 -> it, 0 -> wish-01, 3 -> it),Map(w -> wish-01, s -> sprout, i3 -> it, g -> grow-02, o2 -> only, i2 -> it, r -> rose, i -> it, l -> let-01, o -> or))),[Ljava.lang.String;@2a8448fa,Annotation([Ljava.lang.String;@6f204a1a,[Ljava.lang.String;@2de56eb2,[Ljava.lang.String;@5f8e8a9d),Annotation([Ljava.lang.String;@5745ca0e,[Ljava.lang.String;@3ad83a66,[Ledu.cmu.lti.nlp.amr.Dependency;@3cce5371),Annotation([Ljava.lang.String;@17bffc17,[Ljava.lang.String;@6e535154,[Ljava.lang.String;@15a34df2),Annotation([Ljava.lang.String;@5b38c1ec,[Ljava.lang.String;@338fc1d8,[Ledu.cmu.lti.nlp.amr.Entity;@4722ef0c))
AMR:
(g / grow-02, ARG0, i2 / it)
(g / grow-02, ARG1, o2 / only)
(g / grow-02, condition, w / wish-01)
(l / let-01, ARG0, i3 / it)
(l / let-01, ARG1, g / grow-02)
(l / let-01, time, s / sprout)
(o / or, op, s / sprout)
(w / wish-01, ARG0, i / it)
(w / wish-01, ARG1, r / rose)

Decoded in 284,020 microseconds
Sentence: But when it is a bad plant , one must destroy it as soon as possible , the very first instant that one recognizes it .

Spans:
Span 5-6:  bad => bad-07
Span 0-1:  But => contrast-01
Span 10-11:  destroy => destroy-01
Span 20-21:  instant => instant
Span 24-25:  it => it
Span 11-12:  it => it
Span 2-3:  it => it
Span 6-7:  plant => plant
Span 15-16:  possible => possible-01
Span 13-14:  soon => soon
Span 18-19:  very => very

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 5-6:  bad => bad-07
Oracle Span 0-1:  But => contrast-01
Oracle Span 10-11:  destroy => destroy-01
Oracle Span 20-21:  instant => instant
Oracle Span 2-3:  it => it
Oracle Span 8-9:  one => 1
Oracle Span 22-23:  one => one
Oracle Span 6-7:  plant => plant
Oracle Span 15-16:  possible => possible-01
Oracle Span 23-24:  recognizes => recognize-01
Oracle Span 13-14:  soon => soon
Oracle Span 18-19:  very => very

Extra span: it => it
Extra span: it => it
Missing span: one => 1
Missing span: recognizes => recognize-01
Missing span: one => one
Dependencies:
1	But	_	CC	CC	_	11	cc	_	_
2	when	_	WRB	WRB	_	7	advmod	_	_
3	it	_	PRP	PRP	_	7	nsubj	_	_
4	is	_	VBZ	VBZ	_	7	cop	_	_
5	a	_	DT	DT	_	7	det	_	_
6	bad	_	JJ	JJ	_	7	amod	_	_
7	plant	_	NN	NN	_	11	advcl	_	_
8	,	_	,	,	_	11	punct	_	_
9	one	_	PRP	PRP	_	11	nsubj	_	_
10	must	_	MD	MD	_	11	aux	_	_
11	destroy	_	VB	VB	_	0	root	_	_
12	it	_	PRP	PRP	_	11	dobj	_	_
13	as	_	RB	RB	_	14	advmod	_	_
14	soon	_	RB	RB	_	11	advmod	_	_
15	as	_	IN	IN	_	21	mark	_	_
16	possible	_	JJ	JJ	_	21	dep	_	_
17	,	_	,	,	_	21	punct	_	_
18	the	_	DT	DT	_	21	det	_	_
19	very	_	RB	RB	_	20	advmod	_	_
20	first	_	JJ	JJ	_	21	amod	_	_
21	instant	_	NN	NN	_	14	dep	_	_
22	that	_	IN	IN	_	24	mark	_	_
23	one	_	PRP	PRP	_	24	nsubj	_	_
24	recognizes	_	VBZ	VBZ	_	11	ccomp	_	_
25	it	_	PRP	PRP	_	24	dobj	_	_
26	.	_	.	.	_	11	punct	_	_

Oracle:
(b / bad-07, ARG1, p / plant)
(d / destroy-01, ARG0, o2 / one)
(d / destroy-01, ARG1, i2 / it)
(d / destroy-01, time, i / instant)
(d / destroy-01, time, s / soon)
(p / plant, domain, i2 / it)
(p2 / possible-01, ARG1, d / destroy-01)
(r / recognize-01, ARG0, o2 / one)
(r / recognize-01, ARG1, i2 / it)
(r / recognize-01, time, i / instant)
(s / soon, compared-to, p2 / possible-01)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),it,it,false), Span(20,21,List(1),instant,instant,false), Span(18,19,List(2),very,very,false), Span(15,16,List(3),possible,possible-01,false), Span(13,14,List(4),soon,soon,false), Span(11,12,List(5),it,it,false), Span(10,11,List(6),destroy,destroy-01,false), Span(6,7,List(7),plant,plant,false), Span(5,6,List(8),bad,bad-07,false), Span(2,3,List(9),it,it,false), Span(0,1,List(10),But,contrast-01,false)),Map(2 -> very, 5 -> it, 8 -> bad-07, 7 -> plant, 1 -> instant, 4 -> soon, 6 -> destroy-01, 9 -> it, 0 -> it, 10 -> contrast-01, 3 -> possible-01),Map(i4 -> it, b -> bad-07, p2 -> plant, s -> soon, d -> destroy-01, v -> very, i3 -> it, p -> possible-01, i2 -> instant, i -> it, c -> contrast-01))),[Ljava.lang.String;@48e1f6c7,Annotation([Ljava.lang.String;@55cb6996,[Ljava.lang.String;@1807e3f6,[Ljava.lang.String;@480d3575),Annotation([Ljava.lang.String;@f1da57d,[Ljava.lang.String;@194fad1,[Ledu.cmu.lti.nlp.amr.Dependency;@26abb146),Annotation([Ljava.lang.String;@72c8e7b,[Ljava.lang.String;@65f8f5ae,[Ljava.lang.String;@431cd9b2),Annotation([Ljava.lang.String;@38467116,[Ljava.lang.String;@5b7a7f33,[Ledu.cmu.lti.nlp.amr.Entity;@790da477))
AMR:
(b / bad-07, ARG0, v / very)
(b / bad-07, ARG1, p2 / plant)
(c / contrast-01, ARG0, i / it)
(c / contrast-01, ARG1, p2 / plant)
(c / contrast-01, ARG2, d / destroy-01)
(d / destroy-01, ARG0, i2 / instant)
(d / destroy-01, ARG2, i3 / it)
(p / possible-01, ARG0, i2 / instant)
(p / possible-01, ARG1, s / soon)
(p2 / plant, domain, i4 / it)

Decoded in 299,374 microseconds
Sentence: Now there were some terrible seeds on the planet that was the home of the little prince ; and these were the seeds of the baobab .

Spans:
Span 17-18:  ; => and
Span 18-19:  and => and
Span 25-26:  baobab => baobab
Span 12-13:  home => home
Span 15-16:  little => little
Span 0-1:  Now => now
Span 8-9:  planet => planet
Span 16-17:  prince => prince
Span 3-4:  some => some
Span 4-5:  terrible => terrible-01
Span 1-2:  there => there

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 25-26:  baobab => baobab
Oracle Span 12-13:  home => home
Oracle Span 15-16:  little => little
Oracle Span 0-1:  Now => now
Oracle Span 8-9:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 5-6:  seeds => seed
Oracle Span 3-4:  some => some
Oracle Span 4-5:  terrible => terrible-01

Extra span: and => and
Extra span: ; => and
Extra span: there => there
Missing span: seeds => seed
Dependencies:
1	Now	_	RB	RB	_	3	advmod	_	_
2	there	_	EX	EX	_	3	expl	_	_
3	were	_	VBD	VBD	_	0	root	_	_
4	some	_	DT	DT	_	6	det	_	_
5	terrible	_	JJ	JJ	_	6	amod	_	_
6	seeds	_	NNS	NNS	_	3	nsubj	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	planet	_	NN	NN	_	7	pobj	_	_
10	that	_	WDT	WDT	_	13	nsubj	_	_
11	was	_	VBD	VBD	_	13	cop	_	_
12	the	_	DT	DT	_	13	det	_	_
13	home	_	NN	NN	_	9	rcmod	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	pobj	_	_
18	;	_	:	:	_	3	punct	_	_
19	and	_	CC	CC	_	3	cc	_	_
20	these	_	DT	DT	_	23	nsubj	_	_
21	were	_	VBD	VBD	_	23	cop	_	_
22	the	_	DT	DT	_	23	det	_	_
23	seeds	_	NNS	NNS	_	3	conj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	baobab	_	NN	NN	_	24	pobj	_	_
27	.	_	.	.	_	3	punct	_	_

Oracle:
(h / home, location, p / planet)
(h / home, poss, p2 / prince)
(p2 / prince, mod, l / little)
(s / seed, poss, b / baobab)
(s / seed, quant, s2 / some)
(t / terrible-01, ARG1, s / seed)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),baobab,baobab,false), Span(18,19,List(1),and,and,false), Span(17,18,List(2),;,and,false), Span(16,17,List(3),prince,prince,false), Span(15,16,List(4),little,little,false), Span(12,13,List(5),home,home,false), Span(8,9,List(6),planet,planet,false), Span(4,5,List(7),terrible,terrible-01,false), Span(3,4,List(8),some,some,false), Span(1,2,List(9),there,there,false), Span(0,1,List(10),Now,now,false)),Map(2 -> and, 5 -> home, 8 -> some, 7 -> terrible-01, 1 -> and, 4 -> little, 6 -> planet, 9 -> there, 0 -> baobab, 10 -> now, 3 -> prince),Map(n -> now, h -> home, t -> terrible-01, b -> baobab, p2 -> planet, s -> some, p -> prince, a -> and, t2 -> there, a2 -> and, l -> little))),[Ljava.lang.String;@5c7933ad,Annotation([Ljava.lang.String;@57bc27f5,[Ljava.lang.String;@5fb759d6,[Ljava.lang.String;@4b8d604b),Annotation([Ljava.lang.String;@5e7cd6cc,[Ljava.lang.String;@68c9d179,[Ledu.cmu.lti.nlp.amr.Dependency;@d554c5f),Annotation([Ljava.lang.String;@2dfaea86,[Ljava.lang.String;@15888343,[Ljava.lang.String;@33ecda92),Annotation([Ljava.lang.String;@14fc5f04,[Ljava.lang.String;@6e2829c7,[Ledu.cmu.lti.nlp.amr.Entity;@3feb2dda))
AMR:
(a / and, op, p2 / planet)
(a2 / and, op, a / and)
(a2 / and, op, p / prince)
(p / prince, mod, l / little)
(p2 / planet, mod, h / home)
(t / terrible-01, ARG0, b / baobab)
(t / terrible-01, ARG1, t2 / there)
(t / terrible-01, ARG2, s / some)
(t / terrible-01, location, p2 / planet)
(t2 / there, mod, n / now)

Decoded in 173,060 microseconds
Sentence: The soil of that planet was infested with them .

Spans:
Span 4-5:  planet => planet

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  infested => infest-01
Oracle Span 4-5:  planet => planet
Oracle Span 1-2:  soil => soil
Oracle Span 3-4:  that => that

Missing span: infested => infest-01
Missing span: soil => soil
Missing span: that => that
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	soil	_	NN	NN	_	7	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	5	det	_	_
5	planet	_	NN	NN	_	3	pobj	_	_
6	was	_	VBD	VBD	_	7	cop	_	_
7	infested	_	JJ	JJ	_	0	root	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	them	_	PRP	PRP	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(i / infest-01, ARG1, s / soil)
(p / planet, mod, t2 / that)
(s / soil, poss, p / planet)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),planet,planet,false)),Map(0 -> planet),Map(p -> planet))),[Ljava.lang.String;@6a8658ff,Annotation([Ljava.lang.String;@1c742ed4,[Ljava.lang.String;@333d4a8c,[Ljava.lang.String;@55de24cc),Annotation([Ljava.lang.String;@dc7df28,[Ljava.lang.String;@30f842ca,[Ledu.cmu.lti.nlp.amr.Dependency;@69c81773),Annotation([Ljava.lang.String;@4d14b6c2,[Ljava.lang.String;@7e990ed7,[Ljava.lang.String;@c05fddc),Annotation([Ljava.lang.String;@25df00a0,[Ljava.lang.String;@4d15107f,[Ledu.cmu.lti.nlp.amr.Entity;@7b4c50bc))
AMR:


Decoded in 12,540 microseconds
Sentence: A baobab is something you will never , never be able to get rid of if you attend to it too late .

Spans:
Span 10-11:  able => possible-01
Span 1-2:  baobab => baobab
Span 12-13:  get => get-01
Span 19-20:  it => it
Span 3-4:  something => something
Span 20-21:  too => too
Span 16-17:  you => you
Span 4-5:  you => you

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 10-11:  able => possible-01
Oracle Span 17-18:  attend => attend-02
Oracle Span 1-2:  baobab => baobab
Oracle Span 21-22:  late => late
Oracle Span 20-21:  too => too
Oracle Span 4-5:  you => you

Extra span: it => it
Extra span: you => you
Extra span: get => get-01
Extra span: something => something
Missing span: attend => attend-02
Missing span: late => late
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	baobab	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	something	_	NN	NN	_	0	root	_	_
5	you	_	PRP	PRP	_	11	nsubj	_	_
6	will	_	MD	MD	_	11	aux	_	_
7	never	_	RB	RB	_	11	advmod	_	_
8	,	_	,	,	_	7	punct	_	_
9	never	_	RB	RB	_	7	advmod	_	_
10	be	_	VB	VB	_	11	cop	_	_
11	able	_	JJ	JJ	_	4	rcmod	_	_
12	to	_	TO	TO	_	14	aux	_	_
13	get	_	VB	VB	_	14	dep	_	_
14	rid	_	JJ	JJ	_	11	xcomp	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	if	_	IN	IN	_	18	mark	_	_
17	you	_	PRP	PRP	_	18	nsubj	_	_
18	attend	_	VBP	VBP	_	15	pcomp	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	it	_	PRP	PRP	_	19	pobj	_	_
21	too	_	RB	RB	_	22	advmod	_	_
22	late	_	RB	RB	_	14	advmod	_	_
23	.	_	.	.	_	4	punct	_	_

Oracle:
(a / attend-02, ARG0, y / you)
(a / attend-02, ARG1, b / baobab)
(a / attend-02, time, l / late)
(l / late, degree, t / too)
(p / possible-01, condition, a / attend-02)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),too,too,false), Span(19,20,List(1),it,it,false), Span(16,17,List(2),you,you,false), Span(12,13,List(3),get,get-01,false), Span(10,11,List(4),able,possible-01,false), Span(4,5,List(5),you,you,false), Span(3,4,List(6),something,something,false), Span(1,2,List(7),baobab,baobab,false)),Map(2 -> you, 5 -> you, 7 -> baobab, 1 -> it, 4 -> possible-01, 6 -> something, 0 -> too, 3 -> get-01),Map(b -> baobab, t -> too, s -> something, p -> possible-01, g -> get-01, y -> you, i -> it, y2 -> you))),[Ljava.lang.String;@5884a914,Annotation([Ljava.lang.String;@50378a4,[Ljava.lang.String;@60f00693,[Ljava.lang.String;@79207381),Annotation([Ljava.lang.String;@491b9b8,[Ljava.lang.String;@1a4927d6,[Ledu.cmu.lti.nlp.amr.Dependency;@7a6d7e92),Annotation([Ljava.lang.String;@aba625,[Ljava.lang.String;@97e93f1,[Ljava.lang.String;@5a5a729f),Annotation([Ljava.lang.String;@4b520ea8,[Ljava.lang.String;@16150369,[Ledu.cmu.lti.nlp.amr.Entity;@6b09fb41))
AMR:
(g / get-01, ARG0, t / too)
(g / get-01, ARG1, i / it)
(g / get-01, ARG2, y / you)
(p / possible-01, ARG0, y2 / you)
(p / possible-01, ARG1, s / something)
(p / possible-01, ARG2, g / get-01)
(s / something, domain, b / baobab)

Decoded in 191,525 microseconds
Sentence: It spreads over the entire planet .

Spans:
Span 4-5:  entire => entire
Span 0-1:  It => it
Span 5-6:  planet => planet

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  entire => entire
Oracle Span 0-1:  It => it
Oracle Span 5-6:  planet => planet
Oracle Span 1-2:  spreads => spread-01

Missing span: spreads => spread-01
Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	spreads	_	VBZ	VBZ	_	0	root	_	_
3	over	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	entire	_	JJ	JJ	_	6	amod	_	_
6	planet	_	NN	NN	_	3	pobj	_	_
7	.	_	.	.	_	2	punct	_	_

Oracle:
(p / planet, mod, e / entire)
(s / spread-01, ARG1, i / it)
(s / spread-01, ARG2, p / planet)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),planet,planet,false), Span(4,5,List(1),entire,entire,false), Span(0,1,List(2),It,it,false)),Map(2 -> it, 1 -> entire, 0 -> planet),Map(e -> entire, p -> planet, i -> it))),[Ljava.lang.String;@624ea235,Annotation([Ljava.lang.String;@3932c79a,[Ljava.lang.String;@782859e,[Ljava.lang.String;@23f5b5dc),Annotation([Ljava.lang.String;@34bde49d,[Ljava.lang.String;@1b1cfb87,[Ledu.cmu.lti.nlp.amr.Dependency;@821330f),Annotation([Ljava.lang.String;@6f43c82,[Ljava.lang.String;@5db6b9cd,[Ljava.lang.String;@210ab13f),Annotation([Ljava.lang.String;@20b2475a,[Ljava.lang.String;@7857fe2,[Ledu.cmu.lti.nlp.amr.Entity;@6f15d60e))
AMR:
(p / planet, domain, i / it)
(p / planet, extent, e / entire)

Decoded in 11,362 microseconds
Sentence: It bores clear through it with its roots .

Spans:
Span 2-3:  clear => clear-06
Span 4-5:  it => it
Span 0-1:  It => it
Span 6-7:  its => it
Span 7-8:  roots => root
Span 3-4:  through => through

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 1-2:  bores => bore-01
Oracle Span 2-3:  clear => clear-03
Oracle Span 0-1:  It => it
Oracle Span 4-5:  it => it
Oracle Span 7-8:  roots => root
Oracle Span 3-4:  through => through

Extra span: its => it
Incorrect span: clear => clear-06
Missing span: bores => bore-01
Missing span: clear => clear-03
Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	bores	_	VBZ	VBZ	_	0	root	_	_
3	clear	_	JJ	JJ	_	2	acomp	_	_
4	through	_	IN	IN	_	3	prep	_	_
5	it	_	PRP	PRP	_	4	pobj	_	_
6	with	_	IN	IN	_	2	prep	_	_
7	its	_	PRP$	PRP$	_	8	poss	_	_
8	roots	_	NNS	NNS	_	6	pobj	_	_
9	.	_	.	.	_	2	punct	_	_

Oracle:
(b / bore-01, ARG0, i / it)
(b / bore-01, ARG2, t2 / through)
(b / bore-01, ARG3, r / root)
(r / root, poss, i / it)
(t2 / through, mod, c / clear-03)
(t2 / through, op, i2 / it)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),roots,root,false), Span(6,7,List(1),its,it,false), Span(4,5,List(2),it,it,false), Span(3,4,List(3),through,through,false), Span(2,3,List(4),clear,clear-06,false), Span(0,1,List(5),It,it,false)),Map(2 -> it, 5 -> it, 1 -> it, 4 -> clear-06, 0 -> root, 3 -> through),Map(t -> through, i3 -> it, i2 -> it, i -> it, r -> root, c -> clear-06))),[Ljava.lang.String;@1be2019a,Annotation([Ljava.lang.String;@29d80d2b,[Ljava.lang.String;@58e1d9d,[Ljava.lang.String;@446a1e84),Annotation([Ljava.lang.String;@4f0f2942,[Ljava.lang.String;@2657d4dd,[Ledu.cmu.lti.nlp.amr.Dependency;@5340477f),Annotation([Ljava.lang.String;@47caedad,[Ljava.lang.String;@7139992f,[Ljava.lang.String;@69504ae9),Annotation([Ljava.lang.String;@387a8303,[Ljava.lang.String;@28cda624,[Ledu.cmu.lti.nlp.amr.Entity;@1500b2f3))
AMR:
(c / clear-06, ARG0, i / it)
(c / clear-06, ARG1, i3 / it)
(c / clear-06, ARG2, t / through)
(c / clear-06, compared-to, i2 / it)
(r / root, poss, i / it)

Decoded in 45,194 microseconds
Sentence: And if the planet is too small , and the baobabs are too many , they split it in pieces ...

Spans:
Span 8-9:  and => and
Span 0-1:  And => and
Span 10-11:  baobabs => baobab
Span 17-18:  it => it
Span 13-14:  many => many
Span 3-4:  planet => planet
Span 6-7:  small => small
Span 15-16:  they => they
Span 12-13:  too => too
Span 5-6:  too => too

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 8-9:  and => and
Oracle Span 10-11:  baobabs => baobab
Oracle Span 13-14:  many => many
Oracle Span 19-20:  pieces => piece
Oracle Span 3-4:  planet => planet
Oracle Span 6-7:  small => small
Oracle Span 16-17:  split => split-01
Oracle Span 5-6:  too => too
Oracle Span 12-13:  too => too

Extra span: it => it
Extra span: they => they
Missing span: split => split-01
Missing span: pieces => piece
Dependencies:
1	And	_	CC	CC	_	17	cc	_	_
2	if	_	IN	IN	_	7	mark	_	_
3	the	_	DT	DT	_	4	det	_	_
4	planet	_	NN	NN	_	7	nsubj	_	_
5	is	_	VBZ	VBZ	_	7	cop	_	_
6	too	_	RB	RB	_	7	advmod	_	_
7	small	_	JJ	JJ	_	17	advcl	_	_
8	,	_	,	,	_	7	punct	_	_
9	and	_	CC	CC	_	7	cc	_	_
10	the	_	DT	DT	_	11	det	_	_
11	baobabs	_	NNS	NNS	_	14	nsubj	_	_
12	are	_	VBP	VBP	_	14	cop	_	_
13	too	_	RB	RB	_	14	advmod	_	_
14	many	_	JJ	JJ	_	7	conj	_	_
15	,	_	,	,	_	17	punct	_	_
16	they	_	PRP	PRP	_	17	nsubj	_	_
17	split	_	VBD	VBD	_	0	root	_	_
18	it	_	PRP	PRP	_	17	dobj	_	_
19	in	_	IN	IN	_	17	prep	_	_
20	pieces	_	NNS	NNS	_	19	pobj	_	_
21	...	_	:	:	_	17	punct	_	_

Oracle:
(a / and, op, s / split-01)
(a2 / and, op, b / baobab)
(a2 / and, op, s2 / small)
(b / baobab, quant, m / many)
(m / many, degree, t3 / too)
(s / split-01, ARG0, b / baobab)
(s / split-01, ARG1, p2 / planet)
(s / split-01, ARG2, p / piece)
(s / split-01, condition, a2 / and)
(s2 / small, degree, t2 / too)
(s2 / small, domain, p2 / planet)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),it,it,false), Span(15,16,List(1),they,they,false), Span(13,14,List(2),many,many,false), Span(12,13,List(3),too,too,false), Span(10,11,List(4),baobabs,baobab,false), Span(8,9,List(5),and,and,false), Span(6,7,List(6),small,small,false), Span(5,6,List(7),too,too,false), Span(3,4,List(8),planet,planet,false), Span(0,1,List(9),And,and,false)),Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> and, 0 -> it, 3 -> too),Map(b -> baobab, t -> they, s -> small, m -> many, p -> planet, t3 -> too, a -> and, t2 -> too, a2 -> and, i -> it))),[Ljava.lang.String;@7eecb5b8,Annotation([Ljava.lang.String;@126253fd,[Ljava.lang.String;@57db2b13,[Ljava.lang.String;@475c9c31),Annotation([Ljava.lang.String;@5c86a017,[Ljava.lang.String;@5c7bfdc1,[Ledu.cmu.lti.nlp.amr.Dependency;@5276d6ee),Annotation([Ljava.lang.String;@71687585,[Ljava.lang.String;@1807f5a7,[Ljava.lang.String;@1b919693),Annotation([Ljava.lang.String;@7fb4f2a9,[Ljava.lang.String;@4dc27487,[Ledu.cmu.lti.nlp.amr.Entity;@6a4f1a55))
AMR:
(a / and, op, m / many)
(a / and, op, s / small)
(a2 / and, op, p / planet)
(i / it, op, t / they)
(m / many, degree, t2 / too)
(m / many, domain, b / baobab)
(s / small, degree, t3 / too)
(s / small, domain, p / planet)
(t / they, domain, s / small)

Decoded in 49,890 microseconds
Sentence: " It is a question of discipline , " the little prince said to me later on .

Spans:
Span 1-2:  It => it
Span 15-16:  later => late
Span 10-11:  little => little
Span 11-12:  prince => prince
Span 4-5:  question => question-01
Span 12-13:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  discipline => discipline
Oracle Span 1-2:  It => it
Oracle Span 15-16:  later => late
Oracle Span 10-11:  little => little
Oracle Span 11-12:  prince => prince
Oracle Span 4-5:  question => question
Oracle Span 12-13:  said => say-01

Incorrect span: question => question-01
Missing span: question => question
Missing span: discipline => discipline
Dependencies:
1	"	_	''	''	_	13	punct	_	_
2	It	_	PRP	PRP	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	a	_	DT	DT	_	5	det	_	_
5	question	_	NN	NN	_	13	ccomp	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	discipline	_	NN	NN	_	6	pobj	_	_
8	,	_	,	,	_	13	punct	_	_
9	"	_	''	''	_	13	punct	_	_
10	the	_	DT	DT	_	12	det	_	_
11	little	_	JJ	JJ	_	12	amod	_	_
12	prince	_	NN	NN	_	13	nsubj	_	_
13	said	_	VBD	VBD	_	0	root	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	me	_	PRP	PRP	_	14	pobj	_	_
16	later	_	RB	RB	_	17	advmod	_	_
17	on	_	RB	RB	_	13	advmod	_	_
18	.	_	.	.	_	13	punct	_	_

Oracle:
(p / prince, mod, l / little)
(q / question, domain, i / it)
(q / question, topic, d / discipline)
(s / say-01, ARG0, p / prince)
(s / say-01, ARG1, q / question)
(s / say-01, time, l2 / late)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),later,late,false), Span(12,13,List(1),said,say-01,false), Span(11,12,List(2),prince,prince,false), Span(10,11,List(3),little,little,false), Span(4,5,List(4),question,question-01,false), Span(1,2,List(5),It,it,false)),Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little),Map(q -> question-01, s -> say-01, p -> prince, i -> it, l2 -> little, l -> late))),[Ljava.lang.String;@7dfd3c81,Annotation([Ljava.lang.String;@2584b82d,[Ljava.lang.String;@7bbc8656,[Ljava.lang.String;@6933b6c6),Annotation([Ljava.lang.String;@7d3e8655,[Ljava.lang.String;@7dfb0c0f,[Ledu.cmu.lti.nlp.amr.Dependency;@626abbd0),Annotation([Ljava.lang.String;@169bb4dd,[Ljava.lang.String;@1f9e9475,[Ljava.lang.String;@3aa078fd),Annotation([Ljava.lang.String;@d23e042,[Ljava.lang.String;@46d59067,[Ledu.cmu.lti.nlp.amr.Entity;@2d0399f4))
AMR:
(p / prince, mod, l2 / little)
(q / question-01, ARG0, l / late)
(q / question-01, ARG2, i / it)
(s / say-01, ARG0, p / prince)
(s / say-01, ARG1, q / question-01)

Decoded in 29,394 microseconds
Sentence: " When you 've finished your own toilet in the morning , then it is time to attend to the toilet of your planet , just so , with the greatest care .

Spans:
Span 31-32:  care => care-04
Span 30-31:  greatest => (great :degree most)
Span 13-14:  it => it
Span 25-26:  just => just
Span 10-11:  morning => morning
Span 6-7:  own => own-01
Span 23-24:  planet => planet
Span 26-27:  so => so
Span 12-13:  then => then
Span 15-16:  time => time
Span 2-3:  you => you

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 17-18:  attend => attend-02
Oracle Span 31-32:  care => care-04
Oracle Span 4-5:  finished => finish-01
Oracle Span 30-31:  greatest => (great :degree most)
Oracle Span 10-11:  morning => morning
Oracle Span 23-24:  planet => planet
Oracle Span 7-8:  toilet => toilet
Oracle Span 20-21:  toilet => toilet
Oracle Span 2-3:  you => you

Extra span: so => so
Extra span: just => just
Extra span: time => time
Extra span: it => it
Extra span: then => then
Extra span: own => own-01
Missing span: attend => attend-02
Missing span: finished => finish-01
Missing span: toilet => toilet
Missing span: toilet => toilet
Dependencies:
1	"	_	''	''	_	5	punct	_	_
2	When	_	WRB	WRB	_	4	advmod	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	've	_	VBP	VBP	_	5	advcl	_	_
5	finished	_	VBD	VBD	_	0	root	_	_
6	your	_	PRP$	PRP$	_	8	poss	_	_
7	own	_	JJ	JJ	_	8	amod	_	_
8	toilet	_	NN	NN	_	5	dobj	_	_
9	in	_	IN	IN	_	5	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	morning	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	5	punct	_	_
13	then	_	RB	RB	_	16	advmod	_	_
14	it	_	PRP	PRP	_	16	nsubj	_	_
15	is	_	VBZ	VBZ	_	16	cop	_	_
16	time	_	NN	NN	_	5	ccomp	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	attend	_	VB	VB	_	16	vmod	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	toilet	_	NN	NN	_	19	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	your	_	PRP$	PRP$	_	24	poss	_	_
24	planet	_	NN	NN	_	22	pobj	_	_
25	,	_	,	,	_	18	punct	_	_
26	just	_	RB	RB	_	27	advmod	_	_
27	so	_	RB	RB	_	18	advmod	_	_
28	,	_	,	,	_	18	punct	_	_
29	with	_	IN	IN	_	18	prep	_	_
30	the	_	DT	DT	_	32	det	_	_
31	greatest	_	JJS	JJS	_	32	amod	_	_
32	care	_	NN	NN	_	29	pobj	_	_
33	.	_	.	.	_	5	punct	_	_

Oracle:
(a / attend-02, ARG1, t2 / toilet)
(a / attend-02, manner, c / care-04)
(a / attend-02, time, f / finish-01)
(c / care-04, extent, g / great)
(f / finish-01, ARG0, y / you)
(f / finish-01, ARG1, t / toilet)
(g / great, degree, m2 / most)
(p / planet, poss, y / you)
(t / toilet, poss, y / you)
(t2 / toilet, poss, p / planet)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),care,care-04,false), Span(30,31,List(2, 1),greatest,(great :degree most),false), Span(26,27,List(3),so,so,false), Span(25,26,List(4),just,just,false), Span(23,24,List(5),planet,planet,false), Span(15,16,List(6),time,time,false), Span(13,14,List(7),it,it,false), Span(12,13,List(8),then,then,false), Span(10,11,List(9),morning,morning,false), Span(6,7,List(10),own,own-01,false), Span(2,3,List(11),you,you,false)),Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-04, 10 -> own-01, 3 -> so),Map(t -> time, m2 -> morning, j -> just, s -> so, m -> most, y -> you, p -> planet, g -> great, t2 -> then, i -> it, c -> care-04, o -> own-01))),[Ljava.lang.String;@14dd7b39,Annotation([Ljava.lang.String;@66ea810,[Ljava.lang.String;@6cd24612,[Ljava.lang.String;@5dafbe45),Annotation([Ljava.lang.String;@2254127a,[Ljava.lang.String;@51891008,[Ledu.cmu.lti.nlp.amr.Dependency;@2f953efd),Annotation([Ljava.lang.String;@f68f0dc,[Ljava.lang.String;@d2de489,[Ljava.lang.String;@14bdbc74),Annotation([Ljava.lang.String;@12591ac8,[Ljava.lang.String;@5a7fe64f,[Ledu.cmu.lti.nlp.amr.Entity;@38145825))
AMR:
(c / care-04, ARG0, t / time)
(c / care-04, ARG1, p / planet)
(c / care-04, degree, g / great)
(g / great, degree, m / most)
(m2 / morning, poss, y / you)
(o / own-01, ARG0, g / great)
(o / own-01, ARG1, s / so)
(o / own-01, ARG2, m2 / morning)
(s / so, mod, j / just)
(t / time, domain, i / it)
(t / time, time, t2 / then)

Decoded in 153,428 microseconds
Sentence: You must see to it that you pull up regularly all the baobabs , at the very first moment when they can be distinguished from the rosebushes which they resemble so closely in their earliest youth .

Spans:
Span 10-11:  all => all
Span 12-13:  baobabs => baobab
Span 21-22:  can => possible-01
Span 31-32:  closely => close-10
Span 4-5:  it => it
Span 18-19:  moment => moment
Span 2-3:  see => see-01
Span 30-31:  so => so
Span 28-29:  they => they
Span 20-21:  they => they
Span 8-9:  up => up
Span 16-17:  very => very
Span 6-7:  you => you
Span 0-1:  You => you

Langrangian relaxation converged after 59 iterations. Delta = 0.0
Oracle Span 10-11:  all => all
Oracle Span 12-13:  baobabs => baobab
Oracle Span 21-22:  can => possible-01
Oracle Span 31-32:  closely => close-10
Oracle Span 23-24:  distinguished => distinguish-01
Oracle Span 34-35:  earliest => (early :degree most)
Oracle Span 18-19:  moment => moment
Oracle Span 7-8:  pull => pull-01
Oracle Span 9-10:  regularly => regular-02
Oracle Span 29-30:  resemble => resemble-01
Oracle Span 26-27:  rosebushes => rosebush
Oracle Span 30-31:  so => so
Oracle Span 16-17:  very => very
Oracle Span 0-1:  You => you
Oracle Span 35-36:  youth => youth

Extra span: they => they
Extra span: they => they
Extra span: up => up
Extra span: you => you
Extra span: it => it
Extra span: see => see-01
Missing span: pull => pull-01
Missing span: distinguished => distinguish-01
Missing span: rosebushes => rosebush
Missing span: resemble => resemble-01
Missing span: earliest => (early :degree most)
Missing span: youth => youth
Missing span: regularly => regular-02
Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	must	_	MD	MD	_	3	aux	_	_
3	see	_	VB	VB	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	it	_	PRP	PRP	_	4	pobj	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	you	_	PRP	PRP	_	8	nsubj	_	_
8	pull	_	VBP	VBP	_	3	ccomp	_	_
9	up	_	RB	RB	_	10	advmod	_	_
10	regularly	_	RB	RB	_	8	advmod	_	_
11	all	_	PDT	PDT	_	13	predet	_	_
12	the	_	DT	DT	_	13	det	_	_
13	baobabs	_	NNS	NNS	_	8	dobj	_	_
14	,	_	,	,	_	8	punct	_	_
15	at	_	IN	IN	_	8	prep	_	_
16	the	_	DT	DT	_	19	det	_	_
17	very	_	RB	RB	_	18	advmod	_	_
18	first	_	JJ	JJ	_	19	amod	_	_
19	moment	_	NN	NN	_	15	pobj	_	_
20	when	_	WRB	WRB	_	24	advmod	_	_
21	they	_	PRP	PRP	_	24	nsubj	_	_
22	can	_	MD	MD	_	24	aux	_	_
23	be	_	VB	VB	_	24	cop	_	_
24	distinguished	_	JJ	JJ	_	19	rcmod	_	_
25	from	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	rosebushes	_	NNS	NNS	_	25	pobj	_	_
28	which	_	WDT	WDT	_	30	dobj	_	_
29	they	_	PRP	PRP	_	30	nsubj	_	_
30	resemble	_	VBP	VBP	_	27	rcmod	_	_
31	so	_	RB	RB	_	32	advmod	_	_
32	closely	_	RB	RB	_	30	advmod	_	_
33	in	_	IN	IN	_	30	prep	_	_
34	their	_	PRP$	PRP$	_	36	poss	_	_
35	earliest	_	JJS	JJS	_	36	amod	_	_
36	youth	_	NN	NN	_	33	pobj	_	_
37	.	_	.	.	_	3	punct	_	_

Oracle:
(b / baobab, mod, a / all)
(c / close-10, ARG1, r3 / resemble-01)
(c / close-10, degree, s / so)
(d / distinguish-01, ARG1, b / baobab)
(d / distinguish-01, ARG2, r2 / rosebush)
(e / early, degree, m2 / most)
(e / early, op, y2 / youth)
(p / pull-01, ARG0, y / you)
(p / pull-01, ARG1, b / baobab)
(p / pull-01, time, m / moment)
(p2 / possible-01, ARG1, d / distinguish-01)
(p2 / possible-01, time, m / moment)
(r / regular-02, ARG1, p / pull-01)
(r3 / resemble-01, ARG1, b / baobab)
(r3 / resemble-01, ARG2, r2 / rosebush)
(r3 / resemble-01, time, e / early)
(y2 / youth, poss, b / baobab)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),closely,close-10,false), Span(30,31,List(1),so,so,false), Span(28,29,List(2),they,they,false), Span(21,22,List(3),can,possible-01,false), Span(20,21,List(4),they,they,false), Span(18,19,List(5),moment,moment,false), Span(16,17,List(6),very,very,false), Span(12,13,List(7),baobabs,baobab,false), Span(10,11,List(8),all,all,false), Span(8,9,List(9),up,up,false), Span(6,7,List(10),you,you,false), Span(4,5,List(11),it,it,false), Span(2,3,List(12),see,see-01,false), Span(0,1,List(13),You,you,false)),Map(2 -> they, 5 -> moment, 12 -> see-01, 8 -> all, 7 -> baobab, 1 -> so, 4 -> they, 11 -> it, 6 -> very, 0 -> close-10, 9 -> up, 3 -> possible-01, 10 -> you, 13 -> you),Map(s2 -> see-01, t -> they, b -> baobab, s -> so, v -> very, m -> moment, p -> possible-01, y -> you, a -> all, t2 -> they, i -> it, c -> close-10, u -> up, y2 -> you))),[Ljava.lang.String;@41330d4f,Annotation([Ljava.lang.String;@1b66c0fb,[Ljava.lang.String;@3e0e1046,[Ljava.lang.String;@24c1b2d2),Annotation([Ljava.lang.String;@7dc19a70,[Ljava.lang.String;@508dec2b,[Ledu.cmu.lti.nlp.amr.Dependency;@1e4f4a5c),Annotation([Ljava.lang.String;@37313c65,[Ljava.lang.String;@465232e9,[Ljava.lang.String;@798162bc),Annotation([Ljava.lang.String;@1df8da7a,[Ljava.lang.String;@23941fb4,[Ledu.cmu.lti.nlp.amr.Entity;@7486b455))
AMR:
(b / baobab, mod, a / all)
(b / baobab, poss, y / you)
(c / close-10, ARG0, u / up)
(c / close-10, ARG1, t / they)
(c / close-10, degree, s / so)
(p / possible-01, ARG0, y2 / you)
(p / possible-01, ARG1, m / moment)
(p / possible-01, ARG2, t2 / they)
(s2 / see-01, ARG1, y2 / you)
(s2 / see-01, ARG2, y / you)
(s2 / see-01, condition, c / close-10)
(s2 / see-01, manner, i / it)
(v / very, op, m / moment)

Decoded in 732,644 microseconds
Sentence: It is very tedious work , " the little prince added , " but very easy . "

Spans:
Span 10-11:  added => add-01
Span 13-14:  but => contrast-01
Span 0-1:  It => it
Span 8-9:  little => little
Span 9-10:  prince => prince
Span 14-15:  very => very
Span 2-3:  very => very
Span 4-5:  work => work-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  added => add-01
Oracle Span 13-14:  but => contrast-01
Oracle Span 15-16:  easy => easy-05
Oracle Span 8-9:  little => little
Oracle Span 9-10:  prince => prince
Oracle Span 3-4:  tedious => tedious
Oracle Span 2-3:  very => very
Oracle Span 14-15:  very => very
Oracle Span 4-5:  work => work-01

Extra span: It => it
Missing span: easy => easy-05
Missing span: tedious => tedious
Dependencies:
1	It	_	PRP	PRP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	very	_	RB	RB	_	4	advmod	_	_
4	tedious	_	JJ	JJ	_	5	amod	_	_
5	work	_	NN	NN	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_
8	the	_	DT	DT	_	10	det	_	_
9	little	_	JJ	JJ	_	10	amod	_	_
10	prince	_	NN	NN	_	11	nsubj	_	_
11	added	_	VBD	VBD	_	5	dep	_	_
12	,	_	,	,	_	11	punct	_	_
13	"	_	''	''	_	11	punct	_	_
14	but	_	CC	CC	_	11	cc	_	_
15	very	_	JJ	JJ	_	11	conj	_	_
16	easy	_	RB	RB	_	15	advmod	_	_
17	.	_	.	.	_	5	punct	_	_
18	"	_	''	''	_	5	punct	_	_

Oracle:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, c / contrast-01)
(c / contrast-01, ARG1, t / tedious)
(c / contrast-01, ARG2, e / easy-05)
(e / easy-05, ARG1, w / work-01)
(e / easy-05, degree, v2 / very)
(p / prince, mod, l / little)
(t / tedious, degree, v / very)
(t / tedious, domain, w / work-01)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),very,very,false), Span(13,14,List(1),but,contrast-01,false), Span(10,11,List(2),added,add-01,false), Span(9,10,List(3),prince,prince,false), Span(8,9,List(4),little,little,false), Span(4,5,List(5),work,work-01,false), Span(2,3,List(6),very,very,false), Span(0,1,List(7),It,it,false)),Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince),Map(v2 -> very, w -> work-01, v -> very, p -> prince, a -> add-01, i -> it, l -> little, c -> contrast-01))),[Ljava.lang.String;@660acfb,Annotation([Ljava.lang.String;@5d908d47,[Ljava.lang.String;@5efa40fe,[Ljava.lang.String;@1f9f6368),Annotation([Ljava.lang.String;@1c9b0314,[Ljava.lang.String;@45385f75,[Ledu.cmu.lti.nlp.amr.Dependency;@49c90a9c),Annotation([Ljava.lang.String;@2d29b4ee,[Ljava.lang.String;@69ee81fc,[Ljava.lang.String;@6e2aa843),Annotation([Ljava.lang.String;@6f36c2f0,[Ljava.lang.String;@f58853c,[Ledu.cmu.lti.nlp.amr.Entity;@1224144a))
AMR:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, c / contrast-01)
(c / contrast-01, ARG0, v / very)
(p / prince, mod, l / little)
(w / work-01, ARG0, p / prince)
(w / work-01, ARG1, v2 / very)
(w / work-01, ARG2, i / it)

Decoded in 37,772 microseconds
Sentence: And one day he said to me : " You ought to make a beautiful drawing , so that the children where you live can see exactly how all this is .

Spans:
Span 28-29:  all => all
Span 0-1:  And => and
Span 14-15:  beautiful => beautiful-02
Span 24-25:  can => possible-01
Span 20-21:  children => child
Span 2-3:  day => day
Span 26-27:  exactly => exact
Span 3-4:  he => he
Span 23-24:  live => live-01
Span 4-5:  said => say-01
Span 25-26:  see => see-01
Span 17-18:  so => so
Span 29-30:  this => this
Span 22-23:  you => you
Span 9-10:  You => you

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 28-29:  all => all
Oracle Span 0-1:  And => and
Oracle Span 14-15:  beautiful => beautiful-02
Oracle Span 24-25:  can => possible-01
Oracle Span 20-21:  children => child
Oracle Span 2-3:  day => day
Oracle Span 15-16:  drawing => draw-01
Oracle Span 26-27:  exactly => exact
Oracle Span 3-4:  he => he
Oracle Span 23-24:  live => live-01
Oracle Span 1-2:  one => one
Oracle Span 4-5:  said => say-01
Oracle Span 25-26:  see => see-01
Oracle Span 29-30:  this => this

Extra span: you => you
Extra span: so => so
Extra span: You => you
Missing span: one => one
Missing span: drawing => draw-01
Dependencies:
1	And	_	CC	CC	_	5	cc	_	_
2	one	_	CD	CD	_	3	num	_	_
3	day	_	NN	NN	_	5	tmod	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	said	_	VBD	VBD	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	me	_	PRP	PRP	_	6	pobj	_	_
8	:	_	:	:	_	5	punct	_	_
9	"	_	''	''	_	5	punct	_	_
10	You	_	PRP	PRP	_	11	nsubj	_	_
11	ought	_	MD	MD	_	5	ccomp	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	make	_	VB	VB	_	11	xcomp	_	_
14	a	_	DT	DT	_	16	det	_	_
15	beautiful	_	JJ	JJ	_	16	amod	_	_
16	drawing	_	NN	NN	_	13	dobj	_	_
17	,	_	,	,	_	11	punct	_	_
18	so	_	RB	RB	_	26	advmod	_	_
19	that	_	IN	IN	_	26	mark	_	_
20	the	_	DT	DT	_	21	det	_	_
21	children	_	NNS	NNS	_	26	nsubj	_	_
22	where	_	WRB	WRB	_	24	advmod	_	_
23	you	_	PRP	PRP	_	24	nsubj	_	_
24	live	_	VBP	VBP	_	21	rcmod	_	_
25	can	_	MD	MD	_	26	aux	_	_
26	see	_	VB	VB	_	11	advcl	_	_
27	exactly	_	RB	RB	_	28	advmod	_	_
28	how	_	WRB	WRB	_	31	advmod	_	_
29	all	_	PDT	PDT	_	30	predet	_	_
30	this	_	DT	DT	_	31	nsubj	_	_
31	is	_	VBZ	VBZ	_	26	ccomp	_	_
32	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, s / say-01)
(c / child, location, l / live-01)
(d / day, mod, o / one)
(d3 / draw-01, purpose, p / possible-01)
(p / possible-01, ARG1, s2 / see-01)
(s / say-01, ARG0, h / he)
(s / say-01, time, d / day)
(s2 / see-01, ARG0, c / child)
(s2 / see-01, ARG1, t / this)
(s2 / see-01, manner, e / exact)
(t / this, mod, a2 / all)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),this,this,false), Span(28,29,List(1),all,all,false), Span(26,27,List(2),exactly,exact,false), Span(25,26,List(3),see,see-01,false), Span(24,25,List(4),can,possible-01,false), Span(23,24,List(5),live,live-01,false), Span(22,23,List(6),you,you,false), Span(20,21,List(7),children,child,false), Span(17,18,List(8),so,so,false), Span(14,15,List(9),beautiful,beautiful-02,false), Span(9,10,List(10),You,you,false), Span(4,5,List(11),said,say-01,false), Span(3,4,List(12),he,he,false), Span(2,3,List(13),day,day,false), Span(0,1,List(14),And,and,false)),Map(2 -> exact, 5 -> live-01, 12 -> he, 8 -> so, 7 -> child, 1 -> all, 4 -> possible-01, 11 -> say-01, 14 -> and, 6 -> you, 0 -> this, 9 -> beautiful-02, 3 -> see-01, 10 -> you, 13 -> day),Map(e -> exact, h -> he, s2 -> so, t -> this, b -> beautiful-02, s -> see-01, d -> day, p -> possible-01, y -> you, a -> all, a2 -> and, c -> child, s3 -> say-01, l -> live-01, y2 -> you))),[Ljava.lang.String;@29f7cefd,Annotation([Ljava.lang.String;@700fb871,[Ljava.lang.String;@3b35a229,[Ljava.lang.String;@9816741),Annotation([Ljava.lang.String;@1e16c0aa,[Ljava.lang.String;@13d73f29,[Ledu.cmu.lti.nlp.amr.Dependency;@565f390),Annotation([Ljava.lang.String;@7dc3712,[Ljava.lang.String;@2f67a4d3,[Ljava.lang.String;@5e3f861),Annotation([Ljava.lang.String;@2fb0623e,[Ljava.lang.String;@49b2a47d,[Ledu.cmu.lti.nlp.amr.Entity;@5be1d0a4))
AMR:
(a2 / and, op, s3 / say-01)
(b / beautiful-02, ARG0, t / this)
(b / beautiful-02, ARG1, s2 / so)
(c / child, location, l / live-01)
(l / live-01, ARG0, y / you)
(p / possible-01, ARG1, s / see-01)
(p / possible-01, mod, s2 / so)
(s / see-01, ARG0, e / exact)
(s / see-01, ARG1, l / live-01)
(s3 / say-01, ARG0, h / he)
(s3 / say-01, ARG1, p / possible-01)
(s3 / say-01, ARG2, y2 / you)
(s3 / say-01, time, d / day)
(t / this, mod, a / all)

Decoded in 369,779 microseconds
Sentence: That would be very useful to them if they were to travel some day .

Spans:
Span 13-14:  day => day
Span 12-13:  some => some
Span 0-1:  That => that
Span 8-9:  they => they
Span 11-12:  travel => travel-01
Span 4-5:  useful => useful-05
Span 3-4:  very => very

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 13-14:  day => day
Oracle Span 12-13:  some => some
Oracle Span 0-1:  That => that
Oracle Span 8-9:  they => they
Oracle Span 11-12:  travel => travel-01
Oracle Span 4-5:  useful => useful-05
Oracle Span 3-4:  very => very

Dependencies:
1	That	_	DT	DT	_	5	nsubj	_	_
2	would	_	MD	MD	_	5	aux	_	_
3	be	_	VB	VB	_	5	cop	_	_
4	very	_	RB	RB	_	5	advmod	_	_
5	useful	_	JJ	JJ	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	if	_	IN	IN	_	10	mark	_	_
9	they	_	PRP	PRP	_	10	nsubj	_	_
10	were	_	VBD	VBD	_	5	advcl	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	travel	_	VB	VB	_	10	xcomp	_	_
13	some	_	DT	DT	_	14	det	_	_
14	day	_	NN	NN	_	12	tmod	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(d / day, mod, s / some)
(t3 / travel-01, ARG0, t2 / they)
(t3 / travel-01, time, d / day)
(u / useful-05, ARG0, t2 / they)
(u / useful-05, ARG1, t / that)
(u / useful-05, condition, t3 / travel-01)
(u / useful-05, degree, v / very)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),day,day,false), Span(12,13,List(1),some,some,false), Span(11,12,List(2),travel,travel-01,false), Span(8,9,List(3),they,they,false), Span(4,5,List(4),useful,useful-05,false), Span(3,4,List(5),very,very,false), Span(0,1,List(6),That,that,false)),Map(2 -> travel-01, 5 -> very, 1 -> some, 4 -> useful-05, 6 -> that, 0 -> day, 3 -> they),Map(t -> travel-01, s -> some, v -> very, d -> day, t3 -> that, t2 -> they, u -> useful-05))),[Ljava.lang.String;@415b0b49,Annotation([Ljava.lang.String;@6d5620ce,[Ljava.lang.String;@311bf055,[Ljava.lang.String;@642a7222),Annotation([Ljava.lang.String;@7d322cad,[Ljava.lang.String;@21be3395,[Ledu.cmu.lti.nlp.amr.Dependency;@4f49f6af),Annotation([Ljava.lang.String;@78452606,[Ljava.lang.String;@147e2ae7,[Ljava.lang.String;@448c8166),Annotation([Ljava.lang.String;@4470fbd6,[Ljava.lang.String;@15d49048,[Ledu.cmu.lti.nlp.amr.Entity;@7098b907))
AMR:
(d / day, mod, s / some)
(t / travel-01, ARG1, t2 / they)
(t / travel-01, time, d / day)
(u / useful-05, ARG0, t3 / that)
(u / useful-05, ARG1, t2 / they)
(u / useful-05, degree, v / very)

Decoded in 34,611 microseconds
Sentence: Sometimes , " he added , " there is no harm in putting off a piece of work until another day .

Spans:
Span 4-5:  added => add-01
Span 19-20:  another => another
Span 20-21:  day => day
Span 10-11:  harm => harm-01
Span 3-4:  he => he
Span 9-10:  no => -
Span 12-13:  putting => put-01
Span 7-8:  there => there
Span 18-19:  until => until
Span 17-18:  work => work-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 4-5:  added => add-01
Oracle Span 19-20:  another => another
Oracle Span 20-21:  day => day
Oracle Span 10-11:  harm => harm-01
Oracle Span 3-4:  he => he
Oracle Span 9-10:  no => -
Oracle Span 15-16:  piece => piece
Oracle Span 0-1:  Sometimes => sometimes
Oracle Span 17-18:  work => (thing :ARG1-of work-01)

Extra span: until => until
Incorrect span: work => work-01
Extra span: putting => put-01
Extra span: there => there
Missing span: Sometimes => sometimes
Missing span: work => (thing :ARG1-of work-01)
Missing span: piece => piece
Dependencies:
1	Sometimes	_	RB	RB	_	9	advmod	_	_
2	,	_	,	,	_	9	punct	_	_
3	"	_	''	''	_	9	punct	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	added	_	VBD	VBD	_	9	ccomp	_	_
6	,	_	,	,	_	9	punct	_	_
7	"	_	''	''	_	9	punct	_	_
8	there	_	EX	EX	_	9	expl	_	_
9	is	_	VBZ	VBZ	_	0	root	_	_
10	no	_	DT	DT	_	11	det	_	_
11	harm	_	NN	NN	_	9	nsubj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	putting	_	VBG	VBG	_	12	pcomp	_	_
14	off	_	RP	RP	_	13	prt	_	_
15	a	_	DT	DT	_	16	det	_	_
16	piece	_	NN	NN	_	13	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	work	_	NN	NN	_	17	pobj	_	_
19	until	_	IN	IN	_	13	prep	_	_
20	another	_	DT	DT	_	21	det	_	_
21	day	_	NN	NN	_	19	pobj	_	_
22	.	_	.	.	_	9	punct	_	_

Oracle:
(a / add-01, ARG0, h / he)
(a / add-01, ARG1, h2 / harm-01)
(d / day, mod, a2 / another)
(h2 / harm-01, polarity, - / -)
(h2 / harm-01, time, s / sometimes)
(t / thing, quant, p3 / piece)
(w / work-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),day,day,false), Span(19,20,List(1),another,another,false), Span(18,19,List(2),until,until,false), Span(17,18,List(3),work,work-01,false), Span(12,13,List(4),putting,put-01,false), Span(10,11,List(5),harm,harm-01,false), Span(9,10,List(6),no,-,false), Span(7,8,List(7),there,there,false), Span(4,5,List(8),added,add-01,false), Span(3,4,List(9),he,he,false)),Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01),Map(w -> work-01, h -> harm-01, h2 -> he, t -> there, d -> day, p -> put-01, a -> another, a2 -> add-01, - -> -, u -> until))),[Ljava.lang.String;@503f91c3,Annotation([Ljava.lang.String;@13526e59,[Ljava.lang.String;@2235eaab,[Ljava.lang.String;@17503f6b),Annotation([Ljava.lang.String;@3bcd05cb,[Ljava.lang.String;@3b6d844d,[Ledu.cmu.lti.nlp.amr.Dependency;@36804139),Annotation([Ljava.lang.String;@20bd8be5,[Ljava.lang.String;@730d2164,[Ljava.lang.String;@24959ca4),Annotation([Ljava.lang.String;@10289886,[Ljava.lang.String;@5c86dbc5,[Ledu.cmu.lti.nlp.amr.Entity;@461ad730))
AMR:
(a2 / add-01, ARG0, h / harm-01)
(a2 / add-01, ARG1, t / there)
(a2 / add-01, ARG2, h2 / he)
(d / day, mod, a / another)
(h / harm-01, ARG1, p / put-01)
(h / harm-01, polarity, - / -)
(p / put-01, time, u / until)
(u / until, op, d / day)
(w / work-01, ARG0, u / until)

Decoded in 148,404 microseconds
Sentence: But when it is a matter of baobabs , that always means a catastrophe .

Spans:
Span 10-11:  always => always
Span 7-8:  baobabs => baobab
Span 0-1:  But => contrast-01
Span 2-3:  it => it
Span 5-6:  matter => matter
Span 11-12:  means => mean-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 10-11:  always => always
Oracle Span 7-8:  baobabs => baobab
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  catastrophe => catastrophe
Oracle Span 11-12:  means => mean-01
Oracle Span 9-10:  that => that

Extra span: matter => matter
Extra span: it => it
Missing span: catastrophe => catastrophe
Missing span: that => that
Dependencies:
1	But	_	CC	CC	_	12	cc	_	_
2	when	_	WRB	WRB	_	6	advmod	_	_
3	it	_	PRP	PRP	_	6	nsubj	_	_
4	is	_	VBZ	VBZ	_	6	cop	_	_
5	a	_	DT	DT	_	6	det	_	_
6	matter	_	NN	NN	_	12	advcl	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	baobabs	_	NNS	NNS	_	7	pobj	_	_
9	,	_	,	,	_	12	punct	_	_
10	that	_	DT	DT	_	12	nsubj	_	_
11	always	_	RB	RB	_	12	advmod	_	_
12	means	_	VBZ	VBZ	_	0	root	_	_
13	a	_	DT	DT	_	14	det	_	_
14	catastrophe	_	NN	NN	_	12	dobj	_	_
15	.	_	.	.	_	12	punct	_	_

Oracle:
(c2 / contrast-01, ARG2, m3 / mean-01)
(m3 / mean-01, ARG1, t / that)
(m3 / mean-01, ARG2, c / catastrophe)
(m3 / mean-01, condition, b / baobab)
(m3 / mean-01, time, a / always)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),means,mean-01,false), Span(10,11,List(1),always,always,false), Span(7,8,List(2),baobabs,baobab,false), Span(5,6,List(3),matter,matter,false), Span(2,3,List(4),it,it,false), Span(0,1,List(5),But,contrast-01,false)),Map(2 -> baobab, 5 -> contrast-01, 1 -> always, 4 -> it, 0 -> mean-01, 3 -> matter),Map(b -> baobab, m2 -> matter, m -> mean-01, a -> always, i -> it, c -> contrast-01))),[Ljava.lang.String;@4ee203eb,Annotation([Ljava.lang.String;@1a5a4e19,[Ljava.lang.String;@7068e664,[Ljava.lang.String;@60db1c0e),Annotation([Ljava.lang.String;@3e78b6a5,[Ljava.lang.String;@769a1df5,[Ledu.cmu.lti.nlp.amr.Dependency;@41f69e84),Annotation([Ljava.lang.String;@7975d1d8,[Ljava.lang.String;@2438dcd,[Ljava.lang.String;@24105dc5),Annotation([Ljava.lang.String;@5167f57d,[Ljava.lang.String;@64b0598,[Ledu.cmu.lti.nlp.amr.Entity;@18f8cd79))
AMR:
(c / contrast-01, ARG0, b / baobab)
(c / contrast-01, ARG2, m / mean-01)
(m / mean-01, ARG1, i / it)
(m / mean-01, time, a / always)
(m2 / matter, domain, i / it)

Decoded in 28,773 microseconds
Sentence: I knew a planet that was inhabited by a lazy man .

Spans:
Span 0-1:  I => i
Span 6-7:  inhabited => inhabit-01
Span 1-2:  knew => know-01
Span 9-10:  lazy => lazy
Span 10-11:  man => man
Span 3-4:  planet => planet

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 6-7:  inhabited => inhabit-01
Oracle Span 1-2:  knew => know-02
Oracle Span 9-10:  lazy => lazy
Oracle Span 10-11:  man => man
Oracle Span 3-4:  planet => planet

Incorrect span: knew => know-01
Missing span: knew => know-02
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	knew	_	VBD	VBD	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	planet	_	NN	NN	_	2	dobj	_	_
5	that	_	WDT	WDT	_	7	nsubjpass	_	_
6	was	_	VBD	VBD	_	7	auxpass	_	_
7	inhabited	_	VBN	VBN	_	4	rcmod	_	_
8	by	_	IN	IN	_	7	prep	_	_
9	a	_	DT	DT	_	11	det	_	_
10	lazy	_	JJ	JJ	_	11	amod	_	_
11	man	_	NN	NN	_	8	pobj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(i2 / inhabit-01, ARG0, m / man)
(i2 / inhabit-01, ARG1, p / planet)
(k / know-02, ARG0, i / i)
(k / know-02, ARG1, p / planet)
(m / man, mod, l / lazy)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),man,man,false), Span(9,10,List(1),lazy,lazy,false), Span(6,7,List(2),inhabited,inhabit-01,false), Span(3,4,List(3),planet,planet,false), Span(1,2,List(4),knew,know-01,false), Span(0,1,List(5),I,i,false)),Map(2 -> inhabit-01, 5 -> i, 1 -> lazy, 4 -> know-01, 0 -> man, 3 -> planet),Map(k -> know-01, m -> man, p -> planet, i2 -> i, i -> inhabit-01, l -> lazy))),[Ljava.lang.String;@3e2055d6,Annotation([Ljava.lang.String;@50029372,[Ljava.lang.String;@e3b3b2f,[Ljava.lang.String;@50f6ac94),Annotation([Ljava.lang.String;@6cc4cdb9,[Ljava.lang.String;@28194a50,[Ledu.cmu.lti.nlp.amr.Dependency;@7f2cfe3f),Annotation([Ljava.lang.String;@1a5b6f42,[Ljava.lang.String;@5038d0b5,[Ljava.lang.String;@32115b28),Annotation([Ljava.lang.String;@2ad48653,[Ljava.lang.String;@6bb4dd34,[Ledu.cmu.lti.nlp.amr.Entity;@7d9f158f))
AMR:
(i / inhabit-01, ARG0, m / man)
(i / inhabit-01, ARG1, p / planet)
(k / know-01, ARG0, i2 / i)
(k / know-01, ARG1, p / planet)
(m / man, mod, l / lazy)

Decoded in 20,811 microseconds
Sentence: He neglected three little bushes ... "

Spans:
Span 4-5:  bushes => bush
Span 0-1:  He => he
Span 3-4:  little => little
Span 1-2:  neglected => neglect-01
Span 2-3:  three => 3

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  bushes => bush
Oracle Span 0-1:  He => he
Oracle Span 3-4:  little => little
Oracle Span 1-2:  neglected => neglect-01
Oracle Span 2-3:  three => 3

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	neglected	_	VBD	VBD	_	0	root	_	_
3	three	_	CD	CD	_	5	num	_	_
4	little	_	JJ	JJ	_	5	amod	_	_
5	bushes	_	NNS	NNS	_	2	dobj	_	_
6	...	_	.	.	_	2	punct	_	_
7	"	_	''	''	_	2	punct	_	_

Oracle:
(b / bush, mod, l / little)
(b / bush, quant, 3 / 3)
(n / neglect-01, ARG0, h / he)
(n / neglect-01, ARG1, b / bush)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),bushes,bush,false), Span(3,4,List(1),little,little,false), Span(2,3,List(2),three,3,false), Span(1,2,List(3),neglected,neglect-01,false), Span(0,1,List(4),He,he,false)),Map(2 -> 3, 1 -> little, 4 -> he, 0 -> bush, 3 -> neglect-01),Map(n -> neglect-01, h -> he, b -> bush, l -> little, 3 -> 3))),[Ljava.lang.String;@45efd90f,Annotation([Ljava.lang.String;@4b8729ff,[Ljava.lang.String;@61710c6,[Ljava.lang.String;@3214ee6),Annotation([Ljava.lang.String;@383dc82c,[Ljava.lang.String;@4a07d605,[Ledu.cmu.lti.nlp.amr.Dependency;@74287ea3),Annotation([Ljava.lang.String;@7d7758be,[Ljava.lang.String;@2bdd8394,[Ljava.lang.String;@5f9edf14),Annotation([Ljava.lang.String;@68746f22,[Ljava.lang.String;@2f01783a,[Ledu.cmu.lti.nlp.amr.Entity;@68878f6d))
AMR:
(b / bush, mod, l / little)
(b / bush, poss, h / he)
(b / bush, quant, 3 / 3)
(n / neglect-01, ARG0, h / he)

Decoded in 12,572 microseconds
Sentence: So , as the little prince described it to me , I have made a drawing of that planet .

Spans:
Span 11-12:  I => i
Span 7-8:  it => it
Span 4-5:  little => little
Span 18-19:  planet => planet
Span 5-6:  prince => prince

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  described => describe-01
Oracle Span 15-16:  drawing => draw-01
Oracle Span 11-12:  I => i
Oracle Span 4-5:  little => little
Oracle Span 18-19:  planet => planet
Oracle Span 5-6:  prince => prince
Oracle Span 17-18:  that => that

Extra span: it => it
Missing span: drawing => draw-01
Missing span: described => describe-01
Missing span: that => that
Dependencies:
1	So	_	IN	IN	_	14	dep	_	_
2	,	_	,	,	_	14	punct	_	_
3	as	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	little	_	JJ	JJ	_	6	amod	_	_
6	prince	_	NN	NN	_	7	nsubj	_	_
7	described	_	VBD	VBD	_	14	advcl	_	_
8	it	_	PRP	PRP	_	7	dobj	_	_
9	to	_	TO	TO	_	7	prep	_	_
10	me	_	PRP	PRP	_	9	pobj	_	_
11	,	_	,	,	_	14	punct	_	_
12	I	_	PRP	PRP	_	14	nsubj	_	_
13	have	_	VBP	VBP	_	14	aux	_	_
14	made	_	VBN	VBN	_	0	root	_	_
15	a	_	DT	DT	_	16	det	_	_
16	drawing	_	NN	NN	_	14	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	that	_	DT	DT	_	19	det	_	_
19	planet	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	14	punct	_	_

Oracle:
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, p / planet)
(d / draw-01, manner, d2 / describe-01)
(d2 / describe-01, ARG0, p2 / prince)
(d2 / describe-01, ARG1, p / planet)
(d2 / describe-01, beneficiary, i / i)
(p / planet, mod, t / that)
(p2 / prince, mod, l / little)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),planet,planet,false), Span(11,12,List(1),I,i,false), Span(7,8,List(2),it,it,false), Span(5,6,List(3),prince,prince,false), Span(4,5,List(4),little,little,false)),Map(2 -> it, 1 -> i, 4 -> little, 0 -> planet, 3 -> prince),Map(p2 -> prince, p -> planet, i2 -> it, i -> i, l -> little))),[Ljava.lang.String;@41488b16,Annotation([Ljava.lang.String;@a8ef162,[Ljava.lang.String;@2eea88a1,[Ljava.lang.String;@7ac296f6),Annotation([Ljava.lang.String;@7fd7a283,[Ljava.lang.String;@22f59fa,[Ledu.cmu.lti.nlp.amr.Dependency;@78fa769e),Annotation([Ljava.lang.String;@16612a51,[Ljava.lang.String;@54e041a4,[Ljava.lang.String;@2c78324b),Annotation([Ljava.lang.String;@79defdc,[Ljava.lang.String;@18317edc,[Ledu.cmu.lti.nlp.amr.Entity;@4e0ae11f))
AMR:
(p / planet, poss, i / i)
(p / planet, poss, p2 / prince)
(p2 / prince, mod, l / little)
(p2 / prince, op, i2 / it)

Decoded in 31,555 microseconds
Sentence: I do not much like to take the tone of a moralist .

Spans:
Span 0-1:  I => i
Span 3-4:  much => much

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 4-5:  like => like-01
Oracle Span 11-12:  moralist => moralist
Oracle Span 3-4:  much => much
Oracle Span 6-7:  take => take-01
Oracle Span 8-9:  tone => tone

Missing span: like => like-01
Missing span: take => take-01
Missing span: tone => tone
Missing span: moralist => moralist
Dependencies:
1	I	_	PRP	PRP	_	5	nsubj	_	_
2	do	_	VBP	VBP	_	5	aux	_	_
3	not	_	RB	RB	_	5	neg	_	_
4	much	_	RB	RB	_	5	advmod	_	_
5	like	_	VB	VB	_	0	root	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	take	_	VB	VB	_	5	xcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	tone	_	NN	NN	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	moralist	_	NN	NN	_	10	pobj	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(l / like-01, ARG0, i / i)
(l / like-01, ARG1, t / take-01)
(l / like-01, degree, m / much)
(t / take-01, ARG0, i / i)
(t / take-01, ARG1, t2 / tone)
(t2 / tone, poss, m2 / moralist)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),much,much,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> much),Map(m -> much, i -> i))),[Ljava.lang.String;@238d68ff,Annotation([Ljava.lang.String;@4b86805d,[Ljava.lang.String;@5852c06f,[Ljava.lang.String;@4149c063),Annotation([Ljava.lang.String;@9cb8225,[Ljava.lang.String;@76b07f29,[Ledu.cmu.lti.nlp.amr.Dependency;@38af9828),Annotation([Ljava.lang.String;@376a0d86,[Ljava.lang.String;@62656be4,[Ljava.lang.String;@17d919b6),Annotation([Ljava.lang.String;@53f3bdbd,[Ljava.lang.String;@34129c78,[Ledu.cmu.lti.nlp.amr.Entity;@7d61eb55))
AMR:
(m / much, domain, i / i)

Decoded in 12,702 microseconds
Sentence: But the danger of the baobabs is so little understood , and such considerable risks would be run by anyone who might get lost on an asteroid , that for once I am breaking through my reserve .

Spans:
Span 11-12:  and => and
Span 19-20:  anyone => anyone
Span 5-6:  baobabs => baobab
Span 0-1:  But => contrast-01
Span 2-3:  danger => danger
Span 22-23:  get => get-01
Span 31-32:  I => i
Span 8-9:  little => little
Span 23-24:  lost => lose-02
Span 30-31:  once => once
Span 17-18:  run => run-02
Span 7-8:  so => so
Span 12-13:  such => such
Span 34-35:  through => through
Span 9-10:  understood => understand-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 19-20:  anyone => anyone
Oracle Span 26-27:  asteroid => asteroid
Oracle Span 5-6:  baobabs => baobab
Oracle Span 33-34:  breaking => break-away-14
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  considerable => considerable
Oracle Span 2-3:  danger => danger
Oracle Span 31-32:  I => i
Oracle Span 8-9:  little => little
Oracle Span 23-24:  lost => lose-02
Oracle Span 36-37:  reserve => reserve
Oracle Span 14-15:  risks => risk-01
Oracle Span 7-8:  so => so
Oracle Span 12-13:  such => such
Oracle Span 9-10:  understood => understand-01

Extra span: through => through
Extra span: once => once
Extra span: get => get-01
Extra span: run => run-02
Missing span: risks => risk-01
Missing span: considerable => considerable
Missing span: asteroid => asteroid
Missing span: reserve => reserve
Missing span: breaking => break-away-14
Dependencies:
1	But	_	CC	CC	_	10	cc	_	_
2	the	_	DT	DT	_	3	det	_	_
3	danger	_	NN	NN	_	10	nsubjpass	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	baobabs	_	NNS	NNS	_	4	pobj	_	_
7	is	_	VBZ	VBZ	_	10	auxpass	_	_
8	so	_	RB	RB	_	9	advmod	_	_
9	little	_	RB	RB	_	10	advmod	_	_
10	understood	_	VBN	VBN	_	0	root	_	_
11	,	_	,	,	_	10	punct	_	_
12	and	_	CC	CC	_	10	cc	_	_
13	such	_	JJ	JJ	_	15	amod	_	_
14	considerable	_	JJ	JJ	_	15	amod	_	_
15	risks	_	NNS	NNS	_	18	nsubjpass	_	_
16	would	_	MD	MD	_	18	aux	_	_
17	be	_	VB	VB	_	18	auxpass	_	_
18	run	_	VBN	VBN	_	10	conj	_	_
19	by	_	IN	IN	_	18	prep	_	_
20	anyone	_	NN	NN	_	19	pobj	_	_
21	who	_	WP	WP	_	24	nsubjpass	_	_
22	might	_	MD	MD	_	24	aux	_	_
23	get	_	VB	VB	_	24	auxpass	_	_
24	lost	_	VBN	VBN	_	20	rcmod	_	_
25	on	_	IN	IN	_	24	prep	_	_
26	an	_	DT	DT	_	27	det	_	_
27	asteroid	_	NN	NN	_	25	pobj	_	_
28	,	_	,	,	_	24	punct	_	_
29	that	_	IN	IN	_	34	mark	_	_
30	for	_	IN	IN	_	34	prep	_	_
31	once	_	RB	RB	_	30	pobj	_	_
32	I	_	PRP	PRP	_	34	nsubj	_	_
33	am	_	VBP	VBP	_	34	aux	_	_
34	breaking	_	VBG	VBG	_	24	ccomp	_	_
35	through	_	IN	IN	_	34	prep	_	_
36	my	_	PRP$	PRP$	_	37	poss	_	_
37	reserve	_	NN	NN	_	35	pobj	_	_
38	.	_	.	.	_	10	punct	_	_

Oracle:
(a / and, op, r / risk-01)
(a / and, op, u / understand-01)
(b3 / break-away-14, ARG0, i / i)
(b3 / break-away-14, ARG1, r3 / reserve)
(c / considerable, mod, s2 / such)
(d / danger, poss, b2 / baobab)
(l / little, degree, s / so)
(l2 / lose-02, ARG1, a2 / anyone)
(l2 / lose-02, location, a3 / asteroid)
(r / risk-01, ARG0, a2 / anyone)
(r / risk-01, degree, c / considerable)
(r3 / reserve, poss, i / i)
(u / understand-01, ARG1, d / danger)
(u / understand-01, degree, l / little)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),through,through,false), Span(31,32,List(1),I,i,false), Span(30,31,List(2),once,once,false), Span(23,24,List(3),lost,lose-02,false), Span(22,23,List(4),get,get-01,false), Span(19,20,List(5),anyone,anyone,false), Span(17,18,List(6),run,run-02,false), Span(12,13,List(7),such,such,false), Span(11,12,List(8),and,and,false), Span(9,10,List(9),understood,understand-01,false), Span(8,9,List(10),little,little,false), Span(7,8,List(11),so,so,false), Span(5,6,List(12),baobabs,baobab,false), Span(2,3,List(13),danger,danger,false), Span(0,1,List(14),But,contrast-01,false)),Map(2 -> once, 5 -> anyone, 12 -> baobab, 8 -> and, 7 -> such, 1 -> i, 4 -> get-01, 11 -> so, 14 -> contrast-01, 6 -> run-02, 0 -> through, 9 -> understand-01, 3 -> lose-02, 10 -> little, 13 -> danger),Map(s2 -> so, t -> through, b -> baobab, s -> such, d -> danger, g -> get-01, a -> anyone, l2 -> little, i -> i, r -> run-02, a2 -> and, c -> contrast-01, l -> lose-02, u -> understand-01, o -> once))),[Ljava.lang.String;@222a59e6,Annotation([Ljava.lang.String;@6c7a164b,[Ljava.lang.String;@4c2bb6e0,[Ljava.lang.String;@3e62d773),Annotation([Ljava.lang.String;@4ef74c30,[Ljava.lang.String;@7283d3eb,[Ledu.cmu.lti.nlp.amr.Dependency;@638ef7ed),Annotation([Ljava.lang.String;@4bff7da0,[Ljava.lang.String;@3f1d2e23,[Ljava.lang.String;@536dbea0),Annotation([Ljava.lang.String;@47c81abf,[Ljava.lang.String;@776a6d9b,[Ledu.cmu.lti.nlp.amr.Entity;@21d03963))
AMR:
(a2 / and, op, r / run-02)
(a2 / and, op, u / understand-01)
(c / contrast-01, ARG0, o / once)
(c / contrast-01, ARG2, a2 / and)
(g / get-01, ARG1, l / lose-02)
(l / lose-02, ARG0, a / anyone)
(l / lose-02, ARG1, t / through)
(l / lose-02, ARG2, i / i)
(l2 / little, degree, s2 / so)
(r / run-02, ARG0, b / baobab)
(r / run-02, ARG1, s / such)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, d / danger)
(u / understand-01, time, l2 / little)

Decoded in 624,575 microseconds
Sentence: " Children , "

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  Children => child

Extra span:  => amr-empty
Missing span: Children => child
Dependencies:
1	"	_	JJ	JJ	_	2	amod	_	_
2	Children	_	NN	NN	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	"	_	''	''	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@1f760b47,Annotation([Ljava.lang.String;@18ece7f4,[Ljava.lang.String;@3cce57c7,[Ljava.lang.String;@1cf56a1c),Annotation([Ljava.lang.String;@33f676f6,[Ljava.lang.String;@4c5ae43b,[Ledu.cmu.lti.nlp.amr.Dependency;@264f218),Annotation([Ljava.lang.String;@3576ddc2,[Ljava.lang.String;@35b74c5c,[Ljava.lang.String;@2e570ded),Annotation([Ljava.lang.String;@b86de0d,[Ljava.lang.String;@81d9a72,[Ledu.cmu.lti.nlp.amr.Entity;@747f281))
AMR:


Decoded in 2,620 microseconds
Sentence: I say plainly , " watch out for the baobabs ! "

Spans:
Span 9-10:  baobabs => baobab
Span 0-1:  I => i
Span 1-2:  say => say-01
Span 5-6:  watch => watch-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 9-10:  baobabs => baobab
Oracle Span 0-1:  I => i
Oracle Span 2-3:  plainly => plain
Oracle Span 1-2:  say => say-01
Oracle Span 5-6:  watch => watch-out-02

Incorrect span: watch => watch-01
Missing span: plainly => plain
Missing span: watch => watch-out-02
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	say	_	VBP	VBP	_	6	ccomp	_	_
3	plainly	_	RB	RB	_	2	advmod	_	_
4	,	_	,	,	_	6	punct	_	_
5	"	_	''	''	_	6	punct	_	_
6	watch	_	VBP	VBP	_	0	root	_	_
7	out	_	RP	RP	_	6	prt	_	_
8	for	_	IN	IN	_	6	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	baobabs	_	NNS	NNS	_	8	pobj	_	_
11	!	_	.	.	_	6	punct	_	_
12	"	_	''	''	_	6	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, w / watch-out-02)
(s / say-01, manner, p / plain)
(w / watch-out-02, ARG1, b / baobab)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),baobabs,baobab,false), Span(5,6,List(1),watch,watch-01,false), Span(1,2,List(2),say,say-01,false), Span(0,1,List(3),I,i,false)),Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i),Map(w -> watch-01, b -> baobab, s -> say-01, i -> i))),[Ljava.lang.String;@1169afe1,Annotation([Ljava.lang.String;@2ca26d77,[Ljava.lang.String;@4808bc9b,[Ljava.lang.String;@70e38ce1),Annotation([Ljava.lang.String;@2ca923bb,[Ljava.lang.String;@13df2a8c,[Ledu.cmu.lti.nlp.amr.Dependency;@1ebea008),Annotation([Ljava.lang.String;@72d6b3ba,[Ljava.lang.String;@1787f2a0,[Ljava.lang.String;@7de62196),Annotation([Ljava.lang.String;@163370c2,[Ljava.lang.String;@51bf5add,[Ledu.cmu.lti.nlp.amr.Entity;@7905a0b8))
AMR:
(s / say-01, ARG2, i / i)
(w / watch-01, ARG0, i / i)
(w / watch-01, ARG1, b / baobab)

Decoded in 21,843 microseconds
Sentence: My friends , like myself , have been skirting this danger for a long time , without ever knowing it ; and so it is for them that I have worked so hard over this drawing .

Spans:
Span 20-21:  ; => and
Span 21-22:  and => and
Span 10-11:  danger => danger
Span 17-18:  ever => ever
Span 1-2:  friends => (have-rel-role-91 :ARG2 friend)
Span 28-29:  I => i
Span 23-24:  it => it
Span 19-20:  it => it
Span 13-14:  long => long-03
Span 31-32:  so => so
Span 22-23:  so => so
Span 34-35:  this => this
Span 9-10:  this => this
Span 14-15:  time => time

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 20-21:  ; => and
Oracle Span 10-11:  danger => danger
Oracle Span 35-36:  drawing => draw-01
Oracle Span 17-18:  ever => ever
Oracle Span 1-2:  friends => friend
Oracle Span 32-33:  hard => hard-02
Oracle Span 6-7:  have => (person :ARG0-of have-rel-role-91)
Oracle Span 28-29:  I => i
Oracle Span 18-19:  knowing => know-01
Oracle Span 13-14:  long => long-03
Oracle Span 8-9:  skirting => skirt-02
Oracle Span 22-23:  so => so
Oracle Span 9-10:  this => this
Oracle Span 34-35:  this => this
Oracle Span 30-31:  worked => work-01

Extra span: so => so
Extra span: it => it
Extra span: and => and
Extra span: it => it
Extra span: time => time
Incorrect span: friends => (have-rel-role-91 :ARG2 friend)
Missing span: skirting => skirt-02
Missing span: knowing => know-01
Missing span: friends => friend
Missing span: worked => work-01
Missing span: hard => hard-02
Missing span: drawing => draw-01
Missing span: have => (person :ARG0-of have-rel-role-91)
Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	friends	_	NNS	NNS	_	9	nsubj	_	_
3	,	_	,	,	_	9	punct	_	_
4	like	_	IN	IN	_	9	prep	_	_
5	myself	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	have	_	VBP	VBP	_	9	aux	_	_
8	been	_	VBN	VBN	_	9	aux	_	_
9	skirting	_	VBG	VBG	_	0	root	_	_
10	this	_	DT	DT	_	11	det	_	_
11	danger	_	NN	NN	_	9	dobj	_	_
12	for	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	long	_	JJ	JJ	_	15	amod	_	_
15	time	_	NN	NN	_	12	pobj	_	_
16	,	_	,	,	_	9	punct	_	_
17	without	_	IN	IN	_	9	prep	_	_
18	ever	_	RB	RB	_	19	advmod	_	_
19	knowing	_	VBG	VBG	_	17	pcomp	_	_
20	it	_	PRP	PRP	_	19	dobj	_	_
21	;	_	:	:	_	9	punct	_	_
22	and	_	CC	CC	_	9	cc	_	_
23	so	_	IN	IN	_	25	dep	_	_
24	it	_	PRP	PRP	_	25	nsubj	_	_
25	is	_	VBZ	VBZ	_	9	conj	_	_
26	for	_	IN	IN	_	25	prep	_	_
27	them	_	PRP	PRP	_	26	pobj	_	_
28	that	_	IN	IN	_	31	mark	_	_
29	I	_	PRP	PRP	_	31	nsubj	_	_
30	have	_	VBP	VBP	_	31	aux	_	_
31	worked	_	VBN	VBN	_	25	ccomp	_	_
32	so	_	RB	RB	_	33	advmod	_	_
33	hard	_	JJ	JJ	_	31	acomp	_	_
34	over	_	IN	IN	_	31	prep	_	_
35	this	_	DT	DT	_	36	det	_	_
36	drawing	_	NN	NN	_	34	pobj	_	_
37	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, i / i)
(a / and, op, p2 / person)
(d / danger, mod, t / this)
(h / hard-02, ARG1, w / work-01)
(h / hard-02, degree, s2 / so)
(h2 / have-rel-role-91, ARG0, p2 / person)
(h2 / have-rel-role-91, ARG1, i / i)
(h2 / have-rel-role-91, ARG2, f / friend)
(k / know-01, ARG0, p2 / person)
(k / know-01, ARG1, s / skirt-02)
(k / know-01, time, e / ever)
(l / long-03, ARG1, s / skirt-02)
(s / skirt-02, ARG0, a / and)
(s / skirt-02, ARG1, d / danger)
(w / work-01, ARG0, i / i)
(w / work-01, beneficiary, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),this,this,false), Span(31,32,List(1),so,so,false), Span(28,29,List(2),I,i,false), Span(23,24,List(3),it,it,false), Span(22,23,List(4),so,so,false), Span(21,22,List(5),and,and,false), Span(20,21,List(6),;,and,false), Span(19,20,List(7),it,it,false), Span(17,18,List(8),ever,ever,false), Span(14,15,List(9),time,time,false), Span(13,14,List(10),long,long-03,false), Span(10,11,List(11),danger,danger,false), Span(9,10,List(12),this,this,false), Span(1,2,List(14, 13),friends,(have-rel-role-91 :ARG2 friend),false)),Map(2 -> i, 5 -> and, 12 -> this, 8 -> ever, 7 -> it, 1 -> so, 4 -> so, 11 -> danger, 14 -> friend, 6 -> and, 0 -> this, 9 -> time, 3 -> it, 10 -> long-03, 13 -> have-rel-role-91),Map(e -> ever, h -> have-rel-role-91, s2 -> so, t -> this, s -> so, d -> danger, i3 -> it, t3 -> this, a -> and, i2 -> it, t2 -> time, i -> i, a2 -> and, l -> long-03, f -> friend))),[Ljava.lang.String;@35a3d49f,Annotation([Ljava.lang.String;@389b0789,[Ljava.lang.String;@13d9cbf5,[Ljava.lang.String;@478db956),Annotation([Ljava.lang.String;@6ca18a14,[Ljava.lang.String;@c667f46,[Ledu.cmu.lti.nlp.amr.Dependency;@51bd8b5c),Annotation([Ljava.lang.String;@7b50df34,[Ljava.lang.String;@1b410b60,[Ljava.lang.String;@2462cb01),Annotation([Ljava.lang.String;@19b843ba,[Ljava.lang.String;@64ec96c6,[Ledu.cmu.lti.nlp.amr.Entity;@77659b30))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, i3 / it)
(d / danger, mod, t3 / this)
(e / ever, op, i3 / it)
(h / have-rel-role-91, ARG0, i2 / it)
(h / have-rel-role-91, ARG1, i / i)
(h / have-rel-role-91, ARG2, f / friend)
(h / have-rel-role-91, concession, d / danger)
(h / have-rel-role-91, mod, i3 / it)
(i2 / it, mod, s2 / so)
(l / long-03, ARG0, t / this)
(l / long-03, ARG1, t2 / time)
(l / long-03, condition, h / have-rel-role-91)
(l / long-03, mod, s / so)

Decoded in 464,666 microseconds
Sentence: The lesson which I pass on by this means is worth all the trouble it has cost me .

Spans:
Span 11-12:  all => all
Span 15-16:  has => have-03
Span 3-4:  I => i
Span 14-15:  it => it
Span 8-9:  means => mean-01
Span 7-8:  this => this
Span 13-14:  trouble => trouble-01
Span 10-11:  worth => worth-02

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 11-12:  all => all
Oracle Span 16-17:  cost => cost-01
Oracle Span 3-4:  I => i
Oracle Span 1-2:  lesson => lesson
Oracle Span 4-5:  pass => pass-on-09
Oracle Span 7-8:  this => this
Oracle Span 13-14:  trouble => trouble
Oracle Span 10-11:  worth => worth-02

Extra span: has => have-03
Extra span: it => it
Incorrect span: trouble => trouble-01
Extra span: means => mean-01
Missing span: trouble => trouble
Missing span: cost => cost-01
Missing span: lesson => lesson
Missing span: pass => pass-on-09
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	lesson	_	NN	NN	_	11	nsubj	_	_
3	which	_	WDT	WDT	_	5	dobj	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	pass	_	VBP	VBP	_	2	rcmod	_	_
6	on	_	RP	RP	_	5	prt	_	_
7	by	_	IN	IN	_	5	prep	_	_
8	this	_	DT	DT	_	9	det	_	_
9	means	_	NNS	NNS	_	7	pobj	_	_
10	is	_	VBZ	VBZ	_	11	cop	_	_
11	worth	_	JJ	JJ	_	0	root	_	_
12	all	_	PDT	PDT	_	14	predet	_	_
13	the	_	DT	DT	_	14	det	_	_
14	trouble	_	NN	NN	_	11	dep	_	_
15	it	_	PRP	PRP	_	17	nsubj	_	_
16	has	_	VBZ	VBZ	_	17	aux	_	_
17	cost	_	VBN	VBN	_	14	rcmod	_	_
18	me	_	PRP	PRP	_	17	dobj	_	_
19	.	_	.	.	_	11	punct	_	_

Oracle:
(c / cost-01, ARG1, l / lesson)
(c / cost-01, ARG2, t / trouble)
(c / cost-01, ARG3, i / i)
(p / pass-on-09, ARG0, i / i)
(p / pass-on-09, ARG1, l / lesson)
(p / pass-on-09, manner, t2 / this)
(t / trouble, mod, a / all)
(w / worth-02, ARG1, l / lesson)
(w / worth-02, ARG2, t / trouble)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),has,have-03,false), Span(14,15,List(1),it,it,false), Span(13,14,List(2),trouble,trouble-01,false), Span(11,12,List(3),all,all,false), Span(10,11,List(4),worth,worth-02,false), Span(8,9,List(5),means,mean-01,false), Span(7,8,List(6),this,this,false), Span(3,4,List(7),I,i,false)),Map(2 -> trouble-01, 5 -> mean-01, 7 -> i, 1 -> it, 4 -> worth-02, 6 -> this, 0 -> have-03, 3 -> all),Map(w -> worth-02, h -> have-03, t -> trouble-01, m -> mean-01, a -> all, i2 -> i, t2 -> this, i -> it))),[Ljava.lang.String;@456d6c1e,Annotation([Ljava.lang.String;@1e13529a,[Ljava.lang.String;@1ec9bd38,[Ljava.lang.String;@452e19ca),Annotation([Ljava.lang.String;@6b0d80ed,[Ljava.lang.String;@6f8e8894,[Ledu.cmu.lti.nlp.amr.Dependency;@3cfdd820),Annotation([Ljava.lang.String;@928763c,[Ljava.lang.String;@e25951c,[Ljava.lang.String;@15f47664),Annotation([Ljava.lang.String;@471a9022,[Ljava.lang.String;@dc9876b,[Ledu.cmu.lti.nlp.amr.Entity;@2f666ebb))
AMR:
(h / have-03, ARG0, i / it)
(h / have-03, ARG1, t / trouble-01)
(m / mean-01, ARG0, i2 / i)
(m / mean-01, ARG1, t2 / this)
(m / mean-01, ARG2, w / worth-02)
(t / trouble-01, ARG1, a / all)
(w / worth-02, ARG1, a / all)

Decoded in 73,233 microseconds
Sentence: Perhaps you will ask me , " Why are there no other drawing in this book as magnificent and impressive as this drawing of the baobabs ? "

Spans:
Span 18-19:  and => and
Span 3-4:  ask => ask-02
Span 25-26:  baobabs => baobab
Span 15-16:  book => book
Span 17-18:  magnificent => magnificent
Span 10-11:  no => -
Span 11-12:  other => other
Span 9-10:  there => there
Span 21-22:  this => this
Span 14-15:  this => this
Span 1-2:  you => you

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 3-4:  ask => ask-01
Oracle Span 25-26:  baobabs => baobab
Oracle Span 15-16:  book => book
Oracle Span 12-13:  drawing => draw-01
Oracle Span 22-23:  drawing => draw-01
Oracle Span 19-20:  impressive => impress-01
Oracle Span 17-18:  magnificent => magnificent
Oracle Span 10-11:  no => -
Oracle Span 11-12:  other => other
Oracle Span 14-15:  this => this
Oracle Span 21-22:  this => this
Oracle Span 1-2:  you => you

Extra span: and => and
Extra span: there => there
Incorrect span: ask => ask-02
Missing span: ask => ask-01
Missing span: drawing => draw-01
Missing span: drawing => draw-01
Missing span: impressive => impress-01
Dependencies:
1	Perhaps	_	RB	RB	_	4	advmod	_	_
2	you	_	PRP	PRP	_	4	nsubj	_	_
3	will	_	MD	MD	_	4	aux	_	_
4	ask	_	VB	VB	_	0	root	_	_
5	me	_	PRP	PRP	_	4	dobj	_	_
6	,	_	,	,	_	4	punct	_	_
7	"	_	''	''	_	4	punct	_	_
8	Why	_	WRB	WRB	_	13	advmod	_	_
9	are	_	VBP	VBP	_	13	cop	_	_
10	there	_	RB	RB	_	13	advmod	_	_
11	no	_	DT	DT	_	13	det	_	_
12	other	_	JJ	JJ	_	13	amod	_	_
13	drawing	_	NN	NN	_	4	advcl	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	this	_	DT	DT	_	16	det	_	_
16	book	_	NN	NN	_	14	pobj	_	_
17	as	_	IN	IN	_	16	prep	_	_
18	magnificent	_	NNP	NNP	_	17	pobj	_	_
19	and	_	CC	CC	_	4	cc	_	_
20	impressive	_	JJ	JJ	_	4	conj	_	_
21	as	_	IN	IN	_	20	prep	_	_
22	this	_	DT	DT	_	23	det	_	_
23	drawing	_	NN	NN	_	21	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	baobabs	_	NNS	NNS	_	24	pobj	_	_
27	?	_	.	.	_	4	punct	_	_
28	"	_	''	''	_	4	punct	_	_

Oracle:
(a / ask-01, ARG0, y / you)
(b / book, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),baobabs,baobab,false), Span(21,22,List(1),this,this,false), Span(18,19,List(2),and,and,false), Span(17,18,List(3),magnificent,magnificent,false), Span(15,16,List(4),book,book,false), Span(14,15,List(5),this,this,false), Span(11,12,List(6),other,other,false), Span(10,11,List(7),no,-,false), Span(9,10,List(8),there,there,false), Span(3,4,List(9),ask,ask-02,false), Span(1,2,List(10),you,you,false)),Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent),Map(t -> this, b -> baobab, b2 -> book, m -> magnificent, y -> you, t3 -> there, a -> and, t2 -> this, a2 -> ask-02, - -> -, o -> other))),[Ljava.lang.String;@19976a65,Annotation([Ljava.lang.String;@a1f72f5,[Ljava.lang.String;@4b2c5e02,[Ljava.lang.String;@57a3e26a),Annotation([Ljava.lang.String;@75c56eb9,[Ljava.lang.String;@4bc222e,[Ledu.cmu.lti.nlp.amr.Dependency;@2dc9b0f5),Annotation([Ljava.lang.String;@6531a794,[Ljava.lang.String;@3b5fad2d,[Ljava.lang.String;@5e17553a),Annotation([Ljava.lang.String;@3eb91815,[Ljava.lang.String;@56dc1551,[Ledu.cmu.lti.nlp.amr.Entity;@102cec62))
AMR:
(- / -, mod, t3 / there)
(a / and, op, a2 / ask-02)
(a2 / ask-02, ARG0, y / you)
(a2 / ask-02, ARG1, t3 / there)
(a2 / ask-02, ARG2, b / baobab)
(a2 / ask-02, accompanier, b2 / book)
(a2 / ask-02, mod, t / this)
(b2 / book, domain, m / magnificent)
(b2 / book, mod, t2 / this)
(o / other, mod, - / -)

Decoded in 146,592 microseconds
Sentence: The reply is simple .

Spans:
Span 1-2:  reply => reply-01
Span 3-4:  simple => simple-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  reply => (thing :ARG2-of reply-01)
Oracle Span 3-4:  simple => simple-02

Incorrect span: reply => reply-01
Missing span: reply => (thing :ARG2-of reply-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	reply	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	simple	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:
(r / reply-01, ARG2, t / thing)
(s / simple-02, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),simple,simple-02,false), Span(1,2,List(1),reply,reply-01,false)),Map(1 -> reply-01, 0 -> simple-02),Map(s -> simple-02, r -> reply-01))),[Ljava.lang.String;@74f6c5d8,Annotation([Ljava.lang.String;@27912e3,[Ljava.lang.String;@34b9f960,[Ljava.lang.String;@43015c69),Annotation([Ljava.lang.String;@19b89d4,[Ljava.lang.String;@4bbf6d0e,[Ledu.cmu.lti.nlp.amr.Dependency;@30b6ffe0),Annotation([Ljava.lang.String;@791d1f8b,[Ljava.lang.String;@2415fc55,[Ljava.lang.String;@14f232c4),Annotation([Ljava.lang.String;@13bc8645,[Ljava.lang.String;@24c22fe,[Ledu.cmu.lti.nlp.amr.Entity;@93081b6))
AMR:
(s / simple-02, ARG1, r / reply-01)

Decoded in 5,524 microseconds
Sentence: I have tried .

Spans:
Span 0-1:  I => i

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 2-3:  tried => try-01

Missing span: tried => try-01
Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	tried	_	VBN	VBN	_	0	root	_	_
4	.	_	.	.	_	3	punct	_	_

Oracle:
(t / try-01, ARG0, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),I,i,false)),Map(0 -> i),Map(i -> i))),[Ljava.lang.String;@cd1e646,Annotation([Ljava.lang.String;@7ba8c737,[Ljava.lang.String;@1890516e,[Ljava.lang.String;@15a04efb),Annotation([Ljava.lang.String;@16c069df,[Ljava.lang.String;@2bec854f,[Ledu.cmu.lti.nlp.amr.Dependency;@31edaa7d),Annotation([Ljava.lang.String;@26adfd2d,[Ljava.lang.String;@3336e6b6,[Ljava.lang.String;@7c3fdb62),Annotation([Ljava.lang.String;@205d38da,[Ljava.lang.String;@6950ed69,[Ledu.cmu.lti.nlp.amr.Entity;@6dd7b5a3))
AMR:


Decoded in 2,528 microseconds
Sentence: But with the others I have not been successful .

Spans:
Span 0-1:  But => contrast-01
Span 4-5:  I => i
Span 3-4:  others => other
Span 8-9:  successful => succeed-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 4-5:  I => i
Oracle Span 3-4:  others => other
Oracle Span 8-9:  successful => succeed-01

Dependencies:
1	But	_	CC	CC	_	9	cc	_	_
2	with	_	IN	IN	_	9	prep	_	_
3	the	_	DT	DT	_	4	det	_	_
4	others	_	NNS	NNS	_	2	pobj	_	_
5	I	_	PRP	PRP	_	9	nsubj	_	_
6	have	_	VBP	VBP	_	9	aux	_	_
7	not	_	RB	RB	_	9	neg	_	_
8	been	_	VBN	VBN	_	9	cop	_	_
9	successful	_	JJ	JJ	_	0	root	_	_
10	.	_	.	.	_	9	punct	_	_

Oracle:
(c / contrast-01, ARG2, s / succeed-01)
(s / succeed-01, ARG0, i / i)
(s / succeed-01, ARG1, o / other)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),successful,succeed-01,false), Span(4,5,List(1),I,i,false), Span(3,4,List(2),others,other,false), Span(0,1,List(3),But,contrast-01,false)),Map(2 -> other, 1 -> i, 0 -> succeed-01, 3 -> contrast-01),Map(s -> succeed-01, i -> i, c -> contrast-01, o -> other))),[Ljava.lang.String;@6f3187b0,Annotation([Ljava.lang.String;@2663e964,[Ljava.lang.String;@48b67364,[Ljava.lang.String;@189cbd7c),Annotation([Ljava.lang.String;@7bf3a5d8,[Ljava.lang.String;@42e25b0b,[Ledu.cmu.lti.nlp.amr.Dependency;@39b43d60),Annotation([Ljava.lang.String;@44be0077,[Ljava.lang.String;@2205a05d,[Ljava.lang.String;@72ef8d15),Annotation([Ljava.lang.String;@6aa8e115,[Ljava.lang.String;@5e21e98f,[Ledu.cmu.lti.nlp.amr.Entity;@51a9ad5e))
AMR:
(c / contrast-01, ARG1, o / other)
(c / contrast-01, ARG2, s / succeed-01)
(s / succeed-01, ARG1, i / i)

Decoded in 15,023 microseconds
Sentence: When I made the drawing of the baobabs I was carried beyond myself by the inspiring force of urgent necessity .

Spans:
Span 7-8:  baobabs => baobab
Span 11-12:  beyond => beyond
Span 8-9:  I => i
Span 1-2:  I => i

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  baobabs => baobab
Oracle Span 11-12:  beyond => beyond
Oracle Span 10-11:  carried => carry-01
Oracle Span 4-5:  drawing => draw-01
Oracle Span 16-17:  force => force-01
Oracle Span 1-2:  I => i
Oracle Span 15-16:  inspiring => inspire-01
Oracle Span 19-20:  necessity => necessity
Oracle Span 18-19:  urgent => urgent

Extra span: I => i
Missing span: carried => carry-01
Missing span: drawing => draw-01
Missing span: force => force-01
Missing span: inspiring => inspire-01
Missing span: necessity => necessity
Missing span: urgent => urgent
Dependencies:
1	When	_	WRB	WRB	_	3	advmod	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	made	_	VBD	VBD	_	11	advcl	_	_
4	the	_	DT	DT	_	5	det	_	_
5	drawing	_	NN	NN	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	baobabs	_	NNS	NNS	_	6	pobj	_	_
9	I	_	PRP	PRP	_	11	nsubjpass	_	_
10	was	_	VBD	VBD	_	11	auxpass	_	_
11	carried	_	VBN	VBN	_	0	root	_	_
12	beyond	_	IN	IN	_	11	prep	_	_
13	myself	_	PRP	PRP	_	12	pobj	_	_
14	by	_	IN	IN	_	11	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	inspiring	_	JJ	JJ	_	17	amod	_	_
17	force	_	NN	NN	_	14	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	urgent	_	JJ	JJ	_	20	amod	_	_
20	necessity	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	11	punct	_	_

Oracle:
(b / beyond, op, i / i)
(c / carry-01, ARG0, f / force-01)
(c / carry-01, ARG1, i / i)
(c / carry-01, destination, b / beyond)
(c / carry-01, time, d / draw-01)
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, b2 / baobab)
(f / force-01, ARG0, n / necessity)
(i2 / inspire-01, ARG0, f / force-01)
(n / necessity, mod, u / urgent)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),beyond,beyond,false), Span(8,9,List(1),I,i,false), Span(7,8,List(2),baobabs,baobab,false), Span(1,2,List(3),I,i,false)),Map(2 -> baobab, 1 -> i, 0 -> beyond, 3 -> i),Map(b -> beyond, b2 -> baobab, i2 -> i, i -> i))),[Ljava.lang.String;@5f20155b,Annotation([Ljava.lang.String;@72ade7e3,[Ljava.lang.String;@239105a8,[Ljava.lang.String;@3fce8fd9),Annotation([Ljava.lang.String;@609bcfb6,[Ljava.lang.String;@7d94beb9,[Ledu.cmu.lti.nlp.amr.Dependency;@560348e6),Annotation([Ljava.lang.String;@1df8b5b8,[Ljava.lang.String;@23202fce,[Ljava.lang.String;@7b993c65),Annotation([Ljava.lang.String;@37911f88,[Ljava.lang.String;@6f1c29b7,[Ledu.cmu.lti.nlp.amr.Entity;@4d6025c5))
AMR:
(b2 / baobab, poss, i / i)
(b2 / baobab, poss, i2 / i)
(i / i, op, b / beyond)

Decoded in 34,402 microseconds
Sentence: Chapter 6 .

Spans:
Span 0-1:  Chapter => chapter

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  6 => 6
Oracle Span 0-1:  Chapter => chapter

Missing span: 6 => 6
Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	6	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 6 / 6)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false)),Map(0 -> chapter),Map(c -> chapter))),[Ljava.lang.String;@7f284218,Annotation([Ljava.lang.String;@407a7f2a,[Ljava.lang.String;@4ea5b703,[Ljava.lang.String;@2a7ed1f),Annotation([Ljava.lang.String;@3fa247d1,[Ljava.lang.String;@2cb2fc20,[Ledu.cmu.lti.nlp.amr.Dependency;@4f4c4b1a),Annotation([Ljava.lang.String;@723e88f9,[Ljava.lang.String;@5f0fd5a0,[Ljava.lang.String;@64e7619d),Annotation([Ljava.lang.String;@495ee280,[Ljava.lang.String;@4fa1c212,[Ledu.cmu.lti.nlp.amr.Entity;@6ea2bc93))
AMR:


Decoded in 3,030 microseconds
Sentence: Oh , little prince !

Spans:
Span 2-3:  little => little
Span 0-1:  Oh => oh
Span 3-4:  prince => prince

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  little => little
Oracle Span 3-4:  prince => prince

Extra span: Oh => oh
Dependencies:
1	Oh	_	UH	UH	_	4	discourse	_	_
2	,	_	,	,	_	4	punct	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	0	root	_	_
5	!	_	.	.	_	4	punct	_	_

Oracle:
(p / prince, mod, l / little)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),prince,prince,false), Span(2,3,List(1),little,little,false), Span(0,1,List(2),Oh,oh,false)),Map(2 -> oh, 1 -> little, 0 -> prince),Map(p -> prince, l -> little, o -> oh))),[Ljava.lang.String;@3116c353,Annotation([Ljava.lang.String;@f627d13,[Ljava.lang.String;@4e928fbf,[Ljava.lang.String;@352ff4da),Annotation([Ljava.lang.String;@3224a577,[Ljava.lang.String;@2e32ccc5,[Ledu.cmu.lti.nlp.amr.Dependency;@748741cb),Annotation([Ljava.lang.String;@3e44f2a5,[Ljava.lang.String;@295cf707,[Ljava.lang.String;@1130520d),Annotation([Ljava.lang.String;@5f77d0f9,[Ljava.lang.String;@463fd068,[Ledu.cmu.lti.nlp.amr.Entity;@895e367))
AMR:
(l / little, op, o / oh)
(p / prince, mod, l / little)

Decoded in 6,630 microseconds
Sentence: Bit by bit I came to understand the secrets of your sad little life ...

Spans:
Span 2-3:  bit => bit
Span 4-5:  came => come-01
Span 3-4:  I => i
Span 13-14:  life => life
Span 12-13:  little => little
Span 11-12:  sad => sad-02
Span 6-7:  understand => understand-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 3-4:  I => i
Oracle Span 13-14:  life => life
Oracle Span 12-13:  little => little
Oracle Span 11-12:  sad => sad-02
Oracle Span 8-9:  secrets => secret
Oracle Span 6-7:  understand => understand-01

Extra span: came => come-01
Extra span: bit => bit
Missing span: secrets => secret
Dependencies:
1	Bit	_	NN	NN	_	0	root	_	_
2	by	_	IN	IN	_	1	prep	_	_
3	bit	_	NN	NN	_	2	pobj	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	came	_	VBD	VBD	_	3	rcmod	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	understand	_	VB	VB	_	5	xcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	secrets	_	NNS	NNS	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	your	_	PRP$	PRP$	_	14	poss	_	_
12	sad	_	JJ	JJ	_	14	amod	_	_
13	little	_	JJ	JJ	_	14	amod	_	_
14	life	_	NN	NN	_	10	pobj	_	_
15	...	_	:	:	_	2	punct	_	_

Oracle:
(l / life, mod, l2 / little)
(s / secret, poss, l / life)
(s2 / sad-02, ARG1, l / life)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, s / secret)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),life,life,false), Span(12,13,List(1),little,little,false), Span(11,12,List(2),sad,sad-02,false), Span(6,7,List(3),understand,understand-01,false), Span(4,5,List(4),came,come-01,false), Span(3,4,List(5),I,i,false), Span(2,3,List(6),bit,bit,false)),Map(2 -> sad-02, 5 -> i, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01),Map(b -> bit, s -> sad-02, i -> i, l2 -> little, c -> come-01, u -> understand-01, l -> life))),[Ljava.lang.String;@1b266842,Annotation([Ljava.lang.String;@7a3793c7,[Ljava.lang.String;@42b3b079,[Ljava.lang.String;@651aed93),Annotation([Ljava.lang.String;@4dd6fd0a,[Ljava.lang.String;@bb9e6dc,[Ledu.cmu.lti.nlp.amr.Dependency;@5456afaa),Annotation([Ljava.lang.String;@6692b6c6,[Ljava.lang.String;@1cd629b3,[Ljava.lang.String;@589da3f3),Annotation([Ljava.lang.String;@39d76cb5,[Ljava.lang.String;@4a00d9cf,[Ledu.cmu.lti.nlp.amr.Entity;@6736fa8d))
AMR:
(c / come-01, ARG1, b / bit)
(c / come-01, ARG2, i / i)
(l / life, mod, l2 / little)
(s / sad-02, ARG1, l / life)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, l / life)

Decoded in 45,238 microseconds
Sentence: For a long time you had found your only entertainment in the quiet pleasure of looking at the sunset .

Spans:
Span 6-7:  found => find-01
Span 2-3:  long => long-03
Span 15-16:  looking => look-01
Span 8-9:  only => only
Span 13-14:  pleasure => pleasure
Span 12-13:  quiet => quiet-04
Span 18-19:  sunset => sunset
Span 3-4:  time => time
Span 4-5:  you => you

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 9-10:  entertainment => entertain-01
Oracle Span 6-7:  found => find-01
Oracle Span 2-3:  long => long-03
Oracle Span 15-16:  looking => look-01
Oracle Span 8-9:  only => only
Oracle Span 13-14:  pleasure => pleasure
Oracle Span 12-13:  quiet => quiet-04
Oracle Span 18-19:  sunset => sunset
Oracle Span 4-5:  you => you

Extra span: time => time
Missing span: entertainment => entertain-01
Dependencies:
1	For	_	IN	IN	_	7	prep	_	_
2	a	_	DT	DT	_	4	det	_	_
3	long	_	JJ	JJ	_	4	amod	_	_
4	time	_	NN	NN	_	1	pobj	_	_
5	you	_	PRP	PRP	_	7	nsubj	_	_
6	had	_	VBD	VBD	_	7	aux	_	_
7	found	_	VBN	VBN	_	0	root	_	_
8	your	_	PRP$	PRP$	_	10	poss	_	_
9	only	_	JJ	JJ	_	10	amod	_	_
10	entertainment	_	NN	NN	_	7	dobj	_	_
11	in	_	IN	IN	_	7	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	quiet	_	JJ	JJ	_	14	amod	_	_
14	pleasure	_	NN	NN	_	11	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	looking	_	VBG	VBG	_	15	pcomp	_	_
17	at	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	sunset	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(e / entertain-01, ARG0, l2 / look-01)
(e / entertain-01, ARG1, y / you)
(e / entertain-01, mod, o / only)
(f / find-01, ARG0, y / you)
(f / find-01, ARG1, e / entertain-01)
(l / long-03, ARG1, f / find-01)
(l2 / look-01, ARG0, y / you)
(l2 / look-01, ARG1, s / sunset)
(l2 / look-01, mod, p / pleasure)
(q / quiet-04, ARG1, p / pleasure)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),sunset,sunset,false), Span(15,16,List(1),looking,look-01,false), Span(13,14,List(2),pleasure,pleasure,false), Span(12,13,List(3),quiet,quiet-04,false), Span(8,9,List(4),only,only,false), Span(6,7,List(5),found,find-01,false), Span(4,5,List(6),you,you,false), Span(3,4,List(7),time,time,false), Span(2,3,List(8),long,long-03,false)),Map(2 -> pleasure, 5 -> find-01, 8 -> long-03, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-04),Map(q -> quiet-04, t -> time, s -> sunset, y -> you, p -> pleasure, l2 -> long-03, l -> look-01, f -> find-01, o -> only))),[Ljava.lang.String;@52815fa3,Annotation([Ljava.lang.String;@50313382,[Ljava.lang.String;@1cb346ea,[Ljava.lang.String;@4c012563),Annotation([Ljava.lang.String;@14a50707,[Ljava.lang.String;@4d518b32,[Ledu.cmu.lti.nlp.amr.Dependency;@4bd31064),Annotation([Ljava.lang.String;@e3c0e40,[Ljava.lang.String;@329dbdbf,[Ljava.lang.String;@7354b8c5),Annotation([Ljava.lang.String;@20d7d6fb,[Ljava.lang.String;@4ef782af,[Ledu.cmu.lti.nlp.amr.Entity;@11d8ae8b))
AMR:
(f / find-01, ARG0, y / you)
(f / find-01, ARG1, o / only)
(f / find-01, location, p / pleasure)
(f / find-01, time, t / time)
(l / look-01, ARG1, s / sunset)
(l2 / long-03, ARG1, t / time)
(p / pleasure, purpose, l / look-01)
(q / quiet-04, ARG1, p / pleasure)

Decoded in 50,408 microseconds
Sentence: I learned that new detail on the morning of the fourth day , when you said to me : " I am very fond of sunsets .

Spans:
Span 11-12:  day => day
Span 20-21:  I => i
Span 0-1:  I => i
Span 1-2:  learned => learn-01
Span 7-8:  morning => morning
Span 3-4:  new => new-01
Span 15-16:  said => say-01
Span 25-26:  sunsets => sunset
Span 22-23:  very => very
Span 14-15:  you => you

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 11-12:  day => day
Oracle Span 4-5:  detail => detail
Oracle Span 0-1:  I => i
Oracle Span 1-2:  learned => learn-01
Oracle Span 7-8:  morning => morning
Oracle Span 3-4:  new => new-01
Oracle Span 15-16:  said => say-01
Oracle Span 25-26:  sunsets => sunset
Oracle Span 2-3:  that => that
Oracle Span 22-23:  very => very
Oracle Span 14-15:  you => you

Extra span: I => i
Missing span: detail => detail
Missing span: that => that
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	learned	_	VBD	VBD	_	0	root	_	_
3	that	_	DT	DT	_	5	det	_	_
4	new	_	JJ	JJ	_	5	amod	_	_
5	detail	_	NN	NN	_	2	dobj	_	_
6	on	_	IN	IN	_	2	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	morning	_	NN	NN	_	6	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	fourth	_	JJ	JJ	_	12	amod	_	_
12	day	_	NN	NN	_	9	pobj	_	_
13	,	_	,	,	_	2	punct	_	_
14	when	_	WRB	WRB	_	16	advmod	_	_
15	you	_	PRP	PRP	_	16	nsubj	_	_
16	said	_	VBD	VBD	_	2	advcl	_	_
17	to	_	TO	TO	_	16	prep	_	_
18	me	_	PRP	PRP	_	17	pobj	_	_
19	:	_	:	:	_	2	punct	_	_
20	"	_	''	''	_	2	punct	_	_
21	I	_	PRP	PRP	_	24	nsubj	_	_
22	am	_	VBP	VBP	_	24	cop	_	_
23	very	_	RB	RB	_	24	advmod	_	_
24	fond	_	JJ	JJ	_	2	ccomp	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	sunsets	_	NNS	NNS	_	25	pobj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(d / detail, mod, t / that)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, d / detail)
(l / learn-01, time, s / say-01)
(n / new-01, ARG1, d / detail)
(s / say-01, ARG0, y / you)
(s / say-01, ARG2, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),sunsets,sunset,false), Span(22,23,List(1),very,very,false), Span(20,21,List(2),I,i,false), Span(15,16,List(3),said,say-01,false), Span(14,15,List(4),you,you,false), Span(11,12,List(5),day,day,false), Span(7,8,List(6),morning,morning,false), Span(3,4,List(7),new,new-01,false), Span(1,2,List(8),learned,learn-01,false), Span(0,1,List(9),I,i,false)),Map(2 -> i, 5 -> day, 8 -> learn-01, 7 -> new-01, 1 -> very, 4 -> you, 6 -> morning, 9 -> i, 0 -> sunset, 3 -> say-01),Map(n -> new-01, s2 -> say-01, s -> sunset, m -> morning, d -> day, v -> very, y -> you, i2 -> i, i -> i, l -> learn-01))),[Ljava.lang.String;@479cbee5,Annotation([Ljava.lang.String;@59e2d8e3,[Ljava.lang.String;@2b72cb8a,[Ljava.lang.String;@7f8a9499),Annotation([Ljava.lang.String;@5d43661b,[Ljava.lang.String;@12299890,[Ledu.cmu.lti.nlp.amr.Dependency;@2fba3fc4),Annotation([Ljava.lang.String;@4bf48f6,[Ljava.lang.String;@420a85c4,[Ljava.lang.String;@1c39680d),Annotation([Ljava.lang.String;@62833051,[Ljava.lang.String;@1c852c0f,[Ledu.cmu.lti.nlp.amr.Entity;@a37aefe))
AMR:
(l / learn-01, ARG0, i2 / i)
(l / learn-01, ARG1, d / day)
(l / learn-01, ARG2, m / morning)
(l / learn-01, condition, s2 / say-01)
(n / new-01, ARG0, v / very)
(n / new-01, ARG1, l / learn-01)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, s / sunset)
(s2 / say-01, ARG2, i / i)

Decoded in 283,084 microseconds
Sentence: Come , let us go look at a sunset now . "

Spans:
Span 0-1:  Come => come-01
Span 4-5:  go => go-02
Span 2-3:  let => let-01
Span 5-6:  look => look-01
Span 9-10:  now => now
Span 8-9:  sunset => sunset

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 0-1:  Come => come-01
Oracle Span 4-5:  go => go-05
Oracle Span 5-6:  look => look-01
Oracle Span 9-10:  now => now
Oracle Span 8-9:  sunset => sunset

Incorrect span: go => go-02
Extra span: let => let-01
Missing span: go => go-05
Dependencies:
1	Come	_	VB	VB	_	0	root	_	_
2	,	_	,	,	_	1	punct	_	_
3	let	_	VB	VB	_	1	dep	_	_
4	us	_	PRP	PRP	_	5	nsubj	_	_
5	go	_	VB	VB	_	3	ccomp	_	_
6	look	_	VB	VB	_	5	dep	_	_
7	at	_	IN	IN	_	6	prep	_	_
8	a	_	DT	DT	_	9	det	_	_
9	sunset	_	NN	NN	_	7	pobj	_	_
10	now	_	RB	RB	_	6	advmod	_	_
11	.	_	.	.	_	1	punct	_	_
12	"	_	''	''	_	1	punct	_	_

Oracle:
(g / go-05, ARG1, l / look-01)
(l / look-01, ARG1, s / sunset)
(l / look-01, time, n / now)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),now,now,false), Span(8,9,List(1),sunset,sunset,false), Span(5,6,List(2),look,look-01,false), Span(4,5,List(3),go,go-02,false), Span(2,3,List(4),let,let-01,false), Span(0,1,List(5),Come,come-01,false)),Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02),Map(n -> now, s -> sunset, g -> go-02, l2 -> let-01, c -> come-01, l -> look-01))),[Ljava.lang.String;@5d99c6b5,Annotation([Ljava.lang.String;@266374ef,[Ljava.lang.String;@13b3d178,[Ljava.lang.String;@24c4ddae),Annotation([Ljava.lang.String;@37fb0bed,[Ljava.lang.String;@a82c5f1,[Ledu.cmu.lti.nlp.amr.Dependency;@7b7fdc8),Annotation([Ljava.lang.String;@51c693d,[Ljava.lang.String;@6a57ae10,[Ljava.lang.String;@766653e6),Annotation([Ljava.lang.String;@4e07b95f,[Ljava.lang.String;@28b46423,[Ledu.cmu.lti.nlp.amr.Entity;@7fc4780b))
AMR:
(c / come-01, ARG1, g / go-02)
(g / go-02, ARG0, n / now)
(g / go-02, ARG1, l / look-01)
(l / look-01, ARG1, s / sunset)
(l2 / let-01, ARG1, g / go-02)

Decoded in 63,351 microseconds
Sentence: " But we must wait , "

Spans:
Span 1-2:  But => contrast-01
Span 4-5:  wait => wait-01
Span 2-3:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  But => contrast-01
Oracle Span 4-5:  wait => wait-01
Oracle Span 2-3:  we => we

Dependencies:
1	"	_	NNP	NNP	_	2	nsubj	_	_
2	But	_	VBZ	VBZ	_	0	root	_	_
3	we	_	PRP	PRP	_	5	nsubj	_	_
4	must	_	MD	MD	_	5	aux	_	_
5	wait	_	VB	VB	_	2	ccomp	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_

Oracle:
(w2 / wait-01, ARG1, w / we)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),wait,wait-01,false), Span(2,3,List(1),we,we,false), Span(1,2,List(2),But,contrast-01,false)),Map(2 -> contrast-01, 1 -> we, 0 -> wait-01),Map(w -> wait-01, w2 -> we, c -> contrast-01))),[Ljava.lang.String;@3b79fd76,Annotation([Ljava.lang.String;@48c76607,[Ljava.lang.String;@43599640,[Ljava.lang.String;@1f81aa00),Annotation([Ljava.lang.String;@6b6776cb,[Ljava.lang.String;@1863d2fe,[Ledu.cmu.lti.nlp.amr.Dependency;@1787bc24),Annotation([Ljava.lang.String;@544d57e,[Ljava.lang.String;@55c53a33,[Ljava.lang.String;@53b7f657),Annotation([Ljava.lang.String;@797b0699,[Ljava.lang.String;@5a37d3ed,[Ledu.cmu.lti.nlp.amr.Entity;@26df6e3a))
AMR:
(c / contrast-01, ARG1, w / wait-01)
(w / wait-01, ARG0, w2 / we)

Decoded in 8,137 microseconds
Sentence: I said .

Spans:
Span 0-1:  I => i
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 1-2:  said => say-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	.	_	.	.	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),said,say-01,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> say-01),Map(s -> say-01, i -> i))),[Ljava.lang.String;@4a3631f8,Annotation([Ljava.lang.String;@6b58b9e9,[Ljava.lang.String;@f14a7d4,[Ljava.lang.String;@52e7a6b2),Annotation([Ljava.lang.String;@29a5f4e7,[Ljava.lang.String;@79c97cb,[Ledu.cmu.lti.nlp.amr.Dependency;@2d9caaeb),Annotation([Ljava.lang.String;@42a15bdc,[Ljava.lang.String;@44a59da3,[Ljava.lang.String;@27e47833),Annotation([Ljava.lang.String;@6f6745d6,[Ljava.lang.String;@27508c5d,[Ledu.cmu.lti.nlp.amr.Entity;@4f704591))
AMR:
(s / say-01, ARG0, i / i)

Decoded in 3,795 microseconds
Sentence: " Wait ?

Spans:
Span 1-2:  Wait => wait-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  Wait => wait-01

Dependencies:
1	"	_	WP	WP	_	2	nsubj	_	_
2	Wait	_	VBZ	VBZ	_	0	root	_	_
3	?	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),Wait,wait-01,false)),Map(0 -> wait-01),Map(w -> wait-01))),[Ljava.lang.String;@4b5189ac,Annotation([Ljava.lang.String;@1e4d3ce5,[Ljava.lang.String;@3ddc6915,[Ljava.lang.String;@704deff2),Annotation([Ljava.lang.String;@379614be,[Ljava.lang.String;@404bbcbd,[Ledu.cmu.lti.nlp.amr.Dependency;@1e81f160),Annotation([Ljava.lang.String;@1acaf3d,[Ljava.lang.String;@6986852,[Ljava.lang.String;@1bab8268),Annotation([Ljava.lang.String;@a307a8c,[Ljava.lang.String;@6e01f9b0,[Ledu.cmu.lti.nlp.amr.Entity;@2b9ed6da))
AMR:


Decoded in 2,005 microseconds
Sentence: For what ? "

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0

Extra span:  => amr-empty
Dependencies:
1	For	_	IN	IN	_	0	root	_	_
2	what	_	WP	WP	_	1	pobj	_	_
3	?	_	.	.	_	1	punct	_	_
4	"	_	''	''	_	1	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@6c61a903,Annotation([Ljava.lang.String;@658c5a19,[Ljava.lang.String;@421e361,[Ljava.lang.String;@59d4cd39),Annotation([Ljava.lang.String;@389c4eb1,[Ljava.lang.String;@3fc79729,[Ledu.cmu.lti.nlp.amr.Dependency;@34f6515b),Annotation([Ljava.lang.String;@4b34fff9,[Ljava.lang.String;@1187c9e8,[Ljava.lang.String;@127a7a2e),Annotation([Ljava.lang.String;@14008db3,[Ljava.lang.String;@78a773fd,[Ledu.cmu.lti.nlp.amr.Entity;@57c03d88))
AMR:


Decoded in 6,939 microseconds
Sentence: " For the sunset .

Spans:
Span 3-4:  sunset => sunset

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  sunset => sunset

Dependencies:
1	"	_	''	''	_	4	punct	_	_
2	For	_	IN	IN	_	3	amod	_	_
3	the	_	DT	DT	_	4	nsubj	_	_
4	sunset	_	VBP	VBP	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),sunset,sunset,false)),Map(0 -> sunset),Map(s -> sunset))),[Ljava.lang.String;@16aa8654,Annotation([Ljava.lang.String;@6d7fc27,[Ljava.lang.String;@45ac5f9b,[Ljava.lang.String;@135606db),Annotation([Ljava.lang.String;@518caac3,[Ljava.lang.String;@68034211,[Ledu.cmu.lti.nlp.amr.Dependency;@4f74980d),Annotation([Ljava.lang.String;@6c372fe6,[Ljava.lang.String;@58594a11,[Ljava.lang.String;@2a3888c1),Annotation([Ljava.lang.String;@4167d97b,[Ljava.lang.String;@14fa86ae,[Ledu.cmu.lti.nlp.amr.Entity;@6e15fe2))
AMR:


Decoded in 8,907 microseconds
Sentence: We must wait until it is time . "

Spans:
Span 4-5:  it => it
Span 6-7:  time => time
Span 3-4:  until => until
Span 2-3:  wait => wait-01
Span 0-1:  We => we

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 6-7:  time => time
Oracle Span 3-4:  until => until
Oracle Span 2-3:  wait => wait-01
Oracle Span 0-1:  We => we

Extra span: it => it
Dependencies:
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	must	_	MD	MD	_	3	aux	_	_
3	wait	_	VB	VB	_	0	root	_	_
4	until	_	IN	IN	_	7	mark	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	time	_	NN	NN	_	3	advcl	_	_
8	.	_	.	.	_	3	punct	_	_
9	"	_	''	''	_	3	punct	_	_

Oracle:
(u / until, op, t / time)
(w2 / wait-01, ARG1, w / we)
(w2 / wait-01, duration, u / until)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),time,time,false), Span(4,5,List(1),it,it,false), Span(3,4,List(2),until,until,false), Span(2,3,List(3),wait,wait-01,false), Span(0,1,List(4),We,we,false)),Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01),Map(w -> wait-01, t -> time, w2 -> we, i -> it, u -> until))),[Ljava.lang.String;@68f1b17f,Annotation([Ljava.lang.String;@1722011b,[Ljava.lang.String;@57ad2aa7,[Ljava.lang.String;@5b3f61ff),Annotation([Ljava.lang.String;@3e2059ae,[Ljava.lang.String;@398dada8,[Ledu.cmu.lti.nlp.amr.Dependency;@7cb502c),Annotation([Ljava.lang.String;@275bf9b3,[Ljava.lang.String;@1b8a29df,[Ljava.lang.String;@4fbe37eb),Annotation([Ljava.lang.String;@12a94400,[Ljava.lang.String;@6a47b187,[Ledu.cmu.lti.nlp.amr.Entity;@2049a9c1))
AMR:
(t / time, domain, i / it)
(w / wait-01, ARG0, w2 / we)
(w / wait-01, ARG1, i / it)
(w / wait-01, time, u / until)

Decoded in 25,853 microseconds
Sentence: At first you seemed to be very much surprised .

Spans:
Span 7-8:  much => much
Span 3-4:  seemed => seem-01
Span 8-9:  surprised => surprise-01
Span 6-7:  very => very
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  much => much
Oracle Span 3-4:  seemed => seem-01
Oracle Span 8-9:  surprised => surprise-01
Oracle Span 6-7:  very => very
Oracle Span 2-3:  you => you

Dependencies:
1	At	_	IN	IN	_	4	prep	_	_
2	first	_	JJ	JJ	_	1	pobj	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	seemed	_	VBD	VBD	_	0	root	_	_
5	to	_	TO	TO	_	9	aux	_	_
6	be	_	VB	VB	_	9	cop	_	_
7	very	_	RB	RB	_	9	advmod	_	_
8	much	_	RB	RB	_	9	advmod	_	_
9	surprised	_	JJ	JJ	_	4	xcomp	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(m / much, degree, v / very)
(s / seem-01, ARG1, s2 / surprise-01)
(s2 / surprise-01, ARG1, y / you)
(s2 / surprise-01, degree, m / much)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),surprised,surprise-01,false), Span(7,8,List(1),much,much,false), Span(6,7,List(2),very,very,false), Span(3,4,List(3),seemed,seem-01,false), Span(2,3,List(4),you,you,false)),Map(2 -> very, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01),Map(s2 -> seem-01, s -> surprise-01, v -> very, m -> much, y -> you))),[Ljava.lang.String;@1ef6d34c,Annotation([Ljava.lang.String;@46271dd6,[Ljava.lang.String;@11bb571c,[Ljava.lang.String;@7c51f34b),Annotation([Ljava.lang.String;@5495333e,[Ljava.lang.String;@2a225dd7,[Ledu.cmu.lti.nlp.amr.Dependency;@61eaec38),Annotation([Ljava.lang.String;@125290e5,[Ljava.lang.String;@6fa34d52,[Ljava.lang.String;@57576994),Annotation([Ljava.lang.String;@616ac46a,[Ljava.lang.String;@67b9b51a,[Ledu.cmu.lti.nlp.amr.Entity;@1205bd62))
AMR:
(m / much, degree, v / very)
(s / surprise-01, ARG1, y / you)
(s / surprise-01, degree, m / much)
(s2 / seem-01, ARG0, y / you)

Decoded in 15,273 microseconds
Sentence: And then you laughed to yourself .

Spans:
Span 0-1:  And => and
Span 3-4:  laughed => laugh-01
Span 1-2:  then => then
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 3-4:  laughed => laugh-01
Oracle Span 1-2:  then => then
Oracle Span 2-3:  you => you

Dependencies:
1	And	_	CC	CC	_	4	cc	_	_
2	then	_	RB	RB	_	4	advmod	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	laughed	_	VBD	VBD	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	yourself	_	PRP	PRP	_	5	pobj	_	_
7	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, l / laugh-01)
(l / laugh-01, ARG0, y / you)
(l / laugh-01, ARG2, y / you)
(l / laugh-01, time, t / then)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),laughed,laugh-01,false), Span(2,3,List(1),you,you,false), Span(1,2,List(2),then,then,false), Span(0,1,List(3),And,and,false)),Map(2 -> then, 1 -> you, 0 -> laugh-01, 3 -> and),Map(t -> then, y -> you, a -> and, l -> laugh-01))),[Ljava.lang.String;@7ef27d7f,Annotation([Ljava.lang.String;@490caf5f,[Ljava.lang.String;@6337c201,[Ljava.lang.String;@5c669da8),Annotation([Ljava.lang.String;@31920ade,[Ljava.lang.String;@1d483de4,[Ledu.cmu.lti.nlp.amr.Dependency;@4032d386),Annotation([Ljava.lang.String;@28d18df5,[Ljava.lang.String;@934b6cb,[Ljava.lang.String;@55cf0d14),Annotation([Ljava.lang.String;@3b74ac8,[Ljava.lang.String;@27adc16e,[Ledu.cmu.lti.nlp.amr.Entity;@b83a9be))
AMR:
(a / and, op, l / laugh-01)
(l / laugh-01, ARG0, y / you)
(l / laugh-01, time, t / then)

Decoded in 9,977 microseconds
Sentence: You said to me : " I am always thinking that I am at home ! "

Spans:
Span 8-9:  always => always
Span 14-15:  home => home
Span 11-12:  I => i
Span 6-7:  I => i
Span 1-2:  said => say-01
Span 9-10:  thinking => think-01
Span 0-1:  You => you

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 8-9:  always => always
Oracle Span 14-15:  home => home
Oracle Span 6-7:  I => i
Oracle Span 1-2:  said => say-01
Oracle Span 9-10:  thinking => think-01
Oracle Span 0-1:  You => you

Extra span: I => i
Dependencies:
1	You	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	me	_	PRP	PRP	_	3	pobj	_	_
5	:	_	:	:	_	2	punct	_	_
6	"	_	''	''	_	2	punct	_	_
7	I	_	PRP	PRP	_	10	nsubj	_	_
8	am	_	VBP	VBP	_	10	aux	_	_
9	always	_	RB	RB	_	10	advmod	_	_
10	thinking	_	VBG	VBG	_	2	ccomp	_	_
11	that	_	IN	IN	_	13	mark	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	am	_	VBP	VBP	_	10	ccomp	_	_
14	at	_	IN	IN	_	13	prep	_	_
15	home	_	NN	NN	_	14	pobj	_	_
16	!	_	.	.	_	2	punct	_	_
17	"	_	''	''	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, t / think-01)
(s / say-01, ARG2, i / i)
(t / think-01, ARG0, y / you)
(t / think-01, time, a / always)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),home,home,false), Span(11,12,List(1),I,i,false), Span(9,10,List(2),thinking,think-01,false), Span(8,9,List(3),always,always,false), Span(6,7,List(4),I,i,false), Span(1,2,List(5),said,say-01,false), Span(0,1,List(6),You,you,false)),Map(2 -> think-01, 5 -> say-01, 1 -> i, 4 -> i, 6 -> you, 0 -> home, 3 -> always),Map(h -> home, t -> think-01, s -> say-01, y -> you, a -> always, i2 -> i, i -> i))),[Ljava.lang.String;@2609b277,Annotation([Ljava.lang.String;@1fd14d74,[Ljava.lang.String;@563e4951,[Ljava.lang.String;@4066c471),Annotation([Ljava.lang.String;@2b175c00,[Ljava.lang.String;@3eb81efb,[Ledu.cmu.lti.nlp.amr.Dependency;@1ae8bcbc),Annotation([Ljava.lang.String;@6cdba6dc,[Ljava.lang.String;@7d3d101b,[Ljava.lang.String;@30c8681),Annotation([Ljava.lang.String;@5cdec700,[Ljava.lang.String;@6d026701,[Ledu.cmu.lti.nlp.amr.Entity;@78aa1f72))
AMR:
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, t / think-01)
(t / think-01, ARG0, i2 / i)
(t / think-01, ARG1, h / home)
(t / think-01, ARG2, i / i)
(t / think-01, time, a / always)

Decoded in 193,049 microseconds
Sentence: Just so .

Spans:
Span 0-1:  Just => just
Span 1-2:  so => so

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Just => just
Oracle Span 1-2:  so => so

Dependencies:
1	Just	_	CD	CD	_	0	root	_	_
2	so	_	RB	RB	_	1	advmod	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(s / so, mod, j / just)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),so,so,false), Span(0,1,List(1),Just,just,false)),Map(1 -> just, 0 -> so),Map(j -> just, s -> so))),[Ljava.lang.String;@1f75a668,Annotation([Ljava.lang.String;@35399441,[Ljava.lang.String;@4b7dc788,[Ljava.lang.String;@6304101a),Annotation([Ljava.lang.String;@5170bcf4,[Ljava.lang.String;@2812b107,[Ledu.cmu.lti.nlp.amr.Dependency;@df6620a),Annotation([Ljava.lang.String;@4e31276e,[Ljava.lang.String;@1a72a540,[Ljava.lang.String;@27d5a580),Annotation([Ljava.lang.String;@198d6542,[Ljava.lang.String;@5e403b4a,[Ledu.cmu.lti.nlp.amr.Entity;@5117dd67))
AMR:
(j / just, mod, s / so)

Decoded in 3,782 microseconds
Sentence: Everybody knows that when it is noon in the United States the sun is setting over France .

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 4-5:  it => it
Span 1-2:  knows => know-01
Span 12-13:  sun => sun

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Everybody => everybody
Oracle Span 16-17:  France => (country :name (name :op "France"))
Oracle Span 1-2:  knows => know-01
Oracle Span 14-15:  setting => set-11
Oracle Span 12-13:  sun => sun
Oracle Span 9-11:  United States => (country :name (name :op "States" :op "United"))

Extra span: it => it
Missing span: France => (country :name (name :op "France"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: setting => set-11
Missing span: Everybody => everybody
Dependencies:
1	Everybody	_	NN	NN	_	2	nsubj	_	_
2	knows	_	VBZ	VBZ	_	0	root	_	_
3	that	_	IN	IN	_	15	mark	_	_
4	when	_	WRB	WRB	_	7	advmod	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	noon	_	NN	NN	_	15	advcl	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	United	_	NNP	NNP	_	11	nn	_	_
11	States	_	NNPS	NNPS	_	8	pobj	_	_
12	the	_	DT	DT	_	13	det	_	_
13	sun	_	NN	NN	_	15	nsubj	_	_
14	is	_	VBZ	VBZ	_	15	aux	_	_
15	setting	_	VBG	VBG	_	2	ccomp	_	_
16	over	_	IN	IN	_	15	prep	_	_
17	France	_	NNP	NNP	_	16	pobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(k / know-01, ARG0, e / everybody)
(k / know-01, ARG1, s / set-11)
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "France")
(s / set-11, ARG1, s2 / sun)
(s / set-11, location, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),sun,sun,false), Span(4,5,List(1),it,it,false), Span(1,2,List(2),knows,know-01,false)),Map(2 -> know-01, 1 -> it, 0 -> sun),Map(k -> know-01, s -> sun, i -> it))),[Ljava.lang.String;@5be49b60,Annotation([Ljava.lang.String;@2931522b,[Ljava.lang.String;@7674b62c,[Ljava.lang.String;@19e7a160),Annotation([Ljava.lang.String;@662706a7,[Ljava.lang.String;@45a4b042,[Ledu.cmu.lti.nlp.amr.Dependency;@16b2bb0c),Annotation([Ljava.lang.String;@327af41b,[Ljava.lang.String;@6cb6decd,[Ljava.lang.String;@c7045b9),Annotation([Ljava.lang.String;@f99f5e0,[Ljava.lang.String;@6aa61224,[Ledu.cmu.lti.nlp.amr.Entity;@30bce90b))
AMR:
(k / know-01, ARG0, s / sun)
(k / know-01, ARG1, i / it)

Decoded in 25,126 microseconds
Sentence: If you could fly to France in one minute , you could go straight into the sunset , right from noon .

NER Entity: (country :name (name :op "France"))
Spans:
Span 11-12:  could => possible-01
Span 2-3:  could => possible-01
Span 3-4:  fly => fly-01
Span 12-13:  go => go-02
Span 8-9:  minute => (temporal-quantity :unit minute)
Span 16-17:  sunset => sunset
Span 10-11:  you => you
Span 1-2:  you => you

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 2-3:  could => possible-01
Oracle Span 11-12:  could => possible-01
Oracle Span 3-4:  fly => fly-01
Oracle Span 5-6:  France => (country :name (name :op "France"))
Oracle Span 12-13:  go => go-02
Oracle Span 8-9:  minute => (temporal-quantity :unit minute)
Oracle Span 7-8:  one => 1
Oracle Span 13-14:  straight => straight-04
Oracle Span 16-17:  sunset => sunset
Oracle Span 1-2:  you => you

Extra span: you => you
Missing span: France => (country :name (name :op "France"))
Missing span: one => 1
Missing span: straight => straight-04
Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	you	_	PRP	PRP	_	4	nsubj	_	_
3	could	_	MD	MD	_	4	aux	_	_
4	fly	_	VB	VB	_	13	advcl	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	France	_	NNP	NNP	_	5	pobj	_	_
7	in	_	IN	IN	_	4	prep	_	_
8	one	_	CD	CD	_	9	num	_	_
9	minute	_	NN	NN	_	7	pobj	_	_
10	,	_	,	,	_	13	punct	_	_
11	you	_	PRP	PRP	_	13	nsubj	_	_
12	could	_	MD	MD	_	13	aux	_	_
13	go	_	VB	VB	_	0	root	_	_
14	straight	_	RB	RB	_	15	advmod	_	_
15	into	_	IN	IN	_	13	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	sunset	_	NN	NN	_	15	pobj	_	_
18	,	_	,	,	_	15	punct	_	_
19	right	_	RB	RB	_	15	dep	_	_
20	from	_	IN	IN	_	15	prep	_	_
21	noon	_	NN	NN	_	20	pobj	_	_
22	.	_	.	.	_	13	punct	_	_

Oracle:
(c / country, name, n / name)
(f / fly-01, ARG1, y / you)
(f / fly-01, destination, c / country)
(f / fly-01, duration, t / temporal-quantity)
(g / go-02, ARG0, y / you)
(g / go-02, ARG4, s / sunset)
(n / name, op, "France")
(p / possible-01, ARG1, g / go-02)
(p / possible-01, condition, p2 / possible-01)
(p2 / possible-01, ARG1, f / fly-01)
(s2 / straight-04, ARG1, g / go-02)
(t / temporal-quantity, quant, 1 / 1)
(t / temporal-quantity, unit, m / minute)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),sunset,sunset,false), Span(12,13,List(1),go,go-02,false), Span(11,12,List(2),could,possible-01,false), Span(10,11,List(3),you,you,false), Span(8,9,List(5, 4),minute,(temporal-quantity :unit minute),false), Span(3,4,List(6),fly,fly-01,false), Span(2,3,List(7),could,possible-01,false), Span(1,2,List(8),you,you,false)),Map(2 -> possible-01, 5 -> minute, 8 -> you, 7 -> possible-01, 1 -> go-02, 4 -> temporal-quantity, 6 -> fly-01, 0 -> sunset, 3 -> you),Map(t -> temporal-quantity, p2 -> possible-01, s -> sunset, m -> minute, y -> you, p -> possible-01, g -> go-02, f -> fly-01, y2 -> you))),[Ljava.lang.String;@3e6f3f28,Annotation([Ljava.lang.String;@7e19ebf0,[Ljava.lang.String;@2474f125,[Ljava.lang.String;@7357a011),Annotation([Ljava.lang.String;@3406472c,[Ljava.lang.String;@5717c37,[Ledu.cmu.lti.nlp.amr.Dependency;@68f4865),Annotation([Ljava.lang.String;@4816278d,[Ljava.lang.String;@4eaf3684,[Ljava.lang.String;@40317ba2),Annotation([Ljava.lang.String;@3c01cfa1,[Ljava.lang.String;@45d2ade3,[Ledu.cmu.lti.nlp.amr.Entity;@727eb8cb))
AMR:
(f / fly-01, ARG0, y2 / you)
(f / fly-01, ARG1, t / temporal-quantity)
(g / go-02, ARG0, y / you)
(g / go-02, ARG1, s / sunset)
(g / go-02, time, f / fly-01)
(p / possible-01, ARG1, g / go-02)
(p2 / possible-01, ARG1, f / fly-01)
(t / temporal-quantity, unit, m / minute)

Decoded in 254,703 microseconds
Sentence: Unfortunately , France is too far away for that .

NER Entity: (country :name (name :op "France"))
Spans:
Span 6-7:  away => away
Span 5-6:  far => far
Span 4-5:  too => too

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  away => away
Oracle Span 5-6:  far => far
Oracle Span 2-3:  France => (country :name (name :op "France"))
Oracle Span 8-9:  that => that
Oracle Span 4-5:  too => too

Missing span: France => (country :name (name :op "France"))
Missing span: that => that
Dependencies:
1	Unfortunately	_	RB	RB	_	4	advmod	_	_
2	,	_	,	,	_	4	punct	_	_
3	France	_	NNP	NNP	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	0	root	_	_
5	too	_	RB	RB	_	7	advmod	_	_
6	far	_	RB	RB	_	7	advmod	_	_
7	away	_	RB	RB	_	4	advmod	_	_
8	for	_	IN	IN	_	4	prep	_	_
9	that	_	DT	DT	_	8	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(a / away, extent, f2 / far)
(c / country, name, n / name)
(f2 / far, degree, t / too)
(n / name, op, "France")

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),away,away,false), Span(5,6,List(1),far,far,false), Span(4,5,List(2),too,too,false)),Map(2 -> too, 1 -> far, 0 -> away),Map(t -> too, a -> away, f -> far))),[Ljava.lang.String;@39d9314d,Annotation([Ljava.lang.String;@b978d10,[Ljava.lang.String;@5b7a8434,[Ljava.lang.String;@5c45d770),Annotation([Ljava.lang.String;@2ce6c6ec,[Ljava.lang.String;@1bae316d,[Ledu.cmu.lti.nlp.amr.Dependency;@147a5d08),Annotation([Ljava.lang.String;@6676f6a0,[Ljava.lang.String;@7cbd9d24,[Ljava.lang.String;@1672fe87),Annotation([Ljava.lang.String;@5026735c,[Ljava.lang.String;@1b45c0e,[Ledu.cmu.lti.nlp.amr.Entity;@11f0a5a1))
AMR:
(a / away, extent, f / far)
(f / far, degree, t / too)

Decoded in 13,534 microseconds
Sentence: But on your tiny planet , my little prince , all you need do is move your chair a few steps .

Spans:
Span 10-11:  all => all
Span 0-1:  But => contrast-01
Span 17-18:  chair => chair
Span 7-8:  little => little
Span 15-16:  move => move-01
Span 12-13:  need => need-01
Span 4-5:  planet => planet
Span 8-9:  prince => prince
Span 20-21:  steps => step-01
Span 3-4:  tiny => tiny
Span 11-12:  you => you

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 17-18:  chair => chair
Oracle Span 19-20:  few => few
Oracle Span 7-8:  little => little
Oracle Span 15-16:  move => move-01
Oracle Span 4-5:  planet => planet
Oracle Span 8-9:  prince => prince
Oracle Span 20-21:  steps => step
Oracle Span 3-4:  tiny => tiny

Incorrect span: steps => step-01
Extra span: need => need-01
Extra span: you => you
Extra span: all => all
Missing span: steps => step
Missing span: few => few
Dependencies:
1	But	_	CC	CC	_	16	cc	_	_
2	on	_	IN	IN	_	16	prep	_	_
3	your	_	PRP$	PRP$	_	5	poss	_	_
4	tiny	_	JJ	JJ	_	5	amod	_	_
5	planet	_	NN	NN	_	2	pobj	_	_
6	,	_	,	,	_	16	punct	_	_
7	my	_	PRP$	PRP$	_	9	poss	_	_
8	little	_	JJ	JJ	_	9	amod	_	_
9	prince	_	NN	NN	_	16	nsubj	_	_
10	,	_	,	,	_	9	punct	_	_
11	all	_	DT	DT	_	14	dobj	_	_
12	you	_	PRP	PRP	_	14	nsubj	_	_
13	need	_	MD	MD	_	14	aux	_	_
14	do	_	VB	VB	_	9	rcmod	_	_
15	is	_	VBZ	VBZ	_	16	aux	_	_
16	move	_	VB	VB	_	0	root	_	_
17	your	_	PRP$	PRP$	_	18	poss	_	_
18	chair	_	NN	NN	_	16	dep	_	_
19	a	_	DT	DT	_	21	det	_	_
20	few	_	JJ	JJ	_	21	amod	_	_
21	steps	_	NNS	NNS	_	16	dobj	_	_
22	.	_	.	.	_	16	punct	_	_

Oracle:
(c / chair, poss, p2 / prince)
(m / move-01, ARG0, p2 / prince)
(m / move-01, ARG1, c / chair)
(m / move-01, extent, s / step)
(p / planet, mod, t / tiny)
(p / planet, poss, p2 / prince)
(p2 / prince, mod, l / little)
(s / step, quant, f / few)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),steps,step-01,false), Span(17,18,List(1),chair,chair,false), Span(15,16,List(2),move,move-01,false), Span(12,13,List(3),need,need-01,false), Span(11,12,List(4),you,you,false), Span(10,11,List(5),all,all,false), Span(8,9,List(6),prince,prince,false), Span(7,8,List(7),little,little,false), Span(4,5,List(8),planet,planet,false), Span(3,4,List(9),tiny,tiny,false), Span(0,1,List(10),But,contrast-01,false)),Map(2 -> move-01, 5 -> all, 8 -> planet, 7 -> little, 1 -> chair, 4 -> you, 6 -> prince, 9 -> tiny, 0 -> step-01, 10 -> contrast-01, 3 -> need-01),Map(n -> need-01, t -> tiny, p2 -> planet, s -> step-01, m -> move-01, p -> prince, y -> you, a -> all, l -> little, c -> chair, c2 -> contrast-01))),[Ljava.lang.String;@10f7f7de,Annotation([Ljava.lang.String;@73a8da0f,[Ljava.lang.String;@50dfbc58,[Ljava.lang.String;@4416d64f),Annotation([Ljava.lang.String;@6bf08014,[Ljava.lang.String;@5e3d57c7,[Ledu.cmu.lti.nlp.amr.Dependency;@732d0d24),Annotation([Ljava.lang.String;@1fb19a0,[Ljava.lang.String;@6ee4d9ab,[Ljava.lang.String;@5a5338df),Annotation([Ljava.lang.String;@418c5a9c,[Ljava.lang.String;@18e36d14,[Ledu.cmu.lti.nlp.amr.Entity;@5082d622))
AMR:
(c2 / contrast-01, ARG1, p2 / planet)
(c2 / contrast-01, ARG2, m / move-01)
(m / move-01, ARG0, y / you)
(m / move-01, ARG1, c / chair)
(m / move-01, ARG2, p / prince)
(n / need-01, ARG1, a / all)
(n / need-01, ARG2, y / you)
(p / prince, mod, l / little)
(p2 / planet, mod, t / tiny)
(s / step-01, ARG0, p / prince)

Decoded in 213,974 microseconds
Sentence: You can see the day end and the twilight falling whenever you like ...

Spans:
Span 6-7:  and => and
Span 1-2:  can => possible-01
Span 4-5:  day => day
Span 5-6:  end => end-01
Span 2-3:  see => see-01
Span 11-12:  you => you
Span 0-1:  You => you

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 1-2:  can => possible-01
Oracle Span 4-5:  day => day
Oracle Span 5-6:  end => end-01
Oracle Span 9-10:  falling => fall-04
Oracle Span 12-13:  like => like-02
Oracle Span 2-3:  see => see-01
Oracle Span 8-9:  twilight => twilight
Oracle Span 0-1:  You => you

Extra span: you => you
Missing span: like => like-02
Missing span: falling => fall-04
Missing span: twilight => twilight
Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	can	_	MD	MD	_	3	aux	_	_
3	see	_	VB	VB	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	day	_	NN	NN	_	6	nn	_	_
6	end	_	NN	NN	_	10	nsubj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	the	_	DT	DT	_	9	det	_	_
9	twilight	_	NN	NN	_	6	conj	_	_
10	falling	_	VBG	VBG	_	3	dep	_	_
11	whenever	_	WRB	WRB	_	13	advmod	_	_
12	you	_	PRP	PRP	_	13	nsubj	_	_
13	like	_	VBP	VBP	_	10	advcl	_	_
14	...	_	:	:	_	3	punct	_	_

Oracle:
(a / and, op, e / end-01)
(a / and, op, f / fall-04)
(e / end-01, ARG1, d / day)
(f / fall-04, ARG1, t / twilight)
(l / like-02, ARG0, y / you)
(l / like-02, ARG1, s / see-01)
(p / possible-01, ARG1, s / see-01)
(s / see-01, ARG0, y / you)
(s / see-01, ARG1, a / and)
(s / see-01, time, l / like-02)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),you,you,false), Span(6,7,List(1),and,and,false), Span(5,6,List(2),end,end-01,false), Span(4,5,List(3),day,day,false), Span(2,3,List(4),see,see-01,false), Span(1,2,List(5),can,possible-01,false), Span(0,1,List(6),You,you,false)),Map(2 -> end-01, 5 -> possible-01, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day),Map(e -> end-01, s -> see-01, d -> day, p -> possible-01, y -> you, a -> and, y2 -> you))),[Ljava.lang.String;@13d4992d,Annotation([Ljava.lang.String;@302f7971,[Ljava.lang.String;@332729ad,[Ljava.lang.String;@75d2da2d),Annotation([Ljava.lang.String;@4278284b,[Ljava.lang.String;@9573584,[Ledu.cmu.lti.nlp.amr.Dependency;@3370f42),Annotation([Ljava.lang.String;@6057aebb,[Ljava.lang.String;@63eef88a,[Ljava.lang.String;@53251a66),Annotation([Ljava.lang.String;@6853425f,[Ljava.lang.String;@352c1b98,[Ledu.cmu.lti.nlp.amr.Entity;@21129f1f))
AMR:
(a / and, op, e / end-01)
(e / end-01, ARG1, d / day)
(p / possible-01, ARG0, y / you)
(p / possible-01, ARG1, s / see-01)
(s / see-01, ARG0, y2 / you)
(s / see-01, ARG1, e / end-01)

Decoded in 37,939 microseconds
Sentence: " One day , " you said to me , " I saw the sunset forty - four times ! "

Spans:
Span 2-3:  day => day
Span 17-18:  four => 4
Span 11-12:  I => i
Span 1-2:  One => one
Span 6-7:  said => say-01
Span 12-13:  saw => see-01
Span 14-15:  sunset => sunset
Span 5-6:  you => you

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 2-3:  day => day
Oracle Span 11-12:  I => i
Oracle Span 1-2:  One => one
Oracle Span 6-7:  said => say-01
Oracle Span 12-13:  saw => see-01
Oracle Span 14-15:  sunset => sunset
Oracle Span 5-6:  you => you

Extra span: four => 4
Dependencies:
1	"	_	''	''	_	13	punct	_	_
2	One	_	CD	CD	_	7	nsubj	_	_
3	day	_	NN	NN	_	2	dep	_	_
4	,	_	,	,	_	2	punct	_	_
5	"	_	''	''	_	2	punct	_	_
6	you	_	PRP	PRP	_	7	nsubj	_	_
7	said	_	VBD	VBD	_	13	ccomp	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	me	_	PRP	PRP	_	8	pobj	_	_
10	,	_	,	,	_	13	punct	_	_
11	"	_	''	''	_	13	punct	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	saw	_	VBD	VBD	_	0	root	_	_
14	the	_	DT	DT	_	16	det	_	_
15	sunset	_	JJ	JJ	_	16	amod	_	_
16	forty	_	NN	NN	_	13	dobj	_	_
17	-	_	:	:	_	16	punct	_	_
18	four	_	CD	CD	_	19	num	_	_
19	times	_	NNS	NNS	_	16	dep	_	_
20	!	_	.	.	_	13	punct	_	_
21	"	_	''	''	_	13	punct	_	_

Oracle:
(d / day, mod, o / one)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, i / i)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, s3 / sunset)
(s2 / see-01, time, d / day)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),four,4,false), Span(14,15,List(1),sunset,sunset,false), Span(12,13,List(2),saw,see-01,false), Span(11,12,List(3),I,i,false), Span(6,7,List(4),said,say-01,false), Span(5,6,List(5),you,you,false), Span(2,3,List(6),day,day,false), Span(1,2,List(7),One,one,false)),Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i),Map(s2 -> see-01, s -> sunset, d -> day, y -> you, 4 -> 4, i -> i, s3 -> say-01, o -> one))),[Ljava.lang.String;@5a9f4771,Annotation([Ljava.lang.String;@282cb7c7,[Ljava.lang.String;@7d898981,[Ljava.lang.String;@48d61b48),Annotation([Ljava.lang.String;@68d279ec,[Ljava.lang.String;@258d79be,[Ledu.cmu.lti.nlp.amr.Dependency;@14f9390f),Annotation([Ljava.lang.String;@6c0d7c83,[Ljava.lang.String;@176b75f7,[Ljava.lang.String;@5965be2d),Annotation([Ljava.lang.String;@409c54f,[Ljava.lang.String;@3e74829,[Ledu.cmu.lti.nlp.amr.Entity;@4f6f416f))
AMR:
(d / day, mod, o / one)
(s2 / see-01, ARG0, i / i)
(s2 / see-01, ARG1, 4 / 4)
(s3 / say-01, ARG0, y / you)
(s3 / say-01, ARG1, s2 / see-01)
(s3 / say-01, ARG2, s / sunset)
(s3 / say-01, time, d / day)

Decoded in 112,730 microseconds
Sentence: And a little later you added : " You know -- one loves the sunset , when one is so sad ... "

Spans:
Span 5-6:  added => add-01
Span 0-1:  And => and
Span 3-4:  later => late
Span 2-3:  little => little
Span 12-13:  loves => love-01
Span 20-21:  sad => sad-02
Span 19-20:  so => so
Span 14-15:  sunset => sunset
Span 8-9:  You => you
Span 4-5:  you => you

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 5-6:  added => add-01
Oracle Span 0-1:  And => and
Oracle Span 3-4:  later => late
Oracle Span 2-3:  little => little
Oracle Span 12-13:  loves => love-01
Oracle Span 11-12:  one => one
Oracle Span 20-21:  sad => sad-02
Oracle Span 19-20:  so => so
Oracle Span 14-15:  sunset => sunset
Oracle Span 4-5:  you => you

Extra span: You => you
Missing span: one => one
Dependencies:
1	And	_	CC	CC	_	6	cc	_	_
2	a	_	DT	DT	_	3	det	_	_
3	little	_	RB	RB	_	4	npadvmod	_	_
4	later	_	RB	RB	_	6	advmod	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	added	_	VBD	VBD	_	0	root	_	_
7	:	_	:	:	_	6	punct	_	_
8	"	_	''	''	_	6	punct	_	_
9	You	_	PRP	PRP	_	10	nsubj	_	_
10	know	_	VBP	VBP	_	6	dep	_	_
11	--	_	:	:	_	6	punct	_	_
12	one	_	PRP	PRP	_	13	nsubj	_	_
13	loves	_	VBZ	VBZ	_	6	parataxis	_	_
14	the	_	DT	DT	_	15	det	_	_
15	sunset	_	NN	NN	_	13	dobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	when	_	WRB	WRB	_	21	advmod	_	_
18	one	_	PRP	PRP	_	21	nsubj	_	_
19	is	_	VBZ	VBZ	_	21	cop	_	_
20	so	_	RB	RB	_	21	advmod	_	_
21	sad	_	JJ	JJ	_	15	rcmod	_	_
22	...	_	:	:	_	6	punct	_	_
23	"	_	''	''	_	6	punct	_	_

Oracle:
(a / and, op, a2 / add-01)
(a2 / add-01, ARG0, y / you)
(a2 / add-01, ARG1, l3 / love-01)
(a2 / add-01, time, l / late)
(l3 / love-01, ARG0, o / one)
(l3 / love-01, ARG1, s / sunset)
(l3 / love-01, time, s2 / sad-02)
(s2 / sad-02, ARG1, o / one)
(s2 / sad-02, mod, s3 / so)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),sad,sad-02,false), Span(19,20,List(1),so,so,false), Span(14,15,List(2),sunset,sunset,false), Span(12,13,List(3),loves,love-01,false), Span(8,9,List(4),You,you,false), Span(5,6,List(5),added,add-01,false), Span(4,5,List(6),you,you,false), Span(3,4,List(7),later,late,false), Span(2,3,List(8),little,little,false), Span(0,1,List(9),And,and,false)),Map(2 -> sunset, 5 -> add-01, 8 -> little, 7 -> late, 1 -> so, 4 -> you, 6 -> you, 9 -> and, 0 -> sad-02, 3 -> love-01),Map(s2 -> so, l3 -> little, s -> sad-02, y -> you, a -> add-01, a2 -> and, l2 -> late, l -> love-01, s3 -> sunset, y2 -> you))),[Ljava.lang.String;@3b8f0a79,Annotation([Ljava.lang.String;@71e693fa,[Ljava.lang.String;@48793bef,[Ljava.lang.String;@7d286fb6),Annotation([Ljava.lang.String;@3eb77ea8,[Ljava.lang.String;@7b8b43c7,[Ledu.cmu.lti.nlp.amr.Dependency;@7aaca91a),Annotation([Ljava.lang.String;@44c73c26,[Ljava.lang.String;@41005828,[Ljava.lang.String;@60b4beb4),Annotation([Ljava.lang.String;@7fcf2fc1,[Ljava.lang.String;@2141a12,[Ledu.cmu.lti.nlp.amr.Entity;@4196c360))
AMR:
(a / add-01, ARG0, y2 / you)
(a / add-01, ARG1, y / you)
(a / add-01, degree, l3 / little)
(a / add-01, time, l2 / late)
(a2 / and, op, a / add-01)
(l / love-01, ARG1, s3 / sunset)
(l / love-01, ARG2, a / add-01)
(s / sad-02, ARG1, s3 / sunset)
(s / sad-02, degree, s2 / so)

Decoded in 89,205 microseconds
Sentence: " Were you so sad , then ? "

Spans:
Span 4-5:  sad => sad-02
Span 3-4:  so => so
Span 6-7:  then => then
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  sad => sad-02
Oracle Span 3-4:  so => so
Oracle Span 6-7:  then => then
Oracle Span 2-3:  you => you

Dependencies:
1	"	_	''	''	_	5	punct	_	_
2	Were	_	NNP	NNP	_	5	nsubj	_	_
3	you	_	PRP	PRP	_	2	dep	_	_
4	so	_	RB	RB	_	5	advmod	_	_
5	sad	_	VBD	VBD	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	then	_	RB	RB	_	5	advmod	_	_
8	?	_	.	.	_	5	punct	_	_
9	"	_	''	''	_	5	punct	_	_

Oracle:
(s / sad-02, ARG1, y / you)
(s / sad-02, degree, s2 / so)
(s / sad-02, time, t / then)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),then,then,false), Span(4,5,List(1),sad,sad-02,false), Span(3,4,List(2),so,so,false), Span(2,3,List(3),you,you,false)),Map(2 -> so, 1 -> sad-02, 0 -> then, 3 -> you),Map(s2 -> so, t -> then, s -> sad-02, y -> you))),[Ljava.lang.String;@41294f8,Annotation([Ljava.lang.String;@225129c,[Ljava.lang.String;@20435c40,[Ljava.lang.String;@573906eb),Annotation([Ljava.lang.String;@479ceda0,[Ljava.lang.String;@6d07a63d,[Ledu.cmu.lti.nlp.amr.Dependency;@571c5681),Annotation([Ljava.lang.String;@488d1cd7,[Ljava.lang.String;@68dc098b,[Ljava.lang.String;@38ba6ce3),Annotation([Ljava.lang.String;@d278d2b,[Ljava.lang.String;@2d6c53fc,[Ledu.cmu.lti.nlp.amr.Entity;@25f4878b))
AMR:
(s / sad-02, ARG1, s2 / so)
(s / sad-02, time, t / then)
(y / you, location, s / sad-02)

Decoded in 13,896 microseconds
Sentence: I asked , " on the day of the forty - four sunsets ? "

Spans:
Span 1-2:  asked => ask-01
Span 6-7:  day => day
Span 11-12:  four => 4
Span 0-1:  I => i
Span 12-13:  sunsets => sunset

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 1-2:  asked => ask-01
Oracle Span 6-7:  day => day
Oracle Span 0-1:  I => i
Oracle Span 12-13:  sunsets => sunset

Extra span: four => 4
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	asked	_	VBD	VBD	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	"	_	''	''	_	2	punct	_	_
5	on	_	IN	IN	_	2	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	day	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	forty	_	NN	NN	_	8	pobj	_	_
11	-	_	:	:	_	10	punct	_	_
12	four	_	CD	CD	_	13	num	_	_
13	sunsets	_	NNS	NNS	_	10	dep	_	_
14	?	_	.	.	_	2	punct	_	_
15	"	_	''	''	_	2	punct	_	_

Oracle:
(a / ask-01, ARG0, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),sunsets,sunset,false), Span(11,12,List(1),four,4,false), Span(6,7,List(2),day,day,false), Span(1,2,List(3),asked,ask-01,false), Span(0,1,List(4),I,i,false)),Map(2 -> day, 1 -> 4, 4 -> i, 0 -> sunset, 3 -> ask-01),Map(s -> sunset, d -> day, a -> ask-01, 4 -> 4, i -> i))),[Ljava.lang.String;@4e423aa2,Annotation([Ljava.lang.String;@7fbdb894,[Ljava.lang.String;@3081f72c,[Ljava.lang.String;@3148f668),Annotation([Ljava.lang.String;@6e005dc9,[Ljava.lang.String;@7ceb3185,[Ledu.cmu.lti.nlp.amr.Dependency;@436c81a3),Annotation([Ljava.lang.String;@3561c410,[Ljava.lang.String;@59e32960,[Ljava.lang.String;@7c214cc0),Annotation([Ljava.lang.String;@5b67bb7e,[Ljava.lang.String;@609db546,[Ledu.cmu.lti.nlp.amr.Entity;@20f5281c))
AMR:
(a / ask-01, ARG0, i / i)
(a / ask-01, ARG1, 4 / 4)
(a / ask-01, ARG2, d / day)
(s / sunset, quant, 4 / 4)

Decoded in 24,398 microseconds
Sentence: But the little prince made no reply .

Spans:
Span 0-1:  But => contrast-01
Span 2-3:  little => little
Span 5-6:  no => -
Span 3-4:  prince => prince
Span 6-7:  reply => reply-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 2-3:  little => little
Oracle Span 5-6:  no => -
Oracle Span 3-4:  prince => prince
Oracle Span 6-7:  reply => reply-01

Dependencies:
1	But	_	CC	CC	_	5	cc	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	made	_	VBD	VBD	_	0	root	_	_
6	no	_	DT	DT	_	7	det	_	_
7	reply	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(c / contrast-01, ARG2, r / reply-01)
(p / prince, mod, l / little)
(r / reply-01, ARG0, p / prince)
(r / reply-01, polarity, - / -)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),reply,reply-01,false), Span(5,6,List(1),no,-,false), Span(3,4,List(2),prince,prince,false), Span(2,3,List(3),little,little,false), Span(0,1,List(4),But,contrast-01,false)),Map(2 -> prince, 1 -> -, 4 -> contrast-01, 0 -> reply-01, 3 -> little),Map(p -> prince, r -> reply-01, - -> -, c -> contrast-01, l -> little))),[Ljava.lang.String;@56c4278e,Annotation([Ljava.lang.String;@301eda63,[Ljava.lang.String;@3d246ea3,[Ljava.lang.String;@341814d3),Annotation([Ljava.lang.String;@4397ad89,[Ljava.lang.String;@59cba5a,[Ledu.cmu.lti.nlp.amr.Dependency;@1bd39d3c),Annotation([Ljava.lang.String;@6f19ac19,[Ljava.lang.String;@119cbf96,[Ljava.lang.String;@71329995),Annotation([Ljava.lang.String;@768fc0f2,[Ljava.lang.String;@5454d35e,[Ledu.cmu.lti.nlp.amr.Entity;@20c0a64d))
AMR:
(c / contrast-01, ARG2, r / reply-01)
(p / prince, mod, l / little)
(r / reply-01, ARG0, p / prince)
(r / reply-01, polarity, - / -)

Decoded in 27,231 microseconds
--- Stage1 evaluation ---
Precision: 0.7436743674367436
Recall: 0.6773547094188377
F1: 0.7089669638175145
