Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Chapter 4 .

Oracle Span 1:  4 => 4
Oracle Span 2:  Chapter => chapter
Spans:
Span 1-2:  4 => 4
Span 0-1:  Chapter => chapter

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  4 => 4
Oracle Span 0-1:  Chapter => chapter

Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	4	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 4 / 4)

Input(Some(Graph((chapter :mod 4),ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false), Span(1,2,List(1),4,4,false)),Map(1 -> 4, 0 -> chapter),Map(4 -> 4, c -> chapter))),[Ljava.lang.String;@192d43ce,Annotation([Ljava.lang.String;@72057ecf,[Ljava.lang.String;@1afd44cb,[Ljava.lang.String;@6973b51b),Annotation([Ljava.lang.String;@1ab3a8c8,[Ljava.lang.String;@43195e57,[Ledu.cmu.lti.nlp.amr.Dependency;@333291e3),Annotation([Ljava.lang.String;@479d31f3,[Ljava.lang.String;@40ef3420,[Ljava.lang.String;@498d318c),Annotation([Ljava.lang.String;@6e171cd7,[Ljava.lang.String;@402bba4f,[Ledu.cmu.lti.nlp.amr.Entity;@795cd85e))
AMR:
(c / chapter, mod, 4 / 4)

WARNING: makeIds can't find span Id: 0.0
Decoded in 426,694 microseconds
Sentence: I had thus learned a second fact of great importance : this was that the planet the little prince came from was scarcely any larger than a house !

Oracle Span 1:  any => any
Oracle Span 2:  came => come-01
Oracle Span 3:  fact => fact
Oracle Span 4:  great => great
Oracle Span 5:  house => house
Oracle Span 6:  I => i
Oracle Span 7:  importance => important
Oracle Span 8:  larger => large
Oracle Span 9:  learned => learn-01
Oracle Span 10:  little => little
Oracle Span 11:  planet => planet
Oracle Span 12:  prince => prince
Oracle Span 13:  scarcely => scarce
Spans:
Span 23-24:  any => any
Span 19-20:  came => come-01
Span 6-7:  fact => fact
Span 8-9:  great => great
Span 27-28:  house => house
Span 0-1:  I => i
Span 9-10:  importance => important
Span 24-25:  larger => large
Span 3-4:  learned => learn-01
Span 17-18:  little => little
Span 15-16:  planet => planet
Span 18-19:  prince => prince
Span 22-23:  scarcely => scarce

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 23-24:  any => any
Oracle Span 19-20:  came => come-01
Oracle Span 6-7:  fact => fact
Oracle Span 8-9:  great => great
Oracle Span 27-28:  house => house
Oracle Span 0-1:  I => i
Oracle Span 9-10:  importance => important
Oracle Span 24-25:  larger => large
Oracle Span 3-4:  learned => learn-01
Oracle Span 17-18:  little => little
Oracle Span 15-16:  planet => planet
Oracle Span 18-19:  prince => prince
Oracle Span 22-23:  scarcely => scarce

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	had	_	VBD	VBD	_	4	aux	_	_
3	thus	_	RB	RB	_	4	advmod	_	_
4	learned	_	VBN	VBN	_	0	root	_	_
5	a	_	DT	DT	_	7	det	_	_
6	second	_	JJ	JJ	_	7	amod	_	_
7	fact	_	NN	NN	_	4	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	great	_	JJ	JJ	_	10	amod	_	_
10	importance	_	NN	NN	_	8	pobj	_	_
11	:	_	:	:	_	4	punct	_	_
12	this	_	DT	DT	_	13	nsubj	_	_
13	was	_	VBD	VBD	_	4	parataxis	_	_
14	that	_	IN	IN	_	25	mark	_	_
15	the	_	DT	DT	_	16	det	_	_
16	planet	_	NN	NN	_	25	nsubj	_	_
17	the	_	DT	DT	_	19	det	_	_
18	little	_	JJ	JJ	_	19	amod	_	_
19	prince	_	NN	NN	_	20	nsubj	_	_
20	came	_	VBD	VBD	_	16	rcmod	_	_
21	from	_	IN	IN	_	20	prep	_	_
22	was	_	VBD	VBD	_	25	cop	_	_
23	scarcely	_	RB	RB	_	25	advmod	_	_
24	any	_	RB	RB	_	25	advmod	_	_
25	larger	_	JJR	JJR	_	13	ccomp	_	_
26	than	_	IN	IN	_	25	prep	_	_
27	a	_	DT	DT	_	28	det	_	_
28	house	_	NN	NN	_	26	pobj	_	_
29	!	_	.	.	_	4	punct	_	_

Oracle:
(a / any, degree, s2 / scarce)
(c / come-01, ARG1, p2 / prince)
(c / come-01, ARG3, p / planet)
(f / fact, domain, l2 / large)
(f / fact, mod, i2 / important)
(i2 / important, degree, g / great)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, f / fact)
(l2 / large, compared-to, h / house)
(l2 / large, domain, p / planet)
(p2 / prince, mod, l3 / little)

Input(Some(Graph((cause-01 :ARG1 (learn-01 :ARG1 (fact :domain (large :domain (planet :ARG3-of (come-01 :ARG1 (prince :mod little))) :compared-to house :degree (more :mod (any :degree scarce))) :mod (important :degree great) :ord (ordinal-entity :value 2)) :ARG0 i)),ArrayBuffer(Span(3,4,List(0),learned,learn-01,false), Span(6,7,List(1),fact,fact,false), Span(24,25,List(2),larger,large,false), Span(15,16,List(3),planet,planet,false), Span(19,20,List(4),came,come-01,false), Span(18,19,List(5),prince,prince,false), Span(17,18,List(6),little,little,false), Span(27,28,List(7),house,house,false), Span(23,24,List(8),any,any,false), Span(8,9,List(9),great,great,false), Span(0,1,List(10),I,i,false), Span(22,23,List(11),scarcely,scarce,false), Span(9,10,List(12),importance,important,false)),Map(2 -> large, 5 -> prince, 12 -> important, 8 -> any, 7 -> house, 1 -> fact, 4 -> come-01, 11 -> scarce, 6 -> little, 9 -> great, 0 -> learn-01, 10 -> i, 3 -> planet),Map(h -> house, s2 -> scarce, p2 -> prince, l3 -> little, g -> great, p -> planet, a -> any, i2 -> important, l2 -> large, i -> i, c -> come-01, l -> learn-01, f -> fact))),[Ljava.lang.String;@36902638,Annotation([Ljava.lang.String;@223d2c72,[Ljava.lang.String;@8f4ea7c,[Ljava.lang.String;@436813f3),Annotation([Ljava.lang.String;@74fe5c40,[Ljava.lang.String;@3febb011,[Ledu.cmu.lti.nlp.amr.Dependency;@10e31a9a),Annotation([Ljava.lang.String;@131774fe,[Ljava.lang.String;@158d2680,[Ljava.lang.String;@77847718),Annotation([Ljava.lang.String;@7f3b84b8,[Ljava.lang.String;@57a3af25,[Ledu.cmu.lti.nlp.amr.Entity;@2b662a77))
AMR:
(a / any, mod, s2 / scarce)
(c / come-01, ARG0, l2 / large)
(c / come-01, ARG1, p2 / prince)
(c / come-01, ARG2, s2 / scarce)
(c / come-01, ARG4, p / planet)
(c / come-01, condition, l / learn-01)
(i2 / important, mod, g / great)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, f / fact)
(l / learn-01, location, i2 / important)
(l2 / large, compared-to, h / house)
(p2 / prince, mod, l3 / little)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.2
WARNING: makeIds can't find span Id: 0.0.1.2.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.1
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.1
Decoded in 1,228,585 microseconds
Sentence: But that did not really surprise me much .

Oracle Span 1:  But => contrast-01
Oracle Span 2:  much => much
Oracle Span 3:  really => real-04
Oracle Span 4:  surprise => surprise-01
Oracle Span 5:  that => that
Spans:
Span 0-1:  But => contrast-01
Span 7-8:  much => much
Span 4-5:  really => real-04
Span 5-6:  surprise => surprise-01
Span 1-2:  that => that

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 7-8:  much => much
Oracle Span 4-5:  really => real-04
Oracle Span 5-6:  surprise => surprise-01
Oracle Span 1-2:  that => that

Dependencies:
1	But	_	CC	CC	_	6	cc	_	_
2	that	_	DT	DT	_	6	nsubj	_	_
3	did	_	VBD	VBD	_	6	aux	_	_
4	not	_	RB	RB	_	6	neg	_	_
5	really	_	RB	RB	_	6	advmod	_	_
6	surprise	_	VB	VB	_	0	root	_	_
7	me	_	PRP	PRP	_	8	nsubj	_	_
8	much	_	JJ	JJ	_	6	xcomp	_	_
9	.	_	.	.	_	6	punct	_	_

Oracle:
(c / contrast-01, ARG2, s / surprise-01)
(r / real-04, ARG1, s / surprise-01)
(s / surprise-01, ARG0, t / that)
(s / surprise-01, degree, m / much)

Input(Some(Graph((contrast-01 :ARG2 (surprise-01 :ARG1-of real-04 :degree much :ARG1 i :ARG0 that :polarity -)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(5,6,List(1),surprise,surprise-01,false), Span(7,8,List(2),much,much,false), Span(1,2,List(3),that,that,false), Span(4,5,List(4),really,real-04,false)),Map(2 -> much, 1 -> surprise-01, 4 -> real-04, 0 -> contrast-01, 3 -> that),Map(t -> that, s -> surprise-01, m -> much, r -> real-04, c -> contrast-01))),[Ljava.lang.String;@7f0eb4b4,Annotation([Ljava.lang.String;@5c33f1a9,[Ljava.lang.String;@1623b78d,[Ljava.lang.String;@c8c12ac),Annotation([Ljava.lang.String;@6adbc9d,[Ljava.lang.String;@4550bb58,[Ledu.cmu.lti.nlp.amr.Dependency;@4ec4f3a0),Annotation([Ljava.lang.String;@223191a6,[Ljava.lang.String;@49139829,[Ljava.lang.String;@9597028),Annotation([Ljava.lang.String;@6069db50,[Ljava.lang.String;@4efbca5a,[Ledu.cmu.lti.nlp.amr.Entity;@1b7cc17c))
AMR:
(c / contrast-01, ARG2, s / surprise-01)
(r / real-04, ARG0, t / that)
(r / real-04, ARG1, s / surprise-01)
(s / surprise-01, ARG1, m / much)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.4
Decoded in 63,225 microseconds
Sentence: I knew very well that in addition to the great planets -- such as the Earth , Jupiter , Mars , Venus -- to which we have given names , there are also hundreds of others , some of which are so small that one has a hard time seeing them through the telescope .

Oracle Span 1:  also => include-91
Oracle Span 2:  Earth => (planet :name (name :op "Earth"))
Oracle Span 3:  great => great
Oracle Span 4:  I => i
Oracle Span 5:  Jupiter => (planet :name (name :op "Jupiter"))
Oracle Span 6:  knew => know-01
Oracle Span 7:  Mars => (planet :name (name :op "Mars"))
Oracle Span 8:  names => name-01
Oracle Span 9:  others => other
Oracle Span 10:  planets => planet
Oracle Span 11:  seeing => see-01
Oracle Span 12:  small => small
Oracle Span 13:  so => so
Oracle Span 14:  telescope => telescope
Oracle Span 15:  Venus => (planet :name (name :op "Venus"))
Oracle Span 16:  very => very
Oracle Span 17:  we => we
Oracle Span 18:  well => well
NER Entity: (country :name (name :op "Earth"))
NER Entity: (person :name (name :op "Mars"))
NER Entity: (person :name (name :op "Venus"))
Spans:
Span 32-33:  also => include-91
Span 15-16:  Earth => (planet :name (name :op "Earth"))
Span 9-10:  great => great
Span 0-1:  I => i
Span 17-18:  Jupiter => (planet :name (name :op "Jupiter"))
Span 1-2:  knew => know-01
Span 19-20:  Mars => (planet :name (name :op "Mars"))
Span 28-29:  names => name-01
Span 35-36:  others => other
Span 10-11:  planets => planet
Span 49-50:  seeing => see-01
Span 42-43:  small => small
Span 41-42:  so => so
Span 53-54:  telescope => telescope
Span 21-22:  Venus => (planet :name (name :op "Venus"))
Span 2-3:  very => very
Span 25-26:  we => we
Span 3-4:  well => well

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 32-33:  also => include-91
Oracle Span 15-16:  Earth => (planet :name (name :op "Earth"))
Oracle Span 9-10:  great => great
Oracle Span 0-1:  I => i
Oracle Span 17-18:  Jupiter => (planet :name (name :op "Jupiter"))
Oracle Span 1-2:  knew => know-01
Oracle Span 19-20:  Mars => (planet :name (name :op "Mars"))
Oracle Span 28-29:  names => name-01
Oracle Span 35-36:  others => other
Oracle Span 10-11:  planets => planet
Oracle Span 49-50:  seeing => see-01
Oracle Span 42-43:  small => small
Oracle Span 41-42:  so => so
Oracle Span 53-54:  telescope => telescope
Oracle Span 21-22:  Venus => (planet :name (name :op "Venus"))
Oracle Span 2-3:  very => very
Oracle Span 25-26:  we => we
Oracle Span 3-4:  well => well

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	knew	_	VBD	VBD	_	0	root	_	_
3	very	_	RB	RB	_	4	advmod	_	_
4	well	_	RB	RB	_	2	advmod	_	_
5	that	_	IN	IN	_	32	mark	_	_
6	in	_	IN	IN	_	32	prep	_	_
7	addition	_	NN	NN	_	6	pobj	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	great	_	JJ	JJ	_	11	amod	_	_
11	planets	_	NNS	NNS	_	8	pobj	_	_
12	--	_	:	:	_	20	punct	_	_
13	such	_	JJ	JJ	_	14	mwe	_	_
14	as	_	IN	IN	_	20	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	Earth	_	NN	NN	_	14	pobj	_	_
17	,	_	,	,	_	16	punct	_	_
18	Jupiter	_	NNP	NNP	_	16	appos	_	_
19	,	_	,	,	_	20	punct	_	_
20	Mars	_	NNP	NNP	_	11	dep	_	_
21	,	_	,	,	_	20	punct	_	_
22	Venus	_	NNP	NNP	_	20	appos	_	_
23	--	_	:	:	_	20	punct	_	_
24	to	_	TO	TO	_	28	prep	_	_
25	which	_	WDT	WDT	_	24	pobj	_	_
26	we	_	PRP	PRP	_	28	nsubj	_	_
27	have	_	VBP	VBP	_	28	aux	_	_
28	given	_	VBN	VBN	_	11	rcmod	_	_
29	names	_	NNS	NNS	_	28	dobj	_	_
30	,	_	,	,	_	32	punct	_	_
31	there	_	EX	EX	_	32	expl	_	_
32	are	_	VBP	VBP	_	2	ccomp	_	_
33	also	_	RB	RB	_	32	advmod	_	_
34	hundreds	_	NNS	NNS	_	32	nsubj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	others	_	NNS	NNS	_	35	pobj	_	_
37	,	_	,	,	_	36	punct	_	_
38	some	_	DT	DT	_	43	nsubj	_	_
39	of	_	IN	IN	_	38	prep	_	_
40	which	_	WDT	WDT	_	39	pobj	_	_
41	are	_	VBP	VBP	_	43	cop	_	_
42	so	_	RB	RB	_	43	advmod	_	_
43	small	_	JJ	JJ	_	36	rcmod	_	_
44	that	_	IN	IN	_	46	mark	_	_
45	one	_	PRP	PRP	_	46	nsubj	_	_
46	has	_	VBZ	VBZ	_	43	ccomp	_	_
47	a	_	DT	DT	_	49	det	_	_
48	hard	_	JJ	JJ	_	49	amod	_	_
49	time	_	NN	NN	_	46	dobj	_	_
50	seeing	_	VBG	VBG	_	49	vmod	_	_
51	them	_	PRP	PRP	_	50	dobj	_	_
52	through	_	IN	IN	_	50	prep	_	_
53	the	_	DT	DT	_	54	det	_	_
54	telescope	_	NN	NN	_	52	pobj	_	_
55	.	_	.	.	_	2	punct	_	_

Oracle:
(k / know-01, ARG0, i / i)
(k / know-01, mod, w / well)
(n / name, op, "Earth")
(n2 / name, op, "Jupiter")
(n3 / name, op, "Mars")
(n4 / name, op, "Venus")
(n5 / name-01, ARG0, w3 / we)
(n5 / name-01, ARG1, p / planet)
(p / planet, example, p2 / planet)
(p / planet, example, p3 / planet)
(p / planet, example, p4 / planet)
(p / planet, example, p5 / planet)
(p / planet, mod, g / great)
(p2 / planet, name, n / name)
(p3 / planet, name, n2 / name)
(p4 / planet, name, n3 / name)
(p5 / planet, name, n4 / name)
(s2 / small, degree, s3 / so)
(s4 / see-01, instrument, t / telescope)
(w / well, degree, v / very)

Input(Some(Graph((know-01 :mod (well :degree very) :ARG1 (exist-01 :ARG1 (and :op (planet :ARG1-of (name-01 :ARG0 we) :example (planet :name (name :op "Venus") :wiki "Venus") :example (planet :name (name :op "Mars") :wiki "Mars") :example (planet :name (name :op "Jupiter") :wiki "Jupiter") :example (planet :name (name :op "Earth") :wiki "Earth") :mod great) :op (planet :ARG2-of (include-91 :ARG1 (planet :mod (small :ARG0-of (cause-01 :ARG1 (difficult :domain (see-01 :instrument telescope :ARG1 planet))) :degree so))) :mod other :quant (multiple :op 100) :mod also))) :ARG0 i),ArrayBuffer(Span(15,16,List(0, 1, 2),Earth,(planet :name (name :op "Earth")),false), Span(17,18,List(3, 4, 5),Jupiter,(planet :name (name :op "Jupiter")),false), Span(19,20,List(6, 7, 8),Mars,(planet :name (name :op "Mars")),false), Span(21,22,List(9, 10, 11),Venus,(planet :name (name :op "Venus")),false), Span(1,2,List(12),knew,know-01,false), Span(3,4,List(13),well,well,false), Span(2,3,List(14),very,very,false), Span(10,11,List(15),planets,planet,false), Span(28,29,List(16),names,name-01,false), Span(25,26,List(17),we,we,false), Span(9,10,List(18),great,great,false), Span(32,33,List(19),also,include-91,false), Span(42,43,List(20),small,small,false), Span(49,50,List(21),seeing,see-01,false), Span(53,54,List(22),telescope,telescope,false), Span(41,42,List(23),so,so,false), Span(35,36,List(24),others,other,false), Span(0,1,List(25),I,i,false)),Map(2 -> "Earth", 5 -> "Jupiter", 12 -> know-01, 15 -> planet, 8 -> "Mars", 21 -> see-01, 18 -> great, 24 -> other, 7 -> name, 17 -> we, 1 -> name, 23 -> so, 4 -> name, 11 -> "Venus", 14 -> very, 20 -> small, 6 -> planet, 9 -> planet, 0 -> planet, 22 -> telescope, 16 -> name-01, 19 -> include-91, 10 -> name, 3 -> planet, 25 -> i, 13 -> well),Map(w -> well, n -> name, s2 -> small, p5 -> planet, t -> telescope, k -> know-01, p2 -> planet, n4 -> name, w3 -> we, s4 -> see-01, v -> very, g -> great, p -> planet, n3 -> name, p4 -> planet, i2 -> include-91, i -> i, s3 -> so, o -> other, p3 -> planet, n2 -> name, n5 -> name-01))),[Ljava.lang.String;@293a5bf6,Annotation([Ljava.lang.String;@6aeb35e6,[Ljava.lang.String;@1283bb96,[Ljava.lang.String;@74f0ea28),Annotation([Ljava.lang.String;@f6efaab,[Ljava.lang.String;@3c19aaa5,[Ledu.cmu.lti.nlp.amr.Dependency;@3349e9bb),Annotation([Ljava.lang.String;@409bf450,[Ljava.lang.String;@38d8f54a,[Ljava.lang.String;@49e53c76),Annotation([Ljava.lang.String;@351d00c0,[Ljava.lang.String;@2a3b5b47,[Ledu.cmu.lti.nlp.amr.Entity;@55b699ef))
AMR:
(i2 / include-91, ARG0, t / telescope)
(i2 / include-91, ARG1, o / other)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, p4 / planet)
(k / know-01, degree, w / well)
(n / name, op, "Earth")
(n2 / name, op, "Jupiter")
(n3 / name, op, "Mars")
(n4 / name, op, "Venus")
(n5 / name-01, ARG0, w3 / we)
(n5 / name-01, ARG1, p / planet)
(o / other, mod, s2 / small)
(p / planet, mod, g / great)
(p2 / planet, name, n / name)
(p3 / planet, name, n2 / name)
(p3 / planet, poss, i / i)
(p4 / planet, name, n3 / name)
(p4 / planet, topic, p2 / planet)
(p5 / planet, name, n4 / name)
(p5 / planet, poss, i / i)
(s2 / small, degree, s3 / so)
(s4 / see-01, ARG0, i / i)
(s4 / see-01, ARG1, n5 / name-01)
(s4 / see-01, manner, t / telescope)
(w / well, degree, v / very)

WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.0.2.1
WARNING: makeIds can't find span Id: 0.1.0.0.2.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.3
WARNING: makeIds can't find span Id: 0.1.0.0.3.1
WARNING: makeIds can't find span Id: 0.1.0.0.3.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.4
WARNING: makeIds can't find span Id: 0.1.0.0.4.1
WARNING: makeIds can't find span Id: 0.1.0.0.4.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.5
WARNING: makeIds can't find span Id: 0.1.0.0.5.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 1,524,555 microseconds
Sentence: When an astronomer discovers one of these he does not give it a name , but only a number .

Oracle Span 1:  astronomer => astronomer
Oracle Span 2:  discovers => discover-01
Oracle Span 3:  give => give-01
Oracle Span 4:  name => name-01
Oracle Span 5:  number => number
Oracle Span 6:  of => (thing :ARG1-of include-91)
Oracle Span 7:  one => 1
Oracle Span 8:  only => only
Spans:
Span 2-3:  astronomer => astronomer
Span 3-4:  discovers => discover-01
Span 10-11:  give => give-01
Span 13-14:  name => name-01
Span 18-19:  number => number
Span 5-6:  of => (thing :ARG1-of include-91)
Span 4-5:  one => 1
Span 16-17:  only => only

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 2-3:  astronomer => astronomer
Oracle Span 3-4:  discovers => discover-01
Oracle Span 10-11:  give => give-01
Oracle Span 13-14:  name => name-01
Oracle Span 18-19:  number => number
Oracle Span 5-6:  of => (thing :ARG1-of include-91)
Oracle Span 4-5:  one => 1
Oracle Span 16-17:  only => only

Dependencies:
1	When	_	WRB	WRB	_	4	advmod	_	_
2	an	_	DT	DT	_	3	det	_	_
3	astronomer	_	NN	NN	_	4	nsubj	_	_
4	discovers	_	VBZ	VBZ	_	11	advcl	_	_
5	one	_	CD	CD	_	4	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	these	_	DT	DT	_	6	pobj	_	_
8	he	_	PRP	PRP	_	11	nsubj	_	_
9	does	_	VBZ	VBZ	_	11	aux	_	_
10	not	_	RB	RB	_	11	neg	_	_
11	give	_	VB	VB	_	0	root	_	_
12	it	_	PRP	PRP	_	11	iobj	_	_
13	a	_	DT	DT	_	14	det	_	_
14	name	_	NN	NN	_	11	dobj	_	_
15	,	_	,	,	_	14	punct	_	_
16	but	_	CC	CC	_	17	cc	_	_
17	only	_	RB	RB	_	14	cc	_	_
18	a	_	DT	DT	_	19	det	_	_
19	number	_	NN	NN	_	14	conj	_	_
20	.	_	.	.	_	11	punct	_	_

Oracle:
(d / discover-01, ARG0, a / astronomer)
(d / discover-01, ARG1, t / thing)
(g / give-01, ARG0, a / astronomer)
(g / give-01, ARG1, n2 / number)
(g / give-01, ARG2, t / thing)
(g / give-01, mod, o2 / only)
(g / give-01, time, d / discover-01)
(i / include-91, ARG1, t / thing)
(n3 / name-01, ARG0, a / astronomer)
(n3 / name-01, ARG1, t / thing)
(t / thing, quant, 1 / 1)

Input(Some(Graph((give-01 :ARG1-of (instead-of-91 :ARG2 (name-01 :ARG0 astronomer :ARG1 thing)) :time (discover-01 :ARG0 astronomer :ARG1 thing) :mod only :ARG2 (thing :ARG1-of (include-91 :ARG2 this) :quant 1) :ARG1 number :ARG0 astronomer),ArrayBuffer(Span(10,11,List(0),give,give-01,false), Span(13,14,List(1),name,name-01,false), Span(3,4,List(2),discovers,discover-01,false), Span(16,17,List(3),only,only,false), Span(4,5,List(4),one,1,false), Span(5,6,List(5, 6),of,(thing :ARG1-of include-91),false), Span(18,19,List(7),number,number,false), Span(2,3,List(8),astronomer,astronomer,false)),Map(2 -> discover-01, 5 -> thing, 8 -> astronomer, 7 -> number, 1 -> name-01, 4 -> 1, 6 -> include-91, 0 -> give-01, 3 -> only),Map(t -> thing, d -> discover-01, 1 -> 1, g -> give-01, a -> astronomer, n3 -> name-01, o2 -> only, i -> include-91, n2 -> number))),[Ljava.lang.String;@35d019a3,Annotation([Ljava.lang.String;@689604d9,[Ljava.lang.String;@18078bef,[Ljava.lang.String;@799f10e1),Annotation([Ljava.lang.String;@4c371370,[Ljava.lang.String;@145f66e3,[Ledu.cmu.lti.nlp.amr.Dependency;@3023df74),Annotation([Ljava.lang.String;@313ac989,[Ljava.lang.String;@4562e04d,[Ljava.lang.String;@2a65fe7c),Annotation([Ljava.lang.String;@4135c3b,[Ljava.lang.String;@6302bbb1,[Ledu.cmu.lti.nlp.amr.Entity;@31304f14))
AMR:
(d / discover-01, ARG0, a / astronomer)
(d / discover-01, ARG1, t / thing)
(g / give-01, ARG0, 1 / 1)
(g / give-01, ARG1, n3 / name-01)
(g / give-01, condition, d / discover-01)
(i / include-91, ARG1, t / thing)
(n3 / name-01, ARG0, o2 / only)
(n3 / name-01, ARG1, n2 / number)

WARNING: makeIds can't find span Id: 0.5.0
WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 113,339 microseconds
Sentence: He might call it , for example , " Asteroid 325 . "

Oracle Span 1:  Asteroid 325 => (name :op 325 :op "Asteroid")
Oracle Span 2:  call => call-01
Oracle Span 3:  He => he
Oracle Span 4:  it => it
NER Entity: (thing :name (name :op "Asteroid" :op "325"))
Spans:
Span 9-11:  Asteroid 325 => (name :op 325 :op "Asteroid")
Span 2-3:  call => call-01
Span 0-1:  He => he
Span 3-4:  it => it

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 9-11:  Asteroid 325 => (name :op 325 :op "Asteroid")
Oracle Span 2-3:  call => call-01
Oracle Span 0-1:  He => he
Oracle Span 3-4:  it => it

Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	might	_	MD	MD	_	3	aux	_	_
3	call	_	VB	VB	_	0	root	_	_
4	it	_	PRP	PRP	_	3	dobj	_	_
5	,	_	,	,	_	3	punct	_	_
6	for	_	IN	IN	_	3	prep	_	_
7	example	_	NN	NN	_	6	pobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	"	_	''	''	_	7	punct	_	_
10	Asteroid	_	NNP	NNP	_	11	nn	_	_
11	325	_	NNP	NNP	_	7	dep	_	_
12	.	_	.	.	_	3	punct	_	_
13	"	_	''	''	_	3	punct	_	_

Oracle:
(c / call-01, ARG0, h / he)
(c / call-01, ARG1, i / it)
(c / call-01, ARG2, n2 / name)
(n2 / name, op, "Asteroid")
(n2 / name, op, 325)

Input(Some(Graph((possible-01 :ARG1 (call-01 :ARG0-of exemplify-01 :ARG2 (name :op 325 :op "Asteroid") :ARG1 it :ARG0 he)),ArrayBuffer(Span(9,11,List(0, 1, 2),Asteroid 325,(name :op 325 :op "Asteroid"),false), Span(2,3,List(3),call,call-01,false), Span(3,4,List(4),it,it,false), Span(0,1,List(5),He,he,false)),Map(2 -> "Asteroid", 5 -> he, 1 -> 325, 4 -> it, 0 -> name, 3 -> call-01),Map(h -> he, i -> it, c -> call-01, n2 -> name))),[Ljava.lang.String;@34a3d150,Annotation([Ljava.lang.String;@2a4fb17b,[Ljava.lang.String;@5c6648b0,[Ljava.lang.String;@6f1de4c7),Annotation([Ljava.lang.String;@459e9125,[Ljava.lang.String;@128d2484,[Ledu.cmu.lti.nlp.amr.Dependency;@7cc0cdad),Annotation([Ljava.lang.String;@7c7b252e,[Ljava.lang.String;@4d5d943d,[Ljava.lang.String;@368f2016),Annotation([Ljava.lang.String;@4c583ecf,[Ljava.lang.String;@692f203f,[Ledu.cmu.lti.nlp.amr.Entity;@48f2bd5b))
AMR:
(c / call-01, ARG0, h / he)
(c / call-01, ARG1, i / it)
(c / call-01, ARG2, n2 / name)
(n2 / name, op, "Asteroid")
(n2 / name, op, 325)

WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 209,324 microseconds
Sentence: I have serious reason to believe that the planet from which the little prince came is the asteroid known as B-612 .

Oracle Span 1:  asteroid => asteroid
Oracle Span 2:  B => (name :op "B-612")
Oracle Span 3:  believe => believe-01
Oracle Span 4:  came => come-01
Oracle Span 5:  I => i
Oracle Span 6:  little => little
Oracle Span 7:  planet => planet
Oracle Span 8:  prince => prince
Oracle Span 9:  reason => reason
Oracle Span 10:  serious => serious-02
NER Entity: (organization :name (name :op "B" :op "-" :op "612"))
Spans:
Span 17-18:  asteroid => asteroid
Span 20-21:  B => (name :op "B-612")
Span 5-6:  believe => believe-01
Span 14-15:  came => come-01
Span 0-1:  I => i
Span 12-13:  little => little
Span 8-9:  planet => planet
Span 13-14:  prince => prince
Span 3-4:  reason => reason
Span 2-3:  serious => serious-02

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 17-18:  asteroid => asteroid
Oracle Span 20-21:  B => (name :op "B-612")
Oracle Span 5-6:  believe => believe-01
Oracle Span 14-15:  came => come-01
Oracle Span 0-1:  I => i
Oracle Span 12-13:  little => little
Oracle Span 8-9:  planet => planet
Oracle Span 13-14:  prince => prince
Oracle Span 3-4:  reason => reason
Oracle Span 2-3:  serious => serious-02

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	have	_	VBP	VBP	_	0	root	_	_
3	serious	_	JJ	JJ	_	4	amod	_	_
4	reason	_	NN	NN	_	2	dobj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	believe	_	VB	VB	_	4	vmod	_	_
7	that	_	IN	IN	_	18	mark	_	_
8	the	_	DT	DT	_	9	det	_	_
9	planet	_	NN	NN	_	18	nsubj	_	_
10	from	_	IN	IN	_	15	prep	_	_
11	which	_	WDT	WDT	_	10	pobj	_	_
12	the	_	DT	DT	_	14	det	_	_
13	little	_	JJ	JJ	_	14	amod	_	_
14	prince	_	NN	NN	_	15	nsubj	_	_
15	came	_	VBD	VBD	_	9	rcmod	_	_
16	is	_	VBZ	VBZ	_	18	cop	_	_
17	the	_	DT	DT	_	18	det	_	_
18	asteroid	_	NN	NN	_	6	ccomp	_	_
19	known	_	VBN	VBN	_	18	vmod	_	_
20	as	_	IN	IN	_	19	prep	_	_
21	B-612	_	NN	NN	_	20	pobj	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(a / asteroid, domain, p / planet)
(a / asteroid, name, n4 / name)
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, c2 / come-01)
(c2 / come-01, ARG1, p2 / prince)
(c2 / come-01, ARG3, a / asteroid)
(n4 / name, op, "B-612")
(p2 / prince, mod, l / little)
(s / serious-02, ARG1, r / reason)

Input(Some(Graph((cause-01 :ARG0 (reason :ARG1-of serious-02) :ARG1 (believe-01 :ARG1 (come-01 :ARG3 (asteroid :domain planet :name (name :op "B-612") :wiki -) :ARG1 (prince :mod little)) :ARG0 i)),ArrayBuffer(Span(20,21,List(0, 1),B,(name :op "B-612"),false), Span(3,4,List(2),reason,reason,false), Span(2,3,List(3),serious,serious-02,false), Span(5,6,List(4),believe,believe-01,false), Span(14,15,List(5),came,come-01,false), Span(17,18,List(6),asteroid,asteroid,false), Span(8,9,List(7),planet,planet,false), Span(13,14,List(8),prince,prince,false), Span(12,13,List(9),little,little,false), Span(0,1,List(10),I,i,false)),Map(2 -> reason, 5 -> come-01, 8 -> prince, 7 -> planet, 1 -> "B-612", 4 -> believe-01, 6 -> asteroid, 9 -> little, 0 -> name, 10 -> i, 3 -> serious-02),Map(b -> believe-01, p2 -> prince, s -> serious-02, n4 -> name, p -> planet, a -> asteroid, i -> i, r -> reason, l -> little, c2 -> come-01))),[Ljava.lang.String;@7b2bbc3,Annotation([Ljava.lang.String;@a1153bc,[Ljava.lang.String;@1aafa419,[Ljava.lang.String;@47eaca72),Annotation([Ljava.lang.String;@55141def,[Ljava.lang.String;@55182842,[Ledu.cmu.lti.nlp.amr.Dependency;@3270d194),Annotation([Ljava.lang.String;@235834f2,[Ljava.lang.String;@5656be13,[Ljava.lang.String;@4218d6a3),Annotation([Ljava.lang.String;@76505305,[Ljava.lang.String;@14cd1699,[Ledu.cmu.lti.nlp.amr.Entity;@77888435))
AMR:
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, a / asteroid)
(b / believe-01, ARG2, p / planet)
(c2 / come-01, ARG0, p / planet)
(c2 / come-01, ARG1, p2 / prince)
(n4 / name, op, "B-612")
(p2 / prince, mod, l / little)
(r / reason, purpose, b / believe-01)
(s / serious-02, ARG0, n4 / name)
(s / serious-02, ARG1, r / reason)

WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 356,070 microseconds
Sentence: This asteroid has only once been seen through the telescope .

Oracle Span 1:  asteroid => asteroid
Oracle Span 2:  has => have-frequency-91
Oracle Span 3:  only => only
Oracle Span 4:  seen => see-01
Oracle Span 5:  telescope => telescope
Oracle Span 6:  This => this
Spans:
Span 1-2:  asteroid => asteroid
Span 2-3:  has => have-frequency-91
Span 3-4:  only => only
Span 6-7:  seen => see-01
Span 9-10:  telescope => telescope
Span 0-1:  This => this

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 1-2:  asteroid => asteroid
Oracle Span 2-3:  has => have-frequency-91
Oracle Span 3-4:  only => only
Oracle Span 6-7:  seen => see-01
Oracle Span 9-10:  telescope => telescope
Oracle Span 0-1:  This => this

Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	asteroid	_	NN	NN	_	7	nsubjpass	_	_
3	has	_	VBZ	VBZ	_	7	aux	_	_
4	only	_	RB	RB	_	5	advmod	_	_
5	once	_	RB	RB	_	7	advmod	_	_
6	been	_	VBN	VBN	_	7	auxpass	_	_
7	seen	_	VBN	VBN	_	0	root	_	_
8	through	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	telescope	_	NN	NN	_	8	pobj	_	_
11	.	_	.	.	_	7	punct	_	_

Oracle:
(a / asteroid, mod, t / this)
(h / have-frequency-91, ARG1, s / see-01)
(h / have-frequency-91, mod, o / only)
(s / see-01, ARG1, a / asteroid)
(s / see-01, instrument, t2 / telescope)

Input(Some(Graph((see-01 :ARG1-of (have-frequency-91 :mod only :ARG2 1) :instrument telescope :ARG1 (asteroid :mod this)),ArrayBuffer(Span(6,7,List(0),seen,see-01,false), Span(3,4,List(1),only,only,false), Span(9,10,List(2),telescope,telescope,false), Span(1,2,List(3),asteroid,asteroid,false), Span(0,1,List(4),This,this,false), Span(2,3,List(5),has,have-frequency-91,false)),Map(2 -> telescope, 5 -> have-frequency-91, 1 -> only, 4 -> this, 0 -> see-01, 3 -> asteroid),Map(h -> have-frequency-91, t -> this, s -> see-01, a -> asteroid, t2 -> telescope, o -> only))),[Ljava.lang.String;@73a1e9a9,Annotation([Ljava.lang.String;@71d44a3,[Ljava.lang.String;@7b98f307,[Ljava.lang.String;@4802796d),Annotation([Ljava.lang.String;@34123d65,[Ljava.lang.String;@59474f18,[Ledu.cmu.lti.nlp.amr.Dependency;@65fb9ffc),Annotation([Ljava.lang.String;@3e694b3f,[Ljava.lang.String;@1bb5a082,[Ljava.lang.String;@78691363),Annotation([Ljava.lang.String;@41d477ed,[Ljava.lang.String;@3590fc5b,[Ledu.cmu.lti.nlp.amr.Entity;@397fbdb))
AMR:
(a / asteroid, mod, t / this)
(h / have-frequency-91, ARG0, o / only)
(h / have-frequency-91, ARG1, a / asteroid)
(s / see-01, ARG0, t2 / telescope)
(s / see-01, ARG1, a / asteroid)

WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 35,493 microseconds
Sentence: That was by a Turkish astronomer , in 1909 .

Oracle Span 1:  1909 => (date-entity :year 1909)
Oracle Span 2:  astronomer => astronomer
Oracle Span 3:  Turkish => (country :name (name :op "Turkey"))
NER Entity: (thing :name (name :op "Turkish"))
Spans:
Span 8-9:  1909 => (date-entity :year 1909)
Span 5-6:  astronomer => astronomer
Span 4-5:  Turkish => (country :name (name :op "Turkey"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  1909 => (date-entity :year 1909)
Oracle Span 5-6:  astronomer => astronomer
Oracle Span 4-5:  Turkish => (country :name (name :op "Turkey"))

Dependencies:
1	That	_	DT	DT	_	2	nsubj	_	_
2	was	_	VBD	VBD	_	0	root	_	_
3	by	_	IN	IN	_	2	prep	_	_
4	a	_	DT	DT	_	6	det	_	_
5	Turkish	_	JJ	JJ	_	6	amod	_	_
6	astronomer	_	NN	NN	_	3	pobj	_	_
7	,	_	,	,	_	2	punct	_	_
8	in	_	IN	IN	_	2	prep	_	_
9	1909	_	CD	CD	_	8	pobj	_	_
10	.	_	.	.	_	2	punct	_	_

Oracle:
(a / astronomer, mod, c / country)
(c / country, name, n / name)
(d / date-entity, year, 1909)
(n / name, op, "Turkey")

Input(Some(Graph((see-01 :ARG0 (astronomer :mod (country :name (name :op "Turkey") :wiki "Turkey")) :time (date-entity :year 1909)),ArrayBuffer(Span(4,5,List(0, 1, 2),Turkish,(country :name (name :op "Turkey")),false), Span(8,9,List(3, 4),1909,(date-entity :year 1909),false), Span(5,6,List(5),astronomer,astronomer,false)),Map(2 -> "Turkey", 5 -> astronomer, 1 -> name, 4 -> 1909, 0 -> country, 3 -> date-entity),Map(n -> name, d -> date-entity, a -> astronomer, c -> country))),[Ljava.lang.String;@639c2c1d,Annotation([Ljava.lang.String;@5fe94a96,[Ljava.lang.String;@443118b0,[Ljava.lang.String;@765d7657),Annotation([Ljava.lang.String;@74235045,[Ljava.lang.String;@618b19ad,[Ledu.cmu.lti.nlp.amr.Dependency;@2d3379b4),Annotation([Ljava.lang.String;@30c15d8b,[Ljava.lang.String;@5e0e82ae,[Ljava.lang.String;@6771beb3),Annotation([Ljava.lang.String;@51399530,[Ljava.lang.String;@6b2ea799,[Ledu.cmu.lti.nlp.amr.Entity;@411f53a0))
AMR:
(a / astronomer, mod, c / country)
(c / country, name, n / name)
(d / date-entity, poss, c / country)
(d / date-entity, year, 1909)
(n / name, op, "Turkey")

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 32,051 microseconds
Sentence: On making his discovery , the astronomer had presented it to the International Astronomical Congress , in a great demonstration .

Oracle Span 1:  astronomer => astronomer
Oracle Span 2:  demonstration => demonstrate-01
Oracle Span 3:  discovery => discover-01
Oracle Span 4:  great => great
Oracle Span 5:  International Astronomical Congress => (organization :name (name :op "Congress" :op "Astronomical" :op "International"))
Oracle Span 6:  it => it
Oracle Span 7:  presented => present-01
NER Entity: (organization :name (name :op "International" :op "Astronomical" :op "Congress"))
Spans:
Span 6-7:  astronomer => astronomer
Span 19-20:  demonstration => demonstrate-01
Span 3-4:  discovery => discover-01
Span 18-19:  great => great
Span 12-15:  International Astronomical Congress => (organization :name (name :op "Congress" :op "Astronomical" :op "International"))
Span 9-10:  it => it
Span 8-9:  presented => present-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 6-7:  astronomer => astronomer
Oracle Span 19-20:  demonstration => demonstrate-01
Oracle Span 3-4:  discovery => discover-01
Oracle Span 18-19:  great => great
Oracle Span 12-15:  International Astronomical Congress => (organization :name (name :op "Congress" :op "Astronomical" :op "International"))
Oracle Span 9-10:  it => it
Oracle Span 8-9:  presented => present-01

Dependencies:
1	On	_	IN	IN	_	9	prep	_	_
2	making	_	VBG	VBG	_	1	pcomp	_	_
3	his	_	PRP$	PRP$	_	4	poss	_	_
4	discovery	_	NN	NN	_	2	dobj	_	_
5	,	_	,	,	_	9	punct	_	_
6	the	_	DT	DT	_	7	det	_	_
7	astronomer	_	NN	NN	_	9	nsubj	_	_
8	had	_	VBD	VBD	_	9	aux	_	_
9	presented	_	VBN	VBN	_	0	root	_	_
10	it	_	PRP	PRP	_	9	dobj	_	_
11	to	_	TO	TO	_	9	prep	_	_
12	the	_	DT	DT	_	15	det	_	_
13	International	_	NNP	NNP	_	15	nn	_	_
14	Astronomical	_	NNP	NNP	_	15	nn	_	_
15	Congress	_	NNP	NNP	_	11	pobj	_	_
16	,	_	,	,	_	9	punct	_	_
17	in	_	IN	IN	_	9	prep	_	_
18	a	_	DT	DT	_	20	det	_	_
19	great	_	JJ	JJ	_	20	amod	_	_
20	demonstration	_	NN	NN	_	17	pobj	_	_
21	.	_	.	.	_	9	punct	_	_

Oracle:
(d2 / demonstrate-01, ARG0, a / astronomer)
(d2 / demonstrate-01, mod, g / great)
(d3 / discover-01, ARG0, a / astronomer)
(n / name, op, "Astronomical")
(n / name, op, "Congress")
(n / name, op, "International")
(o / organization, name, n / name)
(p / present-01, ARG0, a / astronomer)
(p / present-01, ARG1, i / it)
(p / present-01, ARG2, o / organization)
(p / present-01, manner, d2 / demonstrate-01)
(p / present-01, time, d3 / discover-01)

Input(Some(Graph((present-01 :time (discover-01 :ARG0 astronomer) :manner (demonstrate-01 :mod great :ARG0 astronomer) :ARG2 (organization :name (name :op "Congress" :op "Astronomical" :op "International") :wiki "International_Astronautical_Congress") :ARG1 it :ARG0 astronomer),ArrayBuffer(Span(12,15,List(0, 1, 2, 3, 4),International Astronomical Congress,(organization :name (name :op "Congress" :op "Astronomical" :op "International")),false), Span(8,9,List(5),presented,present-01,false), Span(6,7,List(6),astronomer,astronomer,false), Span(18,19,List(7),great,great,false), Span(9,10,List(8),it,it,false), Span(3,4,List(9),discovery,discover-01,false), Span(19,20,List(10),demonstration,demonstrate-01,false)),Map(2 -> "Congress", 5 -> present-01, 8 -> it, 7 -> great, 1 -> name, 4 -> "International", 6 -> astronomer, 9 -> discover-01, 0 -> organization, 10 -> demonstrate-01, 3 -> "Astronomical"),Map(n -> name, d3 -> discover-01, g -> great, p -> present-01, a -> astronomer, d2 -> demonstrate-01, i -> it, o -> organization))),[Ljava.lang.String;@2b71e916,Annotation([Ljava.lang.String;@36fc695d,[Ljava.lang.String;@28701274,[Ljava.lang.String;@13c9d689),Annotation([Ljava.lang.String;@3754a4bf,[Ljava.lang.String;@62379589,[Ledu.cmu.lti.nlp.amr.Dependency;@4afcd809),Annotation([Ljava.lang.String;@175c2241,[Ljava.lang.String;@5bf0d49,[Ljava.lang.String;@5b7a5baa),Annotation([Ljava.lang.String;@776aec5c,[Ljava.lang.String;@1d296da,[Ledu.cmu.lti.nlp.amr.Entity;@7c7a06ec))
AMR:
(d2 / demonstrate-01, ARG0, a / astronomer)
(d2 / demonstrate-01, mod, g / great)
(d3 / discover-01, ARG0, a / astronomer)
(n / name, op, "Astronomical")
(n / name, op, "Congress")
(n / name, op, "International")
(o / organization, name, n / name)
(p / present-01, ARG0, a / astronomer)
(p / present-01, ARG1, i / it)
(p / present-01, ARG4, o / organization)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
Decoded in 77,965 microseconds
Sentence: But he was in Turkish costume , and so nobody would believe what he said .

Oracle Span 1:  believe => believe-01
Oracle Span 2:  But => contrast-01
Oracle Span 3:  costume => costume-01
Oracle Span 4:  he => he
Oracle Span 5:  said => (thing :ARG1-of say-01)
Oracle Span 6:  Turkish => (country :name (name :op "Turkey"))
NER Entity: (thing :name (name :op "Turkish"))
Spans:
Span 11-12:  believe => believe-01
Span 0-1:  But => contrast-01
Span 5-6:  costume => costume-01
Span 1-2:  he => he
Span 14-15:  said => (thing :ARG1-of say-01)
Span 4-5:  Turkish => (country :name (name :op "Turkey"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-12:  believe => believe-01
Oracle Span 0-1:  But => contrast-01
Oracle Span 5-6:  costume => costume-01
Oracle Span 1-2:  he => he
Oracle Span 14-15:  said => (thing :ARG1-of say-01)
Oracle Span 4-5:  Turkish => (country :name (name :op "Turkey"))

Dependencies:
1	But	_	CC	CC	_	3	cc	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	was	_	VBD	VBD	_	0	root	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Turkish	_	JJ	JJ	_	6	amod	_	_
6	costume	_	NN	NN	_	4	pobj	_	_
7	,	_	,	,	_	3	punct	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	so	_	IN	IN	_	3	conj	_	_
10	nobody	_	NN	NN	_	12	nsubj	_	_
11	would	_	MD	MD	_	12	aux	_	_
12	believe	_	VB	VB	_	3	ccomp	_	_
13	what	_	WP	WP	_	15	dobj	_	_
14	he	_	PRP	PRP	_	15	nsubj	_	_
15	said	_	VBD	VBD	_	12	ccomp	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(b2 / believe-01, ARG1, t / thing)
(c / costume-01, ARG1, h / he)
(c / costume-01, manner, c2 / country)
(c2 / country, name, n / name)
(c4 / contrast-01, ARG2, c / costume-01)
(n / name, op, "Turkey")
(s2 / say-01, ARG0, h / he)
(s2 / say-01, ARG1, t / thing)

Input(Some(Graph((contrast-01 :ARG2 (costume-01 :ARG0-of (cause-01 :ARG1 (believe-01 :ARG1 (thing :ARG1-of (say-01 :ARG0 he)) :ARG0 (somebody :polarity -))) :manner (country :name (name :op "Turkey") :wiki "Turkey") :ARG1 he)),ArrayBuffer(Span(4,5,List(0, 1, 2),Turkish,(country :name (name :op "Turkey")),false), Span(0,1,List(3),But,contrast-01,false), Span(5,6,List(4),costume,costume-01,false), Span(11,12,List(5),believe,believe-01,false), Span(14,15,List(6, 7),said,(thing :ARG1-of say-01),false), Span(1,2,List(8),he,he,false)),Map(2 -> "Turkey", 5 -> believe-01, 8 -> he, 7 -> say-01, 1 -> name, 4 -> costume-01, 6 -> thing, 0 -> country, 3 -> contrast-01),Map(n -> name, h -> he, s2 -> say-01, t -> thing, b2 -> believe-01, c4 -> contrast-01, c -> costume-01, c2 -> country))),[Ljava.lang.String;@75d4a5c2,Annotation([Ljava.lang.String;@557caf28,[Ljava.lang.String;@408d971b,[Ljava.lang.String;@6c6cb480),Annotation([Ljava.lang.String;@3c46e67a,[Ljava.lang.String;@c730b35,[Ledu.cmu.lti.nlp.amr.Dependency;@206a70ef),Annotation([Ljava.lang.String;@292b08d6,[Ljava.lang.String;@22555ebf,[Ljava.lang.String;@36ebc363),Annotation([Ljava.lang.String;@45752059,[Ljava.lang.String;@34e9fd99,[Ledu.cmu.lti.nlp.amr.Entity;@3c41ed1d))
AMR:
(b2 / believe-01, ARG0, h / he)
(b2 / believe-01, ARG1, t / thing)
(c / costume-01, ARG0, h / he)
(c / costume-01, mod, c2 / country)
(c2 / country, name, n / name)
(c4 / contrast-01, ARG2, b2 / believe-01)
(n / name, op, "Turkey")
(s2 / say-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 69,676 microseconds
Sentence: Grown - ups are like that ...

Oracle Span 1:  Grown => grown-up
Oracle Span 2:  that => that
Spans:
Span 0-1:  Grown => grown-up
Span 5-6:  that => that

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Grown => grown-up
Oracle Span 5-6:  that => that

Dependencies:
1	Grown	_	NNP	NNP	_	3	nn	_	_
2	-	_	NNP	NNP	_	3	nn	_	_
3	ups	_	NNS	NNS	_	4	nsubj	_	_
4	are	_	VBP	VBP	_	0	root	_	_
5	like	_	IN	IN	_	4	prep	_	_
6	that	_	DT	DT	_	5	pobj	_	_
7	...	_	:	:	_	4	punct	_	_

Oracle:


Input(Some(Graph((resemble-01 :ARG1 grown-up :ARG2 that),ArrayBuffer(Span(5,6,List(0),that,that,false), Span(0,1,List(1),Grown,grown-up,false)),Map(1 -> grown-up, 0 -> that),Map(t -> that, g -> grown-up))),[Ljava.lang.String;@54d9d12d,Annotation([Ljava.lang.String;@38425407,[Ljava.lang.String;@43bc63a3,[Ljava.lang.String;@702657cc),Annotation([Ljava.lang.String;@6a6cb05c,[Ljava.lang.String;@40a4337a,[Ledu.cmu.lti.nlp.amr.Dependency;@6025e1b6),Annotation([Ljava.lang.String;@22ff4249,[Ljava.lang.String;@2d1ef81a,[Ljava.lang.String;@4c402120),Annotation([Ljava.lang.String;@327514f,[Ljava.lang.String;@5b12b668,[Ledu.cmu.lti.nlp.amr.Entity;@1165b38))
AMR:
(g / grown-up, poss, t / that)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 12,923 microseconds
Sentence: Fortunately , however , for the reputation of Asteroid B-612 , a Turkish dictator made a law that his subjects , under pain of death , should change to European costume .

Oracle Span 1:  Asteroid B => (planet :name (name :op "B-612" :op "Asteroid"))
Oracle Span 2:  change => change-01
Oracle Span 3:  costume => costume
Oracle Span 4:  death => die-01
Oracle Span 5:  dictator => (have-org-role-91 :ARG2 dictator)
Oracle Span 6:  European => (continent :name (name :op "Europe"))
Oracle Span 7:  Fortunately => fortunate-01
Oracle Span 8:  law => law
Oracle Span 9:  made => make-01
Oracle Span 10:  reputation => reputation
Oracle Span 11:  subjects => subject
Oracle Span 12:  Turkish => (country :name (name :op "Turkey"))
NER Entity: (person :name (name :op "Asteroid" :op "B" :op "-" :op "612"))
NER Entity: (thing :name (name :op "European"))
Spans:
Span 8-10:  Asteroid B => (planet :name (name :op "B-612" :op "Asteroid"))
Span 29-30:  change => change-01
Span 32-33:  costume => costume
Span 26-27:  death => die-01
Span 15-16:  dictator => (have-org-role-91 :ARG2 dictator)
Span 31-32:  European => (continent :name (name :op "Europe"))
Span 0-1:  Fortunately => fortunate-01
Span 18-19:  law => law
Span 16-17:  made => make-01
Span 6-7:  reputation => reputation
Span 21-22:  subjects => subject
Span 14-15:  Turkish => (country :name (name :op "Turkey"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 8-10:  Asteroid B => (planet :name (name :op "B-612" :op "Asteroid"))
Oracle Span 29-30:  change => change-01
Oracle Span 32-33:  costume => costume
Oracle Span 26-27:  death => die-01
Oracle Span 15-16:  dictator => (have-org-role-91 :ARG2 dictator)
Oracle Span 31-32:  European => (continent :name (name :op "Europe"))
Oracle Span 0-1:  Fortunately => fortunate-01
Oracle Span 18-19:  law => law
Oracle Span 16-17:  made => make-01
Oracle Span 6-7:  reputation => reputation
Oracle Span 21-22:  subjects => subject
Oracle Span 14-15:  Turkish => (country :name (name :op "Turkey"))

Dependencies:
1	Fortunately	_	RB	RB	_	15	advmod	_	_
2	,	_	,	,	_	15	punct	_	_
3	however	_	RB	RB	_	15	advmod	_	_
4	,	_	,	,	_	15	punct	_	_
5	for	_	IN	IN	_	15	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	reputation	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	Asteroid	_	NNP	NNP	_	10	nn	_	_
10	B-612	_	NNP	NNP	_	8	pobj	_	_
11	,	_	,	,	_	15	punct	_	_
12	a	_	DT	DT	_	14	det	_	_
13	Turkish	_	JJ	JJ	_	14	amod	_	_
14	dictator	_	NN	NN	_	15	nsubj	_	_
15	made	_	VBD	VBD	_	0	root	_	_
16	a	_	DT	DT	_	17	det	_	_
17	law	_	NN	NN	_	15	dobj	_	_
18	that	_	IN	IN	_	28	mark	_	_
19	his	_	PRP$	PRP$	_	20	poss	_	_
20	subjects	_	NNS	NNS	_	28	nsubj	_	_
21	,	_	,	,	_	28	punct	_	_
22	under	_	IN	IN	_	28	prep	_	_
23	pain	_	NN	NN	_	22	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	death	_	NN	NN	_	24	pobj	_	_
26	,	_	,	,	_	28	punct	_	_
27	should	_	MD	MD	_	28	aux	_	_
28	change	_	VB	VB	_	15	ccomp	_	_
29	to	_	TO	TO	_	28	prep	_	_
30	European	_	JJ	JJ	_	31	amod	_	_
31	costume	_	NN	NN	_	29	pobj	_	_
32	.	_	.	.	_	15	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / change-01, ARG0, s / subject)
(c2 / change-01, ARG3, c3 / costume)
(c3 / costume, mod, c4 / continent)
(c4 / continent, name, n2 / name)
(d2 / die-01, ARG1, s / subject)
(f / fortunate-01, ARG1, r / reputation)
(f / fortunate-01, ARG2, m / make-01)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, d / dictator)
(l / law, topic, c2 / change-01)
(m / make-01, ARG1, l / law)
(n / name, op, "Turkey")
(n2 / name, op, "Europe")
(n3 / name, op, "Asteroid")
(n3 / name, op, "B-612")
(p2 / planet, name, n3 / name)
(r / reputation, poss, p2 / planet)

Input(Some(Graph((contrast-01 :ARG2 (make-01 :ARG2-of (fortunate-01 :ARG1 (reputation :poss (planet :name (name :op "B-612" :op "Asteroid") :wiki -))) :ARG1 (law :topic (change-01 :manner (threaten-01 :ARG1 (penalize-01 :topic (die-01 :ARG1 subject) :ARG1 subject) :ARG0 dictator :ARG2 subject) :ARG3 (costume :mod (continent :name (name :op "Europe") :wiki "Europe")) :ARG0 (subject :poss person))) :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 dictator :ARG1 (country :name (name :op "Turkey") :wiki "Turkey"))))),ArrayBuffer(Span(8,10,List(0, 1, 2, 3),Asteroid B,(planet :name (name :op "B-612" :op "Asteroid")),false), Span(14,15,List(4, 5, 6),Turkish,(country :name (name :op "Turkey")),false), Span(31,32,List(7, 8, 9),European,(continent :name (name :op "Europe")),false), Span(16,17,List(10),made,make-01,false), Span(6,7,List(11),reputation,reputation,false), Span(18,19,List(12),law,law,false), Span(29,30,List(13),change,change-01,false), Span(26,27,List(14),death,die-01,false), Span(32,33,List(15),costume,costume,false), Span(21,22,List(16),subjects,subject,false), Span(15,16,List(17, 18),dictator,(have-org-role-91 :ARG2 dictator),false), Span(0,1,List(19),Fortunately,fortunate-01,false)),Map(2 -> "B-612", 5 -> name, 12 -> law, 15 -> costume, 8 -> name, 18 -> dictator, 7 -> continent, 17 -> have-org-role-91, 1 -> name, 4 -> country, 11 -> reputation, 14 -> die-01, 6 -> "Turkey", 9 -> "Europe", 0 -> planet, 16 -> subject, 19 -> fortunate-01, 10 -> make-01, 3 -> "Asteroid", 13 -> change-01),Map(n -> name, h -> have-org-role-91, p2 -> planet, c4 -> continent, s -> subject, d -> dictator, m -> make-01, c3 -> costume, n3 -> name, d2 -> die-01, r -> reputation, c -> country, l -> law, f -> fortunate-01, c2 -> change-01, n2 -> name))),[Ljava.lang.String;@3b69e7d1,Annotation([Ljava.lang.String;@815b41f,[Ljava.lang.String;@5542c4ed,[Ljava.lang.String;@1573f9fc),Annotation([Ljava.lang.String;@6150c3ec,[Ljava.lang.String;@44c03695,[Ledu.cmu.lti.nlp.amr.Dependency;@7e6f74c),Annotation([Ljava.lang.String;@dd05255,[Ljava.lang.String;@6a78afa0,[Ljava.lang.String;@2f4948e4),Annotation([Ljava.lang.String;@1f2586d6,[Ljava.lang.String;@10683d9d,[Ledu.cmu.lti.nlp.amr.Entity;@3fc2959f))
AMR:
(c / country, name, n / name)
(c2 / change-01, ARG0, h / have-org-role-91)
(c2 / change-01, ARG1, p2 / planet)
(c2 / change-01, ARG2, c3 / costume)
(c2 / change-01, manner, d2 / die-01)
(c3 / costume, mod, c4 / continent)
(c4 / continent, name, n2 / name)
(d2 / die-01, ARG1, r / reputation)
(f / fortunate-01, ARG0, s / subject)
(h / have-org-role-91, ARG2, d / dictator)
(h / have-org-role-91, mod, c / country)
(m / make-01, ARG0, s / subject)
(m / make-01, ARG1, l / law)
(m / make-01, ARG2, h / have-org-role-91)
(n / name, op, "Turkey")
(n2 / name, op, "Europe")
(n3 / name, op, "Asteroid")
(n3 / name, op, "B-612")
(p2 / planet, name, n3 / name)

WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.2.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 524,540 microseconds
Sentence: So in 1920 the astronomer gave his demonstration all over again , dressed with impressive style and elegance .

Oracle Span 1:  1920 => (date-entity :year 1920)
Oracle Span 2:  again => again
Oracle Span 3:  and => and
Oracle Span 4:  astronomer => astronomer
Oracle Span 5:  demonstration => demonstrate-01
Oracle Span 6:  dressed => dress-01
Oracle Span 7:  elegance => elegance
Oracle Span 8:  impressive => impress-01
Oracle Span 9:  style => style
Spans:
Span 2-3:  1920 => (date-entity :year 1920)
Span 10-11:  again => again
Span 16-17:  and => and
Span 4-5:  astronomer => astronomer
Span 7-8:  demonstration => demonstrate-01
Span 12-13:  dressed => dress-01
Span 17-18:  elegance => elegance
Span 14-15:  impressive => impress-01
Span 15-16:  style => style

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 2-3:  1920 => (date-entity :year 1920)
Oracle Span 10-11:  again => again
Oracle Span 16-17:  and => and
Oracle Span 4-5:  astronomer => astronomer
Oracle Span 7-8:  demonstration => demonstrate-01
Oracle Span 12-13:  dressed => dress-01
Oracle Span 17-18:  elegance => elegance
Oracle Span 14-15:  impressive => impress-01
Oracle Span 15-16:  style => style

Dependencies:
1	So	_	RB	RB	_	6	advmod	_	_
2	in	_	IN	IN	_	6	prep	_	_
3	1920	_	CD	CD	_	2	pobj	_	_
4	the	_	DT	DT	_	5	det	_	_
5	astronomer	_	NN	NN	_	6	nsubj	_	_
6	gave	_	VBD	VBD	_	0	root	_	_
7	his	_	PRP$	PRP$	_	8	poss	_	_
8	demonstration	_	NN	NN	_	6	dobj	_	_
9	all	_	DT	DT	_	10	dep	_	_
10	over	_	IN	IN	_	6	advmod	_	_
11	again	_	RB	RB	_	10	advmod	_	_
12	,	_	,	,	_	6	punct	_	_
13	dressed	_	VBN	VBN	_	6	vmod	_	_
14	with	_	IN	IN	_	13	prep	_	_
15	impressive	_	JJ	JJ	_	16	amod	_	_
16	style	_	NN	NN	_	14	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	elegance	_	NN	NN	_	16	conj	_	_
19	.	_	.	.	_	6	punct	_	_

Oracle:
(a4 / and, op, e / elegance)
(a4 / and, op, s / style)
(d2 / dress-01, ARG1, a / astronomer)
(d2 / dress-01, ARG2, a4 / and)
(d3 / date-entity, year, 1920)
(d4 / demonstrate-01, ARG0, a / astronomer)
(d4 / demonstrate-01, mod, a3 / again)
(d4 / demonstrate-01, time, d3 / date-entity)
(i / impress-01, ARG0, a4 / and)

Input(Some(Graph((cause-01 :ARG1 (demonstrate-01 :mod (again :mod all-over) :time (date-entity :year 1920) :ARG0 (astronomer :ARG1-of (dress-01 :ARG2 (and :ARG0-of impress-01 :op elegance :op style))))),ArrayBuffer(Span(2,3,List(0, 1),1920,(date-entity :year 1920),false), Span(4,5,List(2),astronomer,astronomer,false), Span(12,13,List(3),dressed,dress-01,false), Span(16,17,List(4),and,and,false), Span(17,18,List(5),elegance,elegance,false), Span(15,16,List(6),style,style,false), Span(10,11,List(7),again,again,false), Span(7,8,List(8),demonstration,demonstrate-01,false), Span(14,15,List(9),impressive,impress-01,false)),Map(2 -> astronomer, 5 -> elegance, 8 -> demonstrate-01, 7 -> again, 1 -> 1920, 4 -> and, 6 -> style, 9 -> impress-01, 0 -> date-entity, 3 -> dress-01),Map(e -> elegance, d3 -> date-entity, a3 -> again, s -> style, a -> astronomer, d2 -> dress-01, i -> impress-01, d4 -> demonstrate-01, a4 -> and))),[Ljava.lang.String;@5aa9e4eb,Annotation([Ljava.lang.String;@6989da5e,[Ljava.lang.String;@385c9627,[Ljava.lang.String;@139982de),Annotation([Ljava.lang.String;@682b2fa,[Ljava.lang.String;@217ed35e,[Ledu.cmu.lti.nlp.amr.Dependency;@7dcf94f8),Annotation([Ljava.lang.String;@229f66ed,[Ljava.lang.String;@31190526,[Ljava.lang.String;@662ac478),Annotation([Ljava.lang.String;@6743e411,[Ljava.lang.String;@3eb25e1a,[Ledu.cmu.lti.nlp.amr.Entity;@477b4cdf))
AMR:
(a4 / and, op, e / elegance)
(d2 / dress-01, ARG0, a / astronomer)
(d2 / dress-01, ARG1, d3 / date-entity)
(d2 / dress-01, ARG2, a4 / and)
(d3 / date-entity, year, 1920)
(d4 / demonstrate-01, ARG0, a3 / again)
(d4 / demonstrate-01, ARG1, a / astronomer)
(i / impress-01, ARG0, a4 / and)
(i / impress-01, ARG1, s / style)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.2
Decoded in 109,783 microseconds
Sentence: And this time everybody accepted his report .

Oracle Span 1:  accepted => accept-01
Oracle Span 2:  And => and
Oracle Span 3:  everybody => everybody
Oracle Span 4:  report => (thing :ARG1-of report-01)
Oracle Span 5:  this => this
Oracle Span 6:  time => time
Spans:
Span 4-5:  accepted => accept-01
Span 0-1:  And => and
Span 3-4:  everybody => everybody
Span 6-7:  report => (thing :ARG1-of report-01)
Span 1-2:  this => this
Span 2-3:  time => time

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 4-5:  accepted => accept-01
Oracle Span 0-1:  And => and
Oracle Span 3-4:  everybody => everybody
Oracle Span 6-7:  report => (thing :ARG1-of report-01)
Oracle Span 1-2:  this => this
Oracle Span 2-3:  time => time

Dependencies:
1	And	_	CC	CC	_	5	cc	_	_
2	this	_	DT	DT	_	4	det	_	_
3	time	_	NN	NN	_	4	nn	_	_
4	everybody	_	NN	NN	_	5	nsubj	_	_
5	accepted	_	VBD	VBD	_	0	root	_	_
6	his	_	PRP$	PRP$	_	7	poss	_	_
7	report	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, a2 / accept-01)
(a2 / accept-01, ARG0, e / everybody)
(a2 / accept-01, ARG1, t3 / thing)
(a2 / accept-01, time, t / time)
(r / report-01, ARG1, t3 / thing)
(t / time, mod, t2 / this)

Input(Some(Graph((and :op (accept-01 :time (time :mod this) :ARG1 (thing :ARG1-of (report-01 :ARG0 he)) :ARG0 everybody)),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(4,5,List(1),accepted,accept-01,false), Span(2,3,List(2),time,time,false), Span(1,2,List(3),this,this,false), Span(6,7,List(4, 5),report,(thing :ARG1-of report-01),false), Span(3,4,List(6),everybody,everybody,false)),Map(2 -> time, 5 -> report-01, 1 -> accept-01, 4 -> thing, 6 -> everybody, 0 -> and, 3 -> this),Map(e -> everybody, t -> time, t3 -> thing, a -> and, t2 -> this, r -> report-01, a2 -> accept-01))),[Ljava.lang.String;@77c2494c,Annotation([Ljava.lang.String;@f5958c9,[Ljava.lang.String;@233795b6,[Ljava.lang.String;@3eb738bb),Annotation([Ljava.lang.String;@5bda8e08,[Ljava.lang.String;@1e800aaa,[Ledu.cmu.lti.nlp.amr.Dependency;@185a6e9),Annotation([Ljava.lang.String;@6f03482,[Ljava.lang.String;@9d5509a,[Ljava.lang.String;@179ece50),Annotation([Ljava.lang.String;@3b0090a4,[Ljava.lang.String;@3cd3e762,[Ledu.cmu.lti.nlp.amr.Entity;@1fa121e2))
AMR:
(a / and, op, a2 / accept-01)
(a2 / accept-01, ARG0, e / everybody)
(a2 / accept-01, ARG1, t / time)
(r / report-01, ARG0, e / everybody)
(r / report-01, ARG1, t3 / thing)
(t / time, mod, t2 / this)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 210,545 microseconds
Sentence: If I have told you these details about the asteroid , and made a note of its number for you , it is on account of the grown - ups and their ways .

Oracle Span 1:  account => account-01
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  asteroid => asteroid
Oracle Span 5:  details => detail
Oracle Span 6:  grown => grown-up
Oracle Span 7:  I => i
Oracle Span 8:  note => note-01
Oracle Span 9:  number => number
Oracle Span 10:  told => tell-01
Oracle Span 11:  ways => way
Oracle Span 12:  you => you
Spans:
Span 24-25:  account => account-01
Span 11-12:  and => and
Span 30-31:  and => and
Span 9-10:  asteroid => asteroid
Span 6-7:  details => detail
Span 27-28:  grown => grown-up
Span 1-2:  I => i
Span 14-15:  note => note-01
Span 17-18:  number => number
Span 3-4:  told => tell-01
Span 32-33:  ways => way
Span 4-5:  you => you

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 24-25:  account => account-01
Oracle Span 11-12:  and => and
Oracle Span 30-31:  and => and
Oracle Span 9-10:  asteroid => asteroid
Oracle Span 6-7:  details => detail
Oracle Span 27-28:  grown => grown-up
Oracle Span 1-2:  I => i
Oracle Span 14-15:  note => note-01
Oracle Span 17-18:  number => number
Oracle Span 3-4:  told => tell-01
Oracle Span 32-33:  ways => way
Oracle Span 4-5:  you => you

Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	I	_	PRP	PRP	_	4	nsubj	_	_
3	have	_	VBP	VBP	_	4	aux	_	_
4	told	_	VBN	VBN	_	23	advcl	_	_
5	you	_	PRP	PRP	_	7	nsubj	_	_
6	these	_	DT	DT	_	7	det	_	_
7	details	_	NNS	NNS	_	4	xcomp	_	_
8	about	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	asteroid	_	NN	NN	_	8	pobj	_	_
11	,	_	,	,	_	4	punct	_	_
12	and	_	CC	CC	_	4	cc	_	_
13	made	_	VBN	VBN	_	4	conj	_	_
14	a	_	DT	DT	_	15	det	_	_
15	note	_	NN	NN	_	13	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	its	_	PRP$	PRP$	_	18	poss	_	_
18	number	_	NN	NN	_	16	pobj	_	_
19	for	_	IN	IN	_	13	prep	_	_
20	you	_	PRP	PRP	_	19	pobj	_	_
21	,	_	,	,	_	23	punct	_	_
22	it	_	PRP	PRP	_	23	nsubj	_	_
23	is	_	VBZ	VBZ	_	0	root	_	_
24	on	_	IN	IN	_	23	prep	_	_
25	account	_	NN	NN	_	24	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	grown	_	JJ	JJ	_	26	pobj	_	_
29	-	_	:	:	_	25	punct	_	_
30	ups	_	NNS	NNS	_	25	dep	_	_
31	and	_	CC	CC	_	30	cc	_	_
32	their	_	PRP$	PRP$	_	33	poss	_	_
33	ways	_	NNS	NNS	_	30	conj	_	_
34	.	_	.	.	_	23	punct	_	_

Oracle:
(a / account-01, ARG1, a3 / and)
(a / account-01, ARG2, a2 / and)
(a / account-01, condition, a3 / and)
(a2 / and, op, g / grown-up)
(a2 / and, op, w / way)
(a3 / and, op, n3 / note-01)
(a3 / and, op, t / tell-01)
(d / detail, topic, a4 / asteroid)
(n3 / note-01, ARG0, i / i)
(n3 / note-01, ARG1, n4 / number)
(n3 / note-01, ARG2, y / you)
(n4 / number, poss, a4 / asteroid)
(t / tell-01, ARG0, i / i)
(t / tell-01, ARG1, d / detail)
(t / tell-01, ARG2, y / you)
(w / way, poss, g / grown-up)

Input(Some(Graph((account-01 :condition (and :op (note-01 :ARG1 (number :poss asteroid) :ARG0 i :ARG2 you) :op (tell-01 :ARG2 you :ARG1 (detail :topic asteroid :mod this) :ARG0 i)) :ARG2 (and :op (way :poss grown-up) :op grown-up) :ARG1 and),ArrayBuffer(Span(24,25,List(0),account,account-01,false), Span(11,12,List(1),and,and,false), Span(14,15,List(2),note,note-01,false), Span(17,18,List(3),number,number,false), Span(3,4,List(4),told,tell-01,false), Span(4,5,List(5),you,you,false), Span(6,7,List(6),details,detail,false), Span(9,10,List(7),asteroid,asteroid,false), Span(1,2,List(8),I,i,false), Span(30,31,List(9),and,and,false), Span(32,33,List(10),ways,way,false), Span(27,28,List(11),grown,grown-up,false)),Map(2 -> note-01, 5 -> you, 8 -> i, 7 -> asteroid, 1 -> and, 4 -> tell-01, 11 -> grown-up, 6 -> detail, 9 -> and, 0 -> account-01, 10 -> way, 3 -> number),Map(w -> way, t -> tell-01, n4 -> number, a3 -> and, d -> detail, g -> grown-up, y -> you, n3 -> note-01, a -> account-01, a2 -> and, i -> i, a4 -> asteroid))),[Ljava.lang.String;@7eac9008,Annotation([Ljava.lang.String;@4116aac9,[Ljava.lang.String;@62ddbd7e,[Ljava.lang.String;@74e52ef6),Annotation([Ljava.lang.String;@6ed3ccb2,[Ljava.lang.String;@1a677343,[Ledu.cmu.lti.nlp.amr.Dependency;@15de0b3c),Annotation([Ljava.lang.String;@489115ef,[Ljava.lang.String;@3857f613,[Ljava.lang.String;@198b6731),Annotation([Ljava.lang.String;@7c6908d7,[Ljava.lang.String;@3c9754d8,[Ledu.cmu.lti.nlp.amr.Entity;@3bf7ca37))
AMR:
(a / account-01, ARG0, a2 / and)
(a / account-01, ARG1, g / grown-up)
(a / account-01, poss, i / i)
(a2 / and, op, w / way)
(a3 / and, op, a4 / asteroid)
(a3 / and, op, t / tell-01)
(n3 / note-01, ARG0, i / i)
(n3 / note-01, ARG1, n4 / number)
(t / tell-01, ARG0, i / i)
(t / tell-01, ARG1, d / detail)
(t / tell-01, ARG2, y / you)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 744,667 microseconds
Sentence: WHen you tell them that you have made a new friend , they never ask you any questions about essential matters .

Oracle Span 1:  any => any
Oracle Span 2:  essential => essential
Oracle Span 3:  friend => friend
Oracle Span 4:  have => have-rel-role-91
Oracle Span 5:  made => make-01
Oracle Span 6:  matters => matter
Oracle Span 7:  new => new-01
Oracle Span 8:  questions => question-01
Oracle Span 9:  tell => tell-01
Oracle Span 10:  they => they
Oracle Span 11:  you => you
Spans:
Span 16-17:  any => any
Span 19-20:  essential => essential
Span 10-11:  friend => friend
Span 6-7:  have => have-rel-role-91
Span 7-8:  made => make-01
Span 20-21:  matters => matter
Span 9-10:  new => new-01
Span 17-18:  questions => question-01
Span 2-3:  tell => tell-01
Span 12-13:  they => they
Span 1-2:  you => you

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 16-17:  any => any
Oracle Span 19-20:  essential => essential
Oracle Span 10-11:  friend => friend
Oracle Span 6-7:  have => have-rel-role-91
Oracle Span 7-8:  made => make-01
Oracle Span 20-21:  matters => matter
Oracle Span 9-10:  new => new-01
Oracle Span 17-18:  questions => question-01
Oracle Span 2-3:  tell => tell-01
Oracle Span 12-13:  they => they
Oracle Span 1-2:  you => you

Dependencies:
1	WHen	_	VBN	VBN	_	15	vmod	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	tell	_	VB	VB	_	1	ccomp	_	_
4	them	_	PRP	PRP	_	3	dobj	_	_
5	that	_	IN	IN	_	8	mark	_	_
6	you	_	PRP	PRP	_	8	nsubj	_	_
7	have	_	VBP	VBP	_	8	aux	_	_
8	made	_	VBN	VBN	_	3	ccomp	_	_
9	a	_	DT	DT	_	11	det	_	_
10	new	_	JJ	JJ	_	11	amod	_	_
11	friend	_	NN	NN	_	8	dobj	_	_
12	,	_	,	,	_	15	punct	_	_
13	they	_	PRP	PRP	_	15	nsubj	_	_
14	never	_	RB	RB	_	15	neg	_	_
15	ask	_	VBP	VBP	_	0	root	_	_
16	you	_	PRP	PRP	_	18	nsubj	_	_
17	any	_	DT	DT	_	18	det	_	_
18	questions	_	NNS	NNS	_	15	xcomp	_	_
19	about	_	IN	IN	_	18	prep	_	_
20	essential	_	JJ	JJ	_	21	amod	_	_
21	matters	_	NNS	NNS	_	19	pobj	_	_
22	.	_	.	.	_	15	punct	_	_

Oracle:
(h / have-rel-role-91, ARG1, y / you)
(h / have-rel-role-91, ARG2, f / friend)
(m / matter, mod, e / essential)
(m2 / make-01, ARG0, y / you)
(m2 / make-01, ARG1, h / have-rel-role-91)
(n / new-01, ARG1, h / have-rel-role-91)
(q2 / question-01, ARG1, m / matter)
(q2 / question-01, ARG2, y / you)
(q2 / question-01, mod, a2 / any)
(q2 / question-01, time, t3 / tell-01)
(t3 / tell-01, ARG0, y / you)
(t3 / tell-01, ARG1, m2 / make-01)
(t3 / tell-01, ARG2, t / they)

Input(Some(Graph((question-01 :mod any :time ever :time (tell-01 :ARG2 they :ARG1 (make-01 :ARG1 (have-rel-role-91 :ARG1-of new-01 :ARG2 friend :ARG0 person :ARG1 you) :ARG0 you) :ARG0 you) :ARG2 you :ARG1 (matter :mod essential) :ARG0 they :polarity -),ArrayBuffer(Span(17,18,List(0),questions,question-01,false), Span(16,17,List(1),any,any,false), Span(2,3,List(2),tell,tell-01,false), Span(12,13,List(3),they,they,false), Span(7,8,List(4),made,make-01,false), Span(10,11,List(5),friend,friend,false), Span(9,10,List(6),new,new-01,false), Span(1,2,List(7),you,you,false), Span(20,21,List(8),matters,matter,false), Span(19,20,List(9),essential,essential,false), Span(6,7,List(10),have,have-rel-role-91,false)),Map(2 -> tell-01, 5 -> friend, 8 -> matter, 7 -> you, 1 -> any, 4 -> make-01, 6 -> new-01, 9 -> essential, 0 -> question-01, 10 -> have-rel-role-91, 3 -> they),Map(e -> essential, n -> new-01, h -> have-rel-role-91, t -> they, m2 -> make-01, m -> matter, t3 -> tell-01, y -> you, a2 -> any, q2 -> question-01, f -> friend))),[Ljava.lang.String;@79079097,Annotation([Ljava.lang.String;@4d1c00d0,[Ljava.lang.String;@4b2bac3f,[Ljava.lang.String;@4e08711f),Annotation([Ljava.lang.String;@bcec361,[Ljava.lang.String;@26794848,[Ledu.cmu.lti.nlp.amr.Dependency;@302552ec),Annotation([Ljava.lang.String;@3d285d7e,[Ljava.lang.String;@40005471,[Ljava.lang.String;@2cd76f31),Annotation([Ljava.lang.String;@367ffa75,[Ljava.lang.String;@49438269,[Ledu.cmu.lti.nlp.amr.Entity;@ba2f4ec))
AMR:
(h / have-rel-role-91, ARG2, f / friend)
(m / matter, mod, e / essential)
(m2 / make-01, ARG0, t / they)
(m2 / make-01, ARG1, h / have-rel-role-91)
(n / new-01, ARG1, f / friend)
(q2 / question-01, ARG0, m / matter)
(q2 / question-01, ARG1, m2 / make-01)
(q2 / question-01, ARG2, a2 / any)
(t3 / tell-01, ARG0, y / you)
(t3 / tell-01, ARG1, m2 / make-01)

WARNING: makeIds can't find span Id: 0.6
WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.4.1
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.4.0.0.1
WARNING: makeIds can't find span Id: 0.4.0.0.2
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.4.0.0
Decoded in 270,173 microseconds
Sentence: They never say to you , " What does his voice sound like ?

Oracle Span 1:  say => say-01
Oracle Span 2:  sound => sound-01
Oracle Span 3:  They => they
Oracle Span 4:  voice => voice
Oracle Span 5:  you => you
Spans:
Span 2-3:  say => say-01
Span 11-12:  sound => sound-01
Span 0-1:  They => they
Span 10-11:  voice => voice
Span 4-5:  you => you

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 2-3:  say => say-01
Oracle Span 11-12:  sound => sound-01
Oracle Span 0-1:  They => they
Oracle Span 10-11:  voice => voice
Oracle Span 4-5:  you => you

Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	never	_	RB	RB	_	3	neg	_	_
3	say	_	VBP	VBP	_	9	dep	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	you	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	"	_	''	''	_	9	punct	_	_
8	What	_	WP	WP	_	9	dobj	_	_
9	does	_	VBZ	VBZ	_	0	root	_	_
10	his	_	PRP$	PRP$	_	12	poss	_	_
11	voice	_	NN	NN	_	12	nn	_	_
12	sound	_	NN	NN	_	9	dobj	_	_
13	like	_	IN	IN	_	9	prep	_	_
14	?	_	.	.	_	9	punct	_	_

Oracle:
(s / say-01, ARG0, t / they)
(s / say-01, ARG1, s2 / sound-01)
(s / say-01, ARG2, y / you)
(s2 / sound-01, ARG1, v / voice)

Input(Some(Graph((say-01 :polarity - :time ever :ARG2 you :ARG1 (sound-01 :ARG2 amr-unknown :ARG1 (voice :poss he)) :ARG0 they),ArrayBuffer(Span(2,3,List(0),say,say-01,false), Span(4,5,List(1),you,you,false), Span(11,12,List(2),sound,sound-01,false), Span(10,11,List(3),voice,voice,false), Span(0,1,List(4),They,they,false)),Map(2 -> sound-01, 1 -> you, 4 -> they, 0 -> say-01, 3 -> voice),Map(t -> they, s2 -> sound-01, s -> say-01, v -> voice, y -> you))),[Ljava.lang.String;@1c1bbc4e,Annotation([Ljava.lang.String;@55fe41ea,[Ljava.lang.String;@fbd1f6,[Ljava.lang.String;@1ce24091),Annotation([Ljava.lang.String;@5dda768f,[Ljava.lang.String;@7a8c8dcf,[Ledu.cmu.lti.nlp.amr.Dependency;@24269709),Annotation([Ljava.lang.String;@2aceadd4,[Ljava.lang.String;@24aed80c,[Ljava.lang.String;@3a52dba3),Annotation([Ljava.lang.String;@2a5c8d3f,[Ljava.lang.String;@752325ad,[Ledu.cmu.lti.nlp.amr.Entity;@279fedbd))
AMR:
(s / say-01, ARG0, t / they)
(s / say-01, ARG1, y / you)
(s2 / sound-01, ARG0, t / they)
(s2 / sound-01, ARG1, v / voice)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 160,301 microseconds
Sentence: What games does he love best ?

Oracle Span 1:  best => (good :degree most)
Oracle Span 2:  games => game
Oracle Span 3:  he => he
Oracle Span 4:  love => love-01
Spans:
Span 5-6:  best => (good :degree most)
Span 1-2:  games => game
Span 3-4:  he => he
Span 4-5:  love => love-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 5-6:  best => (good :degree most)
Oracle Span 1-2:  games => game
Oracle Span 3-4:  he => he
Oracle Span 4-5:  love => love-01

Dependencies:
1	What	_	WDT	WDT	_	2	det	_	_
2	games	_	NNS	NNS	_	5	dobj	_	_
3	does	_	VBZ	VBZ	_	5	aux	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	love	_	VB	VB	_	0	root	_	_
6	best	_	RBS	RBS	_	5	advmod	_	_
7	?	_	.	.	_	5	punct	_	_

Oracle:
(g / good, degree, m / most)
(l / love-01, ARG0, h / he)
(l / love-01, degree, g / good)

Input(Some(Graph((love-01 :degree (good :degree most) :ARG1 (amr-unknown :domain game) :ARG0 he),ArrayBuffer(Span(4,5,List(0),love,love-01,false), Span(5,6,List(1, 2),best,(good :degree most),false), Span(1,2,List(3),games,game,false), Span(3,4,List(4),he,he,false)),Map(2 -> most, 1 -> good, 4 -> he, 0 -> love-01, 3 -> game),Map(h -> he, m -> most, g2 -> game, g -> good, l -> love-01))),[Ljava.lang.String;@b3ca52e,Annotation([Ljava.lang.String;@45c7e403,[Ljava.lang.String;@2925bf5b,[Ljava.lang.String;@710f4dc7),Annotation([Ljava.lang.String;@1ff4931d,[Ljava.lang.String;@65e98b1c,[Ledu.cmu.lti.nlp.amr.Dependency;@61322f9d),Annotation([Ljava.lang.String;@6ad82709,[Ljava.lang.String;@510f3d34,[Ljava.lang.String;@7817fd62),Annotation([Ljava.lang.String;@8297b3a,[Ljava.lang.String;@2362f559,[Ledu.cmu.lti.nlp.amr.Entity;@b2c9a9c))
AMR:
(g / good, degree, m / most)
(l / love-01, ARG0, h / he)
(l / love-01, ARG1, g2 / game)
(l / love-01, ARG2, g / good)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 61,424 microseconds
Sentence: Does he collect butterflies ? "

Oracle Span 1:  butterflies => butterfly
Oracle Span 2:  collect => collect-01
Oracle Span 3:  he => he
Spans:
Span 3-4:  butterflies => butterfly
Span 2-3:  collect => collect-01
Span 1-2:  he => he

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  butterflies => butterfly
Oracle Span 2-3:  collect => collect-01
Oracle Span 1-2:  he => he

Dependencies:
1	Does	_	MD	MD	_	3	aux	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	collect	_	VBP	VBP	_	0	root	_	_
4	butterflies	_	NNS	NNS	_	3	dobj	_	_
5	?	_	.	.	_	3	punct	_	_
6	"	_	''	''	_	3	punct	_	_

Oracle:
(c / collect-01, ARG0, h / he)
(c / collect-01, ARG1, b / butterfly)

Input(Some(Graph((collect-01 :mode interrogative :ARG1 butterfly :ARG0 he),ArrayBuffer(Span(2,3,List(0),collect,collect-01,false), Span(3,4,List(1),butterflies,butterfly,false), Span(1,2,List(2),he,he,false)),Map(2 -> he, 1 -> butterfly, 0 -> collect-01),Map(h -> he, b -> butterfly, c -> collect-01))),[Ljava.lang.String;@4c178a76,Annotation([Ljava.lang.String;@fa4c865,[Ljava.lang.String;@3bd82cf5,[Ljava.lang.String;@544fa968),Annotation([Ljava.lang.String;@247bddad,[Ljava.lang.String;@d35dea7,[Ledu.cmu.lti.nlp.amr.Dependency;@7770f470),Annotation([Ljava.lang.String;@5e5d171f,[Ljava.lang.String;@24313fcc,[Ljava.lang.String;@7d20d0b),Annotation([Ljava.lang.String;@77f1baf5,[Ljava.lang.String;@41a2befb,[Ledu.cmu.lti.nlp.amr.Entity;@6c40365c))
AMR:
(c / collect-01, ARG0, h / he)
(c / collect-01, ARG1, b / butterfly)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 16,134 microseconds
Sentence: Instead , they demand : " How old is he ?

Oracle Span 1:  demand => demand-01
Oracle Span 2:  he => he
Oracle Span 3:  Instead => instead-of-91
Oracle Span 4:  they => they
Spans:
Span 3-4:  demand => demand-01
Span 9-10:  he => he
Span 0-1:  Instead => instead-of-91
Span 2-3:  they => they

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 3-4:  demand => demand-01
Oracle Span 9-10:  he => he
Oracle Span 0-1:  Instead => instead-of-91
Oracle Span 2-3:  they => they

Dependencies:
1	Instead	_	RB	RB	_	4	advmod	_	_
2	,	_	,	,	_	4	punct	_	_
3	they	_	PRP	PRP	_	4	nsubj	_	_
4	demand	_	VBP	VBP	_	0	root	_	_
5	:	_	:	:	_	4	punct	_	_
6	"	_	''	''	_	4	punct	_	_
7	How	_	WRB	WRB	_	8	advmod	_	_
8	old	_	JJ	JJ	_	10	dep	_	_
9	is	_	VBZ	VBZ	_	10	cop	_	_
10	he	_	PRP	PRP	_	4	dep	_	_
11	?	_	.	.	_	4	punct	_	_

Oracle:
(d / demand-01, ARG0, t / they)
(i2 / instead-of-91, ARG1, d / demand-01)

Input(Some(Graph((demand-01 :ARG1-of instead-of-91 :ARG1 (age-01 :ARG1 he :ARG2 amr-unknown) :ARG0 they),ArrayBuffer(Span(3,4,List(0),demand,demand-01,false), Span(9,10,List(1),he,he,false), Span(2,3,List(2),they,they,false), Span(0,1,List(3),Instead,instead-of-91,false)),Map(2 -> they, 1 -> he, 0 -> demand-01, 3 -> instead-of-91),Map(t -> they, h2 -> he, d -> demand-01, i2 -> instead-of-91))),[Ljava.lang.String;@7bedc48a,Annotation([Ljava.lang.String;@131ef10,[Ljava.lang.String;@55b0dcab,[Ljava.lang.String;@38afe297),Annotation([Ljava.lang.String;@2df3b89c,[Ljava.lang.String;@23348b5d,[Ledu.cmu.lti.nlp.amr.Dependency;@70325e14),Annotation([Ljava.lang.String;@37ceb1df,[Ljava.lang.String;@7c9d8e2,[Ljava.lang.String;@20d525),Annotation([Ljava.lang.String;@6200f9cb,[Ljava.lang.String;@2002fc1d,[Ledu.cmu.lti.nlp.amr.Entity;@69453e37))
AMR:
(d / demand-01, ARG0, t / they)
(d / demand-01, ARG1, h2 / he)
(d / demand-01, manner, i2 / instead-of-91)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 22,421 microseconds
Sentence: How many brothers has he ?

Oracle Span 1:  brothers => brother
Oracle Span 2:  has => have-rel-role-91
Oracle Span 3:  he => he
Spans:
Span 2-3:  brothers => brother
Span 3-4:  has => have-rel-role-91
Span 4-5:  he => he

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 2-3:  brothers => brother
Oracle Span 3-4:  has => have-rel-role-91
Oracle Span 4-5:  he => he

Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	many	_	JJ	JJ	_	3	amod	_	_
3	brothers	_	NNS	NNS	_	4	nsubj	_	_
4	has	_	VBZ	VBZ	_	0	root	_	_
5	he	_	PRP	PRP	_	4	dobj	_	_
6	?	_	.	.	_	4	punct	_	_

Oracle:
(h / have-rel-role-91, ARG1, h2 / he)
(h / have-rel-role-91, ARG2, b / brother)

Input(Some(Graph((have-rel-role-91 :ARG2 brother :ARG1 he :ARG0 (person :quant amr-unknown)),ArrayBuffer(Span(4,5,List(0),he,he,false), Span(2,3,List(1),brothers,brother,false), Span(3,4,List(2),has,have-rel-role-91,false)),Map(2 -> have-rel-role-91, 1 -> brother, 0 -> he),Map(h -> have-rel-role-91, b -> brother, h2 -> he))),[Ljava.lang.String;@6f4a47c7,Annotation([Ljava.lang.String;@ae13544,[Ljava.lang.String;@3d34d211,[Ljava.lang.String;@7dc0f706),Annotation([Ljava.lang.String;@4009e306,[Ljava.lang.String;@43c1b556,[Ledu.cmu.lti.nlp.amr.Dependency;@587e5365),Annotation([Ljava.lang.String;@22fcf7ab,[Ljava.lang.String;@2de23121,[Ljava.lang.String;@63475ace),Annotation([Ljava.lang.String;@4988d8b8,[Ljava.lang.String;@c0c2f8d,[Ledu.cmu.lti.nlp.amr.Entity;@305b7c14))
AMR:
(h / have-rel-role-91, ARG0, b / brother)
(h / have-rel-role-91, ARG1, h2 / he)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 17,214 microseconds
Sentence: How much does he weigh ?

Oracle Span 1:  he => he
Oracle Span 2:  weigh => weigh-01
Spans:
Span 3-4:  he => he
Span 4-5:  weigh => weigh-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  he => he
Oracle Span 4-5:  weigh => weigh-01

Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	much	_	JJ	JJ	_	5	dep	_	_
3	does	_	VBZ	VBZ	_	5	aux	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	weigh	_	VB	VB	_	0	root	_	_
6	?	_	.	.	_	5	punct	_	_

Oracle:
(w / weigh-01, ARG1, h / he)

Input(Some(Graph((weigh-01 :ARG3 amr-unknown :ARG1 he),ArrayBuffer(Span(4,5,List(0),weigh,weigh-01,false), Span(3,4,List(1),he,he,false)),Map(1 -> he, 0 -> weigh-01),Map(w -> weigh-01, h -> he))),[Ljava.lang.String;@6913c1fb,Annotation([Ljava.lang.String;@66d18979,[Ljava.lang.String;@bccb269,[Ljava.lang.String;@609cd4d8),Annotation([Ljava.lang.String;@17f7cd29,[Ljava.lang.String;@7d8704ef,[Ledu.cmu.lti.nlp.amr.Dependency;@13b6aecc),Annotation([Ljava.lang.String;@158a8276,[Ljava.lang.String;@3c3d9b6b,[Ljava.lang.String;@79d8407f),Annotation([Ljava.lang.String;@5fbe4146,[Ljava.lang.String;@1e66f1f5,[Ledu.cmu.lti.nlp.amr.Entity;@4e50c791))
AMR:
(w / weigh-01, ARG0, h / he)

WARNING: makeIds can't find span Id: 0.0
Decoded in 8,459 microseconds
Sentence: How much money does his father make ? "

Oracle Span 1:  father => (have-rel-role-91 :ARG2 father)
Oracle Span 2:  make => make-05
Oracle Span 3:  money => monetary-quantity
Spans:
Span 5-6:  father => (have-rel-role-91 :ARG2 father)
Span 6-7:  make => make-05
Span 2-3:  money => monetary-quantity

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 5-6:  father => (have-rel-role-91 :ARG2 father)
Oracle Span 6-7:  make => make-05
Oracle Span 2-3:  money => monetary-quantity

Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	much	_	JJ	JJ	_	3	amod	_	_
3	money	_	NN	NN	_	7	dobj	_	_
4	does	_	VBZ	VBZ	_	7	aux	_	_
5	his	_	PRP$	PRP$	_	6	poss	_	_
6	father	_	NN	NN	_	7	nsubj	_	_
7	make	_	VB	VB	_	0	root	_	_
8	?	_	.	.	_	7	punct	_	_
9	"	_	''	''	_	7	punct	_	_

Oracle:
(h2 / have-rel-role-91, ARG2, f / father)
(m / make-05, ARG1, m2 / monetary-quantity)

Input(Some(Graph((make-05 :ARG1 (monetary-quantity :quant amr-unknown) :ARG0 (person :ARG0-of (have-rel-role-91 :ARG2 father :ARG1 he))),ArrayBuffer(Span(6,7,List(0),make,make-05,false), Span(5,6,List(1, 2),father,(have-rel-role-91 :ARG2 father),false), Span(2,3,List(3),money,monetary-quantity,false)),Map(2 -> father, 1 -> have-rel-role-91, 0 -> make-05, 3 -> monetary-quantity),Map(h2 -> have-rel-role-91, m2 -> monetary-quantity, m -> make-05, f -> father))),[Ljava.lang.String;@7530ad9c,Annotation([Ljava.lang.String;@58a9760d,[Ljava.lang.String;@71e9ddb4,[Ljava.lang.String;@394df057),Annotation([Ljava.lang.String;@4961f6af,[Ljava.lang.String;@5aebe890,[Ledu.cmu.lti.nlp.amr.Dependency;@65d09a04),Annotation([Ljava.lang.String;@33c911a1,[Ljava.lang.String;@75db5df9,[Ljava.lang.String;@707194ba),Annotation([Ljava.lang.String;@1190200a,[Ljava.lang.String;@6a2f6f80,[Ledu.cmu.lti.nlp.amr.Entity;@45b4c3a9))
AMR:
(h2 / have-rel-role-91, ARG2, f / father)
(m / make-05, ARG0, h2 / have-rel-role-91)
(m / make-05, ARG1, m2 / monetary-quantity)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
Decoded in 53,398 microseconds
Sentence: Only from these figures do they think they have learned anything about him .

Oracle Span 1:  anything => anything
Oracle Span 2:  figures => figure
Oracle Span 3:  learned => learn-01
Oracle Span 4:  Only => only
Oracle Span 5:  they => they
Oracle Span 6:  think => think-01
Spans:
Span 10-11:  anything => anything
Span 3-4:  figures => figure
Span 9-10:  learned => learn-01
Span 0-1:  Only => only
Span 5-6:  they => they
Span 6-7:  think => think-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 10-11:  anything => anything
Oracle Span 3-4:  figures => figure
Oracle Span 9-10:  learned => learn-01
Oracle Span 0-1:  Only => only
Oracle Span 5-6:  they => they
Oracle Span 6-7:  think => think-01

Dependencies:
1	Only	_	JJ	JJ	_	5	nsubj	_	_
2	from	_	IN	IN	_	1	prep	_	_
3	these	_	DT	DT	_	4	det	_	_
4	figures	_	NNS	NNS	_	2	pobj	_	_
5	do	_	VBP	VBP	_	0	root	_	_
6	they	_	PRP	PRP	_	7	nsubj	_	_
7	think	_	VBP	VBP	_	5	ccomp	_	_
8	they	_	PRP	PRP	_	10	nsubj	_	_
9	have	_	VBP	VBP	_	10	aux	_	_
10	learned	_	VBN	VBN	_	7	ccomp	_	_
11	anything	_	NN	NN	_	10	dobj	_	_
12	about	_	IN	IN	_	10	prep	_	_
13	him	_	PRP	PRP	_	12	pobj	_	_
14	.	_	.	.	_	5	punct	_	_

Oracle:
(l / learn-01, ARG0, t2 / they)
(l / learn-01, ARG1, a / anything)
(l / learn-01, source, f / figure)
(t / think-01, ARG0, t2 / they)
(t / think-01, ARG1, l / learn-01)

Input(Some(Graph((think-01 :ARG1 (learn-01 :source (figure :mod (this :mod only)) :ARG1 (anything :topic he) :ARG0 they) :ARG0 they),ArrayBuffer(Span(6,7,List(0),think,think-01,false), Span(9,10,List(1),learned,learn-01,false), Span(3,4,List(2),figures,figure,false), Span(0,1,List(3),Only,only,false), Span(10,11,List(4),anything,anything,false), Span(5,6,List(5),they,they,false)),Map(2 -> figure, 5 -> they, 1 -> learn-01, 4 -> anything, 0 -> think-01, 3 -> only),Map(t -> think-01, a -> anything, t2 -> they, l -> learn-01, o -> only, f -> figure))),[Ljava.lang.String;@399c4be1,Annotation([Ljava.lang.String;@291caca8,[Ljava.lang.String;@385e9564,[Ljava.lang.String;@5b94b04d),Annotation([Ljava.lang.String;@8c3b9d,[Ljava.lang.String;@4c39bec8,[Ledu.cmu.lti.nlp.amr.Dependency;@f79e),Annotation([Ljava.lang.String;@7ee8290b,[Ljava.lang.String;@1f59a598,[Ljava.lang.String;@1e178745),Annotation([Ljava.lang.String;@192c3f1e,[Ljava.lang.String;@26b3fd41,[Ledu.cmu.lti.nlp.amr.Entity;@7494f96a))
AMR:
(l / learn-01, ARG0, f / figure)
(l / learn-01, ARG1, a / anything)
(t / think-01, ARG0, t2 / they)
(t / think-01, ARG1, l / learn-01)
(t / think-01, ARG2, o / only)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 111,081 microseconds
Sentence: If you were to say to the grown - ups : " I saw a beautiful house made of rosy brick , with geraniums in the windows and doves on the roof , " they would not be able to get any idea of that house at all .

Oracle Span 1:  able => possible-01
Oracle Span 2:  all => all
Oracle Span 3:  and => and
Oracle Span 4:  any => any
Oracle Span 5:  at => at
Oracle Span 6:  beautiful => beautiful-02
Oracle Span 7:  brick => brick
Oracle Span 8:  doves => dove
Oracle Span 9:  geraniums => geranium
Oracle Span 10:  get => get-01
Oracle Span 11:  grown => grown-up
Oracle Span 12:  house => house
Oracle Span 13:  idea => idea
Oracle Span 14:  made => make-01
Oracle Span 15:  roof => roof
Oracle Span 16:  rosy => rosy
Oracle Span 17:  saw => see-01
Oracle Span 18:  say => say-01
Oracle Span 19:  windows => window
Oracle Span 20:  you => you
Spans:
Span 38-39:  able => possible-01
Span 47-48:  all => all
Span 27-28:  and => and
Span 41-42:  any => any
Span 46-47:  at => at
Span 15-16:  beautiful => beautiful-02
Span 20-21:  brick => brick
Span 28-29:  doves => dove
Span 23-24:  geraniums => geranium
Span 40-41:  get => get-01
Span 7-8:  grown => grown-up
Span 16-17:  house => house
Span 42-43:  idea => idea
Span 17-18:  made => make-01
Span 31-32:  roof => roof
Span 19-20:  rosy => rosy
Span 13-14:  saw => see-01
Span 4-5:  say => say-01
Span 26-27:  windows => window
Span 1-2:  you => you

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 38-39:  able => possible-01
Oracle Span 47-48:  all => all
Oracle Span 27-28:  and => and
Oracle Span 41-42:  any => any
Oracle Span 46-47:  at => at
Oracle Span 15-16:  beautiful => beautiful-02
Oracle Span 20-21:  brick => brick
Oracle Span 28-29:  doves => dove
Oracle Span 23-24:  geraniums => geranium
Oracle Span 40-41:  get => get-01
Oracle Span 7-8:  grown => grown-up
Oracle Span 16-17:  house => house
Oracle Span 42-43:  idea => idea
Oracle Span 17-18:  made => make-01
Oracle Span 31-32:  roof => roof
Oracle Span 19-20:  rosy => rosy
Oracle Span 13-14:  saw => see-01
Oracle Span 4-5:  say => say-01
Oracle Span 26-27:  windows => window
Oracle Span 1-2:  you => you

Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	were	_	VBD	VBD	_	14	advcl	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	say	_	VB	VB	_	3	xcomp	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	grown	_	JJ	JJ	_	6	pobj	_	_
9	-	_	:	:	_	8	punct	_	_
10	ups	_	NNS	NNS	_	8	dep	_	_
11	:	_	:	:	_	8	punct	_	_
12	"	_	''	''	_	5	punct	_	_
13	I	_	PRP	PRP	_	14	nsubj	_	_
14	saw	_	VBD	VBD	_	39	ccomp	_	_
15	a	_	DT	DT	_	17	det	_	_
16	beautiful	_	JJ	JJ	_	17	amod	_	_
17	house	_	NN	NN	_	18	nsubj	_	_
18	made	_	VBD	VBD	_	14	ccomp	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	rosy	_	JJ	JJ	_	21	amod	_	_
21	brick	_	NN	NN	_	19	pobj	_	_
22	,	_	,	,	_	18	punct	_	_
23	with	_	IN	IN	_	18	prep	_	_
24	geraniums	_	NNS	NNS	_	23	pobj	_	_
25	in	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	windows	_	NNS	NNS	_	25	pobj	_	_
28	and	_	CC	CC	_	27	cc	_	_
29	doves	_	NNS	NNS	_	27	conj	_	_
30	on	_	IN	IN	_	27	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	roof	_	NN	NN	_	30	pobj	_	_
33	,	_	,	,	_	39	punct	_	_
34	"	_	''	''	_	39	punct	_	_
35	they	_	PRP	PRP	_	39	nsubj	_	_
36	would	_	MD	MD	_	39	aux	_	_
37	not	_	RB	RB	_	39	neg	_	_
38	be	_	VB	VB	_	39	cop	_	_
39	able	_	JJ	JJ	_	0	root	_	_
40	to	_	TO	TO	_	41	aux	_	_
41	get	_	VB	VB	_	39	xcomp	_	_
42	any	_	DT	DT	_	43	det	_	_
43	idea	_	NN	NN	_	41	dobj	_	_
44	of	_	IN	IN	_	43	prep	_	_
45	that	_	DT	DT	_	46	det	_	_
46	house	_	NN	NN	_	44	pobj	_	_
47	at	_	IN	IN	_	46	advmod	_	_
48	all	_	DT	DT	_	47	pobj	_	_
49	.	_	.	.	_	39	punct	_	_

Oracle:
(a2 / at, mod, a3 / all)
(a4 / and, op, d / dove)
(a4 / and, op, g3 / geranium)
(b / brick, mod, r / rosy)
(b2 / beautiful-02, ARG1, h2 / house)
(d / dove, location, r2 / roof)
(g / get-01, ARG0, g2 / grown-up)
(g / get-01, ARG1, i / idea)
(g3 / geranium, location, w / window)
(h2 / house, accompanier, a4 / and)
(i / idea, mod, a / any)
(i / idea, mod, a2 / at)
(i / idea, topic, h2 / house)
(m / make-01, ARG1, h2 / house)
(m / make-01, ARG2, b / brick)
(p / possible-01, ARG1, g / get-01)
(p / possible-01, condition, s / say-01)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, g2 / grown-up)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, h2 / house)

Input(Some(Graph((possible-01 :condition (say-01 :ARG2 grown-up :ARG1 (see-01 :ARG1 (house :ARG1-of beautiful-02 :accompanier (and :op (dove :location roof) :op (geranium :location window)) :ARG1-of (make-01 :ARG2 (brick :mod rosy))) :ARG0 you) :ARG0 you) :ARG1 (get-01 :ARG1 (idea :mod (at :mod all) :mod any :topic house) :ARG0 grown-up) :polarity -),ArrayBuffer(Span(38,39,List(0),able,possible-01,false), Span(4,5,List(1),say,say-01,false), Span(13,14,List(2),saw,see-01,false), Span(16,17,List(3),house,house,false), Span(15,16,List(4),beautiful,beautiful-02,false), Span(27,28,List(5),and,and,false), Span(28,29,List(6),doves,dove,false), Span(31,32,List(7),roof,roof,false), Span(23,24,List(8),geraniums,geranium,false), Span(26,27,List(9),windows,window,false), Span(17,18,List(10),made,make-01,false), Span(20,21,List(11),brick,brick,false), Span(19,20,List(12),rosy,rosy,false), Span(1,2,List(13),you,you,false), Span(40,41,List(14),get,get-01,false), Span(42,43,List(15),idea,idea,false), Span(46,47,List(16),at,at,false), Span(47,48,List(17),all,all,false), Span(41,42,List(18),any,any,false), Span(7,8,List(19),grown,grown-up,false)),Map(2 -> see-01, 5 -> and, 12 -> rosy, 15 -> idea, 8 -> geranium, 18 -> any, 7 -> roof, 17 -> all, 1 -> say-01, 4 -> beautiful-02, 11 -> brick, 14 -> get-01, 6 -> dove, 9 -> window, 0 -> possible-01, 16 -> at, 19 -> grown-up, 10 -> make-01, 3 -> house, 13 -> you),Map(w -> window, g3 -> geranium, h2 -> house, s2 -> see-01, b -> brick, b2 -> beautiful-02, a3 -> all, s -> say-01, m -> make-01, d -> dove, g2 -> grown-up, g -> get-01, y -> you, r2 -> roof, p -> possible-01, a -> any, a2 -> at, i -> idea, r -> rosy, a4 -> and))),[Ljava.lang.String;@561b6512,Annotation([Ljava.lang.String;@2e377400,[Ljava.lang.String;@1757cd72,[Ljava.lang.String;@445b295b),Annotation([Ljava.lang.String;@49e5f737,[Ljava.lang.String;@5c671d7f,[Ledu.cmu.lti.nlp.amr.Dependency;@757277dc),Annotation([Ljava.lang.String;@687e99d8,[Ljava.lang.String;@e4487af,[Ljava.lang.String;@6aaceffd),Annotation([Ljava.lang.String;@c86b9e3,[Ljava.lang.String;@10aa41f2,[Ledu.cmu.lti.nlp.amr.Entity;@3af9c5b7))
AMR:
(a4 / and, op, d / dove)
(a4 / and, op, w / window)
(b / brick, mod, r / rosy)
(b2 / beautiful-02, ARG0, a3 / all)
(b2 / beautiful-02, ARG1, h2 / house)
(d / dove, location, r2 / roof)
(g / get-01, ARG0, a2 / at)
(g / get-01, ARG1, i / idea)
(i / idea, mod, a / any)
(m / make-01, ARG0, h2 / house)
(m / make-01, ARG1, b / brick)
(m / make-01, ARG2, g3 / geranium)
(p / possible-01, ARG1, g / get-01)
(p / possible-01, ARG2, m / make-01)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, a4 / and)
(s / say-01, ARG2, g2 / grown-up)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, m / make-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.2
WARNING: makeIds can't find span Id: 0.2.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.1.1
WARNING: makeIds can't find span Id: 0.2.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2.2
Decoded in 1,489,110 microseconds
Sentence: You would have to say to them : " I saw a house that cost $ 20,000 . "

Oracle Span 1:  cost => cost-01
Oracle Span 2:  house => house
Oracle Span 3:  saw => see-01
Oracle Span 4:  say => say-01
Oracle Span 5:  You => you
Spans:
Span 14-15:  cost => cost-01
Span 12-13:  house => house
Span 10-11:  saw => see-01
Span 4-5:  say => say-01
Span 0-1:  You => you

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 14-15:  cost => cost-01
Oracle Span 12-13:  house => house
Oracle Span 10-11:  saw => see-01
Oracle Span 4-5:  say => say-01
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	would	_	MD	MD	_	3	aux	_	_
3	have	_	VB	VB	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	say	_	VB	VB	_	3	xcomp	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	:	_	:	:	_	3	punct	_	_
9	"	_	''	''	_	3	punct	_	_
10	I	_	PRP	PRP	_	11	nsubj	_	_
11	saw	_	VBD	VBD	_	3	ccomp	_	_
12	a	_	DT	DT	_	13	det	_	_
13	house	_	NN	NN	_	11	dobj	_	_
14	that	_	WDT	WDT	_	15	nsubj	_	_
15	cost	_	VBD	VBD	_	13	rcmod	_	_
16	$	_	$	$	_	15	dobj	_	_
17	20,000	_	CD	CD	_	16	num	_	_
18	.	_	.	.	_	3	punct	_	_
19	"	_	''	''	_	3	punct	_	_

Oracle:
(c / cost-01, ARG1, h / house)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, h / house)

Input(Some(Graph((obligate-01 :ARG2 (say-01 :ARG2 they :ARG1 (see-01 :ARG1 (house :ARG1-of (cost-01 :ARG2 (monetary-quantity :unit dollar :quant 20000))) :ARG0 you) :ARG0 you) :ARG1 you),ArrayBuffer(Span(4,5,List(0),say,say-01,false), Span(10,11,List(1),saw,see-01,false), Span(12,13,List(2),house,house,false), Span(14,15,List(3),cost,cost-01,false), Span(0,1,List(4),You,you,false)),Map(2 -> house, 1 -> see-01, 4 -> you, 0 -> say-01, 3 -> cost-01),Map(h -> house, s2 -> see-01, s -> say-01, y -> you, c -> cost-01))),[Ljava.lang.String;@37271612,Annotation([Ljava.lang.String;@ed7f8b4,[Ljava.lang.String;@4c309d4d,[Ljava.lang.String;@38102d01),Annotation([Ljava.lang.String;@37883b97,[Ljava.lang.String;@6ab778a,[Ledu.cmu.lti.nlp.amr.Dependency;@4e3958e7),Annotation([Ljava.lang.String;@77f80c04,[Ljava.lang.String;@1dac5ef,[Ljava.lang.String;@5c90e579),Annotation([Ljava.lang.String;@58ea606c,[Ljava.lang.String;@6f45df59,[Ledu.cmu.lti.nlp.amr.Entity;@38e79ae3))
AMR:
(c / cost-01, ARG0, h / house)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s2 / see-01, ARG1, h / house)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 110,438 microseconds
Sentence: Then they would exclaim : " Oh , what a pretty house that is ! "

Oracle Span 1:  exclaim => exclaim-01
Oracle Span 2:  house => house
Oracle Span 3:  pretty => pretty
Oracle Span 4:  that => that
Oracle Span 5:  Then => then
Oracle Span 6:  they => they
Spans:
Span 3-4:  exclaim => exclaim-01
Span 11-12:  house => house
Span 10-11:  pretty => pretty
Span 12-13:  that => that
Span 0-1:  Then => then
Span 1-2:  they => they

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 3-4:  exclaim => exclaim-01
Oracle Span 11-12:  house => house
Oracle Span 10-11:  pretty => pretty
Oracle Span 12-13:  that => that
Oracle Span 0-1:  Then => then
Oracle Span 1-2:  they => they

Dependencies:
1	Then	_	RB	RB	_	4	advmod	_	_
2	they	_	PRP	PRP	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	exclaim	_	VB	VB	_	0	root	_	_
5	:	_	:	:	_	4	punct	_	_
6	"	_	''	''	_	4	punct	_	_
7	Oh	_	UH	UH	_	14	discourse	_	_
8	,	_	,	,	_	14	punct	_	_
9	what	_	WP	WP	_	12	dep	_	_
10	a	_	DT	DT	_	12	det	_	_
11	pretty	_	JJ	JJ	_	12	amod	_	_
12	house	_	NN	NN	_	14	dep	_	_
13	that	_	DT	DT	_	14	nsubj	_	_
14	is	_	VBZ	VBZ	_	4	ccomp	_	_
15	!	_	.	.	_	4	punct	_	_
16	"	_	''	''	_	4	punct	_	_

Oracle:
(e / exclaim-01, ARG0, t / they)
(e / exclaim-01, ARG1, p2 / pretty)
(e / exclaim-01, time, t3 / then)
(h2 / house, mod, t4 / that)
(p2 / pretty, domain, h2 / house)

Input(Some(Graph((exclaim-01 :time then :ARG1 (pretty :domain (house :mod that)) :ARG0 they),ArrayBuffer(Span(3,4,List(0),exclaim,exclaim-01,false), Span(0,1,List(1),Then,then,false), Span(10,11,List(2),pretty,pretty,false), Span(11,12,List(3),house,house,false), Span(12,13,List(4),that,that,false), Span(1,2,List(5),they,they,false)),Map(2 -> pretty, 5 -> they, 1 -> then, 4 -> that, 0 -> exclaim-01, 3 -> house),Map(e -> exclaim-01, t4 -> that, t -> they, h2 -> house, p2 -> pretty, t3 -> then))),[Ljava.lang.String;@63070bab,Annotation([Ljava.lang.String;@68e5eea7,[Ljava.lang.String;@291b4bf5,[Ljava.lang.String;@2d2ffcb7),Annotation([Ljava.lang.String;@762ef0ea,[Ljava.lang.String;@31f9b85e,[Ledu.cmu.lti.nlp.amr.Dependency;@424e1977),Annotation([Ljava.lang.String;@10d68fcd,[Ljava.lang.String;@117e949d,[Ljava.lang.String;@6db9f5a4),Annotation([Ljava.lang.String;@5f8edcc5,[Ljava.lang.String;@7b02881e,[Ledu.cmu.lti.nlp.amr.Entity;@1ebd319f))
AMR:
(e / exclaim-01, ARG0, h2 / house)
(e / exclaim-01, ARG1, t / they)
(e / exclaim-01, time, t3 / then)
(h2 / house, mod, p2 / pretty)
(t4 / that, mod, h2 / house)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 41,774 microseconds
Sentence: Just so , you might say to them : " The proof that the little prince existed is that he was charming , that he laughed , and that he was looking for a sheep .

Oracle Span 1:  and => and
Oracle Span 2:  charming => charming
Oracle Span 3:  existed => exist-01
Oracle Span 4:  he => he
Oracle Span 5:  Just => just-so
Oracle Span 6:  laughed => laugh-01
Oracle Span 7:  little => little
Oracle Span 8:  looking => look-01
Oracle Span 9:  prince => prince
Oracle Span 10:  say => say-01
Oracle Span 11:  sheep => sheep
Oracle Span 12:  you => you
Spans:
Span 27-28:  and => and
Span 21-22:  charming => charming
Span 16-17:  existed => exist-01
Span 19-20:  he => he
Span 0-1:  Just => just-so
Span 25-26:  laughed => laugh-01
Span 14-15:  little => little
Span 31-32:  looking => look-01
Span 15-16:  prince => prince
Span 5-6:  say => say-01
Span 34-35:  sheep => sheep
Span 3-4:  you => you

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 27-28:  and => and
Oracle Span 21-22:  charming => charming
Oracle Span 16-17:  existed => exist-01
Oracle Span 19-20:  he => he
Oracle Span 0-1:  Just => just-so
Oracle Span 25-26:  laughed => laugh-01
Oracle Span 14-15:  little => little
Oracle Span 31-32:  looking => look-01
Oracle Span 15-16:  prince => prince
Oracle Span 5-6:  say => say-01
Oracle Span 34-35:  sheep => sheep
Oracle Span 3-4:  you => you

Dependencies:
1	Just	_	RB	RB	_	2	advmod	_	_
2	so	_	RB	RB	_	6	advmod	_	_
3	,	_	,	,	_	6	punct	_	_
4	you	_	PRP	PRP	_	6	nsubj	_	_
5	might	_	MD	MD	_	6	aux	_	_
6	say	_	VB	VB	_	0	root	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	them	_	PRP	PRP	_	7	pobj	_	_
9	:	_	:	:	_	6	punct	_	_
10	"	_	''	''	_	6	punct	_	_
11	The	_	DT	DT	_	12	det	_	_
12	proof	_	NN	NN	_	18	nsubj	_	_
13	that	_	IN	IN	_	17	mark	_	_
14	the	_	DT	DT	_	16	det	_	_
15	little	_	JJ	JJ	_	16	amod	_	_
16	prince	_	NN	NN	_	17	nsubj	_	_
17	existed	_	VBD	VBD	_	12	dep	_	_
18	is	_	VBZ	VBZ	_	6	ccomp	_	_
19	that	_	IN	IN	_	22	mark	_	_
20	he	_	PRP	PRP	_	22	nsubj	_	_
21	was	_	VBD	VBD	_	22	cop	_	_
22	charming	_	JJ	JJ	_	18	ccomp	_	_
23	,	_	,	,	_	22	punct	_	_
24	that	_	IN	IN	_	26	mark	_	_
25	he	_	PRP	PRP	_	26	nsubj	_	_
26	laughed	_	VBD	VBD	_	22	ccomp	_	_
27	,	_	,	,	_	26	punct	_	_
28	and	_	CC	CC	_	26	cc	_	_
29	that	_	IN	IN	_	32	mark	_	_
30	he	_	PRP	PRP	_	32	nsubj	_	_
31	was	_	VBD	VBD	_	32	aux	_	_
32	looking	_	VBG	VBG	_	26	conj	_	_
33	for	_	IN	IN	_	32	prep	_	_
34	a	_	DT	DT	_	35	det	_	_
35	sheep	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c / charming)
(a / and, op, l / laugh-01)
(a / and, op, l2 / look-01)
(c / charming, domain, h / he)
(e / exist-01, ARG1, p3 / prince)
(l / laugh-01, ARG0, h / he)
(l2 / look-01, ARG0, h / he)
(l2 / look-01, ARG1, s3 / sheep)
(p3 / prince, mod, l3 / little)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, manner, j / just-so)

Input(Some(Graph((possible-01 :ARG1 (say-01 :manner just-so :ARG2 they :ARG1 (prove-01 :ARG0 (and :op (look-01 :ARG1 sheep :ARG0 he) :op (laugh-01 :ARG0 he) :op (charming :domain he)) :ARG1 (exist-01 :ARG1 (prince :mod little))) :ARG0 you)),ArrayBuffer(Span(5,6,List(0),say,say-01,false), Span(27,28,List(1),and,and,false), Span(31,32,List(2),looking,look-01,false), Span(34,35,List(3),sheep,sheep,false), Span(25,26,List(4),laughed,laugh-01,false), Span(21,22,List(5),charming,charming,false), Span(19,20,List(6),he,he,false), Span(16,17,List(7),existed,exist-01,false), Span(15,16,List(8),prince,prince,false), Span(14,15,List(9),little,little,false), Span(3,4,List(10),you,you,false), Span(0,1,List(11),Just,just-so,false)),Map(2 -> look-01, 5 -> charming, 8 -> prince, 7 -> exist-01, 1 -> and, 4 -> laugh-01, 11 -> just-so, 6 -> he, 9 -> little, 0 -> say-01, 10 -> you, 3 -> sheep),Map(e -> exist-01, h -> he, s2 -> say-01, j -> just-so, l3 -> little, y -> you, a -> and, l2 -> look-01, c -> charming, s3 -> sheep, l -> laugh-01, p3 -> prince))),[Ljava.lang.String;@3c0be339,Annotation([Ljava.lang.String;@15ca7889,[Ljava.lang.String;@7a675056,[Ljava.lang.String;@d21a74c),Annotation([Ljava.lang.String;@6e509ffa,[Ljava.lang.String;@2898ac89,[Ledu.cmu.lti.nlp.amr.Dependency;@683dbc2c),Annotation([Ljava.lang.String;@68267da0,[Ljava.lang.String;@2638011,[Ljava.lang.String;@6ff29830),Annotation([Ljava.lang.String;@6a2b953e,[Ljava.lang.String;@313b2ea6,[Ledu.cmu.lti.nlp.amr.Entity;@2f465398))
AMR:
(a / and, op, l / laugh-01)
(a / and, op, l2 / look-01)
(c / charming, domain, h / he)
(e / exist-01, ARG0, p3 / prince)
(l / laugh-01, ARG0, h / he)
(l / laugh-01, ARG1, j / just-so)
(l2 / look-01, ARG0, p3 / prince)
(l2 / look-01, ARG1, s3 / sheep)
(p3 / prince, mod, l3 / little)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, a / and)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.2.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.3
Decoded in 196,834 microseconds
Sentence: If anybody wants a sheep , that is a proof that he exists . "

Oracle Span 1:  anybody => anybody
Oracle Span 2:  exists => exist-01
Oracle Span 3:  sheep => sheep
Oracle Span 4:  wants => want-01
Spans:
Span 1-2:  anybody => anybody
Span 12-13:  exists => exist-01
Span 4-5:  sheep => sheep
Span 2-3:  wants => want-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 1-2:  anybody => anybody
Oracle Span 12-13:  exists => exist-01
Oracle Span 4-5:  sheep => sheep
Oracle Span 2-3:  wants => want-01

Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	anybody	_	NN	NN	_	3	nsubj	_	_
3	wants	_	VBZ	VBZ	_	10	advcl	_	_
4	a	_	DT	DT	_	5	det	_	_
5	sheep	_	NN	NN	_	3	dobj	_	_
6	,	_	,	,	_	10	punct	_	_
7	that	_	DT	DT	_	10	nsubj	_	_
8	is	_	VBZ	VBZ	_	10	cop	_	_
9	a	_	DT	DT	_	10	det	_	_
10	proof	_	NN	NN	_	0	root	_	_
11	that	_	IN	IN	_	13	mark	_	_
12	he	_	PRP	PRP	_	13	nsubj	_	_
13	exists	_	VBZ	VBZ	_	10	ccomp	_	_
14	.	_	.	.	_	10	punct	_	_
15	"	_	''	''	_	10	punct	_	_

Oracle:
(e / exist-01, ARG1, a / anybody)
(w / want-01, ARG0, a / anybody)
(w / want-01, ARG1, s / sheep)

Input(Some(Graph((prove-01 :ARG0 (want-01 :ARG1 sheep :ARG0 anybody) :ARG1 (exist-01 :ARG1 anybody)),ArrayBuffer(Span(2,3,List(0),wants,want-01,false), Span(4,5,List(1),sheep,sheep,false), Span(1,2,List(2),anybody,anybody,false), Span(12,13,List(3),exists,exist-01,false)),Map(2 -> anybody, 1 -> sheep, 0 -> want-01, 3 -> exist-01),Map(e -> exist-01, w -> want-01, s -> sheep, a -> anybody))),[Ljava.lang.String;@548e6d58,Annotation([Ljava.lang.String;@623a8092,[Ljava.lang.String;@a1cdc6d,[Ljava.lang.String;@175b9425),Annotation([Ljava.lang.String;@3098cf3b,[Ljava.lang.String;@610f7aa,[Ledu.cmu.lti.nlp.amr.Dependency;@6a03bcb1),Annotation([Ljava.lang.String;@21b2e768,[Ljava.lang.String;@57250572,[Ljava.lang.String;@5609159b),Annotation([Ljava.lang.String;@2118cddf,[Ljava.lang.String;@17a7f733,[Ledu.cmu.lti.nlp.amr.Entity;@68567e20))
AMR:
(e / exist-01, ARG1, w / want-01)
(w / want-01, ARG0, a / anybody)
(w / want-01, ARG1, s / sheep)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 18,928 microseconds
Sentence: And what good would it do to tell them that ?

Oracle Span 1:  And => and
Oracle Span 2:  do => do-02
Oracle Span 3:  good => good-04
Oracle Span 4:  tell => tell-01
Oracle Span 5:  that => that
Spans:
Span 0-1:  And => and
Span 5-6:  do => do-02
Span 2-3:  good => good-04
Span 7-8:  tell => tell-01
Span 9-10:  that => that

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 5-6:  do => do-02
Oracle Span 2-3:  good => good-04
Oracle Span 7-8:  tell => tell-01
Oracle Span 9-10:  that => that

Dependencies:
1	And	_	CC	CC	_	6	cc	_	_
2	what	_	WDT	WDT	_	3	det	_	_
3	good	_	NN	NN	_	6	dep	_	_
4	would	_	MD	MD	_	6	aux	_	_
5	it	_	PRP	PRP	_	6	nsubj	_	_
6	do	_	VB	VB	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	tell	_	VB	VB	_	6	xcomp	_	_
9	them	_	PRP	PRP	_	8	iobj	_	_
10	that	_	DT	DT	_	8	dobj	_	_
11	?	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, d / do-02)
(d / do-02, ARG0, t / tell-01)
(d / do-02, ARG1, g / good-04)
(t / tell-01, ARG1, t3 / that)

Input(Some(Graph((and :op (do-02 :ARG1 (good-04 :quant amr-unknown :ARG2 they) :ARG0 (tell-01 :ARG2 they :ARG1 that))),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(5,6,List(1),do,do-02,false), Span(2,3,List(2),good,good-04,false), Span(7,8,List(3),tell,tell-01,false), Span(9,10,List(4),that,that,false)),Map(2 -> good-04, 1 -> do-02, 4 -> that, 0 -> and, 3 -> tell-01),Map(t -> tell-01, d -> do-02, t3 -> that, g -> good-04, a -> and))),[Ljava.lang.String;@76ed1b7c,Annotation([Ljava.lang.String;@11fc564b,[Ljava.lang.String;@394a2528,[Ljava.lang.String;@6236eb5f),Annotation([Ljava.lang.String;@7c1e2a9e,[Ljava.lang.String;@fa36558,[Ledu.cmu.lti.nlp.amr.Dependency;@672872e1),Annotation([Ljava.lang.String;@32910148,[Ljava.lang.String;@3f56875e,[Ljava.lang.String;@2b4bac49),Annotation([Ljava.lang.String;@fd07cbb,[Ljava.lang.String;@3571b748,[Ledu.cmu.lti.nlp.amr.Entity;@3e96bacf))
AMR:
(a / and, op, d / do-02)
(d / do-02, ARG1, g / good-04)
(d / do-02, purpose, t / tell-01)
(t / tell-01, ARG1, t3 / that)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 16,441 microseconds
Sentence: They would shrug their shoulders , and treat you like a child .

Oracle Span 1:  and => and
Oracle Span 2:  child => child
Oracle Span 3:  shoulders => shoulder
Oracle Span 4:  shrug => shrug-01
Oracle Span 5:  They => they
Oracle Span 6:  treat => treat-01
Oracle Span 7:  you => you
Spans:
Span 6-7:  and => and
Span 11-12:  child => child
Span 4-5:  shoulders => shoulder
Span 2-3:  shrug => shrug-01
Span 0-1:  They => they
Span 7-8:  treat => treat-01
Span 8-9:  you => you

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 11-12:  child => child
Oracle Span 4-5:  shoulders => shoulder
Oracle Span 2-3:  shrug => shrug-01
Oracle Span 0-1:  They => they
Oracle Span 7-8:  treat => treat-01
Oracle Span 8-9:  you => you

Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	would	_	MD	MD	_	3	aux	_	_
3	shrug	_	VB	VB	_	0	root	_	_
4	their	_	PRP$	PRP$	_	5	poss	_	_
5	shoulders	_	NNS	NNS	_	3	dobj	_	_
6	,	_	,	,	_	3	punct	_	_
7	and	_	CC	CC	_	3	cc	_	_
8	treat	_	VB	VB	_	3	conj	_	_
9	you	_	PRP	PRP	_	8	dobj	_	_
10	like	_	IN	IN	_	8	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	child	_	NN	NN	_	10	pobj	_	_
13	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, s / shrug-01)
(a / and, op, t2 / treat-01)
(s / shrug-01, ARG0, t / they)
(s / shrug-01, ARG1, s2 / shoulder)
(s2 / shoulder, poss, t / they)
(t2 / treat-01, ARG0, t / they)
(t2 / treat-01, ARG1, y / you)
(t2 / treat-01, ARG2, c / child)

Input(Some(Graph((and :op (treat-01 :ARG2 child :ARG1 you :ARG0 they) :op (shrug-01 :ARG1 (shoulder :poss they) :ARG0 they)),ArrayBuffer(Span(6,7,List(0),and,and,false), Span(7,8,List(1),treat,treat-01,false), Span(11,12,List(2),child,child,false), Span(8,9,List(3),you,you,false), Span(2,3,List(4),shrug,shrug-01,false), Span(4,5,List(5),shoulders,shoulder,false), Span(0,1,List(6),They,they,false)),Map(2 -> child, 5 -> shoulder, 1 -> treat-01, 4 -> shrug-01, 6 -> they, 0 -> and, 3 -> you),Map(t -> they, s2 -> shoulder, s -> shrug-01, y -> you, a -> and, t2 -> treat-01, c -> child))),[Ljava.lang.String;@484970b0,Annotation([Ljava.lang.String;@4470f8a6,[Ljava.lang.String;@7c83dc97,[Ljava.lang.String;@7748410a),Annotation([Ljava.lang.String;@740773a3,[Ljava.lang.String;@37f1104d,[Ledu.cmu.lti.nlp.amr.Dependency;@55740540),Annotation([Ljava.lang.String;@60015ef5,[Ljava.lang.String;@2f54a33d,[Ljava.lang.String;@1018bde2),Annotation([Ljava.lang.String;@65b3f4a4,[Ljava.lang.String;@f2ff811,[Ledu.cmu.lti.nlp.amr.Entity;@568ff82))
AMR:
(a / and, op, s / shrug-01)
(a / and, op, t2 / treat-01)
(s / shrug-01, ARG0, t / they)
(s / shrug-01, ARG1, s2 / shoulder)
(t2 / treat-01, ARG0, s2 / shoulder)
(t2 / treat-01, ARG1, y / you)
(t2 / treat-01, ARG2, c / child)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 79,245 microseconds
Sentence: But if you said to them : " The planet he came from is Asteroid B-612 , " then they would be convinced , and leave you in peace from their questions .

Oracle Span 1:  and => and
Oracle Span 2:  Asteroid B => (name :op "B-612" :op "Asteroid")
Oracle Span 3:  But => contrast-01
Oracle Span 4:  came => come-01
Oracle Span 5:  convinced => convince-01
Oracle Span 6:  he => he
Oracle Span 7:  leave => leave-14
Oracle Span 8:  peace => peace
Oracle Span 9:  planet => planet
Oracle Span 10:  questions => question-01
Oracle Span 11:  said => say-01
Oracle Span 12:  they => they
Oracle Span 13:  you => you
NER Entity: (thing :name (name :op "Asteroid" :op "B" :op "-" :op "612"))
Spans:
Span 26-27:  and => and
Span 14-16:  Asteroid B => (name :op "B-612" :op "Asteroid")
Span 0-1:  But => contrast-01
Span 11-12:  came => come-01
Span 24-25:  convinced => convince-01
Span 10-11:  he => he
Span 27-28:  leave => leave-14
Span 30-31:  peace => peace
Span 9-10:  planet => planet
Span 33-34:  questions => question-01
Span 3-4:  said => say-01
Span 21-22:  they => they
Span 2-3:  you => you

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 26-27:  and => and
Oracle Span 14-16:  Asteroid B => (name :op "B-612" :op "Asteroid")
Oracle Span 0-1:  But => contrast-01
Oracle Span 11-12:  came => come-01
Oracle Span 24-25:  convinced => convince-01
Oracle Span 10-11:  he => he
Oracle Span 27-28:  leave => leave-14
Oracle Span 30-31:  peace => peace
Oracle Span 9-10:  planet => planet
Oracle Span 33-34:  questions => question-01
Oracle Span 3-4:  said => say-01
Oracle Span 21-22:  they => they
Oracle Span 2-3:  you => you

Dependencies:
1	But	_	CC	CC	_	23	cc	_	_
2	if	_	IN	IN	_	4	mark	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	said	_	VBD	VBD	_	23	advcl	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	them	_	PRP	PRP	_	5	pobj	_	_
7	:	_	:	:	_	6	punct	_	_
8	"	_	''	''	_	4	punct	_	_
9	The	_	DT	DT	_	10	det	_	_
10	planet	_	NN	NN	_	4	dobj	_	_
11	he	_	PRP	PRP	_	12	nsubj	_	_
12	came	_	VBD	VBD	_	10	rcmod	_	_
13	from	_	IN	IN	_	16	mark	_	_
14	is	_	VBZ	VBZ	_	16	cop	_	_
15	Asteroid	_	NNP	NNP	_	16	nn	_	_
16	B-612	_	NNP	NNP	_	12	advcl	_	_
17	,	_	,	,	_	4	punct	_	_
18	"	_	''	''	_	4	punct	_	_
19	then	_	RB	RB	_	23	advmod	_	_
20	they	_	PRP	PRP	_	23	nsubj	_	_
21	would	_	MD	MD	_	23	aux	_	_
22	be	_	VB	VB	_	23	cop	_	_
23	convinced	_	JJ	JJ	_	0	root	_	_
24	,	_	,	,	_	23	punct	_	_
25	and	_	CC	CC	_	23	cc	_	_
26	leave	_	VB	VB	_	23	conj	_	_
27	you	_	PRP	PRP	_	26	dobj	_	_
28	in	_	IN	IN	_	26	prep	_	_
29	peace	_	NN	NN	_	28	pobj	_	_
30	from	_	IN	IN	_	26	prep	_	_
31	their	_	PRP$	PRP$	_	32	poss	_	_
32	questions	_	NNS	NNS	_	30	pobj	_	_
33	.	_	.	.	_	23	punct	_	_

Oracle:
(a / and, condition, s / say-01)
(a / and, op, c / convince-01)
(a / and, op, l / leave-14)
(c / convince-01, ARG1, t / they)
(c2 / come-01, ARG1, h / he)
(c2 / come-01, ARG3, p / planet)
(c3 / contrast-01, ARG2, a / and)
(l / leave-14, ARG0, t / they)
(l / leave-14, ARG1, p2 / peace)
(n / name, op, "Asteroid")
(n / name, op, "B-612")
(p / planet, name, n / name)
(p2 / peace, domain, y / you)
(p2 / peace, topic, q2 / question-01)
(q2 / question-01, ARG0, t / they)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, c2 / come-01)
(s / say-01, ARG2, t / they)

Input(Some(Graph((contrast-01 :ARG2 (and :condition (say-01 :ARG1 (come-01 :ARG3 (planet :name (name :op "B-612" :op "Asteroid") :wiki -) :ARG1 he) :ARG0 you :ARG2 they) :op (leave-14 :ARG1 (peace :topic (question-01 :polarity - :ARG0 they) :domain you) :ARG0 they) :op (convince-01 :ARG1 they))),ArrayBuffer(Span(14,16,List(0, 1, 2),Asteroid B,(name :op "B-612" :op "Asteroid"),false), Span(0,1,List(3),But,contrast-01,false), Span(26,27,List(4),and,and,false), Span(3,4,List(5),said,say-01,false), Span(11,12,List(6),came,come-01,false), Span(9,10,List(7),planet,planet,false), Span(10,11,List(8),he,he,false), Span(2,3,List(9),you,you,false), Span(27,28,List(10),leave,leave-14,false), Span(30,31,List(11),peace,peace,false), Span(33,34,List(12),questions,question-01,false), Span(24,25,List(13),convinced,convince-01,false), Span(21,22,List(14),they,they,false)),Map(2 -> "Asteroid", 5 -> say-01, 12 -> question-01, 8 -> he, 7 -> planet, 1 -> "B-612", 4 -> and, 11 -> peace, 14 -> they, 6 -> come-01, 9 -> you, 0 -> name, 10 -> leave-14, 3 -> contrast-01, 13 -> convince-01),Map(n -> name, h -> he, t -> they, p2 -> peace, s -> say-01, y -> you, p -> planet, a -> and, c3 -> contrast-01, c -> convince-01, q2 -> question-01, l -> leave-14, c2 -> come-01))),[Ljava.lang.String;@50caa560,Annotation([Ljava.lang.String;@2a266d09,[Ljava.lang.String;@5ab9e72c,[Ljava.lang.String;@186f8716),Annotation([Ljava.lang.String;@1d8bd0de,[Ljava.lang.String;@45ca843,[Ledu.cmu.lti.nlp.amr.Dependency;@11c9af63),Annotation([Ljava.lang.String;@757acd7b,[Ljava.lang.String;@36b4fe2a,[Ljava.lang.String;@574b560f),Annotation([Ljava.lang.String;@ba54932,[Ljava.lang.String;@28975c28,[Ledu.cmu.lti.nlp.amr.Entity;@3943a2be))
AMR:
(a / and, op, c / convince-01)
(c / convince-01, ARG1, t / they)
(c2 / come-01, ARG1, h / he)
(c2 / come-01, ARG4, p / planet)
(c2 / come-01, time, n / name)
(c3 / contrast-01, ARG1, s / say-01)
(c3 / contrast-01, ARG2, a / and)
(l / leave-14, ARG0, t / they)
(l / leave-14, ARG1, p2 / peace)
(l / leave-14, manner, q2 / question-01)
(n / name, op, "Asteroid")
(n / name, op, "B-612")
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, p / planet)

WARNING: makeIds can't find span Id: 0.0.2.1.1.1
WARNING: makeIds can't find span Id: 0.0.2.1.1.1.1
WARNING: makeIds can't find span Id: 0.0.2.1.1.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.1.1
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 439,665 microseconds
Sentence: They are like that .

Oracle Span 1:  that => that
Oracle Span 2:  They => they
Spans:
Span 3-4:  that => that
Span 0-1:  They => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  that => that
Oracle Span 0-1:  They => they

Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	are	_	VBP	VBP	_	0	root	_	_
3	like	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	3	pobj	_	_
5	.	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph((resemble-01 :ARG1 they :ARG2 that),ArrayBuffer(Span(0,1,List(0),They,they,false), Span(3,4,List(1),that,that,false)),Map(1 -> that, 0 -> they),Map(t -> they, t2 -> that))),[Ljava.lang.String;@343570b7,Annotation([Ljava.lang.String;@157853da,[Ljava.lang.String;@71c3b41,[Ljava.lang.String;@236e3f4e),Annotation([Ljava.lang.String;@3cc1435c,[Ljava.lang.String;@6bf0219d,[Ledu.cmu.lti.nlp.amr.Dependency;@dd0c991),Annotation([Ljava.lang.String;@5f16132a,[Ljava.lang.String;@69fb6037,[Ljava.lang.String;@36d585c),Annotation([Ljava.lang.String;@87a85e1,[Ljava.lang.String;@671a5887,[Ledu.cmu.lti.nlp.amr.Entity;@5552768b))
AMR:
(t / they, op, t2 / that)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 8,982 microseconds
Sentence: One must not hold it against them .

Oracle Span 1:  against => against
Oracle Span 2:  hold => hold-01
Oracle Span 3:  it => it
Oracle Span 4:  One => one
Spans:
Span 5-6:  against => against
Span 3-4:  hold => hold-01
Span 4-5:  it => it
Span 0-1:  One => one

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  against => against
Oracle Span 3-4:  hold => hold-01
Oracle Span 4-5:  it => it
Oracle Span 0-1:  One => one

Dependencies:
1	One	_	PRP	PRP	_	4	nsubj	_	_
2	must	_	MD	MD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	hold	_	VB	VB	_	0	root	_	_
5	it	_	PRP	PRP	_	4	dobj	_	_
6	against	_	IN	IN	_	4	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	.	_	.	.	_	4	punct	_	_

Oracle:
(h / hold-01, ARG0, o2 / one)
(h / hold-01, ARG1, i / it)
(h / hold-01, ARG2, a / against)

Input(Some(Graph((obligate-01 :ARG1 one :ARG2 (hold-01 :ARG2 (against :op they) :ARG1 it :polarity - :ARG0 one)),ArrayBuffer(Span(0,1,List(0),One,one,false), Span(3,4,List(1),hold,hold-01,false), Span(5,6,List(2),against,against,false), Span(4,5,List(3),it,it,false)),Map(2 -> against, 1 -> hold-01, 0 -> one, 3 -> it),Map(h -> hold-01, a -> against, o2 -> one, i -> it))),[Ljava.lang.String;@3c947bc5,Annotation([Ljava.lang.String;@609db43b,[Ljava.lang.String;@55f616cf,[Ljava.lang.String;@1356d4d4),Annotation([Ljava.lang.String;@c03cf28,[Ljava.lang.String;@1329eff,[Ledu.cmu.lti.nlp.amr.Dependency;@6497b078),Annotation([Ljava.lang.String;@41c2284a,[Ljava.lang.String;@53aad5d5,[Ljava.lang.String;@46fa7c39),Annotation([Ljava.lang.String;@1fb700ee,[Ljava.lang.String;@4f67eb2a,[Ledu.cmu.lti.nlp.amr.Entity;@4a668b6e))
AMR:
(h / hold-01, ARG0, o2 / one)
(h / hold-01, ARG1, i / it)
(h / hold-01, ARG2, a / against)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 16,145 microseconds
Sentence: Children should always show great forbearance toward grown - up people .

Oracle Span 1:  always => always
Oracle Span 2:  Children => child
Oracle Span 3:  forbearance => forbearance
Oracle Span 4:  great => great
Oracle Span 5:  grown => grown-up
Oracle Span 6:  should => recommend-01
Oracle Span 7:  show => show-01
Spans:
Span 2-3:  always => always
Span 0-1:  Children => child
Span 5-6:  forbearance => forbearance
Span 4-5:  great => great
Span 7-8:  grown => grown-up
Span 1-2:  should => recommend-01
Span 3-4:  show => show-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 2-3:  always => always
Oracle Span 0-1:  Children => child
Oracle Span 5-6:  forbearance => forbearance
Oracle Span 4-5:  great => great
Oracle Span 7-8:  grown => grown-up
Oracle Span 1-2:  should => recommend-01
Oracle Span 3-4:  show => show-01

Dependencies:
1	Children	_	NNP	NNP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	always	_	RB	RB	_	4	advmod	_	_
4	show	_	VB	VB	_	0	root	_	_
5	great	_	JJ	JJ	_	6	amod	_	_
6	forbearance	_	NN	NN	_	4	dobj	_	_
7	toward	_	IN	IN	_	4	prep	_	_
8	grown	_	JJ	JJ	_	7	pobj	_	_
9	-	_	:	:	_	8	punct	_	_
10	up	_	IN	IN	_	8	advmod	_	_
11	people	_	NNS	NNS	_	8	dep	_	_
12	.	_	.	.	_	4	punct	_	_

Oracle:
(f / forbearance, mod, g / great)
(r / recommend-01, ARG1, s / show-01)
(s / show-01, ARG0, c / child)
(s / show-01, ARG1, f / forbearance)
(s / show-01, ARG2, g2 / grown-up)
(s / show-01, time, a / always)

Input(Some(Graph((recommend-01 :ARG1 (show-01 :time always :ARG2 grown-up :ARG1 (forbearance :mod great) :ARG0 child)),ArrayBuffer(Span(1,2,List(0),should,recommend-01,false), Span(3,4,List(1),show,show-01,false), Span(2,3,List(2),always,always,false), Span(5,6,List(3),forbearance,forbearance,false), Span(4,5,List(4),great,great,false), Span(0,1,List(5),Children,child,false), Span(7,8,List(6),grown,grown-up,false)),Map(2 -> always, 5 -> child, 1 -> show-01, 4 -> great, 6 -> grown-up, 0 -> recommend-01, 3 -> forbearance),Map(s -> show-01, g2 -> grown-up, g -> great, a -> always, r -> recommend-01, c -> child, f -> forbearance))),[Ljava.lang.String;@5f683daf,Annotation([Ljava.lang.String;@78ffe6dc,[Ljava.lang.String;@8317c52,[Ljava.lang.String;@76f2bbc1),Annotation([Ljava.lang.String;@68e965f5,[Ljava.lang.String;@6f27a732,[Ledu.cmu.lti.nlp.amr.Dependency;@6c779568),Annotation([Ljava.lang.String;@f381794,[Ljava.lang.String;@2cdd0d4b,[Ljava.lang.String;@7e9131d5),Annotation([Ljava.lang.String;@2e1d27ba,[Ljava.lang.String;@61d6015a,[Ledu.cmu.lti.nlp.amr.Entity;@2525ff7e))
AMR:
(f / forbearance, mod, g / great)
(r / recommend-01, ARG1, s / show-01)
(s / show-01, ARG0, c / child)
(s / show-01, ARG1, f / forbearance)
(s / show-01, ARG2, g2 / grown-up)
(s / show-01, time, a / always)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 147,746 microseconds
Sentence: But certainly , for us who understand life , figures are a matter of indifference .

Oracle Span 1:  But => contrast-01
Oracle Span 2:  certainly => certain
Oracle Span 3:  figures => figure
Oracle Span 4:  indifference => indifferent-01
Oracle Span 5:  life => life
Oracle Span 6:  understand => understand-01
Spans:
Span 0-1:  But => contrast-01
Span 1-2:  certainly => certain
Span 9-10:  figures => figure
Span 14-15:  indifference => indifferent-01
Span 7-8:  life => life
Span 6-7:  understand => understand-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  certainly => certain
Oracle Span 9-10:  figures => figure
Oracle Span 14-15:  indifference => indifferent-01
Oracle Span 7-8:  life => life
Oracle Span 6-7:  understand => understand-01

Dependencies:
1	But	_	CC	CC	_	13	cc	_	_
2	certainly	_	RB	RB	_	13	advmod	_	_
3	,	_	,	,	_	13	punct	_	_
4	for	_	IN	IN	_	13	prep	_	_
5	us	_	PRP	PRP	_	4	pobj	_	_
6	who	_	WP	WP	_	7	nsubj	_	_
7	understand	_	VBP	VBP	_	5	rcmod	_	_
8	life	_	NN	NN	_	7	dobj	_	_
9	,	_	,	,	_	13	punct	_	_
10	figures	_	NNS	NNS	_	13	nsubj	_	_
11	are	_	VBP	VBP	_	13	cop	_	_
12	a	_	DT	DT	_	13	det	_	_
13	matter	_	NN	NN	_	0	root	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	indifference	_	NN	NN	_	14	pobj	_	_
16	.	_	.	.	_	13	punct	_	_

Oracle:
(c / certain, domain, i2 / indifferent-01)
(c2 / contrast-01, ARG2, c / certain)
(i2 / indifferent-01, ARG2, f2 / figure)
(u / understand-01, ARG1, l / life)

Input(Some(Graph((contrast-01 :ARG2 (certain :domain (indifferent-01 :ARG2 figure :ARG1 (we :ARG0-of (understand-01 :ARG1 life))))),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(6,7,List(1),understand,understand-01,false), Span(7,8,List(2),life,life,false), Span(9,10,List(3),figures,figure,false), Span(1,2,List(4),certainly,certain,false), Span(14,15,List(5),indifference,indifferent-01,false)),Map(2 -> life, 5 -> indifferent-01, 1 -> understand-01, 4 -> certain, 0 -> contrast-01, 3 -> figure),Map(i2 -> indifferent-01, c -> certain, f2 -> figure, l -> life, u -> understand-01, c2 -> contrast-01))),[Ljava.lang.String;@524d6d96,Annotation([Ljava.lang.String;@152aa092,[Ljava.lang.String;@44a7bfbc,[Ljava.lang.String;@4ef37659),Annotation([Ljava.lang.String;@776b83cc,[Ljava.lang.String;@37858383,[Ledu.cmu.lti.nlp.amr.Dependency;@4e268090),Annotation([Ljava.lang.String;@1bb266b3,[Ljava.lang.String;@306cf3ea,[Ljava.lang.String;@2beee7ff),Annotation([Ljava.lang.String;@5136d012,[Ljava.lang.String;@5939a379,[Ledu.cmu.lti.nlp.amr.Entity;@e1de817))
AMR:
(c2 / contrast-01, ARG1, c / certain)
(c2 / contrast-01, time, f2 / figure)
(i2 / indifferent-01, ARG1, c2 / contrast-01)
(u / understand-01, ARG0, f2 / figure)
(u / understand-01, ARG1, l / life)

WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 55,023 microseconds
Sentence: I should have liked to begin this story in the fashion of the fairy - tales .

Oracle Span 1:  begin => begin-01
Oracle Span 2:  fairy => fairy
Oracle Span 3:  fashion => fashion
Oracle Span 4:  I => i
Oracle Span 5:  liked => like-02
Oracle Span 6:  story => story
Oracle Span 7:  tales => tale
Oracle Span 8:  this => this
Spans:
Span 5-6:  begin => begin-01
Span 13-14:  fairy => fairy
Span 10-11:  fashion => fashion
Span 0-1:  I => i
Span 3-4:  liked => like-02
Span 7-8:  story => story
Span 15-16:  tales => tale
Span 6-7:  this => this

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 5-6:  begin => begin-01
Oracle Span 13-14:  fairy => fairy
Oracle Span 10-11:  fashion => fashion
Oracle Span 0-1:  I => i
Oracle Span 3-4:  liked => like-02
Oracle Span 7-8:  story => story
Oracle Span 15-16:  tales => tale
Oracle Span 6-7:  this => this

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	have	_	VB	VB	_	4	aux	_	_
4	liked	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	begin	_	VB	VB	_	4	xcomp	_	_
7	this	_	DT	DT	_	8	det	_	_
8	story	_	NN	NN	_	6	dobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	fashion	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	fairy	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	8	punct	_	_
16	tales	_	NNS	NNS	_	8	dep	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, s / story)
(b / begin-01, manner, f / fashion)
(f / fashion, mod, t2 / tale)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, b / begin-01)
(s / story, mod, t / this)
(t2 / tale, mod, f2 / fairy)

Input(Some(Graph((like-02 :ARG1 (begin-01 :manner (fashion :mod (tale :mod fairy)) :ARG1 (story :mod this) :ARG0 i) :ARG0 i),ArrayBuffer(Span(3,4,List(0),liked,like-02,false), Span(5,6,List(1),begin,begin-01,false), Span(10,11,List(2),fashion,fashion,false), Span(15,16,List(3),tales,tale,false), Span(13,14,List(4),fairy,fairy,false), Span(7,8,List(5),story,story,false), Span(6,7,List(6),this,this,false), Span(0,1,List(7),I,i,false)),Map(2 -> fashion, 5 -> story, 7 -> i, 1 -> begin-01, 4 -> fairy, 6 -> this, 0 -> like-02, 3 -> tale),Map(t -> this, b -> begin-01, s -> story, t2 -> tale, i -> i, f2 -> fairy, l -> like-02, f -> fashion))),[Ljava.lang.String;@52102734,Annotation([Ljava.lang.String;@3541cb24,[Ljava.lang.String;@2177849e,[Ljava.lang.String;@40cb8df7),Annotation([Ljava.lang.String;@13b13b5d,[Ljava.lang.String;@2892dae4,[Ledu.cmu.lti.nlp.amr.Dependency;@355ce81c),Annotation([Ljava.lang.String;@29647f75,[Ljava.lang.String;@3315d2d7,[Ljava.lang.String;@d6e7bab),Annotation([Ljava.lang.String;@5fa07e12,[Ljava.lang.String;@55b53d44,[Ledu.cmu.lti.nlp.amr.Entity;@482bce4f))
AMR:
(b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, s / story)
(l / like-02, ARG0, t2 / tale)
(l / like-02, ARG1, b / begin-01)
(s / story, mod, t / this)
(s / story, poss, f / fashion)
(t2 / tale, mod, f2 / fairy)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 162,315 microseconds
Sentence: I should have like to say : " Once upon a time there was a little prince who lived on a planet that was scarcely any bigger than himself , and who had need of a sheep ... "

Oracle Span 1:  bigger => big
Oracle Span 2:  I => i
Oracle Span 3:  like => like-02
Oracle Span 4:  little => little
Oracle Span 5:  lived => live-01
Oracle Span 6:  need => need-01
Oracle Span 7:  Once => once-upon-a-time
Oracle Span 8:  planet => planet
Oracle Span 9:  prince => prince
Oracle Span 10:  say => say-01
Oracle Span 11:  scarcely => scarce
Oracle Span 12:  sheep => sheep
Spans:
Span 26-27:  bigger => big
Span 0-1:  I => i
Span 3-4:  like => like-02
Span 15-16:  little => little
Span 18-19:  lived => live-01
Span 33-34:  need => need-01
Span 8-9:  Once => once-upon-a-time
Span 21-22:  planet => planet
Span 16-17:  prince => prince
Span 5-6:  say => say-01
Span 24-25:  scarcely => scarce
Span 36-37:  sheep => sheep

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Oracle Span 26-27:  bigger => big
Oracle Span 0-1:  I => i
Oracle Span 3-4:  like => like-02
Oracle Span 15-16:  little => little
Oracle Span 18-19:  lived => live-01
Oracle Span 33-34:  need => need-01
Oracle Span 8-9:  Once => once-upon-a-time
Oracle Span 21-22:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 5-6:  say => say-01
Oracle Span 24-25:  scarcely => scarce
Oracle Span 36-37:  sheep => sheep

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	have	_	VB	VB	_	4	aux	_	_
4	like	_	VBP	VBP	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	say	_	VB	VB	_	4	xcomp	_	_
7	:	_	:	:	_	4	punct	_	_
8	"	_	''	''	_	4	punct	_	_
9	Once	_	RB	RB	_	14	advmod	_	_
10	upon	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	time	_	NN	NN	_	10	pobj	_	_
13	there	_	EX	EX	_	14	expl	_	_
14	was	_	VBD	VBD	_	4	ccomp	_	_
15	a	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	nsubj	_	_
18	who	_	WP	WP	_	19	nsubj	_	_
19	lived	_	VBD	VBD	_	17	rcmod	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	a	_	DT	DT	_	22	det	_	_
22	planet	_	NN	NN	_	20	pobj	_	_
23	that	_	WDT	WDT	_	27	nsubj	_	_
24	was	_	VBD	VBD	_	27	cop	_	_
25	scarcely	_	RB	RB	_	27	advmod	_	_
26	any	_	RB	RB	_	27	advmod	_	_
27	bigger	_	JJR	JJR	_	19	dep	_	_
28	than	_	IN	IN	_	27	prep	_	_
29	himself	_	PRP	PRP	_	28	pobj	_	_
30	,	_	,	,	_	27	punct	_	_
31	and	_	CC	CC	_	27	cc	_	_
32	who	_	WP	WP	_	33	nsubj	_	_
33	had	_	VBD	VBD	_	27	conj	_	_
34	need	_	NN	NN	_	33	dobj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	a	_	DT	DT	_	37	det	_	_
37	sheep	_	NN	NN	_	35	pobj	_	_
38	...	_	.	.	_	4	punct	_	_
39	"	_	''	''	_	4	punct	_	_

Oracle:
(b / big, compared-to, p / prince)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, s / say-01)
(l3 / live-01, ARG0, p / prince)
(l3 / live-01, location, p2 / planet)
(n / need-01, ARG0, p / prince)
(n / need-01, ARG1, s3 / sheep)
(p / prince, mod, l2 / little)
(p / prince, time, o / once-upon-a-time)
(p2 / planet, mod, b / big)
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, p / prince)

Input(Some(Graph((like-02 :ARG1 (say-01 :ARG1 (prince :time once-upon-a-time :ARG0-of (need-01 :ARG1 sheep) :ARG0-of (live-01 :location (planet :mod (big :degree (more :quant scarce) :compared-to prince))) :mod little) :ARG0 i) :ARG0 i),ArrayBuffer(Span(3,4,List(0),like,like-02,false), Span(5,6,List(1),say,say-01,false), Span(16,17,List(2),prince,prince,false), Span(33,34,List(3),need,need-01,false), Span(36,37,List(4),sheep,sheep,false), Span(18,19,List(5),lived,live-01,false), Span(21,22,List(6),planet,planet,false), Span(26,27,List(7),bigger,big,false), Span(15,16,List(8),little,little,false), Span(0,1,List(9),I,i,false), Span(8,9,List(10),Once,once-upon-a-time,false), Span(24,25,List(11),scarcely,scarce,false)),Map(2 -> prince, 5 -> live-01, 8 -> little, 7 -> big, 1 -> say-01, 4 -> sheep, 11 -> scarce, 6 -> planet, 9 -> i, 0 -> like-02, 10 -> once-upon-a-time, 3 -> need-01),Map(n -> need-01, s2 -> scarce, b -> big, p2 -> planet, l3 -> live-01, s -> say-01, p -> prince, l2 -> little, i -> i, s3 -> sheep, l -> like-02, o -> once-upon-a-time))),[Ljava.lang.String;@366647c2,Annotation([Ljava.lang.String;@6a6afff2,[Ljava.lang.String;@1649b0e6,[Ljava.lang.String;@865dd6),Annotation([Ljava.lang.String;@4da4253,[Ljava.lang.String;@3972a855,[Ledu.cmu.lti.nlp.amr.Dependency;@62e7f11d),Annotation([Ljava.lang.String;@503d687a,[Ljava.lang.String;@6a370f4,[Ljava.lang.String;@2abf4075),Annotation([Ljava.lang.String;@770d3326,[Ljava.lang.String;@4cc8eb05,[Ledu.cmu.lti.nlp.amr.Entity;@51f116b8))
AMR:
(l / like-02, ARG0, p / prince)
(l / like-02, ARG1, s / say-01)
(l3 / live-01, ARG0, p / prince)
(l3 / live-01, ARG1, s2 / scarce)
(l3 / live-01, ARG2, b / big)
(l3 / live-01, location, p2 / planet)
(n / need-01, ARG0, b / big)
(n / need-01, ARG1, s3 / sheep)
(p / prince, mod, l2 / little)
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, o / once-upon-a-time)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0
Decoded in 721,282 microseconds
Sentence: To those who understand life , that would have given a much greater air of truth to my story .

Oracle Span 1:  air => air
Oracle Span 2:  given => give-01
Oracle Span 3:  greater => great
Oracle Span 4:  life => life
Oracle Span 5:  much => much
Oracle Span 6:  story => story
Oracle Span 7:  that => that
Oracle Span 8:  truth => truth
Oracle Span 9:  understand => (person :ARG0-of understand-01)
Spans:
Span 13-14:  air => air
Span 9-10:  given => give-01
Span 12-13:  greater => great
Span 4-5:  life => life
Span 11-12:  much => much
Span 18-19:  story => story
Span 6-7:  that => that
Span 15-16:  truth => truth
Span 3-4:  understand => (person :ARG0-of understand-01)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 13-14:  air => air
Oracle Span 9-10:  given => give-01
Oracle Span 12-13:  greater => great
Oracle Span 4-5:  life => life
Oracle Span 11-12:  much => much
Oracle Span 18-19:  story => story
Oracle Span 6-7:  that => that
Oracle Span 15-16:  truth => truth
Oracle Span 3-4:  understand => (person :ARG0-of understand-01)

Dependencies:
1	To	_	TO	TO	_	10	prep	_	_
2	those	_	DT	DT	_	1	pobj	_	_
3	who	_	WP	WP	_	4	nsubj	_	_
4	understand	_	VBP	VBP	_	2	rcmod	_	_
5	life	_	NN	NN	_	4	dobj	_	_
6	,	_	,	,	_	10	punct	_	_
7	that	_	DT	DT	_	10	nsubj	_	_
8	would	_	MD	MD	_	10	aux	_	_
9	have	_	VB	VB	_	10	aux	_	_
10	given	_	VBN	VBN	_	0	root	_	_
11	a	_	DT	DT	_	14	det	_	_
12	much	_	RB	RB	_	13	advmod	_	_
13	greater	_	JJR	JJR	_	14	amod	_	_
14	air	_	NN	NN	_	10	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	truth	_	NN	NN	_	15	pobj	_	_
17	to	_	TO	TO	_	10	prep	_	_
18	my	_	PRP$	PRP$	_	19	poss	_	_
19	story	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	10	punct	_	_

Oracle:
(a / air, mod, g2 / great)
(g / give-01, ARG0, t / that)
(g / give-01, ARG1, t3 / truth)
(g / give-01, ARG2, s / story)
(g / give-01, beneficiary, p / person)
(t3 / truth, quant, a / air)
(u / understand-01, ARG0, p / person)
(u / understand-01, ARG1, l / life)

Input(Some(Graph((give-01 :beneficiary (person :ARG0-of (understand-01 :ARG1 life)) :ARG2 (story :poss i) :ARG1 (truth :quant (air :mod (great :degree (more :degree much)))) :ARG0 that),ArrayBuffer(Span(9,10,List(0),given,give-01,false), Span(3,4,List(1, 2),understand,(person :ARG0-of understand-01),false), Span(4,5,List(3),life,life,false), Span(18,19,List(4),story,story,false), Span(15,16,List(5),truth,truth,false), Span(13,14,List(6),air,air,false), Span(12,13,List(7),greater,great,false), Span(11,12,List(8),much,much,false), Span(6,7,List(9),that,that,false)),Map(2 -> understand-01, 5 -> truth, 8 -> much, 7 -> great, 1 -> person, 4 -> story, 6 -> air, 9 -> that, 0 -> give-01, 3 -> life),Map(t -> that, m2 -> much, s -> story, g2 -> great, t3 -> truth, p -> person, g -> give-01, a -> air, l -> life, u -> understand-01))),[Ljava.lang.String;@19d481b,Annotation([Ljava.lang.String;@1f97cf0d,[Ljava.lang.String;@140c9f39,[Ljava.lang.String;@4d910fd6),Annotation([Ljava.lang.String;@26275bef,[Ljava.lang.String;@7690781,[Ledu.cmu.lti.nlp.amr.Dependency;@77eca502),Annotation([Ljava.lang.String;@3246fb96,[Ljava.lang.String;@2e222612,[Ljava.lang.String;@61386958),Annotation([Ljava.lang.String;@73ee04c8,[Ljava.lang.String;@7671cb68,[Ledu.cmu.lti.nlp.amr.Entity;@49dc7102))
AMR:
(a / air, domain, t3 / truth)
(a / air, mod, g2 / great)
(g / give-01, ARG0, t / that)
(g / give-01, ARG1, a / air)
(g / give-01, ARG2, p / person)
(g / give-01, destination, s / story)
(m2 / much, op, a / air)
(u / understand-01, ARG0, p / person)
(u / understand-01, ARG1, l / life)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 170,790 microseconds
Sentence: For I do not want any one to read my book carelessly .

Oracle Span 1:  book => book
Oracle Span 2:  carelessly => careless
Oracle Span 3:  I => i
Oracle Span 4:  read => read-01
Oracle Span 5:  want => want-01
Spans:
Span 10-11:  book => book
Span 11-12:  carelessly => careless
Span 1-2:  I => i
Span 8-9:  read => read-01
Span 4-5:  want => want-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  book => book
Oracle Span 11-12:  carelessly => careless
Oracle Span 1-2:  I => i
Oracle Span 8-9:  read => read-01
Oracle Span 4-5:  want => want-01

Dependencies:
1	For	_	IN	IN	_	5	dep	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	do	_	VBP	VBP	_	5	aux	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	want	_	VB	VB	_	0	root	_	_
6	any	_	DT	DT	_	7	det	_	_
7	one	_	NN	NN	_	5	dobj	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	read	_	VB	VB	_	7	vmod	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	book	_	NN	NN	_	9	dobj	_	_
12	carelessly	_	RB	RB	_	9	advmod	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(b / book, poss, i / i)
(r / read-01, ARG1, b / book)
(r / read-01, manner, c2 / careless)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, r / read-01)

Input(Some(Graph((cause-01 :ARG0 (want-01 :polarity - :ARG1 (read-01 :manner careless :ARG1 (book :poss i) :ARG0 anyone) :ARG0 i)),ArrayBuffer(Span(4,5,List(0),want,want-01,false), Span(8,9,List(1),read,read-01,false), Span(10,11,List(2),book,book,false), Span(1,2,List(3),I,i,false), Span(11,12,List(4),carelessly,careless,false)),Map(2 -> book, 1 -> read-01, 4 -> careless, 0 -> want-01, 3 -> i),Map(w -> want-01, b -> book, i -> i, r -> read-01, c2 -> careless))),[Ljava.lang.String;@6b8ca3c8,Annotation([Ljava.lang.String;@68c72235,[Ljava.lang.String;@10959ece,[Ljava.lang.String;@3a6bb9bf),Annotation([Ljava.lang.String;@34f7cfd9,[Ljava.lang.String;@65f095f8,[Ledu.cmu.lti.nlp.amr.Dependency;@59af0466),Annotation([Ljava.lang.String;@3e6ef8ad,[Ljava.lang.String;@346d61be,[Ljava.lang.String;@55536d9e),Annotation([Ljava.lang.String;@747edf66,[Ljava.lang.String;@3d1cfad4,[Ledu.cmu.lti.nlp.amr.Entity;@62230c58))
AMR:
(r / read-01, ARG0, i / i)
(r / read-01, ARG1, b / book)
(r / read-01, degree, c2 / careless)
(w / want-01, ARG0, i / i)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.2
Decoded in 19,685 microseconds
Sentence: I have suffered too much grief in setting down these memories .

Oracle Span 1:  grief => grief
Oracle Span 2:  I => i
Oracle Span 3:  memories => memory
Oracle Span 4:  much => much
Oracle Span 5:  suffered => suffer-01
Oracle Span 6:  too => too
Spans:
Span 5-6:  grief => grief
Span 0-1:  I => i
Span 10-11:  memories => memory
Span 4-5:  much => much
Span 2-3:  suffered => suffer-01
Span 3-4:  too => too

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 5-6:  grief => grief
Oracle Span 0-1:  I => i
Oracle Span 10-11:  memories => memory
Oracle Span 4-5:  much => much
Oracle Span 2-3:  suffered => suffer-01
Oracle Span 3-4:  too => too

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	suffered	_	VBN	VBN	_	0	root	_	_
4	too	_	RB	RB	_	6	advmod	_	_
5	much	_	RB	RB	_	6	advmod	_	_
6	grief	_	JJ	JJ	_	3	acomp	_	_
7	in	_	IN	IN	_	3	prep	_	_
8	setting	_	VBG	VBG	_	7	pcomp	_	_
9	down	_	RP	RP	_	8	prt	_	_
10	these	_	DT	DT	_	11	det	_	_
11	memories	_	NNS	NNS	_	8	dobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(g / grief, quant, m / much)
(m / much, degree, t / too)
(s / suffer-01, ARG0, i / i)
(s / suffer-01, ARG1, g / grief)

Input(Some(Graph((suffer-01 :time (set-down-09 :ARG1 (memory :mod this) :ARG0 i) :ARG1 (grief :quant (much :degree too)) :ARG0 i),ArrayBuffer(Span(2,3,List(0),suffered,suffer-01,false), Span(10,11,List(1),memories,memory,false), Span(5,6,List(2),grief,grief,false), Span(4,5,List(3),much,much,false), Span(3,4,List(4),too,too,false), Span(0,1,List(5),I,i,false)),Map(2 -> grief, 5 -> i, 1 -> memory, 4 -> too, 0 -> suffer-01, 3 -> much),Map(t -> too, m2 -> memory, s -> suffer-01, m -> much, g -> grief, i -> i))),[Ljava.lang.String;@2cd2a21f,Annotation([Ljava.lang.String;@2e55dd0c,[Ljava.lang.String;@74455848,[Ljava.lang.String;@e7edb54),Annotation([Ljava.lang.String;@378542de,[Ljava.lang.String;@3738449f,[Ledu.cmu.lti.nlp.amr.Dependency;@69e1dd28),Annotation([Ljava.lang.String;@11bd0f3b,[Ljava.lang.String;@c333c60,[Ljava.lang.String;@79da8dc5),Annotation([Ljava.lang.String;@1eb5174b,[Ljava.lang.String;@67080771,[Ledu.cmu.lti.nlp.amr.Entity;@72cde7cc))
AMR:
(g / grief, degree, m / much)
(s / suffer-01, ARG0, i / i)
(s / suffer-01, ARG1, m2 / memory)
(s / suffer-01, ARG2, t / too)
(s / suffer-01, ARG4, g / grief)

WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 88,036 microseconds
Sentence: Six years have already passed since my friend went away from me , with his sheep .

Oracle Span 1:  already => already
Oracle Span 2:  away => away
Oracle Span 3:  friend => friend
Oracle Span 4:  have => (person :ARG0-of have-rel-role-91)
Oracle Span 5:  sheep => sheep
Oracle Span 6:  Six => 6
Oracle Span 7:  went => go-02
Oracle Span 8:  years => (temporal-quantity :unit year)
Spans:
Span 3-4:  already => already
Span 9-10:  away => away
Span 7-8:  friend => friend
Span 2-3:  have => (person :ARG0-of have-rel-role-91)
Span 15-16:  sheep => sheep
Span 0-1:  Six => 6
Span 8-9:  went => go-02
Span 1-2:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 3-4:  already => already
Oracle Span 9-10:  away => away
Oracle Span 7-8:  friend => friend
Oracle Span 2-3:  have => (person :ARG0-of have-rel-role-91)
Oracle Span 15-16:  sheep => sheep
Oracle Span 0-1:  Six => 6
Oracle Span 8-9:  went => go-02
Oracle Span 1-2:  years => (temporal-quantity :unit year)

Dependencies:
1	Six	_	CD	CD	_	2	num	_	_
2	years	_	NNS	NNS	_	5	nsubj	_	_
3	have	_	VBP	VBP	_	5	aux	_	_
4	already	_	RB	RB	_	5	advmod	_	_
5	passed	_	VBN	VBN	_	0	root	_	_
6	since	_	IN	IN	_	9	mark	_	_
7	my	_	PRP$	PRP$	_	8	poss	_	_
8	friend	_	NN	NN	_	9	nsubj	_	_
9	went	_	VBD	VBD	_	5	advcl	_	_
10	away	_	RB	RB	_	9	advmod	_	_
11	from	_	IN	IN	_	9	prep	_	_
12	me	_	PRP	PRP	_	11	pobj	_	_
13	,	_	,	,	_	9	punct	_	_
14	with	_	IN	IN	_	9	prep	_	_
15	his	_	PRP$	PRP$	_	16	poss	_	_
16	sheep	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	5	punct	_	_

Oracle:
(g / go-02, ARG0, p / person)
(g / go-02, accompanier, s / sheep)
(g / go-02, direction, a / away)
(g / go-02, time, a3 / already)
(h / have-rel-role-91, ARG0, p / person)
(h / have-rel-role-91, ARG2, f / friend)
(s / sheep, poss, p / person)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph((go-02 :time already :time (before :op now :quant (temporal-quantity :unit year :quant 6)) :accompanier (sheep :poss person) :direction (away :op i) :ARG0 (person :ARG0-of (have-rel-role-91 :ARG2 friend :ARG1 i))),ArrayBuffer(Span(8,9,List(0),went,go-02,false), Span(3,4,List(1),already,already,false), Span(0,1,List(2),Six,6,false), Span(1,2,List(3, 4),years,(temporal-quantity :unit year),false), Span(15,16,List(5),sheep,sheep,false), Span(9,10,List(6),away,away,false), Span(7,8,List(7),friend,friend,false), Span(2,3,List(8, 9),have,(person :ARG0-of have-rel-role-91),false)),Map(2 -> 6, 5 -> sheep, 8 -> person, 7 -> friend, 1 -> already, 4 -> year, 6 -> away, 9 -> have-rel-role-91, 0 -> go-02, 3 -> temporal-quantity),Map(h -> have-rel-role-91, t -> temporal-quantity, s -> sheep, a3 -> already, p -> person, y -> year, g -> go-02, a -> away, 6 -> 6, f -> friend))),[Ljava.lang.String;@5fd4f8f5,Annotation([Ljava.lang.String;@696da30b,[Ljava.lang.String;@4e7912d8,[Ljava.lang.String;@53976f5c),Annotation([Ljava.lang.String;@2bfc268b,[Ljava.lang.String;@2f8dad04,[Ledu.cmu.lti.nlp.amr.Dependency;@29e495ff),Annotation([Ljava.lang.String;@41e1e210,[Ljava.lang.String;@be35cd9,[Ljava.lang.String;@4944252c),Annotation([Ljava.lang.String;@44821a96,[Ljava.lang.String;@a3d8174,[Ledu.cmu.lti.nlp.amr.Entity;@1ba9117e))
AMR:
(a3 / already, compared-to, g / go-02)
(g / go-02, ARG0, f / friend)
(g / go-02, ARG1, t / temporal-quantity)
(g / go-02, ARG2, s / sheep)
(g / go-02, direction, a / away)
(h / have-rel-role-91, ARG0, p / person)
(h / have-rel-role-91, ARG1, t / temporal-quantity)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, y / year)

WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.1.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 370,053 microseconds
Sentence: If I try to describe him here , it is to make sure that I shall not forget him .

Oracle Span 1:  describe => describe-01
Oracle Span 2:  forget => forget-01
Oracle Span 3:  here => here
Oracle Span 4:  I => i
Oracle Span 5:  try => try-01
Spans:
Span 4-5:  describe => describe-01
Span 17-18:  forget => forget-01
Span 6-7:  here => here
Span 1-2:  I => i
Span 2-3:  try => try-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  describe => describe-01
Oracle Span 17-18:  forget => forget-01
Oracle Span 6-7:  here => here
Oracle Span 1-2:  I => i
Oracle Span 2-3:  try => try-01

Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	try	_	VBP	VBP	_	10	advcl	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	describe	_	VB	VB	_	3	xcomp	_	_
6	him	_	PRP	PRP	_	5	dobj	_	_
7	here	_	RB	RB	_	5	advmod	_	_
8	,	_	,	,	_	10	punct	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	is	_	VBZ	VBZ	_	0	root	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	make	_	VB	VB	_	10	xcomp	_	_
13	sure	_	JJ	JJ	_	12	acomp	_	_
14	that	_	IN	IN	_	18	mark	_	_
15	I	_	PRP	PRP	_	18	nsubj	_	_
16	shall	_	MD	MD	_	18	aux	_	_
17	not	_	RB	RB	_	18	neg	_	_
18	forget	_	VB	VB	_	12	ccomp	_	_
19	him	_	PRP	PRP	_	18	dobj	_	_
20	.	_	.	.	_	10	punct	_	_

Oracle:
(d / describe-01, ARG0, i / i)
(d / describe-01, location, h2 / here)
(f / forget-01, ARG0, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, d / describe-01)

Input(Some(Graph((ensure-01 :ARG1 (forget-01 :polarity - :ARG1 he :ARG0 i) :condition (try-01 :ARG1 (describe-01 :location here :ARG1 he :ARG0 i) :ARG0 i)),ArrayBuffer(Span(17,18,List(0),forget,forget-01,false), Span(2,3,List(1),try,try-01,false), Span(4,5,List(2),describe,describe-01,false), Span(6,7,List(3),here,here,false), Span(1,2,List(4),I,i,false)),Map(2 -> describe-01, 1 -> try-01, 4 -> i, 0 -> forget-01, 3 -> here),Map(h2 -> here, t -> try-01, d -> describe-01, i -> i, f -> forget-01))),[Ljava.lang.String;@732c2a62,Annotation([Ljava.lang.String;@272ed83b,[Ljava.lang.String;@41fecb8b,[Ljava.lang.String;@120f102b),Annotation([Ljava.lang.String;@625732,[Ljava.lang.String;@51dcb805,[Ledu.cmu.lti.nlp.amr.Dependency;@66498326),Annotation([Ljava.lang.String;@cad498c,[Ljava.lang.String;@1e6454ec,[Ljava.lang.String;@2accdbb5),Annotation([Ljava.lang.String;@b62d79,[Ljava.lang.String;@6631f5ca,[Ledu.cmu.lti.nlp.amr.Entity;@5ace1ed4))
AMR:
(d / describe-01, ARG0, i / i)
(d / describe-01, location, h2 / here)
(f / forget-01, ARG0, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, d / describe-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 25,523 microseconds
Sentence: To forget a friend is sad .

Oracle Span 1:  forget => forget-01
Oracle Span 2:  friend => (have-rel-role-91 :ARG2 friend)
Oracle Span 3:  sad => sad-02
Spans:
Span 1-2:  forget => forget-01
Span 3-4:  friend => (have-rel-role-91 :ARG2 friend)
Span 5-6:  sad => sad-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  forget => forget-01
Oracle Span 3-4:  friend => (have-rel-role-91 :ARG2 friend)
Oracle Span 5-6:  sad => sad-02

Dependencies:
1	To	_	TO	TO	_	2	aux	_	_
2	forget	_	VB	VB	_	6	csubj	_	_
3	a	_	DT	DT	_	4	det	_	_
4	friend	_	NN	NN	_	2	dobj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	sad	_	JJ	JJ	_	0	root	_	_
7	.	_	.	.	_	6	punct	_	_

Oracle:
(h / have-rel-role-91, ARG2, f / friend)
(s / sad-02, ARG0, f3 / forget-01)

Input(Some(Graph((sad-02 :ARG0 (forget-01 :ARG1 (person :ARG0-of (have-rel-role-91 :ARG2 friend)))),ArrayBuffer(Span(5,6,List(0),sad,sad-02,false), Span(1,2,List(1),forget,forget-01,false), Span(3,4,List(2, 3),friend,(have-rel-role-91 :ARG2 friend),false)),Map(2 -> have-rel-role-91, 1 -> forget-01, 0 -> sad-02, 3 -> friend),Map(h -> have-rel-role-91, s -> sad-02, f3 -> forget-01, f -> friend))),[Ljava.lang.String;@1613674b,Annotation([Ljava.lang.String;@27ff5d15,[Ljava.lang.String;@4e096385,[Ljava.lang.String;@649bec2e),Annotation([Ljava.lang.String;@693fe6c9,[Ljava.lang.String;@34f5090e,[Ledu.cmu.lti.nlp.amr.Dependency;@31e5415e),Annotation([Ljava.lang.String;@a2431d0,[Ljava.lang.String;@1cbb87f3,[Ljava.lang.String;@1a4013),Annotation([Ljava.lang.String;@1b6e1eff,[Ljava.lang.String;@306f16f3,[Ledu.cmu.lti.nlp.amr.Entity;@702b8b12))
AMR:
(f3 / forget-01, ARG1, h / have-rel-role-91)
(h / have-rel-role-91, ARG2, f / friend)
(s / sad-02, ARG1, h / have-rel-role-91)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
Decoded in 10,289 microseconds
Sentence: Not every one has had a friend .

Oracle Span 1:  every => everyone
Oracle Span 2:  friend => friend
Oracle Span 3:  had => (person :ARG0-of have-rel-role-91)
Oracle Span 4:  has => have-03
Spans:
Span 1-2:  every => everyone
Span 6-7:  friend => friend
Span 4-5:  had => (person :ARG0-of have-rel-role-91)
Span 3-4:  has => have-03

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 1-2:  every => everyone
Oracle Span 6-7:  friend => friend
Oracle Span 4-5:  had => (person :ARG0-of have-rel-role-91)
Oracle Span 3-4:  has => have-03

Dependencies:
1	Not	_	RB	RB	_	5	neg	_	_
2	every	_	DT	DT	_	3	det	_	_
3	one	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	had	_	VBN	VBN	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	friend	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(h / have-03, ARG0, e / everyone)
(h / have-03, ARG1, p / person)
(h2 / have-rel-role-91, ARG0, p / person)
(h2 / have-rel-role-91, ARG1, e / everyone)
(h2 / have-rel-role-91, ARG2, f / friend)

Input(Some(Graph((have-03 :ARG1 (person :ARG0-of (have-rel-role-91 :ARG2 friend :ARG1 everyone)) :ARG0 everyone :polarity -),ArrayBuffer(Span(3,4,List(0),has,have-03,false), Span(6,7,List(1),friend,friend,false), Span(4,5,List(2, 3),had,(person :ARG0-of have-rel-role-91),false), Span(1,2,List(4),every,everyone,false)),Map(2 -> person, 1 -> friend, 4 -> everyone, 0 -> have-03, 3 -> have-rel-role-91),Map(e -> everyone, h -> have-03, h2 -> have-rel-role-91, p -> person, f -> friend))),[Ljava.lang.String;@22e357dc,Annotation([Ljava.lang.String;@49912c99,[Ljava.lang.String;@10163d6,[Ljava.lang.String;@2dde1bff),Annotation([Ljava.lang.String;@15bbf42f,[Ljava.lang.String;@550ee7e5,[Ledu.cmu.lti.nlp.amr.Dependency;@5f9b2141),Annotation([Ljava.lang.String;@247d8ae,[Ljava.lang.String;@48974e45,[Ljava.lang.String;@6a84a97d),Annotation([Ljava.lang.String;@6c130c45,[Ljava.lang.String;@50ad3bc1,[Ledu.cmu.lti.nlp.amr.Entity;@223aa2f7))
AMR:
(h / have-03, ARG1, e / everyone)
(h / have-03, ARG2, f / friend)
(h2 / have-rel-role-91, ARG0, p / person)
(h2 / have-rel-role-91, ARG2, f / friend)

WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 76,701 microseconds
Sentence: And if I forget him , I may become like the grown - ups who are no longer interested in anything but figures ...

Oracle Span 1:  And => and
Oracle Span 2:  anything => anything
Oracle Span 3:  figures => figure
Oracle Span 4:  forget => forget-01
Oracle Span 5:  grown => grown-up
Oracle Span 6:  I => i
Oracle Span 7:  interested => interest-01
Oracle Span 8:  may => possible-01
Oracle Span 9:  no => -
Spans:
Span 0-1:  And => and
Span 20-21:  anything => anything
Span 22-23:  figures => figure
Span 3-4:  forget => forget-01
Span 11-12:  grown => grown-up
Span 2-3:  I => i
Span 18-19:  interested => interest-01
Span 7-8:  may => possible-01
Span 16-17:  no => -

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 20-21:  anything => anything
Oracle Span 22-23:  figures => figure
Oracle Span 3-4:  forget => forget-01
Oracle Span 11-12:  grown => grown-up
Oracle Span 2-3:  I => i
Oracle Span 18-19:  interested => interest-01
Oracle Span 7-8:  may => possible-01
Oracle Span 16-17:  no => -

Dependencies:
1	And	_	CC	CC	_	9	cc	_	_
2	if	_	IN	IN	_	4	mark	_	_
3	I	_	PRP	PRP	_	4	nsubj	_	_
4	forget	_	VB	VB	_	9	advcl	_	_
5	him	_	PRP	PRP	_	4	dobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	I	_	PRP	PRP	_	9	nsubj	_	_
8	may	_	MD	MD	_	9	aux	_	_
9	become	_	VB	VB	_	0	root	_	_
10	like	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	grown	_	JJ	JJ	_	10	pobj	_	_
13	-	_	:	:	_	12	punct	_	_
14	ups	_	NNS	NNS	_	12	dep	_	_
15	who	_	WP	WP	_	19	nsubjpass	_	_
16	are	_	VBP	VBP	_	19	auxpass	_	_
17	no	_	RB	RB	_	18	advmod	_	_
18	longer	_	RBR	RBR	_	19	advmod	_	_
19	interested	_	VBN	VBN	_	14	rcmod	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	anything	_	NN	NN	_	20	pobj	_	_
22	but	_	CC	CC	_	19	cc	_	_
23	figures	_	VBZ	VBZ	_	19	conj	_	_
24	...	_	:	:	_	9	punct	_	_

Oracle:
(a / and, op, p / possible-01)
(f2 / forget-01, ARG0, i / i)
(i2 / interest-01, ARG1, g / grown-up)
(i2 / interest-01, ARG2, a2 / anything)
(i2 / interest-01, polarity, - / -)
(p / possible-01, condition, f2 / forget-01)

Input(Some(Graph((and :op (possible-01 :condition (forget-01 :ARG1 he :ARG0 i) :ARG1 (resemble-01 :ARG1 i :ARG2 (grown-up :ARG1-of (interest-01 :ARG2 (anything :ARG2-of (except-01 :ARG1 figure)) :polarity -))))),ArrayBuffer(Span(16,17,List(0),no,-,false), Span(0,1,List(1),And,and,false), Span(7,8,List(2),may,possible-01,false), Span(3,4,List(3),forget,forget-01,false), Span(2,3,List(4),I,i,false), Span(18,19,List(5),interested,interest-01,false), Span(20,21,List(6),anything,anything,false), Span(22,23,List(7),figures,figure,false), Span(11,12,List(8),grown,grown-up,false)),Map(2 -> possible-01, 5 -> interest-01, 8 -> grown-up, 7 -> figure, 1 -> and, 4 -> i, 6 -> anything, 0 -> -, 3 -> forget-01),Map(g -> grown-up, p -> possible-01, a -> and, i2 -> interest-01, a2 -> anything, i -> i, - -> -, f2 -> forget-01, f -> figure))),[Ljava.lang.String;@20f5239f,Annotation([Ljava.lang.String;@57af006c,[Ljava.lang.String;@6bedbc4d,[Ljava.lang.String;@932bc4a),Annotation([Ljava.lang.String;@d29f28,[Ljava.lang.String;@2fd1433e,[Ledu.cmu.lti.nlp.amr.Dependency;@29d89d5d),Annotation([Ljava.lang.String;@3514a4c0,[Ljava.lang.String;@212b5695,[Ljava.lang.String;@446293d),Annotation([Ljava.lang.String;@69997e9d,[Ljava.lang.String;@793be5ca,[Ledu.cmu.lti.nlp.amr.Entity;@2df9b86))
AMR:
(f2 / forget-01, ARG0, i / i)
(f2 / forget-01, ARG1, i2 / interest-01)
(i2 / interest-01, ARG0, g / grown-up)
(i2 / interest-01, ARG1, a2 / anything)
(i2 / interest-01, ARG2, - / -)
(p / possible-01, ARG0, f / figure)
(p / possible-01, ARG1, a / and)
(p / possible-01, ARG2, f2 / forget-01)

WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
Decoded in 200,996 microseconds
Sentence: It is for that purpose , again , that I have bought a box of paints and some pencils .

Oracle Span 1:  and => and
Oracle Span 2:  bought => buy-01
Oracle Span 3:  box => box
Oracle Span 4:  I => i
Oracle Span 5:  paints => paint
Oracle Span 6:  pencils => pencil
Oracle Span 7:  some => some
Oracle Span 8:  that => that
Spans:
Span 16-17:  and => and
Span 11-12:  bought => buy-01
Span 13-14:  box => box
Span 9-10:  I => i
Span 15-16:  paints => paint
Span 18-19:  pencils => pencil
Span 17-18:  some => some
Span 3-4:  that => that

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 11-12:  bought => buy-01
Oracle Span 13-14:  box => box
Oracle Span 9-10:  I => i
Oracle Span 15-16:  paints => paint
Oracle Span 18-19:  pencils => pencil
Oracle Span 17-18:  some => some
Oracle Span 3-4:  that => that

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	for	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	5	det	_	_
5	purpose	_	NN	NN	_	3	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	again	_	RB	RB	_	2	advmod	_	_
8	,	_	,	,	_	2	punct	_	_
9	that	_	IN	IN	_	12	mark	_	_
10	I	_	PRP	PRP	_	12	nsubj	_	_
11	have	_	VBP	VBP	_	12	aux	_	_
12	bought	_	VBN	VBN	_	2	ccomp	_	_
13	a	_	DT	DT	_	14	det	_	_
14	box	_	NN	NN	_	12	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	paints	_	NNS	NNS	_	15	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	some	_	DT	DT	_	19	det	_	_
19	pencils	_	NNS	NNS	_	16	conj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, p / paint)
(a / and, op, p2 / pencil)
(b / buy-01, ARG0, i / i)
(b / buy-01, ARG1, a / and)
(b / buy-01, purpose, t2 / that)
(p / paint, location, b2 / box)
(p2 / pencil, quant, s / some)

Input(Some(Graph((buy-01 :purpose that :ARG1 (and :op (pencil :quant some) :op (paint :location box)) :ARG0 i),ArrayBuffer(Span(11,12,List(0),bought,buy-01,false), Span(3,4,List(1),that,that,false), Span(16,17,List(2),and,and,false), Span(18,19,List(3),pencils,pencil,false), Span(17,18,List(4),some,some,false), Span(15,16,List(5),paints,paint,false), Span(13,14,List(6),box,box,false), Span(9,10,List(7),I,i,false)),Map(2 -> and, 5 -> paint, 7 -> i, 1 -> that, 4 -> some, 6 -> box, 0 -> buy-01, 3 -> pencil),Map(b -> buy-01, b2 -> box, p2 -> pencil, s -> some, p -> paint, a -> and, t2 -> that, i -> i))),[Ljava.lang.String;@37654521,Annotation([Ljava.lang.String;@15aab8c6,[Ljava.lang.String;@33990a0c,[Ljava.lang.String;@4de4b452),Annotation([Ljava.lang.String;@50b5ac82,[Ljava.lang.String;@101952da,[Ledu.cmu.lti.nlp.amr.Dependency;@6babf3bf),Annotation([Ljava.lang.String;@3059cbc,[Ljava.lang.String;@7ea9e1e2,[Ljava.lang.String;@24fcf36f),Annotation([Ljava.lang.String;@10feca44,[Ljava.lang.String;@3fb1549b,[Ledu.cmu.lti.nlp.amr.Entity;@ea6147e))
AMR:
(a / and, op, p / paint)
(a / and, op, p2 / pencil)
(b / buy-01, ARG0, i / i)
(b / buy-01, ARG1, b2 / box)
(b / buy-01, ARG2, t2 / that)
(b / buy-01, time, a / and)
(p2 / pencil, mod, s / some)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 230,413 microseconds
Sentence: It is hard to take up drawing again at my age , when I have never made any pictures except those of the boa constrictor from the outside and the boa constrictor from the inside , since I was six .

Oracle Span 1:  again => again
Oracle Span 2:  age => age-01
Oracle Span 3:  and => and
Oracle Span 4:  any => any
Oracle Span 5:  boa => boa
Oracle Span 6:  boa => boa
Oracle Span 7:  constrictor => constrictor
Oracle Span 8:  constrictor => constrictor
Oracle Span 9:  drawing => draw-01
Oracle Span 10:  except => except-01
Oracle Span 11:  from => from
Oracle Span 12:  from => from
Oracle Span 13:  hard => hard-02
Oracle Span 14:  I => i
Oracle Span 15:  inside => inside
Oracle Span 16:  made => make-01
Oracle Span 17:  outside => outside
Oracle Span 18:  pictures => picture
Oracle Span 19:  since => since
Oracle Span 20:  six => 6
Oracle Span 21:  take => take-up-31
Spans:
Span 7-8:  again => again
Span 10-11:  age => age-01
Span 28-29:  and => and
Span 17-18:  any => any
Span 23-24:  boa => boa
Span 30-31:  boa => boa
Span 24-25:  constrictor => constrictor
Span 31-32:  constrictor => constrictor
Span 6-7:  drawing => draw-01
Span 19-20:  except => except-01
Span 25-26:  from => from
Span 32-33:  from => from
Span 2-3:  hard => hard-02
Span 13-14:  I => i
Span 34-35:  inside => inside
Span 16-17:  made => make-01
Span 27-28:  outside => outside
Span 18-19:  pictures => picture
Span 36-37:  since => since
Span 39-40:  six => 6
Span 4-5:  take => take-up-31

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 7-8:  again => again
Oracle Span 10-11:  age => age-01
Oracle Span 28-29:  and => and
Oracle Span 17-18:  any => any
Oracle Span 23-24:  boa => boa
Oracle Span 30-31:  boa => boa
Oracle Span 24-25:  constrictor => constrictor
Oracle Span 31-32:  constrictor => constrictor
Oracle Span 6-7:  drawing => draw-01
Oracle Span 19-20:  except => except-01
Oracle Span 25-26:  from => from
Oracle Span 32-33:  from => from
Oracle Span 2-3:  hard => hard-02
Oracle Span 13-14:  I => i
Oracle Span 34-35:  inside => inside
Oracle Span 16-17:  made => make-01
Oracle Span 27-28:  outside => outside
Oracle Span 18-19:  pictures => picture
Oracle Span 36-37:  since => since
Oracle Span 39-40:  six => 6
Oracle Span 4-5:  take => take-up-31

Dependencies:
1	It	_	PRP	PRP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	cop	_	_
3	hard	_	JJ	JJ	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	take	_	VB	VB	_	3	xcomp	_	_
6	up	_	RP	RP	_	5	prt	_	_
7	drawing	_	VBG	VBG	_	5	xcomp	_	_
8	again	_	RB	RB	_	7	advmod	_	_
9	at	_	IN	IN	_	7	prep	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	age	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	when	_	WRB	WRB	_	17	advmod	_	_
14	I	_	PRP	PRP	_	17	nsubj	_	_
15	have	_	VBP	VBP	_	17	aux	_	_
16	never	_	RB	RB	_	17	neg	_	_
17	made	_	VBN	VBN	_	11	rcmod	_	_
18	any	_	DT	DT	_	19	det	_	_
19	pictures	_	NNS	NNS	_	17	dobj	_	_
20	except	_	IN	IN	_	19	prep	_	_
21	those	_	DT	DT	_	20	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	25	det	_	_
24	boa	_	NN	NN	_	25	nn	_	_
25	constrictor	_	NN	NN	_	22	pobj	_	_
26	from	_	IN	IN	_	17	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	outside	_	NN	NN	_	26	pobj	_	_
29	and	_	CC	CC	_	28	cc	_	_
30	the	_	DT	DT	_	32	det	_	_
31	boa	_	NN	NN	_	32	nn	_	_
32	constrictor	_	NN	NN	_	28	conj	_	_
33	from	_	IN	IN	_	17	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	inside	_	NN	NN	_	33	pobj	_	_
36	,	_	,	,	_	3	punct	_	_
37	since	_	IN	IN	_	40	mark	_	_
38	I	_	PRP	PRP	_	40	nsubj	_	_
39	was	_	VBD	VBD	_	40	cop	_	_
40	six	_	CD	CD	_	3	advcl	_	_
41	.	_	.	.	_	3	punct	_	_

Oracle:
(a3 / age-01, ARG1, i / i)
(b / boa, direction, f / from)
(b / boa, mod, c2 / constrictor)
(b2 / boa, direction, f2 / from)
(b2 / boa, mod, c3 / constrictor)
(e2 / except-01, ARG1, a6 / and)
(e2 / except-01, ARG2, p / picture)
(f / from, op, o / outside)
(f2 / from, op, i2 / inside)
(h / hard-02, ARG1, t / take-up-31)
(m / make-01, ARG1, p / picture)
(m / make-01, time, s / since)
(p / picture, mod, a5 / any)
(s / since, op, a3 / age-01)
(t / take-up-31, ARG0, i / i)
(t / take-up-31, ARG1, d / draw-01)
(t / take-up-31, mod, a / again)

Input(Some(Graph((hard-02 :ARG1-of cause-01 :ARG1 (take-up-31 :mod again :ARG1 draw-01 :ARG0 (i :age (temporal-quantity :duration-of (make-01 :time (since :op (age-01 :ARG2 (temporal-quantity :quant 6 :unit year) :ARG1 i)) :time ever :ARG1 (picture :ARG2-of (except-01 :ARG1 (and :op (picture :topic (boa :direction (from :op inside) :mod constrictor)) :op (picture :topic (boa :direction (from :op outside) :mod constrictor)))) :mod any) :polarity -))))),ArrayBuffer(Span(2,3,List(0),hard,hard-02,false), Span(13,14,List(1),I,i,false), Span(16,17,List(2),made,make-01,false), Span(36,37,List(3),since,since,false), Span(10,11,List(4),age,age-01,false), Span(39,40,List(5),six,6,false), Span(18,19,List(6),pictures,picture,false), Span(19,20,List(7),except,except-01,false), Span(28,29,List(8),and,and,false), Span(23,24,List(9),boa,boa,false), Span(25,26,List(10),from,from,false), Span(34,35,List(11),inside,inside,false), Span(24,25,List(12),constrictor,constrictor,false), Span(30,31,List(13),boa,boa,false), Span(32,33,List(14),from,from,false), Span(27,28,List(15),outside,outside,false), Span(31,32,List(16),constrictor,constrictor,false), Span(17,18,List(17),any,any,false), Span(6,7,List(18),drawing,draw-01,false), Span(7,8,List(19),again,again,false), Span(4,5,List(20),take,take-up-31,false)),Map(2 -> make-01, 5 -> 6, 12 -> constrictor, 15 -> outside, 8 -> and, 18 -> draw-01, 7 -> except-01, 17 -> any, 1 -> i, 4 -> age-01, 11 -> inside, 14 -> from, 20 -> take-up-31, 6 -> picture, 9 -> boa, 0 -> hard-02, 16 -> constrictor, 19 -> again, 10 -> from, 3 -> since, 13 -> boa),Map(h -> hard-02, t -> take-up-31, b -> boa, b2 -> boa, e2 -> except-01, a3 -> age-01, s -> since, a6 -> and, d -> draw-01, m -> make-01, p -> picture, a -> again, c3 -> constrictor, a5 -> any, i2 -> inside, i -> i, 6 -> 6, f2 -> from, f -> from, o -> outside, c2 -> constrictor))),[Ljava.lang.String;@4d02f94e,Annotation([Ljava.lang.String;@2b48a640,[Ljava.lang.String;@1e683a3e,[Ljava.lang.String;@2053d869),Annotation([Ljava.lang.String;@7a419da4,[Ljava.lang.String;@14555e0a,[Ledu.cmu.lti.nlp.amr.Dependency;@4bb33f74),Annotation([Ljava.lang.String;@759d26fb,[Ljava.lang.String;@3c73951,[Ljava.lang.String;@3d5c822d),Annotation([Ljava.lang.String;@6f46426d,[Ljava.lang.String;@73700b80,[Ledu.cmu.lti.nlp.amr.Entity;@49c7b90e))
AMR:
(a3 / age-01, ARG1, i / i)
(a6 / and, op, c2 / constrictor)
(a6 / and, op, o / outside)
(b / boa, mod, c2 / constrictor)
(b2 / boa, mod, c3 / constrictor)
(d / draw-01, ARG0, 6 / 6)
(d / draw-01, ARG1, a3 / age-01)
(d / draw-01, mod, a / again)
(e2 / except-01, ARG1, a5 / any)
(f / from, op, i2 / inside)
(f2 / from, op, o / outside)
(h / hard-02, ARG0, b2 / boa)
(h / hard-02, ARG1, t / take-up-31)
(m / make-01, ARG0, i / i)
(m / make-01, ARG1, p / picture)
(m / make-01, ARG2, a6 / and)
(m / make-01, time, e2 / except-01)
(m / make-01, time, f / from)
(t / take-up-31, ARG0, s / since)
(t / take-up-31, ARG1, d / draw-01)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.0.0.3.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.3.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0
Decoded in 792,660 microseconds
Sentence: I shall certainly try to make my portraits as true to life as possible .

Oracle Span 1:  certainly => certain
Oracle Span 2:  I => i
Oracle Span 3:  life => life
Oracle Span 4:  make => make-02
Oracle Span 5:  portraits => portrait
Oracle Span 6:  possible => possible-01
Oracle Span 7:  true => true-02
Oracle Span 8:  try => try-01
Spans:
Span 2-3:  certainly => certain
Span 0-1:  I => i
Span 11-12:  life => life
Span 5-6:  make => make-02
Span 7-8:  portraits => portrait
Span 13-14:  possible => possible-01
Span 9-10:  true => true-02
Span 3-4:  try => try-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 2-3:  certainly => certain
Oracle Span 0-1:  I => i
Oracle Span 11-12:  life => life
Oracle Span 5-6:  make => make-02
Oracle Span 7-8:  portraits => portrait
Oracle Span 13-14:  possible => possible-01
Oracle Span 9-10:  true => true-02
Oracle Span 3-4:  try => try-01

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	shall	_	MD	MD	_	4	aux	_	_
3	certainly	_	RB	RB	_	4	advmod	_	_
4	try	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	my	_	PRP$	PRP$	_	8	poss	_	_
8	portraits	_	NNS	NNS	_	10	nsubj	_	_
9	as	_	RB	RB	_	10	advmod	_	_
10	true	_	JJ	JJ	_	6	xcomp	_	_
11	to	_	TO	TO	_	10	prep	_	_
12	life	_	NN	NN	_	11	pobj	_	_
13	as	_	RB	RB	_	14	advmod	_	_
14	possible	_	JJ	JJ	_	12	amod	_	_
15	.	_	.	.	_	4	punct	_	_

Oracle:
(m / make-02, ARG0, i / i)
(m / make-02, ARG1, t2 / true-02)
(p / portrait, topic, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, m / make-02)
(t / try-01, mod, c / certain)
(t2 / true-02, ARG1, p / portrait)
(t2 / true-02, ARG2, l / life)
(t2 / true-02, compared-to, p2 / possible-01)

Input(Some(Graph((try-01 :mod certain :ARG1 (make-02 :ARG1 (true-02 :compared-to possible-01 :degree most :ARG2 life :ARG1 (portrait :topic i)) :ARG0 i) :ARG0 i),ArrayBuffer(Span(3,4,List(0),try,try-01,false), Span(5,6,List(1),make,make-02,false), Span(9,10,List(2),true,true-02,false), Span(13,14,List(3),possible,possible-01,false), Span(11,12,List(4),life,life,false), Span(7,8,List(5),portraits,portrait,false), Span(0,1,List(6),I,i,false), Span(2,3,List(7),certainly,certain,false)),Map(2 -> true-02, 5 -> portrait, 7 -> certain, 1 -> make-02, 4 -> life, 6 -> i, 0 -> try-01, 3 -> possible-01),Map(t -> try-01, p2 -> possible-01, m -> make-02, p -> portrait, t2 -> true-02, i -> i, c -> certain, l -> life))),[Ljava.lang.String;@10d307f1,Annotation([Ljava.lang.String;@4d5b6aac,[Ljava.lang.String;@3e84448c,[Ljava.lang.String;@4a7f959b),Annotation([Ljava.lang.String;@429bffaa,[Ljava.lang.String;@5403f35f,[Ledu.cmu.lti.nlp.amr.Dependency;@483f6d77),Annotation([Ljava.lang.String;@7e5afaa6,[Ljava.lang.String;@63a12c68,[Ljava.lang.String;@28f3b248),Annotation([Ljava.lang.String;@1b1426f4,[Ljava.lang.String;@32b260fa,[Ledu.cmu.lti.nlp.amr.Entity;@581ac8a8))
AMR:
(m / make-02, ARG1, t2 / true-02)
(p2 / possible-01, ARG1, l / life)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, m / make-02)
(t / try-01, mod, c / certain)
(t2 / true-02, ARG1, p / portrait)
(t2 / true-02, ARG2, l / life)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 65,295 microseconds
Sentence: But I am not at all sure of success .

Oracle Span 1:  all => all
Oracle Span 2:  at => at
Oracle Span 3:  But => contrast-01
Oracle Span 4:  I => i
Oracle Span 5:  success => succeed-01
Oracle Span 6:  sure => sure-02
Spans:
Span 5-6:  all => all
Span 4-5:  at => at
Span 0-1:  But => contrast-01
Span 1-2:  I => i
Span 8-9:  success => succeed-01
Span 6-7:  sure => sure-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  all => all
Oracle Span 4-5:  at => at
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  I => i
Oracle Span 8-9:  success => succeed-01
Oracle Span 6-7:  sure => sure-02

Dependencies:
1	But	_	CC	CC	_	7	cc	_	_
2	I	_	PRP	PRP	_	7	nsubj	_	_
3	am	_	VBP	VBP	_	7	cop	_	_
4	not	_	RB	RB	_	7	neg	_	_
5	at	_	IN	IN	_	7	advmod	_	_
6	all	_	DT	DT	_	5	pobj	_	_
7	sure	_	JJ	JJ	_	0	root	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	success	_	NN	NN	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(a / at, op, a2 / all)
(c / contrast-01, ARG2, s / sure-02)
(s / sure-02, ARG0, i / i)
(s / sure-02, degree, a / at)
(s2 / succeed-01, ARG0, i / i)
(s2 / succeed-01, ARG1, s / sure-02)

Input(Some(Graph((contrast-01 :ARG2 (sure-02 :ARG1-of (succeed-01 :ARG0 i) :degree (at :op all) :ARG0 i :polarity -)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(6,7,List(1),sure,sure-02,false), Span(4,5,List(2),at,at,false), Span(5,6,List(3),all,all,false), Span(1,2,List(4),I,i,false), Span(8,9,List(5),success,succeed-01,false)),Map(2 -> at, 5 -> succeed-01, 1 -> sure-02, 4 -> i, 0 -> contrast-01, 3 -> all),Map(s2 -> succeed-01, s -> sure-02, a -> at, i -> i, a2 -> all, c -> contrast-01))),[Ljava.lang.String;@6d4e5011,Annotation([Ljava.lang.String;@57d7f8ca,[Ljava.lang.String;@76c3e77a,[Ljava.lang.String;@78123e82),Annotation([Ljava.lang.String;@67c33749,[Ljava.lang.String;@fba92d3,[Ledu.cmu.lti.nlp.amr.Dependency;@662b4c69),Annotation([Ljava.lang.String;@fa49800,[Ljava.lang.String;@71238fc2,[Ljava.lang.String;@2a54a73f),Annotation([Ljava.lang.String;@16a0ee18,[Ljava.lang.String;@3d6f0054,[Ledu.cmu.lti.nlp.amr.Entity;@505fc5a4))
AMR:
(c / contrast-01, ARG1, a / at)
(c / contrast-01, ARG2, s / sure-02)
(s / sure-02, ARG0, i / i)
(s / sure-02, ARG1, a2 / all)
(s / sure-02, ARG2, s2 / succeed-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.3
Decoded in 32,217 microseconds
Sentence: One drawing goes along all right , and another has no resemblance to its subject .

Oracle Span 1:  along => along
Oracle Span 2:  and => and
Oracle Span 3:  another => another
Oracle Span 4:  drawing => draw-01
Oracle Span 5:  goes => go-06
Oracle Span 6:  no => -
Oracle Span 7:  One => 1
Oracle Span 8:  resemblance => resemble-01
Oracle Span 9:  subject => subject
Spans:
Span 3-4:  along => along
Span 7-8:  and => and
Span 8-9:  another => another
Span 1-2:  drawing => draw-01
Span 2-3:  goes => go-06
Span 10-11:  no => -
Span 0-1:  One => 1
Span 11-12:  resemblance => resemble-01
Span 14-15:  subject => subject

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 3-4:  along => along
Oracle Span 7-8:  and => and
Oracle Span 8-9:  another => another
Oracle Span 1-2:  drawing => draw-01
Oracle Span 2-3:  goes => go-06
Oracle Span 10-11:  no => -
Oracle Span 0-1:  One => 1
Oracle Span 11-12:  resemblance => resemble-01
Oracle Span 14-15:  subject => subject

Dependencies:
1	One	_	CD	CD	_	2	num	_	_
2	drawing	_	NN	NN	_	3	nsubj	_	_
3	goes	_	VBZ	VBZ	_	0	root	_	_
4	along	_	RB	RB	_	3	advmod	_	_
5	all	_	DT	DT	_	4	det	_	_
6	right	_	NN	NN	_	4	dep	_	_
7	,	_	,	,	_	3	punct	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	another	_	DT	DT	_	10	nsubj	_	_
10	has	_	VBZ	VBZ	_	3	conj	_	_
11	no	_	DT	DT	_	12	det	_	_
12	resemblance	_	NN	NN	_	10	dobj	_	_
13	to	_	TO	TO	_	12	prep	_	_
14	its	_	PRP$	PRP$	_	15	poss	_	_
15	subject	_	NN	NN	_	13	pobj	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, g / go-06)
(a / and, op, r2 / resemble-01)
(g / go-06, ARG2, a2 / along)
(r2 / resemble-01, ARG2, s / subject)
(r2 / resemble-01, polarity, - / -)

Input(Some(Graph((and :op (resemble-01 :ARG2 (subject :poss picture) :ARG1 (picture :ARG1-of draw-01 :mod another) :polarity -) :op (go-06 :mod all-right :ARG2 along :ARG1 (picture :quant 1 :ARG1-of draw-01))),ArrayBuffer(Span(10,11,List(0),no,-,false), Span(7,8,List(1),and,and,false), Span(1,2,List(2),drawing,draw-01,false), Span(8,9,List(3),another,another,false), Span(14,15,List(4),subject,subject,false), Span(2,3,List(5),goes,go-06,false), Span(3,4,List(6),along,along,false), Span(0,1,List(7),One,1,false), Span(11,12,List(8),resemblance,resemble-01,false)),Map(2 -> draw-01, 5 -> go-06, 8 -> resemble-01, 7 -> 1, 1 -> and, 4 -> subject, 6 -> along, 0 -> -, 3 -> another),Map(s -> subject, 1 -> 1, r2 -> resemble-01, g -> go-06, a -> and, d2 -> draw-01, a2 -> along, - -> -, a4 -> another))),[Ljava.lang.String;@5fbdfdcf,Annotation([Ljava.lang.String;@4efc180e,[Ljava.lang.String;@bd4dc25,[Ljava.lang.String;@25084a1e),Annotation([Ljava.lang.String;@156b88f5,[Ljava.lang.String;@3bf9ce3e,[Ledu.cmu.lti.nlp.amr.Dependency;@16610890),Annotation([Ljava.lang.String;@71def8f8,[Ljava.lang.String;@383bfa16,[Ljava.lang.String;@4d465b11),Annotation([Ljava.lang.String;@53fdffa1,[Ljava.lang.String;@5562c41e,[Ledu.cmu.lti.nlp.amr.Entity;@32ee6fee))
AMR:
(a / and, op, g / go-06)
(d2 / draw-01, ARG1, 1 / 1)
(g / go-06, ARG0, d2 / draw-01)
(g / go-06, ARG1, r2 / resemble-01)
(g / go-06, time, a2 / along)
(r2 / resemble-01, ARG1, a4 / another)
(r2 / resemble-01, ARG2, s / subject)
(r2 / resemble-01, polarity, - / -)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 53,412 microseconds
Sentence: I make some errors , too , in the little prince 's height : in one place he is too tall and in another too short .

Oracle Span 1:  and => and
Oracle Span 2:  another => another
Oracle Span 3:  I => i
Oracle Span 4:  little => little
Oracle Span 5:  one => one
Oracle Span 6:  place => place
Oracle Span 7:  prince => prince
Oracle Span 8:  short => short-07
Oracle Span 9:  some => some
Oracle Span 10:  tall => tall
Oracle Span 11:  too => too
Oracle Span 12:  too => too
Oracle Span 13:  too => too
Spans:
Span 21-22:  and => and
Span 23-24:  another => another
Span 0-1:  I => i
Span 9-10:  little => little
Span 15-16:  one => one
Span 16-17:  place => place
Span 10-11:  prince => prince
Span 25-26:  short => short-07
Span 2-3:  some => some
Span 20-21:  tall => tall
Span 5-6:  too => too
Span 19-20:  too => too
Span 24-25:  too => too

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 21-22:  and => and
Oracle Span 23-24:  another => another
Oracle Span 0-1:  I => i
Oracle Span 9-10:  little => little
Oracle Span 15-16:  one => one
Oracle Span 16-17:  place => place
Oracle Span 10-11:  prince => prince
Oracle Span 25-26:  short => short-07
Oracle Span 2-3:  some => some
Oracle Span 20-21:  tall => tall
Oracle Span 5-6:  too => too
Oracle Span 19-20:  too => too
Oracle Span 24-25:  too => too

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	make	_	VBP	VBP	_	0	root	_	_
3	some	_	DT	DT	_	4	det	_	_
4	errors	_	NNS	NNS	_	2	dobj	_	_
5	,	_	,	,	_	2	punct	_	_
6	too	_	RB	RB	_	2	advmod	_	_
7	,	_	,	,	_	2	punct	_	_
8	in	_	IN	IN	_	2	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	little	_	JJ	JJ	_	11	amod	_	_
11	prince	_	NN	NN	_	13	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	height	_	NN	NN	_	8	pobj	_	_
14	:	_	:	:	_	2	punct	_	_
15	in	_	IN	IN	_	21	prep	_	_
16	one	_	CD	CD	_	17	num	_	_
17	place	_	NN	NN	_	15	pobj	_	_
18	he	_	PRP	PRP	_	21	nsubj	_	_
19	is	_	VBZ	VBZ	_	21	cop	_	_
20	too	_	RB	RB	_	21	advmod	_	_
21	tall	_	JJ	JJ	_	2	parataxis	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	in	_	IN	IN	_	21	conj	_	_
24	another	_	DT	DT	_	26	det	_	_
25	too	_	RB	RB	_	26	advmod	_	_
26	short	_	JJ	JJ	_	23	pobj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, s / short-07)
(a / and, op, t2 / tall)
(p / prince, mod, l / little)
(p3 / place, mod, a2 / another)
(s / short-07, ARG1, p / prince)
(s / short-07, degree, t4 / too)
(s / short-07, location, p3 / place)
(t2 / tall, degree, t3 / too)
(t2 / tall, domain, p / prince)

Input(Some(Graph((err-01 :ARG0 i :topic (high-02 :ARG1 (prince :mod little)) :mod too :example (and :op (short-07 :location (place :mod another) :degree too :ARG1 prince) :op (tall :location (place :mod one) :degree too :domain prince)) :mod some),ArrayBuffer(Span(0,1,List(0),I,i,false), Span(10,11,List(1),prince,prince,false), Span(9,10,List(2),little,little,false), Span(5,6,List(3),too,too,false), Span(21,22,List(4),and,and,false), Span(25,26,List(5),short,short-07,false), Span(16,17,List(6),place,place,false), Span(23,24,List(7),another,another,false), Span(19,20,List(8),too,too,false), Span(20,21,List(9),tall,tall,false), Span(15,16,List(10),one,one,false), Span(24,25,List(11),too,too,false), Span(2,3,List(12),some,some,false)),Map(2 -> little, 5 -> short-07, 12 -> some, 8 -> too, 7 -> another, 1 -> prince, 4 -> and, 11 -> too, 6 -> place, 9 -> tall, 0 -> i, 10 -> one, 3 -> too),Map(t4 -> too, s2 -> some, t -> too, s -> short-07, t3 -> too, p -> prince, a -> and, t2 -> tall, a2 -> another, i -> i, l -> little, o -> one, p3 -> place))),[Ljava.lang.String;@4d0f2471,Annotation([Ljava.lang.String;@7133da86,[Ljava.lang.String;@3232a28a,[Ljava.lang.String;@73e22a3d),Annotation([Ljava.lang.String;@47faa49c,[Ljava.lang.String;@28f2a10f,[Ledu.cmu.lti.nlp.amr.Dependency;@f736069),Annotation([Ljava.lang.String;@6da21078,[Ljava.lang.String;@7fee8714,[Ljava.lang.String;@4229bb3f),Annotation([Ljava.lang.String;@56cdfb3b,[Ljava.lang.String;@2b91004a,[Ledu.cmu.lti.nlp.amr.Entity;@20ccf40b))
AMR:
(a / and, op, t2 / tall)
(p / prince, mod, l / little)
(p3 / place, quant, o / one)
(s / short-07, ARG0, i / i)
(s / short-07, ARG1, t / too)
(s / short-07, ARG2, t2 / tall)
(s / short-07, concession, o / one)
(s / short-07, degree, t3 / too)
(s / short-07, mod, a2 / another)
(s / short-07, mod, l / little)
(s2 / some, op, s / short-07)
(t2 / tall, degree, t4 / too)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.1.1
WARNING: makeIds can't find span Id: 0.3.1.1.0
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.1.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.4
Decoded in 242,918 microseconds
Sentence: And I feel some doubts about the color of his costume .

Oracle Span 1:  And => and
Oracle Span 2:  color => color
Oracle Span 3:  costume => costume
Oracle Span 4:  doubts => doubt-01
Oracle Span 5:  feel => feel-01
Oracle Span 6:  I => i
Oracle Span 7:  some => some
Spans:
Span 0-1:  And => and
Span 7-8:  color => color
Span 10-11:  costume => costume
Span 4-5:  doubts => doubt-01
Span 2-3:  feel => feel-01
Span 1-2:  I => i
Span 3-4:  some => some

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 7-8:  color => color
Oracle Span 10-11:  costume => costume
Oracle Span 4-5:  doubts => doubt-01
Oracle Span 2-3:  feel => feel-01
Oracle Span 1-2:  I => i
Oracle Span 3-4:  some => some

Dependencies:
1	And	_	CC	CC	_	3	cc	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	feel	_	VBP	VBP	_	0	root	_	_
4	some	_	DT	DT	_	5	det	_	_
5	doubts	_	NNS	NNS	_	3	dobj	_	_
6	about	_	IN	IN	_	3	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	color	_	NN	NN	_	6	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	his	_	PRP$	PRP$	_	11	poss	_	_
11	costume	_	NN	NN	_	9	pobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, f / feel-01)
(c / color, poss, c2 / costume)
(d / doubt-01, ARG0, i / i)
(d / doubt-01, ARG1, c / color)
(d / doubt-01, quant, s / some)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, d / doubt-01)

Input(Some(Graph((and :op (feel-01 :ARG1 (doubt-01 :quant some :ARG1 (color :poss (costume :poss he)) :ARG0 i) :ARG0 i)),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(2,3,List(1),feel,feel-01,false), Span(4,5,List(2),doubts,doubt-01,false), Span(3,4,List(3),some,some,false), Span(7,8,List(4),color,color,false), Span(10,11,List(5),costume,costume,false), Span(1,2,List(6),I,i,false)),Map(2 -> doubt-01, 5 -> costume, 1 -> feel-01, 4 -> color, 6 -> i, 0 -> and, 3 -> some),Map(s -> some, d -> doubt-01, a -> and, i -> i, c -> color, f -> feel-01, c2 -> costume))),[Ljava.lang.String;@2fb3536e,Annotation([Ljava.lang.String;@169e6180,[Ljava.lang.String;@35aea049,[Ljava.lang.String;@7205765b),Annotation([Ljava.lang.String;@47987356,[Ljava.lang.String;@22ef9844,[Ledu.cmu.lti.nlp.amr.Dependency;@6283d8b8),Annotation([Ljava.lang.String;@3b6ddd1d,[Ljava.lang.String;@3f6b0be5,[Ljava.lang.String;@611889f4),Annotation([Ljava.lang.String;@1da2cb77,[Ljava.lang.String;@48f278eb,[Ledu.cmu.lti.nlp.amr.Entity;@2f217633))
AMR:
(a / and, op, f / feel-01)
(c2 / costume, poss, i / i)
(d / doubt-01, mod, s / some)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, d / doubt-01)
(f / feel-01, ARG2, c / color)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 48,449 microseconds
Sentence: So I fumble along as best I can , now good , now bad , and I hope generally fair - to - middling .

Oracle Span 1:  along => along
Oracle Span 2:  bad => bad-02
Oracle Span 3:  best => (good-03 :degree most)
Oracle Span 4:  can => possible-01
Oracle Span 5:  fair => fair-04
Oracle Span 6:  fumble => fumble-01
Oracle Span 7:  generally => general-02
Oracle Span 8:  good => good-03
Oracle Span 9:  hope => hope-01
Oracle Span 10:  I => i
Oracle Span 11:  middling => middling
Oracle Span 12:  now => now
Oracle Span 13:  now => now
Spans:
Span 3-4:  along => along
Span 13-14:  bad => bad-02
Span 5-6:  best => (good-03 :degree most)
Span 7-8:  can => possible-01
Span 19-20:  fair => fair-04
Span 2-3:  fumble => fumble-01
Span 18-19:  generally => general-02
Span 10-11:  good => good-03
Span 17-18:  hope => hope-01
Span 1-2:  I => i
Span 23-24:  middling => middling
Span 9-10:  now => now
Span 12-13:  now => now

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 3-4:  along => along
Oracle Span 13-14:  bad => bad-02
Oracle Span 5-6:  best => (good-03 :degree most)
Oracle Span 7-8:  can => possible-01
Oracle Span 19-20:  fair => fair-04
Oracle Span 2-3:  fumble => fumble-01
Oracle Span 18-19:  generally => general-02
Oracle Span 10-11:  good => good-03
Oracle Span 17-18:  hope => hope-01
Oracle Span 1-2:  I => i
Oracle Span 23-24:  middling => middling
Oracle Span 9-10:  now => now
Oracle Span 12-13:  now => now

Dependencies:
1	So	_	CC	CC	_	3	cc	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	fumble	_	VBP	VBP	_	0	root	_	_
4	along	_	RP	RP	_	3	prt	_	_
5	as	_	IN	IN	_	3	prep	_	_
6	best	_	JJS	JJS	_	5	pobj	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	can	_	MD	MD	_	6	rcmod	_	_
9	,	_	,	,	_	3	punct	_	_
10	now	_	RB	RB	_	11	advmod	_	_
11	good	_	JJ	JJ	_	3	dep	_	_
12	,	_	,	,	_	11	punct	_	_
13	now	_	RB	RB	_	14	advmod	_	_
14	bad	_	JJ	JJ	_	11	dep	_	_
15	,	_	,	,	_	3	punct	_	_
16	and	_	CC	CC	_	3	cc	_	_
17	I	_	PRP	PRP	_	18	nsubj	_	_
18	hope	_	VBP	VBP	_	3	conj	_	_
19	generally	_	RB	RB	_	20	advmod	_	_
20	fair	_	JJ	JJ	_	18	acomp	_	_
21	-	_	:	:	_	20	punct	_	_
22	to	_	TO	TO	_	20	prep	_	_
23	-	_	:	:	_	20	punct	_	_
24	middling	_	JJ	JJ	_	20	dep	_	_
25	.	_	.	.	_	3	punct	_	_

Oracle:
(b / bad-02, time, n2 / now)
(f / fumble-01, ARG0, i / i)
(f / fumble-01, ARG1, a / along)
(f / fumble-01, manner, g / good-03)
(f2 / fair-04, prep-to, m2 / middling)
(g / good-03, compared-to, p / possible-01)
(g / good-03, degree, m / most)
(g / good-03, example, b / bad-02)
(g / good-03, example, f2 / fair-04)
(g / good-03, example, g2 / good-03)
(g2 / good-03, time, n / now)
(g3 / general-02, ARG1, f2 / fair-04)
(h / hope-01, ARG0, i / i)
(h / hope-01, ARG1, f2 / fair-04)

Input(Some(Graph((cause-01 :ARG1 (fumble-01 :manner (good-03 :compared-to possible-01 :example (fair-04 :prep-to middling :ARG1-of (hope-01 :ARG0 i) :ARG1-of general-02) :example (bad-02 :time now) :example (good-03 :time now) :degree most) :ARG1 along :ARG0 i)),ArrayBuffer(Span(2,3,List(0),fumble,fumble-01,false), Span(5,6,List(1, 2),best,(good-03 :degree most),false), Span(7,8,List(3),can,possible-01,false), Span(19,20,List(4),fair,fair-04,false), Span(23,24,List(5),middling,middling,false), Span(17,18,List(6),hope,hope-01,false), Span(13,14,List(7),bad,bad-02,false), Span(9,10,List(8),now,now,false), Span(10,11,List(9),good,good-03,false), Span(12,13,List(10),now,now,false), Span(3,4,List(11),along,along,false), Span(1,2,List(12),I,i,false), Span(18,19,List(13),generally,general-02,false)),Map(2 -> most, 5 -> middling, 12 -> i, 8 -> now, 7 -> bad-02, 1 -> good-03, 4 -> fair-04, 11 -> along, 6 -> hope-01, 9 -> good-03, 0 -> fumble-01, 10 -> now, 3 -> possible-01, 13 -> general-02),Map(n -> now, g3 -> general-02, h -> hope-01, b -> bad-02, m2 -> middling, m -> most, g2 -> good-03, p -> possible-01, g -> good-03, a -> along, i -> i, f2 -> fair-04, f -> fumble-01, n2 -> now))),[Ljava.lang.String;@a530d0a,Annotation([Ljava.lang.String;@1a18644,[Ljava.lang.String;@5acf93bb,[Ljava.lang.String;@7e7be63f),Annotation([Ljava.lang.String;@6cd28fa7,[Ljava.lang.String;@614ca7df,[Ledu.cmu.lti.nlp.amr.Dependency;@4738a206),Annotation([Ljava.lang.String;@66d3eec0,[Ljava.lang.String;@1e04fa0a,[Ljava.lang.String;@1af2d44a),Annotation([Ljava.lang.String;@18d87d80,[Ljava.lang.String;@618425b5,[Ledu.cmu.lti.nlp.amr.Entity;@58695725))
AMR:
(b / bad-02, ARG1, g2 / good-03)
(b / bad-02, time, n / now)
(f / fumble-01, ARG0, i / i)
(f / fumble-01, ARG1, g2 / good-03)
(f / fumble-01, direction, a / along)
(f2 / fair-04, ARG1, h / hope-01)
(g / good-03, ARG1, i / i)
(g / good-03, compared-to, p / possible-01)
(g / good-03, degree, m / most)
(g2 / good-03, time, n2 / now)
(g3 / general-02, ARG1, f2 / fair-04)
(h / hope-01, ARG0, i / i)
(h / hope-01, ARG1, m2 / middling)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.4
WARNING: makeIds can't find span Id: 0.0.2.3
WARNING: makeIds can't find span Id: 0.0.2.3.2
WARNING: makeIds can't find span Id: 0.0.2.3.1
WARNING: makeIds can't find span Id: 0.0.2.2
WARNING: makeIds can't find span Id: 0.0.2.2.0
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.2.3.0
Decoded in 256,880 microseconds
Sentence: In certain more important details I shall make mistakes , also .

Oracle Span 1:  also => also
Oracle Span 2:  certain => certain
Oracle Span 3:  details => detail
Oracle Span 4:  I => i
Oracle Span 5:  important => important
Oracle Span 6:  mistakes => mistake-02
Oracle Span 7:  more => more
Spans:
Span 10-11:  also => also
Span 1-2:  certain => certain
Span 4-5:  details => detail
Span 5-6:  I => i
Span 3-4:  important => important
Span 8-9:  mistakes => mistake-02
Span 2-3:  more => more

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 10-11:  also => also
Oracle Span 1-2:  certain => certain
Oracle Span 4-5:  details => detail
Oracle Span 5-6:  I => i
Oracle Span 3-4:  important => important
Oracle Span 8-9:  mistakes => mistake-02
Oracle Span 2-3:  more => more

Dependencies:
1	In	_	IN	IN	_	8	prep	_	_
2	certain	_	JJ	JJ	_	5	amod	_	_
3	more	_	RBR	RBR	_	4	advmod	_	_
4	important	_	JJ	JJ	_	5	amod	_	_
5	details	_	NNS	NNS	_	1	pobj	_	_
6	I	_	PRP	PRP	_	8	nsubj	_	_
7	shall	_	MD	MD	_	8	aux	_	_
8	make	_	VB	VB	_	0	root	_	_
9	mistakes	_	NNS	NNS	_	8	dobj	_	_
10	,	_	,	,	_	8	punct	_	_
11	also	_	RB	RB	_	8	advmod	_	_
12	.	_	.	.	_	8	punct	_	_

Oracle:
(d / detail, mod, c / certain)
(d / detail, mod, i2 / important)
(i2 / important, degree, m3 / more)
(m2 / mistake-02, ARG0, i / i)
(m2 / mistake-02, ARG1, d / detail)
(m2 / mistake-02, mod, a / also)

Input(Some(Graph((mistake-02 :mod also :ARG1 (detail :mod certain :mod (important :degree more)) :ARG0 i),ArrayBuffer(Span(8,9,List(0),mistakes,mistake-02,false), Span(10,11,List(1),also,also,false), Span(4,5,List(2),details,detail,false), Span(1,2,List(3),certain,certain,false), Span(3,4,List(4),important,important,false), Span(2,3,List(5),more,more,false), Span(5,6,List(6),I,i,false)),Map(2 -> detail, 5 -> more, 1 -> also, 4 -> important, 6 -> i, 0 -> mistake-02, 3 -> certain),Map(m3 -> more, m2 -> mistake-02, d -> detail, a -> also, i2 -> important, i -> i, c -> certain))),[Ljava.lang.String;@543588e6,Annotation([Ljava.lang.String;@f5acb9d,[Ljava.lang.String;@4fb3ee4e,[Ljava.lang.String;@5d7148e2),Annotation([Ljava.lang.String;@25fb8912,[Ljava.lang.String;@7c24b813,[Ledu.cmu.lti.nlp.amr.Dependency;@2c35e847),Annotation([Ljava.lang.String;@7bd4937b,[Ljava.lang.String;@21e360a,[Ljava.lang.String;@5ba3f27a),Annotation([Ljava.lang.String;@58d75e99,[Ljava.lang.String;@74751b3,[Ledu.cmu.lti.nlp.amr.Entity;@741a8937))
AMR:
(d / detail, mod, c / certain)
(d / detail, mod, i2 / important)
(i2 / important, degree, m3 / more)
(m2 / mistake-02, ARG0, i / i)
(m2 / mistake-02, ARG1, c / certain)
(m2 / mistake-02, mod, a / also)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 59,282 microseconds
Sentence: But that is something that will not be my fault .

Oracle Span 1:  But => contrast-01
Oracle Span 2:  fault => fault-01
Oracle Span 3:  something => something
Oracle Span 4:  that => that
Spans:
Span 0-1:  But => contrast-01
Span 9-10:  fault => fault-01
Span 3-4:  something => something
Span 1-2:  that => that

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 9-10:  fault => fault-01
Oracle Span 3-4:  something => something
Oracle Span 1-2:  that => that

Dependencies:
1	But	_	CC	CC	_	4	cc	_	_
2	that	_	DT	DT	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	something	_	NN	NN	_	0	root	_	_
5	that	_	WDT	WDT	_	10	nsubj	_	_
6	will	_	MD	MD	_	10	aux	_	_
7	not	_	RB	RB	_	10	neg	_	_
8	be	_	VB	VB	_	10	cop	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	fault	_	NN	NN	_	4	rcmod	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(c / contrast-01, ARG2, f2 / fault-01)
(f2 / fault-01, ARG2, s2 / something)
(s2 / something, mod, t2 / that)

Input(Some(Graph((contrast-01 :ARG2 (fault-01 :polarity - :ARG2 (something :mod that) :ARG1 i)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(9,10,List(1),fault,fault-01,false), Span(3,4,List(2),something,something,false), Span(1,2,List(3),that,that,false)),Map(2 -> something, 1 -> fault-01, 0 -> contrast-01, 3 -> that),Map(s2 -> something, t2 -> that, f2 -> fault-01, c -> contrast-01))),[Ljava.lang.String;@306e95ec,Annotation([Ljava.lang.String;@52af26ee,[Ljava.lang.String;@6fd83fc1,[Ljava.lang.String;@4f2b503c),Annotation([Ljava.lang.String;@bae7dc0,[Ljava.lang.String;@209da20d,[Ledu.cmu.lti.nlp.amr.Dependency;@e15b7e8),Annotation([Ljava.lang.String;@1b2abca6,[Ljava.lang.String;@6392827e,[Ljava.lang.String;@2ed2d9cb),Annotation([Ljava.lang.String;@d5b810e,[Ljava.lang.String;@43dac38f,[Ledu.cmu.lti.nlp.amr.Entity;@342c38f8))
AMR:
(c / contrast-01, ARG0, s2 / something)
(c / contrast-01, ARG1, t2 / that)
(f2 / fault-01, ARG1, c / contrast-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 17,048 microseconds
Sentence: My friend never explained anything to me .

Oracle Span 1:  anything => anything
Oracle Span 2:  explained => explain-01
Oracle Span 3:  friend => (have-rel-role-91 :ARG2 friend)
Spans:
Span 4-5:  anything => anything
Span 3-4:  explained => explain-01
Span 1-2:  friend => (have-rel-role-91 :ARG2 friend)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  anything => anything
Oracle Span 3-4:  explained => explain-01
Oracle Span 1-2:  friend => (have-rel-role-91 :ARG2 friend)

Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	friend	_	NN	NN	_	4	nsubj	_	_
3	never	_	RB	RB	_	4	neg	_	_
4	explained	_	VBD	VBD	_	0	root	_	_
5	anything	_	NN	NN	_	4	dobj	_	_
6	to	_	TO	TO	_	4	prep	_	_
7	me	_	PRP	PRP	_	6	pobj	_	_
8	.	_	.	.	_	4	punct	_	_

Oracle:
(e / explain-01, ARG1, a / anything)
(h / have-rel-role-91, ARG2, f / friend)

Input(Some(Graph((explain-01 :time ever :ARG2 i :ARG1 anything :ARG0 (person :ARG0-of (have-rel-role-91 :ARG2 friend :ARG1 i)) :polarity -),ArrayBuffer(Span(3,4,List(0),explained,explain-01,false), Span(4,5,List(1),anything,anything,false), Span(1,2,List(2, 3),friend,(have-rel-role-91 :ARG2 friend),false)),Map(2 -> have-rel-role-91, 1 -> anything, 0 -> explain-01, 3 -> friend),Map(e -> explain-01, h -> have-rel-role-91, a -> anything, f -> friend))),[Ljava.lang.String;@c88a337,Annotation([Ljava.lang.String;@5d0a1059,[Ljava.lang.String;@485966cc,[Ljava.lang.String;@1de76cc7),Annotation([Ljava.lang.String;@54bff557,[Ljava.lang.String;@593aaf41,[Ledu.cmu.lti.nlp.amr.Dependency;@5a56cdac),Annotation([Ljava.lang.String;@7c711375,[Ljava.lang.String;@57cf54e1,[Ljava.lang.String;@5b03b9fe),Annotation([Ljava.lang.String;@37d4349f,[Ljava.lang.String;@434a63ab,[Ledu.cmu.lti.nlp.amr.Entity;@6e0f5f7f))
AMR:
(e / explain-01, ARG0, h / have-rel-role-91)
(e / explain-01, ARG1, a / anything)
(h / have-rel-role-91, ARG2, f / friend)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 18,807 microseconds
Sentence: He thought , perhaps , that I was like himself .

Oracle Span 1:  He => he
Oracle Span 2:  I => i
Oracle Span 3:  perhaps => perhaps
Oracle Span 4:  thought => think-01
Spans:
Span 0-1:  He => he
Span 6-7:  I => i
Span 3-4:  perhaps => perhaps
Span 1-2:  thought => think-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 0-1:  He => he
Oracle Span 6-7:  I => i
Oracle Span 3-4:  perhaps => perhaps
Oracle Span 1-2:  thought => think-01

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	thought	_	VBD	VBD	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	perhaps	_	RB	RB	_	2	advmod	_	_
5	,	_	,	,	_	2	punct	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	was	_	VBD	VBD	_	2	ccomp	_	_
9	like	_	IN	IN	_	8	prep	_	_
10	himself	_	PRP	PRP	_	9	pobj	_	_
11	.	_	.	.	_	2	punct	_	_

Oracle:
(t / think-01, ARG0, h / he)
(t / think-01, mod, p / perhaps)

Input(Some(Graph((think-01 :mod perhaps :ARG1 (resemble-01 :ARG1 i :ARG2 he) :ARG0 he),ArrayBuffer(Span(1,2,List(0),thought,think-01,false), Span(3,4,List(1),perhaps,perhaps,false), Span(6,7,List(2),I,i,false), Span(0,1,List(3),He,he,false)),Map(2 -> i, 1 -> perhaps, 0 -> think-01, 3 -> he),Map(h -> he, t -> think-01, p -> perhaps, i -> i))),[Ljava.lang.String;@2805d709,Annotation([Ljava.lang.String;@3ee37e5a,[Ljava.lang.String;@2ea41516,[Ljava.lang.String;@3a44431a),Annotation([Ljava.lang.String;@3c7f66c4,[Ljava.lang.String;@194bcebf,[Ledu.cmu.lti.nlp.amr.Dependency;@17497425),Annotation([Ljava.lang.String;@f0da945,[Ljava.lang.String;@4803b726,[Ljava.lang.String;@ffaa6af),Annotation([Ljava.lang.String;@53ce1329,[Ljava.lang.String;@316bcf94,[Ledu.cmu.lti.nlp.amr.Entity;@6404f418))
AMR:
(t / think-01, ARG0, h / he)
(t / think-01, ARG2, i / i)
(t / think-01, mod, p / perhaps)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 43,572 microseconds
Sentence: But I , alas , do not know how to see sheep through the walls of boxes .

Oracle Span 1:  alas => alas
Oracle Span 2:  boxes => box
Oracle Span 3:  But => contrast-01
Oracle Span 4:  I => i
Oracle Span 5:  know => know-01
Oracle Span 6:  see => (thing :manner-of see-01)
Oracle Span 7:  sheep => sheep
Oracle Span 8:  through => through
Oracle Span 9:  walls => wall
Spans:
Span 3-4:  alas => alas
Span 16-17:  boxes => box
Span 0-1:  But => contrast-01
Span 1-2:  I => i
Span 7-8:  know => know-01
Span 10-11:  see => (thing :manner-of see-01)
Span 11-12:  sheep => sheep
Span 12-13:  through => through
Span 14-15:  walls => wall

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 3-4:  alas => alas
Oracle Span 16-17:  boxes => box
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  I => i
Oracle Span 7-8:  know => know-01
Oracle Span 10-11:  see => (thing :manner-of see-01)
Oracle Span 11-12:  sheep => sheep
Oracle Span 12-13:  through => through
Oracle Span 14-15:  walls => wall

Dependencies:
1	But	_	CC	CC	_	8	cc	_	_
2	I	_	PRP	PRP	_	8	nsubj	_	_
3	,	_	,	,	_	8	punct	_	_
4	alas	_	UH	UH	_	6	discourse	_	_
5	,	_	,	,	_	6	punct	_	_
6	do	_	VB	VB	_	8	dep	_	_
7	not	_	RB	RB	_	6	neg	_	_
8	know	_	VBP	VBP	_	0	root	_	_
9	how	_	WRB	WRB	_	11	advmod	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	see	_	VB	VB	_	8	ccomp	_	_
12	sheep	_	NN	NN	_	11	dobj	_	_
13	through	_	IN	IN	_	11	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	walls	_	NNS	NNS	_	13	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	boxes	_	NNS	NNS	_	16	pobj	_	_
18	.	_	.	.	_	8	punct	_	_

Oracle:
(b2 / box, consist, w / wall)
(c / contrast-01, ARG2, k / know-01)
(c / contrast-01, mod, a / alas)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t2 / thing)
(s / see-01, ARG1, s2 / sheep)
(s / see-01, manner, t2 / thing)
(s / see-01, path, t / through)
(t / through, op, w / wall)

Input(Some(Graph((contrast-01 :mod alas :ARG2 (know-01 :ARG1 (thing :manner-of (see-01 :path (through :op (wall :consist-of box)) :ARG1 sheep)) :ARG0 i :polarity -)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(3,4,List(1),alas,alas,false), Span(7,8,List(2),know,know-01,false), Span(10,11,List(3, 4),see,(thing :manner-of see-01),false), Span(12,13,List(5),through,through,false), Span(14,15,List(6),walls,wall,false), Span(16,17,List(7),boxes,box,false), Span(11,12,List(8),sheep,sheep,false), Span(1,2,List(9),I,i,false)),Map(2 -> know-01, 5 -> through, 8 -> sheep, 7 -> box, 1 -> alas, 4 -> see-01, 6 -> wall, 9 -> i, 0 -> contrast-01, 3 -> thing),Map(w -> wall, s2 -> sheep, t -> through, k -> know-01, b2 -> box, s -> see-01, a -> alas, t2 -> thing, i -> i, c -> contrast-01))),[Ljava.lang.String;@3e11f9e9,Annotation([Ljava.lang.String;@1de5f259,[Ljava.lang.String;@729d991e,[Ljava.lang.String;@31fa1761),Annotation([Ljava.lang.String;@957e06,[Ljava.lang.String;@32502377,[Ledu.cmu.lti.nlp.amr.Dependency;@2c1b194a),Annotation([Ljava.lang.String;@4dbb42b7,[Ljava.lang.String;@66f57048,[Ljava.lang.String;@550dbc7a),Annotation([Ljava.lang.String;@21282ed8,[Ljava.lang.String;@36916eb0,[Ledu.cmu.lti.nlp.amr.Entity;@7bab3f1a))
AMR:
(c / contrast-01, ARG0, b2 / box)
(c / contrast-01, ARG1, a / alas)
(c / contrast-01, ARG2, k / know-01)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t2 / thing)
(k / know-01, manner, s2 / sheep)
(s / see-01, manner, t2 / thing)
(s2 / sheep, direction, t / through)
(t / through, op, w / wall)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.1.0
WARNING: makeIds can't find span Id: 0.0.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 126,435 microseconds
Sentence: Perhaps I am a little like the grown - ups .

Oracle Span 1:  grown => grown-up
Oracle Span 2:  I => i
Oracle Span 3:  little => little
Oracle Span 4:  Perhaps => perhaps
Spans:
Span 7-8:  grown => grown-up
Span 1-2:  I => i
Span 4-5:  little => little
Span 0-1:  Perhaps => perhaps

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  grown => grown-up
Oracle Span 1-2:  I => i
Oracle Span 4-5:  little => little
Oracle Span 0-1:  Perhaps => perhaps

Dependencies:
1	Perhaps	_	RB	RB	_	3	advmod	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	am	_	VBP	VBP	_	0	root	_	_
4	a	_	DT	DT	_	5	det	_	_
5	little	_	JJ	JJ	_	6	npadvmod	_	_
6	like	_	IN	IN	_	3	prep	_	_
7	the	_	DT	DT	_	10	det	_	_
8	grown	_	JJ	JJ	_	10	amod	_	_
9	-	_	CD	CD	_	10	num	_	_
10	ups	_	NNS	NNS	_	6	pobj	_	_
11	.	_	.	.	_	3	punct	_	_

Oracle:


Input(Some(Graph((resemble-01 :ARG1 i :ARG2 grown-up :mod perhaps :quant little),ArrayBuffer(Span(1,2,List(0),I,i,false), Span(0,1,List(1),Perhaps,perhaps,false), Span(4,5,List(2),little,little,false), Span(7,8,List(3),grown,grown-up,false)),Map(2 -> little, 1 -> perhaps, 0 -> i, 3 -> grown-up),Map(g -> grown-up, p -> perhaps, i -> i, l -> little))),[Ljava.lang.String;@437da279,Annotation([Ljava.lang.String;@23c30a20,[Ljava.lang.String;@1e1a0406,[Ljava.lang.String;@3cebbb30),Annotation([Ljava.lang.String;@12aba8be,[Ljava.lang.String;@290222c1,[Ledu.cmu.lti.nlp.amr.Dependency;@67f639d3),Annotation([Ljava.lang.String;@6253c26,[Ljava.lang.String;@49049a04,[Ljava.lang.String;@71a8adcf),Annotation([Ljava.lang.String;@27462a88,[Ljava.lang.String;@82de64a,[Ledu.cmu.lti.nlp.amr.Entity;@659499f1))
AMR:
(g / grown-up, poss, p / perhaps)
(i / i, op, l / little)
(l / little, poss, p / perhaps)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.1
Decoded in 11,415 microseconds
Sentence: I have had to grow old .

Oracle Span 1:  grow => grow-02
Oracle Span 2:  I => i
Oracle Span 3:  old => old
Spans:
Span 4-5:  grow => grow-02
Span 0-1:  I => i
Span 5-6:  old => old

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  grow => grow-02
Oracle Span 0-1:  I => i
Oracle Span 5-6:  old => old

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	had	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	grow	_	VB	VB	_	3	xcomp	_	_
6	old	_	JJ	JJ	_	5	acomp	_	_
7	.	_	.	.	_	3	punct	_	_

Oracle:
(g / grow-02, ARG1, i / i)
(g / grow-02, ARG2, o2 / old)

Input(Some(Graph((obligate-01 :ARG1 i :ARG2 (grow-02 :ARG2 old :ARG1 i)),ArrayBuffer(Span(0,1,List(0),I,i,false), Span(4,5,List(1),grow,grow-02,false), Span(5,6,List(2),old,old,false)),Map(2 -> old, 1 -> grow-02, 0 -> i),Map(g -> grow-02, o2 -> old, i -> i))),[Ljava.lang.String;@51e69659,Annotation([Ljava.lang.String;@47e2e487,[Ljava.lang.String;@201a4587,[Ljava.lang.String;@61001b64),Annotation([Ljava.lang.String;@4310d43,[Ljava.lang.String;@54a7079e,[Ledu.cmu.lti.nlp.amr.Dependency;@26e356f0),Annotation([Ljava.lang.String;@47d9a273,[Ljava.lang.String;@4b8ee4de,[Ljava.lang.String;@27f981c6),Annotation([Ljava.lang.String;@1b11171f,[Ljava.lang.String;@1151e434,[Ledu.cmu.lti.nlp.amr.Entity;@2dc54ad4))
AMR:
(g / grow-02, ARG0, i / i)
(g / grow-02, ARG2, o2 / old)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 6,125 microseconds
Sentence: Chapter 5 .

Oracle Span 1:  5 => 5
Oracle Span 2:  Chapter => chapter
Spans:
Span 1-2:  5 => 5
Span 0-1:  Chapter => chapter

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  5 => 5
Oracle Span 0-1:  Chapter => chapter

Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	5	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 5 / 5)

Input(Some(Graph((chapter :mod 5),ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false), Span(1,2,List(1),5,5,false)),Map(1 -> 5, 0 -> chapter),Map(5 -> 5, c -> chapter))),[Ljava.lang.String;@4659191b,Annotation([Ljava.lang.String;@55634720,[Ljava.lang.String;@4b0d79fc,[Ljava.lang.String;@4c1909a3),Annotation([Ljava.lang.String;@428640fa,[Ljava.lang.String;@d9345cd,[Ledu.cmu.lti.nlp.amr.Dependency;@2d710f1a),Annotation([Ljava.lang.String;@29215f06,[Ljava.lang.String;@59505b48,[Ljava.lang.String;@4efac082),Annotation([Ljava.lang.String;@6bd61f98,[Ljava.lang.String;@48aca48b,[Ledu.cmu.lti.nlp.amr.Entity;@13fd2ccd))
AMR:
(c / chapter, mod, 5 / 5)

WARNING: makeIds can't find span Id: 0.0
Decoded in 3,843 microseconds
Sentence: As each day passed I would learn , in our talk , something about the little prince 's planet , his departure from it , his journey .

Oracle Span 1:  day => day
Oracle Span 2:  departure => depart-01
Oracle Span 3:  each => each
Oracle Span 4:  I => i
Oracle Span 5:  journey => journey-01
Oracle Span 6:  learn => learn-01
Oracle Span 7:  little => little
Oracle Span 8:  passed => pass-03
Oracle Span 9:  planet => planet
Oracle Span 10:  prince => prince
Oracle Span 11:  something => something
Oracle Span 12:  talk => talk-01
Spans:
Span 2-3:  day => day
Span 21-22:  departure => depart-01
Span 1-2:  each => each
Span 4-5:  I => i
Span 26-27:  journey => journey-01
Span 6-7:  learn => learn-01
Span 15-16:  little => little
Span 3-4:  passed => pass-03
Span 18-19:  planet => planet
Span 16-17:  prince => prince
Span 12-13:  something => something
Span 10-11:  talk => talk-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 2-3:  day => day
Oracle Span 21-22:  departure => depart-01
Oracle Span 1-2:  each => each
Oracle Span 4-5:  I => i
Oracle Span 26-27:  journey => journey-01
Oracle Span 6-7:  learn => learn-01
Oracle Span 15-16:  little => little
Oracle Span 3-4:  passed => pass-03
Oracle Span 18-19:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 12-13:  something => something
Oracle Span 10-11:  talk => talk-01

Dependencies:
1	As	_	IN	IN	_	4	mark	_	_
2	each	_	DT	DT	_	3	det	_	_
3	day	_	NN	NN	_	4	nsubj	_	_
4	passed	_	VBD	VBD	_	19	advcl	_	_
5	I	_	PRP	PRP	_	7	nsubj	_	_
6	would	_	MD	MD	_	7	aux	_	_
7	learn	_	VB	VB	_	4	ccomp	_	_
8	,	_	,	,	_	19	punct	_	_
9	in	_	IN	IN	_	19	prep	_	_
10	our	_	PRP$	PRP$	_	11	poss	_	_
11	talk	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	19	punct	_	_
13	something	_	NN	NN	_	19	nsubj	_	_
14	about	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	pobj	_	_
18	's	_	VBZ	VBZ	_	19	cop	_	_
19	planet	_	NN	NN	_	0	root	_	_
20	,	_	,	,	_	19	punct	_	_
21	his	_	PRP$	PRP$	_	22	poss	_	_
22	departure	_	NN	NN	_	19	appos	_	_
23	from	_	IN	IN	_	22	prep	_	_
24	it	_	PRP	PRP	_	23	pobj	_	_
25	,	_	,	,	_	19	punct	_	_
26	his	_	PRP$	PRP$	_	27	poss	_	_
27	journey	_	NN	NN	_	19	appos	_	_
28	.	_	.	.	_	19	punct	_	_

Oracle:
(d / day, mod, e / each)
(d2 / depart-01, ARG0, p3 / prince)
(d2 / depart-01, ARG1, p2 / planet)
(j / journey-01, ARG0, p3 / prince)
(l / learn-01, ARG0, i / i)
(l / learn-01, source, t / talk-01)
(l / learn-01, time, p / pass-03)
(p / pass-03, ARG1, d / day)
(p2 / planet, poss, p3 / prince)
(p3 / prince, mod, l2 / little)
(s / something, topic, p2 / planet)

Input(Some(Graph((learn-01 :source (talk-01 :ARG0 we) :time (pass-03 :ARG1 (day :mod each)) :ARG1 (and :op (something :topic (planet :poss (prince :mod little))) :op (depart-01 :ARG0 prince :ARG1 planet) :op (journey-01 :ARG0 prince)) :ARG0 i),ArrayBuffer(Span(6,7,List(0),learn,learn-01,false), Span(10,11,List(1),talk,talk-01,false), Span(3,4,List(2),passed,pass-03,false), Span(2,3,List(3),day,day,false), Span(1,2,List(4),each,each,false), Span(12,13,List(5),something,something,false), Span(18,19,List(6),planet,planet,false), Span(16,17,List(7),prince,prince,false), Span(15,16,List(8),little,little,false), Span(26,27,List(9),journey,journey-01,false), Span(4,5,List(10),I,i,false), Span(21,22,List(11),departure,depart-01,false)),Map(2 -> pass-03, 5 -> something, 8 -> little, 7 -> prince, 1 -> talk-01, 4 -> each, 11 -> depart-01, 6 -> planet, 9 -> journey-01, 0 -> learn-01, 10 -> i, 3 -> day),Map(e -> each, t -> talk-01, p2 -> planet, j -> journey-01, s -> something, d -> day, p -> pass-03, d2 -> depart-01, l2 -> little, i -> i, l -> learn-01, p3 -> prince))),[Ljava.lang.String;@b9b00e0,Annotation([Ljava.lang.String;@506ae4d4,[Ljava.lang.String;@7d4f9aae,[Ljava.lang.String;@72e5a8e),Annotation([Ljava.lang.String;@54e1c68b,[Ljava.lang.String;@53aac487,[Ledu.cmu.lti.nlp.amr.Dependency;@52b1beb6),Annotation([Ljava.lang.String;@273e7444,[Ljava.lang.String;@7db12bb6,[Ljava.lang.String;@783a467b),Annotation([Ljava.lang.String;@272113c4,[Ljava.lang.String;@73e9cf30,[Ledu.cmu.lti.nlp.amr.Entity;@771a660))
AMR:
(d / day, mod, e / each)
(d2 / depart-01, ARG0, s / something)
(d2 / depart-01, ARG1, p / pass-03)
(j / journey-01, ARG0, p3 / prince)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, j / journey-01)
(p / pass-03, ARG0, d / day)
(p / pass-03, ARG1, l / learn-01)
(p2 / planet, domain, s / something)
(p3 / prince, mod, l2 / little)
(t / talk-01, ARG1, d2 / depart-01)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 180,172 microseconds
Sentence: The information would come very slowly , as it might chance to fall from his thoughts .

Oracle Span 1:  chance => chance-01
Oracle Span 2:  come => come-01
Oracle Span 3:  fall => fall-01
Oracle Span 4:  information => information
Oracle Span 5:  slowly => slow-05
Oracle Span 6:  very => very
Spans:
Span 10-11:  chance => chance-01
Span 3-4:  come => come-01
Span 12-13:  fall => fall-01
Span 1-2:  information => information
Span 5-6:  slowly => slow-05
Span 4-5:  very => very

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 10-11:  chance => chance-01
Oracle Span 3-4:  come => come-01
Oracle Span 12-13:  fall => fall-01
Oracle Span 1-2:  information => information
Oracle Span 5-6:  slowly => slow-05
Oracle Span 4-5:  very => very

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	information	_	NN	NN	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	come	_	VB	VB	_	0	root	_	_
5	very	_	RB	RB	_	6	advmod	_	_
6	slowly	_	RB	RB	_	4	advmod	_	_
7	,	_	,	,	_	6	punct	_	_
8	as	_	IN	IN	_	10	mark	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	might	_	MD	MD	_	6	ccomp	_	_
11	chance	_	NN	NN	_	10	dobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	fall	_	VB	VB	_	10	xcomp	_	_
14	from	_	IN	IN	_	13	prep	_	_
15	his	_	PRP$	PRP$	_	16	poss	_	_
16	thoughts	_	NNS	NNS	_	14	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(c / come-01, ARG1, i / information)
(c / come-01, time, f / fall-01)
(c2 / chance-01, ARG1, f / fall-01)
(f / fall-01, ARG1, i / information)
(s / slow-05, ARG1, c / come-01)
(s / slow-05, degree, v / very)

Input(Some(Graph((come-01 :time (fall-01 :ARG1-of chance-01 :ARG3 (thing :ARG1-of (think-01 :ARG0 he)) :ARG1 information) :ARG1-of (slow-05 :degree very) :ARG1 information),ArrayBuffer(Span(3,4,List(0),come,come-01,false), Span(12,13,List(1),fall,fall-01,false), Span(10,11,List(2),chance,chance-01,false), Span(4,5,List(3),very,very,false), Span(1,2,List(4),information,information,false), Span(5,6,List(5),slowly,slow-05,false)),Map(2 -> chance-01, 5 -> slow-05, 1 -> fall-01, 4 -> information, 0 -> come-01, 3 -> very),Map(s -> slow-05, v -> very, i -> information, c -> come-01, f -> fall-01, c2 -> chance-01))),[Ljava.lang.String;@3f6f6701,Annotation([Ljava.lang.String;@3527942a,[Ljava.lang.String;@942a29c,[Ljava.lang.String;@1ed6388a),Annotation([Ljava.lang.String;@5a45133e,[Ljava.lang.String;@534a5a98,[Ledu.cmu.lti.nlp.amr.Dependency;@4f80542f),Annotation([Ljava.lang.String;@60bd273d,[Ljava.lang.String;@121314f7,[Ljava.lang.String;@130c12b7),Annotation([Ljava.lang.String;@5e600dd5,[Ljava.lang.String;@576d5deb,[Ledu.cmu.lti.nlp.amr.Entity;@5d534f5d))
AMR:
(c / come-01, ARG1, i / information)
(c2 / chance-01, ARG1, f / fall-01)
(f / fall-01, ARG1, s / slow-05)
(s / slow-05, ARG1, c / come-01)
(s / slow-05, degree, v / very)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 31,695 microseconds
Sentence: It was in this way that I heard , on the third day , about the catastrophe of the baobabs .

Oracle Span 1:  baobabs => baobab
Oracle Span 2:  catastrophe => catastrophe
Oracle Span 3:  day => day
Oracle Span 4:  heard => hear-01
Oracle Span 5:  I => i
Oracle Span 6:  this => this
Spans:
Span 19-20:  baobabs => baobab
Span 16-17:  catastrophe => catastrophe
Span 12-13:  day => day
Span 7-8:  heard => hear-01
Span 6-7:  I => i
Span 3-4:  this => this

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 19-20:  baobabs => baobab
Oracle Span 16-17:  catastrophe => catastrophe
Oracle Span 12-13:  day => day
Oracle Span 7-8:  heard => hear-01
Oracle Span 6-7:  I => i
Oracle Span 3-4:  this => this

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	was	_	VBD	VBD	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	this	_	DT	DT	_	5	det	_	_
5	way	_	NN	NN	_	3	pobj	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	heard	_	VBD	VBD	_	2	ccomp	_	_
9	,	_	,	,	_	8	punct	_	_
10	on	_	IN	IN	_	8	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	third	_	JJ	JJ	_	13	amod	_	_
13	day	_	NN	NN	_	10	pobj	_	_
14	,	_	,	,	_	8	punct	_	_
15	about	_	IN	IN	_	8	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	catastrophe	_	NN	NN	_	15	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	baobabs	_	NNS	NNS	_	18	pobj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(c / catastrophe, poss, b / baobab)
(h / hear-01, ARG0, i / i)
(h / hear-01, ARG1, c / catastrophe)
(h / hear-01, manner, t / this)
(h / hear-01, time, d / day)

Input(Some(Graph((hear-01 :time (day :ord (ordinal-entity :value 3)) :manner this :ARG1 (catastrophe :poss baobab) :ARG0 i),ArrayBuffer(Span(7,8,List(0),heard,hear-01,false), Span(12,13,List(1),day,day,false), Span(3,4,List(2),this,this,false), Span(16,17,List(3),catastrophe,catastrophe,false), Span(19,20,List(4),baobabs,baobab,false), Span(6,7,List(5),I,i,false)),Map(2 -> this, 5 -> i, 1 -> day, 4 -> baobab, 0 -> hear-01, 3 -> catastrophe),Map(h -> hear-01, b -> baobab, t -> this, d -> day, i -> i, c -> catastrophe))),[Ljava.lang.String;@2e3967ea,Annotation([Ljava.lang.String;@70e9c95d,[Ljava.lang.String;@4d5650ae,[Ljava.lang.String;@a38c7fe),Annotation([Ljava.lang.String;@6fdbe764,[Ljava.lang.String;@51c668e3,[Ledu.cmu.lti.nlp.amr.Dependency;@2e6a8155),Annotation([Ljava.lang.String;@6221a451,[Ljava.lang.String;@52719fb6,[Ljava.lang.String;@3012646b),Annotation([Ljava.lang.String;@4a883b15,[Ljava.lang.String;@25641d39,[Ledu.cmu.lti.nlp.amr.Entity;@7b36aa0c))
AMR:
(c / catastrophe, poss, b / baobab)
(h / hear-01, ARG0, i / i)
(h / hear-01, ARG1, t / this)
(h / hear-01, ARG2, d / day)
(h / hear-01, location, c / catastrophe)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 74,947 microseconds
Sentence: This time , once more , I had the sheep to thank for it .

Oracle Span 1:  I => i
Oracle Span 2:  it => it
Oracle Span 3:  sheep => sheep
Oracle Span 4:  thank => thank-01
Oracle Span 5:  This => this
Oracle Span 6:  time => time
Spans:
Span 6-7:  I => i
Span 13-14:  it => it
Span 9-10:  sheep => sheep
Span 11-12:  thank => thank-01
Span 0-1:  This => this
Span 1-2:  time => time

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 6-7:  I => i
Oracle Span 13-14:  it => it
Oracle Span 9-10:  sheep => sheep
Oracle Span 11-12:  thank => thank-01
Oracle Span 0-1:  This => this
Oracle Span 1-2:  time => time

Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	time	_	NN	NN	_	8	nsubj	_	_
3	,	_	,	,	_	8	punct	_	_
4	once	_	RB	RB	_	5	advmod	_	_
5	more	_	RBR	RBR	_	8	advmod	_	_
6	,	_	,	,	_	8	punct	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	had	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	10	det	_	_
10	sheep	_	NN	NN	_	8	dobj	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	thank	_	VB	VB	_	10	vmod	_	_
13	for	_	IN	IN	_	12	prep	_	_
14	it	_	PRP	PRP	_	13	pobj	_	_
15	.	_	.	.	_	8	punct	_	_

Oracle:
(t / thank-01, ARG0, i / i)
(t / thank-01, ARG1, s / sheep)
(t / thank-01, ARG2, i2 / it)
(t2 / time, mod, t3 / this)

Input(Some(Graph((obligate-01 :ARG2 (thank-01 :ARG2 it :ARG1 sheep :ARG0 i) :time (time :mod this) :mod (again :frequency 1)),ArrayBuffer(Span(11,12,List(0),thank,thank-01,false), Span(13,14,List(1),it,it,false), Span(9,10,List(2),sheep,sheep,false), Span(6,7,List(3),I,i,false), Span(1,2,List(4),time,time,false), Span(0,1,List(5),This,this,false)),Map(2 -> sheep, 5 -> this, 1 -> it, 4 -> time, 0 -> thank-01, 3 -> i),Map(t -> thank-01, s -> sheep, t3 -> this, t2 -> time, i2 -> it, i -> i))),[Ljava.lang.String;@5824a83d,Annotation([Ljava.lang.String;@537f60bf,[Ljava.lang.String;@5677323c,[Ljava.lang.String;@18df8434),Annotation([Ljava.lang.String;@65c7a252,[Ljava.lang.String;@4d154ccd,[Ledu.cmu.lti.nlp.amr.Dependency;@229c6181),Annotation([Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072,[Ljava.lang.String;@791f145a),Annotation([Ljava.lang.String;@38cee291,[Ljava.lang.String;@4b45a2f5,[Ledu.cmu.lti.nlp.amr.Entity;@f09733f))
AMR:
(t / thank-01, ARG0, i / i)
(t / thank-01, ARG1, s / sheep)
(t / thank-01, ARG2, i2 / it)
(t / thank-01, concession, t2 / time)
(t2 / time, mod, t3 / this)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 99,756 microseconds
Sentence: For the little prince asked me abruptly -- as if seized by a grave doubt -- " It is true , is n't it , that sheep eat little bushes ? "

Oracle Span 1:  abruptly => abrupt
Oracle Span 2:  asked => ask-01
Oracle Span 3:  bushes => bush
Oracle Span 4:  doubt => doubt-01
Oracle Span 5:  eat => eat-01
Oracle Span 6:  grave => grave
Oracle Span 7:  little => little
Oracle Span 8:  little => little
Oracle Span 9:  prince => prince
Oracle Span 10:  seized => seize-01
Oracle Span 11:  sheep => sheep
Oracle Span 12:  true => true-01
Spans:
Span 6-7:  abruptly => abrupt
Span 4-5:  asked => ask-01
Span 29-30:  bushes => bush
Span 14-15:  doubt => doubt-01
Span 27-28:  eat => eat-01
Span 13-14:  grave => grave
Span 2-3:  little => little
Span 28-29:  little => little
Span 3-4:  prince => prince
Span 10-11:  seized => seize-01
Span 26-27:  sheep => sheep
Span 19-20:  true => true-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  abruptly => abrupt
Oracle Span 4-5:  asked => ask-01
Oracle Span 29-30:  bushes => bush
Oracle Span 14-15:  doubt => doubt-01
Oracle Span 27-28:  eat => eat-01
Oracle Span 13-14:  grave => grave
Oracle Span 2-3:  little => little
Oracle Span 28-29:  little => little
Oracle Span 3-4:  prince => prince
Oracle Span 10-11:  seized => seize-01
Oracle Span 26-27:  sheep => sheep
Oracle Span 19-20:  true => true-01

Dependencies:
1	For	_	IN	IN	_	5	dep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	asked	_	VBD	VBD	_	0	root	_	_
6	me	_	PRP	PRP	_	5	dobj	_	_
7	abruptly	_	RB	RB	_	5	advmod	_	_
8	--	_	:	:	_	7	punct	_	_
9	as	_	RB	RB	_	7	advmod	_	_
10	if	_	IN	IN	_	11	mark	_	_
11	seized	_	VBN	VBN	_	9	dep	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	grave	_	JJ	JJ	_	15	amod	_	_
15	doubt	_	NN	NN	_	12	pobj	_	_
16	--	_	:	:	_	5	punct	_	_
17	"	_	''	''	_	5	punct	_	_
18	It	_	PRP	PRP	_	20	nsubj	_	_
19	is	_	VBZ	VBZ	_	20	cop	_	_
20	true	_	JJ	JJ	_	5	ccomp	_	_
21	,	_	,	,	_	20	punct	_	_
22	is	_	VBZ	VBZ	_	24	cop	_	_
23	n't	_	RB	RB	_	24	neg	_	_
24	it	_	PRP	PRP	_	20	dep	_	_
25	,	_	,	,	_	20	punct	_	_
26	that	_	IN	IN	_	28	mark	_	_
27	sheep	_	NN	NN	_	28	nsubj	_	_
28	eat	_	VBP	VBP	_	20	ccomp	_	_
29	little	_	JJ	JJ	_	30	amod	_	_
30	bushes	_	NNS	NNS	_	28	dobj	_	_
31	?	_	.	.	_	5	punct	_	_
32	"	_	''	''	_	5	punct	_	_

Oracle:
(a / ask-01, ARG0, p / prince)
(a / ask-01, ARG1, t / true-01)
(a / ask-01, conj-as-if, s2 / seize-01)
(a / ask-01, manner, a2 / abrupt)
(b / bush, mod, l / little)
(d / doubt-01, ARG0, p / prince)
(d / doubt-01, mod, g / grave)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(p / prince, mod, l2 / little)
(s2 / seize-01, ARG0, d / doubt-01)
(s2 / seize-01, ARG1, p / prince)
(t / true-01, ARG1, e / eat-01)

Input(Some(Graph((ask-01 :conj-as-if (seize-01 :ARG0 (doubt-01 :mod grave :ARG0 prince) :ARG1 prince) :manner abrupt :ARG2 i :ARG1 (true-01 :ARG1-of (request-confirmation-91 :ARG0 prince :ARG2 i) :ARG1 (eat-01 :ARG1 (bush :mod little) :ARG0 sheep)) :ARG0 (prince :mod little)),ArrayBuffer(Span(4,5,List(0),asked,ask-01,false), Span(10,11,List(1),seized,seize-01,false), Span(14,15,List(2),doubt,doubt-01,false), Span(13,14,List(3),grave,grave,false), Span(19,20,List(4),true,true-01,false), Span(27,28,List(5),eat,eat-01,false), Span(29,30,List(6),bushes,bush,false), Span(2,3,List(7),little,little,false), Span(26,27,List(8),sheep,sheep,false), Span(3,4,List(9),prince,prince,false), Span(28,29,List(10),little,little,false), Span(6,7,List(11),abruptly,abrupt,false)),Map(2 -> doubt-01, 5 -> eat-01, 8 -> sheep, 7 -> little, 1 -> seize-01, 4 -> true-01, 11 -> abrupt, 6 -> bush, 9 -> prince, 0 -> ask-01, 10 -> little, 3 -> grave),Map(e -> eat-01, s2 -> seize-01, b -> bush, t -> true-01, s -> sheep, d -> doubt-01, p -> prince, g -> grave, a -> ask-01, l2 -> little, a2 -> abrupt, l -> little))),[Ljava.lang.String;@e350b40,Annotation([Ljava.lang.String;@41a0aa7d,[Ljava.lang.String;@2794eab6,[Ljava.lang.String;@6340e5f0),Annotation([Ljava.lang.String;@45099dd3,[Ljava.lang.String;@13e344d,[Ledu.cmu.lti.nlp.amr.Dependency;@1ffaf86),Annotation([Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54,[Ljava.lang.String;@1c7696c6),Annotation([Ljava.lang.String;@60099951,[Ljava.lang.String;@20140db9,[Ledu.cmu.lti.nlp.amr.Entity;@1e6a3214))
AMR:
(a / ask-01, ARG0, p / prince)
(a / ask-01, ARG1, t / true-01)
(a / ask-01, extent, a2 / abrupt)
(b / bush, mod, l2 / little)
(d / doubt-01, mod, g / grave)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(p / prince, mod, l / little)
(s2 / seize-01, ARG1, a2 / abrupt)
(s2 / seize-01, ARG2, d / doubt-01)
(t / true-01, ARG1, e / eat-01)

WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.4.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.3
Decoded in 92,211 microseconds
Sentence: " Yes , that is true . "

Oracle Span 1:  that => that
Oracle Span 2:  true => true-01
Spans:
Span 3-4:  that => that
Span 5-6:  true => true-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  that => that
Oracle Span 5-6:  true => true-01

Dependencies:
1	"	_	''	''	_	6	punct	_	_
2	Yes	_	RB	RB	_	6	advmod	_	_
3	,	_	,	,	_	6	punct	_	_
4	that	_	DT	DT	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	true	_	JJ	JJ	_	0	root	_	_
7	.	_	.	.	_	6	punct	_	_
8	"	_	''	''	_	6	punct	_	_

Oracle:
(t / true-01, ARG1, t2 / that)

Input(Some(Graph((true-01 :ARG1 that),ArrayBuffer(Span(5,6,List(0),true,true-01,false), Span(3,4,List(1),that,that,false)),Map(1 -> that, 0 -> true-01),Map(t -> true-01, t2 -> that))),[Ljava.lang.String;@368247b9,Annotation([Ljava.lang.String;@1a6d8329,[Ljava.lang.String;@1a942c18,[Ljava.lang.String;@55a147cc),Annotation([Ljava.lang.String;@71ba6d4e,[Ljava.lang.String;@738dc9b,[Ledu.cmu.lti.nlp.amr.Dependency;@3c77d488),Annotation([Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8,[Ljava.lang.String;@d86a6f),Annotation([Ljava.lang.String;@2892d68,[Ljava.lang.String;@5ab956d7,[Ledu.cmu.lti.nlp.amr.Entity;@3646a422))
AMR:
(t / true-01, ARG1, t2 / that)

WARNING: makeIds can't find span Id: 0.0
Decoded in 8,563 microseconds
Sentence: " Ah !

Oracle Span 1:  Ah => ah
Spans:
Span 1-2:  Ah => ah

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  Ah => ah

Dependencies:
1	"	_	VB	VB	_	0	root	_	_
2	Ah	_	UH	UH	_	1	dep	_	_
3	!	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph((ah :mode expressive),ArrayBuffer(Span(1,2,List(0),Ah,ah,false)),Map(0 -> ah),Map(a -> ah))),[Ljava.lang.String;@750e2b97,Annotation([Ljava.lang.String;@3e27aa33,[Ljava.lang.String;@2e385cce,[Ljava.lang.String;@2ddc9a9f),Annotation([Ljava.lang.String;@298a5e20,[Ljava.lang.String;@2a7f1f10,[Ledu.cmu.lti.nlp.amr.Dependency;@46cdf8bd),Annotation([Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06,[Ljava.lang.String;@26d9b808),Annotation([Ljava.lang.String;@f78a47e,[Ljava.lang.String;@644baf4a,[Ledu.cmu.lti.nlp.amr.Entity;@7526515b))
AMR:


Decoded in 3,383 microseconds
Sentence: I am glad ! "

Oracle Span 1:  glad => glad-02
Oracle Span 2:  I => i
Spans:
Span 2-3:  glad => glad-02
Span 0-1:  I => i

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  glad => glad-02
Oracle Span 0-1:  I => i

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	am	_	VBP	VBP	_	3	cop	_	_
3	glad	_	JJ	JJ	_	0	root	_	_
4	!	_	.	.	_	3	punct	_	_
5	"	_	''	''	_	3	punct	_	_

Oracle:
(g / glad-02, ARG1, i / i)

Input(Some(Graph((glad-02 :ARG1 i),ArrayBuffer(Span(2,3,List(0),glad,glad-02,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> glad-02),Map(g -> glad-02, i -> i))),[Ljava.lang.String;@1ed4ae0f,Annotation([Ljava.lang.String;@54c5a2ff,[Ljava.lang.String;@6d4d66d2,[Ljava.lang.String;@2a265ea9),Annotation([Ljava.lang.String;@11392934,[Ljava.lang.String;@6892b3b6,[Ledu.cmu.lti.nlp.amr.Dependency;@6e6f2380),Annotation([Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b,[Ljava.lang.String;@53fe15ff),Annotation([Ljava.lang.String;@449a4f23,[Ljava.lang.String;@1530c739,[Ledu.cmu.lti.nlp.amr.Entity;@5b1669c0))
AMR:
(g / glad-02, ARG1, i / i)

WARNING: makeIds can't find span Id: 0.0
Decoded in 4,296 microseconds
Sentence: I did not understand why it was so important that sheep should eat little bushes .

Oracle Span 1:  bushes => bush
Oracle Span 2:  eat => eat-01
Oracle Span 3:  I => i
Oracle Span 4:  important => important
Oracle Span 5:  little => little
Oracle Span 6:  sheep => sheep
Oracle Span 7:  should => recommend-01
Oracle Span 8:  so => so
Oracle Span 9:  understand => understand-01
Spans:
Span 14-15:  bushes => bush
Span 12-13:  eat => eat-01
Span 0-1:  I => i
Span 8-9:  important => important
Span 13-14:  little => little
Span 10-11:  sheep => sheep
Span 11-12:  should => recommend-01
Span 7-8:  so => so
Span 3-4:  understand => understand-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 14-15:  bushes => bush
Oracle Span 12-13:  eat => eat-01
Oracle Span 0-1:  I => i
Oracle Span 8-9:  important => important
Oracle Span 13-14:  little => little
Oracle Span 10-11:  sheep => sheep
Oracle Span 11-12:  should => recommend-01
Oracle Span 7-8:  so => so
Oracle Span 3-4:  understand => understand-01

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	did	_	VBD	VBD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	understand	_	VB	VB	_	0	root	_	_
5	why	_	WRB	WRB	_	9	advmod	_	_
6	it	_	PRP	PRP	_	9	nsubj	_	_
7	was	_	VBD	VBD	_	9	cop	_	_
8	so	_	RB	RB	_	9	advmod	_	_
9	important	_	JJ	JJ	_	4	advcl	_	_
10	that	_	IN	IN	_	13	mark	_	_
11	sheep	_	NN	NN	_	13	nsubj	_	_
12	should	_	MD	MD	_	13	aux	_	_
13	eat	_	VB	VB	_	9	ccomp	_	_
14	little	_	JJ	JJ	_	15	amod	_	_
15	bushes	_	NNS	NNS	_	13	dobj	_	_
16	.	_	.	.	_	4	punct	_	_

Oracle:
(b / bush, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(i2 / important, domain, r / recommend-01)
(i2 / important, mod, s2 / so)
(r / recommend-01, ARG1, e / eat-01)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, i2 / important)

Input(Some(Graph((understand-01 :ARG1 (important :ARG1-of (cause-01 :ARG0 amr-unknown) :domain (recommend-01 :ARG1 (eat-01 :ARG1 (bush :mod little) :ARG0 sheep)) :mod so) :ARG0 i :polarity -),ArrayBuffer(Span(3,4,List(0),understand,understand-01,false), Span(8,9,List(1),important,important,false), Span(11,12,List(2),should,recommend-01,false), Span(12,13,List(3),eat,eat-01,false), Span(14,15,List(4),bushes,bush,false), Span(13,14,List(5),little,little,false), Span(10,11,List(6),sheep,sheep,false), Span(7,8,List(7),so,so,false), Span(0,1,List(8),I,i,false)),Map(2 -> recommend-01, 5 -> little, 8 -> i, 7 -> so, 1 -> important, 4 -> bush, 6 -> sheep, 0 -> understand-01, 3 -> eat-01),Map(e -> eat-01, s2 -> so, b -> bush, s -> sheep, i2 -> important, i -> i, r -> recommend-01, l -> little, u -> understand-01))),[Ljava.lang.String;@78e4deb0,Annotation([Ljava.lang.String;@6e9175d8,[Ljava.lang.String;@7d0b7e3c,[Ljava.lang.String;@15bb5034),Annotation([Ljava.lang.String;@4b741d6d,[Ljava.lang.String;@2eae8e6e,[Ledu.cmu.lti.nlp.amr.Dependency;@8f2ef19),Annotation([Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b,[Ljava.lang.String;@7674f035),Annotation([Ljava.lang.String;@69e153c5,[Ljava.lang.String;@173ed316,[Ledu.cmu.lti.nlp.amr.Entity;@25ce9dc4))
AMR:
(b / bush, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(i2 / important, degree, s2 / so)
(r / recommend-01, ARG0, i2 / important)
(r / recommend-01, ARG1, e / eat-01)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, s2 / so)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 77,106 microseconds
Sentence: But the little prince added : " Then it follows that they also eat baobabs ? "

Oracle Span 1:  added => add-01
Oracle Span 2:  also => also
Oracle Span 3:  baobabs => baobab
Oracle Span 4:  But => contrast-01
Oracle Span 5:  eat => eat-01
Oracle Span 6:  follows => follow-05
Oracle Span 7:  little => little
Oracle Span 8:  prince => prince
Oracle Span 9:  they => they
Spans:
Span 4-5:  added => add-01
Span 12-13:  also => also
Span 14-15:  baobabs => baobab
Span 0-1:  But => contrast-01
Span 13-14:  eat => eat-01
Span 9-10:  follows => follow-05
Span 2-3:  little => little
Span 3-4:  prince => prince
Span 11-12:  they => they

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 4-5:  added => add-01
Oracle Span 12-13:  also => also
Oracle Span 14-15:  baobabs => baobab
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  eat => eat-01
Oracle Span 9-10:  follows => follow-05
Oracle Span 2-3:  little => little
Oracle Span 3-4:  prince => prince
Oracle Span 11-12:  they => they

Dependencies:
1	But	_	CC	CC	_	5	cc	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	added	_	VBD	VBD	_	0	root	_	_
6	:	_	:	:	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_
8	Then	_	RB	RB	_	10	advmod	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	follows	_	VBZ	VBZ	_	5	ccomp	_	_
11	that	_	IN	IN	_	14	mark	_	_
12	they	_	PRP	PRP	_	14	nsubj	_	_
13	also	_	RB	RB	_	14	advmod	_	_
14	eat	_	VBP	VBP	_	10	ccomp	_	_
15	baobabs	_	NNS	NNS	_	14	dobj	_	_
16	?	_	.	.	_	5	punct	_	_
17	"	_	''	''	_	5	punct	_	_

Oracle:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, f / follow-05)
(c / contrast-01, ARG1, a / add-01)
(e / eat-01, ARG0, t / they)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, mod, a2 / also)
(f / follow-05, ARG1, e / eat-01)
(p / prince, mod, l / little)

Input(Some(Graph((contrast-01 :ARG1 (add-01 :ARG1 (follow-05 :ARG1-of have-condition-91 :ARG1 (eat-01 :mod also :ARG1 baobab :ARG0 they) :mode interrogative) :ARG0 (prince :mod little))),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(4,5,List(1),added,add-01,false), Span(9,10,List(2),follows,follow-05,false), Span(13,14,List(3),eat,eat-01,false), Span(12,13,List(4),also,also,false), Span(14,15,List(5),baobabs,baobab,false), Span(11,12,List(6),they,they,false), Span(3,4,List(7),prince,prince,false), Span(2,3,List(8),little,little,false)),Map(2 -> follow-05, 5 -> baobab, 8 -> little, 7 -> prince, 1 -> add-01, 4 -> also, 6 -> they, 0 -> contrast-01, 3 -> eat-01),Map(e -> eat-01, t -> they, b -> baobab, p -> prince, a -> add-01, a2 -> also, l -> little, c -> contrast-01, f -> follow-05))),[Ljava.lang.String;@74ea2410,Annotation([Ljava.lang.String;@17f62e33,[Ljava.lang.String;@76b1e9b8,[Ljava.lang.String;@27406a17),Annotation([Ljava.lang.String;@2af004b,[Ljava.lang.String;@248e319b,[Ledu.cmu.lti.nlp.amr.Dependency;@5d0bf09b),Annotation([Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb,[Ljava.lang.String;@563f38c4),Annotation([Ljava.lang.String;@543295b0,[Ljava.lang.String;@54422e18,[Ledu.cmu.lti.nlp.amr.Entity;@117159c0))
AMR:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, f / follow-05)
(c / contrast-01, ARG2, a / add-01)
(e / eat-01, ARG0, t / they)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, mod, a2 / also)
(f / follow-05, ARG1, e / eat-01)
(p / prince, mod, l / little)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.2
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 46,725 microseconds
Sentence: I pointed out to the little prince that baobabs were not little bushes , but , on the contrary , trees as big as castles ; and that even if he took a whole herd of elephants away with him , the herd would not eat up one single baobab .

Oracle Span 1:  ; => and
Oracle Span 2:  away => away
Oracle Span 3:  baobab => baobab
Oracle Span 4:  baobabs => baobab
Oracle Span 5:  big => big
Oracle Span 6:  bushes => bush
Oracle Span 7:  castles => castle
Oracle Span 8:  elephants => elephant
Oracle Span 9:  even => even-if
Oracle Span 10:  herd => herd
Oracle Span 11:  I => i
Oracle Span 12:  little => little
Oracle Span 13:  little => little
Oracle Span 14:  one => 1
Oracle Span 15:  pointed => point-out-02
Oracle Span 16:  prince => prince
Oracle Span 17:  single => single-02
Oracle Span 18:  took => take-01
Oracle Span 19:  trees => tree
Oracle Span 20:  whole => whole
Spans:
Span 25-26:  ; => and
Span 37-38:  away => away
Span 49-50:  baobab => baobab
Span 8-9:  baobabs => baobab
Span 22-23:  big => big
Span 12-13:  bushes => bush
Span 24-25:  castles => castle
Span 36-37:  elephants => elephant
Span 28-29:  even => even-if
Span 34-35:  herd => herd
Span 0-1:  I => i
Span 5-6:  little => little
Span 11-12:  little => little
Span 47-48:  one => 1
Span 1-2:  pointed => point-out-02
Span 6-7:  prince => prince
Span 48-49:  single => single-02
Span 31-32:  took => take-01
Span 20-21:  trees => tree
Span 33-34:  whole => whole

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 25-26:  ; => and
Oracle Span 37-38:  away => away
Oracle Span 49-50:  baobab => baobab
Oracle Span 8-9:  baobabs => baobab
Oracle Span 22-23:  big => big
Oracle Span 12-13:  bushes => bush
Oracle Span 24-25:  castles => castle
Oracle Span 36-37:  elephants => elephant
Oracle Span 28-29:  even => even-if
Oracle Span 34-35:  herd => herd
Oracle Span 0-1:  I => i
Oracle Span 5-6:  little => little
Oracle Span 11-12:  little => little
Oracle Span 47-48:  one => 1
Oracle Span 1-2:  pointed => point-out-02
Oracle Span 6-7:  prince => prince
Oracle Span 48-49:  single => single-02
Oracle Span 31-32:  took => take-01
Oracle Span 20-21:  trees => tree
Oracle Span 33-34:  whole => whole

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	pointed	_	VBD	VBD	_	0	root	_	_
3	out	_	RP	RP	_	2	prt	_	_
4	to	_	TO	TO	_	2	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	little	_	JJ	JJ	_	7	amod	_	_
7	prince	_	NN	NN	_	4	pobj	_	_
8	that	_	IN	IN	_	13	mark	_	_
9	baobabs	_	NNS	NNS	_	13	nsubj	_	_
10	were	_	VBD	VBD	_	13	cop	_	_
11	not	_	RB	RB	_	13	neg	_	_
12	little	_	RB	RB	_	13	advmod	_	_
13	bushes	_	JJ	JJ	_	2	ccomp	_	_
14	,	_	,	,	_	13	punct	_	_
15	but	_	CC	CC	_	13	cc	_	_
16	,	_	,	,	_	13	punct	_	_
17	on	_	IN	IN	_	13	conj	_	_
18	the	_	DT	DT	_	19	det	_	_
19	contrary	_	NN	NN	_	17	pobj	_	_
20	,	_	,	,	_	19	punct	_	_
21	trees	_	NNS	NNS	_	19	appos	_	_
22	as	_	IN	IN	_	21	prep	_	_
23	big	_	JJ	JJ	_	22	pobj	_	_
24	as	_	IN	IN	_	23	prep	_	_
25	castles	_	NNS	NNS	_	24	pobj	_	_
26	;	_	:	:	_	13	punct	_	_
27	and	_	CC	CC	_	13	cc	_	_
28	that	_	IN	IN	_	46	mark	_	_
29	even	_	RB	RB	_	32	advmod	_	_
30	if	_	IN	IN	_	32	mark	_	_
31	he	_	PRP	PRP	_	32	nsubj	_	_
32	took	_	VBD	VBD	_	46	advcl	_	_
33	a	_	DT	DT	_	35	det	_	_
34	whole	_	JJ	JJ	_	35	amod	_	_
35	herd	_	NN	NN	_	32	dobj	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	elephants	_	NNS	NNS	_	36	pobj	_	_
38	away	_	RB	RB	_	39	advmod	_	_
39	with	_	IN	IN	_	32	prep	_	_
40	him	_	PRP	PRP	_	39	pobj	_	_
41	,	_	,	,	_	46	punct	_	_
42	the	_	DT	DT	_	43	det	_	_
43	herd	_	NN	NN	_	46	nsubj	_	_
44	would	_	MD	MD	_	46	aux	_	_
45	not	_	RB	RB	_	46	neg	_	_
46	eat	_	VB	VB	_	13	conj	_	_
47	up	_	RP	RP	_	46	prt	_	_
48	one	_	CD	CD	_	50	num	_	_
49	single	_	JJ	JJ	_	50	amod	_	_
50	baobab	_	NN	NN	_	46	dobj	_	_
51	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, t2 / tree)
(b / baobab, quant, 1 / 1)
(b3 / bush, domain, b2 / baobab)
(b3 / bush, mod, l3 / little)
(b5 / big, compared-to, c / castle)
(e2 / elephant, consist, h / herd)
(e3 / even-if, op, t / take-01)
(h / herd, mod, w / whole)
(p / prince, mod, l2 / little)
(p2 / point-out-02, ARG0, i / i)
(p2 / point-out-02, ARG1, a / and)
(p2 / point-out-02, beneficiary, p / prince)
(s / single-02, ARG1, b / baobab)
(t / take-01, ARG0, p / prince)
(t / take-01, ARG1, h / herd)
(t / take-01, ARG3, a2 / away)
(t2 / tree, domain, b2 / baobab)
(t2 / tree, mod, b5 / big)

Input(Some(Graph((point-out-02 :beneficiary (prince :mod little) :ARG1 (and :op (eat-up-02 :polarity - :ARG1 (baobab :ARG1-of single-02 :quant 1) :concession (even-if :op (take-01 :ARG3 away :ARG1 (herd :mod whole :consist-of elephant) :ARG0 prince)) :ARG0 herd) :op (tree :ARG1-of (instead-of-91 :ARG2 (bush :mod little :domain baobab)) :domain baobab :mod (big :degree equal :compared-to castle))) :ARG0 i),ArrayBuffer(Span(0,1,List(0),I,i,false), Span(25,26,List(1),;,and,false), Span(8,9,List(2),baobabs,baobab,false), Span(48,49,List(3),single,single-02,false), Span(47,48,List(4),one,1,false), Span(31,32,List(5),took,take-01,false), Span(37,38,List(6),away,away,false), Span(34,35,List(7),herd,herd,false), Span(33,34,List(8),whole,whole,false), Span(36,37,List(9),elephants,elephant,false), Span(20,21,List(10),trees,tree,false), Span(12,13,List(11),bushes,bush,false), Span(5,6,List(12),little,little,false), Span(49,50,List(13),baobab,baobab,false), Span(22,23,List(14),big,big,false), Span(24,25,List(15),castles,castle,false), Span(6,7,List(16),prince,prince,false), Span(11,12,List(17),little,little,false), Span(1,2,List(18),pointed,point-out-02,false), Span(28,29,List(19),even,even-if,false)),Map(2 -> baobab, 5 -> take-01, 12 -> little, 15 -> castle, 8 -> whole, 18 -> point-out-02, 7 -> herd, 17 -> little, 1 -> and, 4 -> 1, 11 -> bush, 14 -> big, 6 -> away, 9 -> elephant, 0 -> i, 16 -> prince, 19 -> even-if, 10 -> tree, 3 -> single-02, 13 -> baobab),Map(b3 -> bush, w -> whole, h -> herd, t -> take-01, b -> baobab, b2 -> baobab, p2 -> point-out-02, b5 -> big, e2 -> elephant, l3 -> little, s -> single-02, 1 -> 1, p -> prince, a -> and, t2 -> tree, l2 -> little, a2 -> away, i -> i, c -> castle, e3 -> even-if))),[Ljava.lang.String;@3e27ba32,Annotation([Ljava.lang.String;@7ef82753,[Ljava.lang.String;@3b0fe47a,[Ljava.lang.String;@202b0582),Annotation([Ljava.lang.String;@235ecd9f,[Ljava.lang.String;@1ca3b418,[Ledu.cmu.lti.nlp.amr.Dependency;@58cbafc2),Annotation([Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0,[Ljava.lang.String;@74d1dc36),Annotation([Ljava.lang.String;@7161d8d1,[Ljava.lang.String;@74e28667,[Ledu.cmu.lti.nlp.amr.Entity;@1cf6d1be))
AMR:
(a / and, op, c / castle)
(a2 / away, op, t / take-01)
(b2 / baobab, quant, 1 / 1)
(b3 / bush, degree, l2 / little)
(b3 / bush, domain, b / baobab)
(b5 / big, op, p2 / point-out-02)
(h / herd, mod, w / whole)
(p / prince, mod, l3 / little)
(p2 / point-out-02, ARG0, i / i)
(p2 / point-out-02, ARG1, b3 / bush)
(p2 / point-out-02, ARG2, p / prince)
(s / single-02, ARG0, a / and)
(s / single-02, ARG1, b2 / baobab)
(t / take-01, ARG0, b2 / baobab)
(t / take-01, ARG1, e2 / elephant)
(t / take-01, ARG2, h / herd)
(t / take-01, condition, p2 / point-out-02)
(t / take-01, time, e3 / even-if)
(t2 / tree, op, s / single-02)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1.1.2
Decoded in 835,889 microseconds
Sentence: The idea of the herd of elephants made the little prince laugh .

Oracle Span 1:  elephants => elephant
Oracle Span 2:  herd => herd
Oracle Span 3:  idea => idea
Oracle Span 4:  laugh => laugh-01
Oracle Span 5:  little => little
Oracle Span 6:  made => make-02
Oracle Span 7:  prince => prince
Spans:
Span 6-7:  elephants => elephant
Span 4-5:  herd => herd
Span 1-2:  idea => idea
Span 11-12:  laugh => laugh-01
Span 9-10:  little => little
Span 7-8:  made => make-02
Span 10-11:  prince => prince

Langrangian relaxation converged after 79 iterations. Delta = 0.0
Oracle Span 6-7:  elephants => elephant
Oracle Span 4-5:  herd => herd
Oracle Span 1-2:  idea => idea
Oracle Span 11-12:  laugh => laugh-01
Oracle Span 9-10:  little => little
Oracle Span 7-8:  made => make-02
Oracle Span 10-11:  prince => prince

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	idea	_	NN	NN	_	8	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	herd	_	NN	NN	_	3	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	elephants	_	NNS	NNS	_	6	pobj	_	_
8	made	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	12	det	_	_
10	little	_	JJ	JJ	_	12	amod	_	_
11	prince	_	NN	NN	_	12	nn	_	_
12	laugh	_	NN	NN	_	8	dobj	_	_
13	.	_	.	.	_	8	punct	_	_

Oracle:
(e / elephant, consist, h / herd)
(i / idea, topic, h / herd)
(l / laugh-01, ARG0, p / prince)
(m / make-02, ARG0, i / idea)
(m / make-02, ARG1, l / laugh-01)
(p / prince, mod, l2 / little)

Input(Some(Graph((make-02 :ARG1 (laugh-01 :ARG0 (prince :mod little)) :ARG0 (idea :topic (herd :consist-of elephant))),ArrayBuffer(Span(7,8,List(0),made,make-02,false), Span(11,12,List(1),laugh,laugh-01,false), Span(10,11,List(2),prince,prince,false), Span(9,10,List(3),little,little,false), Span(1,2,List(4),idea,idea,false), Span(4,5,List(5),herd,herd,false), Span(6,7,List(6),elephants,elephant,false)),Map(2 -> prince, 5 -> herd, 1 -> laugh-01, 4 -> idea, 6 -> elephant, 0 -> make-02, 3 -> little),Map(e -> elephant, h -> herd, m -> make-02, p -> prince, i -> idea, l2 -> little, l -> laugh-01))),[Ljava.lang.String;@663c9e7a,Annotation([Ljava.lang.String;@19e4653c,[Ljava.lang.String;@795509d9,[Ljava.lang.String;@53045c6c),Annotation([Ljava.lang.String;@5149d738,[Ljava.lang.String;@6bbe85a8,[Ledu.cmu.lti.nlp.amr.Dependency;@3a7442c7),Annotation([Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a,[Ljava.lang.String;@4b013c76),Annotation([Ljava.lang.String;@53fb3dab,[Ljava.lang.String;@cb0755b,[Ledu.cmu.lti.nlp.amr.Entity;@33065d67))
AMR:
(i / idea, topic, h / herd)
(l / laugh-01, ARG0, i / idea)
(l / laugh-01, mod, l2 / little)
(m / make-02, ARG0, p / prince)
(m / make-02, ARG1, l / laugh-01)
(m / make-02, ARG2, e / elephant)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 276,075 microseconds
Sentence: " We would have to put them one on top of the other , " he said .

Oracle Span 1:  he => he
Oracle Span 2:  said => say-01
Oracle Span 3:  We => we
Spans:
Span 15-16:  he => he
Span 16-17:  said => say-01
Span 1-2:  We => we

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 15-16:  he => he
Oracle Span 16-17:  said => say-01
Oracle Span 1-2:  We => we

Dependencies:
1	"	_	''	''	_	17	punct	_	_
2	We	_	PRP	PRP	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	have	_	VB	VB	_	17	ccomp	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	put	_	VB	VB	_	4	xcomp	_	_
7	them	_	PRP	PRP	_	8	nsubj	_	_
8	one	_	CD	CD	_	6	xcomp	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	top	_	NN	NN	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	other	_	JJ	JJ	_	11	pobj	_	_
14	,	_	,	,	_	17	punct	_	_
15	"	_	''	''	_	17	punct	_	_
16	he	_	PRP	PRP	_	17	nsubj	_	_
17	said	_	VBD	VBD	_	0	root	_	_
18	.	_	.	.	_	17	punct	_	_

Oracle:
(s / say-01, ARG0, h / he)

Input(Some(Graph((say-01 :ARG1 (obligate-01 :ARG2 (stack-01 :ARG0 we :ARG1 they)) :ARG0 he),ArrayBuffer(Span(16,17,List(0),said,say-01,false), Span(1,2,List(1),We,we,false), Span(15,16,List(2),he,he,false)),Map(2 -> he, 1 -> we, 0 -> say-01),Map(w -> we, h -> he, s -> say-01))),[Ljava.lang.String;@712625fd,Annotation([Ljava.lang.String;@7bba5817,[Ljava.lang.String;@742ff096,[Ljava.lang.String;@75437611),Annotation([Ljava.lang.String;@350aac89,[Ljava.lang.String;@1c5920df,[Ledu.cmu.lti.nlp.amr.Dependency;@17f9d882),Annotation([Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3,[Ljava.lang.String;@4c60d6e9),Annotation([Ljava.lang.String;@15043a2f,[Ljava.lang.String;@4a83a74a,[Ledu.cmu.lti.nlp.amr.Entity;@1349883))
AMR:
(s / say-01, ARG0, w / we)
(s / say-01, ARG2, h / he)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 28,046 microseconds
Sentence: But he made a wise comment : " Before they grow so big , the baobabs start out by being little . "

Oracle Span 1:  baobabs => baobab
Oracle Span 2:  Before => before
Oracle Span 3:  big => big
Oracle Span 4:  But => contrast-01
Oracle Span 5:  comment => comment-01
Oracle Span 6:  grow => grow-02
Oracle Span 7:  he => he
Oracle Span 8:  little => little
Oracle Span 9:  so => so
Oracle Span 10:  start => start-out-05
Oracle Span 11:  wise => wise
Spans:
Span 15-16:  baobabs => baobab
Span 8-9:  Before => before
Span 12-13:  big => big
Span 0-1:  But => contrast-01
Span 5-6:  comment => comment-01
Span 10-11:  grow => grow-02
Span 1-2:  he => he
Span 20-21:  little => little
Span 11-12:  so => so
Span 16-17:  start => start-out-05
Span 4-5:  wise => wise

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 15-16:  baobabs => baobab
Oracle Span 8-9:  Before => before
Oracle Span 12-13:  big => big
Oracle Span 0-1:  But => contrast-01
Oracle Span 5-6:  comment => comment-01
Oracle Span 10-11:  grow => grow-02
Oracle Span 1-2:  he => he
Oracle Span 20-21:  little => little
Oracle Span 11-12:  so => so
Oracle Span 16-17:  start => start-out-05
Oracle Span 4-5:  wise => wise

Dependencies:
1	But	_	CC	CC	_	3	cc	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	made	_	VBD	VBD	_	0	root	_	_
4	a	_	DT	DT	_	6	det	_	_
5	wise	_	JJ	JJ	_	6	amod	_	_
6	comment	_	NN	NN	_	3	dobj	_	_
7	:	_	:	:	_	3	punct	_	_
8	"	_	''	''	_	3	punct	_	_
9	Before	_	IN	IN	_	11	mark	_	_
10	they	_	PRP	PRP	_	11	nsubj	_	_
11	grow	_	VBP	VBP	_	17	advcl	_	_
12	so	_	RB	RB	_	13	advmod	_	_
13	big	_	JJ	JJ	_	11	acomp	_	_
14	,	_	,	,	_	17	punct	_	_
15	the	_	DT	DT	_	16	det	_	_
16	baobabs	_	NNS	NNS	_	17	nsubj	_	_
17	start	_	VBP	VBP	_	3	ccomp	_	_
18	out	_	RP	RP	_	17	prt	_	_
19	by	_	IN	IN	_	17	prep	_	_
20	being	_	VBG	VBG	_	21	cop	_	_
21	little	_	JJ	JJ	_	19	pcomp	_	_
22	.	_	.	.	_	3	punct	_	_
23	"	_	''	''	_	3	punct	_	_

Oracle:
(b4 / before, op, g / grow-02)
(b5 / big, degree, s2 / so)
(c / comment-01, ARG0, h / he)
(c / comment-01, ARG1, s / start-out-05)
(c / comment-01, manner, w / wise)
(c2 / contrast-01, ARG2, c / comment-01)
(g / grow-02, ARG1, b2 / baobab)
(g / grow-02, ARG2, b5 / big)
(s / start-out-05, ARG0, b2 / baobab)
(s / start-out-05, ARG2, l / little)
(s / start-out-05, time, b4 / before)

Input(Some(Graph((contrast-01 :ARG2 (comment-01 :manner wise :ARG1 (start-out-05 :time (before :op (grow-02 :ARG2 (big :degree so) :ARG1 baobab)) :ARG2 little :ARG0 baobab) :ARG0 he)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(5,6,List(1),comment,comment-01,false), Span(4,5,List(2),wise,wise,false), Span(15,16,List(3),baobabs,baobab,false), Span(20,21,List(4),little,little,false), Span(8,9,List(5),Before,before,false), Span(10,11,List(6),grow,grow-02,false), Span(12,13,List(7),big,big,false), Span(11,12,List(8),so,so,false), Span(1,2,List(9),he,he,false), Span(16,17,List(10),start,start-out-05,false)),Map(2 -> wise, 5 -> before, 8 -> so, 7 -> big, 1 -> comment-01, 4 -> little, 6 -> grow-02, 9 -> he, 0 -> contrast-01, 10 -> start-out-05, 3 -> baobab),Map(w -> wise, h -> he, s2 -> so, b2 -> baobab, b5 -> big, s -> start-out-05, g -> grow-02, b4 -> before, l -> little, c -> comment-01, c2 -> contrast-01))),[Ljava.lang.String;@4b29d1d2,Annotation([Ljava.lang.String;@7f485fda,[Ljava.lang.String;@28261e8e,[Ljava.lang.String;@d737b89),Annotation([Ljava.lang.String;@8519cb4,[Ljava.lang.String;@35dab4eb,[Ledu.cmu.lti.nlp.amr.Dependency;@2d901eb0),Annotation([Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845,[Ljava.lang.String;@5f049ea1),Annotation([Ljava.lang.String;@72cc7e6f,[Ljava.lang.String;@5afa3c9,[Ledu.cmu.lti.nlp.amr.Entity;@72035809))
AMR:
(b4 / before, op, g / grow-02)
(b5 / big, degree, s2 / so)
(c / comment-01, ARG0, h / he)
(c / comment-01, mod, w / wise)
(c2 / contrast-01, ARG1, l / little)
(c2 / contrast-01, ARG2, c / comment-01)
(g / grow-02, ARG1, s2 / so)
(s / start-out-05, ARG0, h / he)
(s / start-out-05, ARG1, b2 / baobab)
(s / start-out-05, time, g / grow-02)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 318,459 microseconds
Sentence: " That is strictly correct , "

Oracle Span 1:  correct => correct-02
Oracle Span 2:  strictly => strict
Oracle Span 3:  That => that
Spans:
Span 4-5:  correct => correct-02
Span 3-4:  strictly => strict
Span 1-2:  That => that

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  correct => correct-02
Oracle Span 3-4:  strictly => strict
Oracle Span 1-2:  That => that

Dependencies:
1	"	_	VB	VB	_	0	root	_	_
2	That	_	DT	DT	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	strictly	_	RB	RB	_	5	advmod	_	_
5	correct	_	JJ	JJ	_	1	ccomp	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_

Oracle:
(c / correct-02, ARG1, t / that)
(c / correct-02, mod, s / strict)

Input(Some(Graph((correct-02 :mod strict :ARG1 that),ArrayBuffer(Span(4,5,List(0),correct,correct-02,false), Span(1,2,List(1),That,that,false), Span(3,4,List(2),strictly,strict,false)),Map(2 -> strict, 1 -> that, 0 -> correct-02),Map(t -> that, s -> strict, c -> correct-02))),[Ljava.lang.String;@909217e,Annotation([Ljava.lang.String;@18271936,[Ljava.lang.String;@606e4010,[Ljava.lang.String;@8458f04),Annotation([Ljava.lang.String;@48075da3,[Ljava.lang.String;@68c9133c,[Ledu.cmu.lti.nlp.amr.Dependency;@7a35b0f5),Annotation([Ljava.lang.String;@5e2c3d18,[Ljava.lang.String;@2cb4893b,[Ljava.lang.String;@cc43f62),Annotation([Ljava.lang.String;@5b218417,[Ljava.lang.String;@645aa696,[Ledu.cmu.lti.nlp.amr.Entity;@6caf0677))
AMR:
(c / correct-02, ARG0, t / that)
(c / correct-02, degree, s / strict)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 20,548 microseconds
Sentence: I said .

Oracle Span 1:  I => i
Oracle Span 2:  said => say-01
Spans:
Span 0-1:  I => i
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 1-2:  said => say-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	.	_	.	.	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)

Input(Some(Graph((say-01 :ARG0 i),ArrayBuffer(Span(1,2,List(0),said,say-01,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> say-01),Map(s -> say-01, i -> i))),[Ljava.lang.String;@413d1baf,Annotation([Ljava.lang.String;@16eb3ea3,[Ljava.lang.String;@273444fe,[Ljava.lang.String;@33bc72d1),Annotation([Ljava.lang.String;@1a75e76a,[Ljava.lang.String;@5524cca1,[Ledu.cmu.lti.nlp.amr.Dependency;@5032714f),Annotation([Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6,[Ljava.lang.String;@4681c175),Annotation([Ljava.lang.String;@57a78e3,[Ljava.lang.String;@402c4085,[Ledu.cmu.lti.nlp.amr.Entity;@6fa51cd4))
AMR:
(s / say-01, ARG0, i / i)

WARNING: makeIds can't find span Id: 0.0
Decoded in 7,895 microseconds
Sentence: " But why do you want the sheep to eat the little baobabs ? "

Oracle Span 1:  baobabs => baobab
Oracle Span 2:  But => contrast-01
Oracle Span 3:  eat => eat-01
Oracle Span 4:  little => little
Oracle Span 5:  sheep => sheep
Oracle Span 6:  want => want-01
Oracle Span 7:  you => you
Spans:
Span 12-13:  baobabs => baobab
Span 1-2:  But => contrast-01
Span 9-10:  eat => eat-01
Span 11-12:  little => little
Span 7-8:  sheep => sheep
Span 5-6:  want => want-01
Span 4-5:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  baobabs => baobab
Oracle Span 1-2:  But => contrast-01
Oracle Span 9-10:  eat => eat-01
Oracle Span 11-12:  little => little
Oracle Span 7-8:  sheep => sheep
Oracle Span 5-6:  want => want-01
Oracle Span 4-5:  you => you

Dependencies:
1	"	_	UH	UH	_	6	discourse	_	_
2	But	_	UH	UH	_	1	dep	_	_
3	why	_	WRB	WRB	_	6	advmod	_	_
4	do	_	VBP	VBP	_	6	aux	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	want	_	VB	VB	_	0	root	_	_
7	the	_	DT	DT	_	8	det	_	_
8	sheep	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	eat	_	VB	VB	_	8	vmod	_	_
11	the	_	DT	DT	_	13	det	_	_
12	little	_	JJ	JJ	_	13	amod	_	_
13	baobabs	_	NNS	NNS	_	10	dobj	_	_
14	?	_	.	.	_	6	punct	_	_
15	"	_	''	''	_	6	punct	_	_

Oracle:
(b / baobab, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / baobab)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, e / eat-01)

Input(Some(Graph((contrast-01 :ARG2 (cause-01 :ARG0 amr-unknown :ARG1 (want-01 :ARG1 (eat-01 :ARG1 (baobab :mod little) :ARG0 sheep) :ARG0 you))),ArrayBuffer(Span(1,2,List(0),But,contrast-01,false), Span(5,6,List(1),want,want-01,false), Span(9,10,List(2),eat,eat-01,false), Span(12,13,List(3),baobabs,baobab,false), Span(11,12,List(4),little,little,false), Span(7,8,List(5),sheep,sheep,false), Span(4,5,List(6),you,you,false)),Map(2 -> eat-01, 5 -> sheep, 1 -> want-01, 4 -> little, 6 -> you, 0 -> contrast-01, 3 -> baobab),Map(e -> eat-01, w -> want-01, b -> baobab, s -> sheep, y -> you, l -> little, c -> contrast-01))),[Ljava.lang.String;@2767e23c,Annotation([Ljava.lang.String;@710c2b53,[Ljava.lang.String;@5386659f,[Ljava.lang.String;@14028087),Annotation([Ljava.lang.String;@cecf639,[Ljava.lang.String;@1caa0244,[Ledu.cmu.lti.nlp.amr.Dependency;@7ce026d3),Annotation([Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb,[Ljava.lang.String;@5b247367),Annotation([Ljava.lang.String;@268f106e,[Ljava.lang.String;@6e9a5ed8,[Ledu.cmu.lti.nlp.amr.Entity;@7e057f43))
AMR:
(b / baobab, mod, l / little)
(c / contrast-01, ARG2, w / want-01)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / baobab)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, s / sheep)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 32,683 microseconds
Sentence: He answered me at once , " Oh , come , come ! " , as if he were speaking of something that was self - evident .

Oracle Span 1:  answered => answer-01
Oracle Span 2:  come => come-on-25
Oracle Span 3:  evident => evidence-01
Oracle Span 4:  He => he
Oracle Span 5:  something => something
Oracle Span 6:  speaking => speak-01
Spans:
Span 1-2:  answered => answer-01
Span 9-10:  come => come-on-25
Span 26-27:  evident => evidence-01
Span 0-1:  He => he
Span 21-22:  something => something
Span 19-20:  speaking => speak-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of were in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of speaking in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of was in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of self in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of evident in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Langrangian relaxation converged after 17 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of were in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of speaking in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of was in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of self in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of evident in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Oracle Span 1-2:  answered => answer-01
Oracle Span 9-10:  come => come-on-25
Oracle Span 26-27:  evident => evidence-01
Oracle Span 0-1:  He => he
Oracle Span 21-22:  something => something
Oracle Span 19-20:  speaking => speak-01

Dependencies:
1	He	_	PRP	PRP	_	12	nsubj	_	_
2	answered	_	VBN	VBN	_	1	vmod	_	_
3	me	_	PRP	PRP	_	2	dobj	_	_
4	at	_	IN	IN	_	2	prep	_	_
5	once	_	RB	RB	_	4	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	"	_	''	''	_	2	punct	_	_
8	Oh	_	UH	UH	_	10	discourse	_	_
9	,	_	,	,	_	10	punct	_	_
10	come	_	VB	VB	_	2	dep	_	_
11	,	_	,	,	_	12	punct	_	_
12	come	_	VB	VB	_	0	root	_	_
13	!	_	.	.	_	12	punct	_	_
14	"	_	''	''	_	12	punct	_	_
1	,	_	,	,	_	3	punct	_	_
2	as	_	RB	RB	_	3	advmod	_	_
3	if	_	IN	IN	_	6	nsubj	_	_
4	he	_	PRP	PRP	_	3	pobj	_	_
5	were	_	VBD	VBD	_	6	aux	_	_
6	speaking	_	VBG	VBG	_	0	root	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	something	_	NN	NN	_	7	pobj	_	_
9	that	_	WDT	WDT	_	11	nsubj	_	_
10	was	_	VBD	VBD	_	11	cop	_	_
11	self	_	JJ	JJ	_	8	rcmod	_	_
12	-	_	:	:	_	11	punct	_	_
13	evident	_	JJ	JJ	_	11	dep	_	_
14	.	_	.	.	_	6	punct	_	_

Oracle:
(a / answer-01, ARG0, h / he)
(a / answer-01, ARG2, c / come-on-25)
(a / answer-01, conj-as-if, s / speak-01)
(e / evidence-01, ARG0, s2 / something)
(e / evidence-01, ARG1, s2 / something)
(s / speak-01, ARG0, h / he)
(s / speak-01, ARG1, s2 / something)

Input(Some(Graph((answer-01 :conj-as-if (speak-01 :ARG1 (something :ARG0-of (evidence-01 :ARG1 something)) :ARG0 he) :time immediate :ARG2 come-on-25 :ARG1 i :ARG0 he),ArrayBuffer(Span(1,2,List(0),answered,answer-01,false), Span(19,20,List(1),speaking,speak-01,false), Span(21,22,List(2),something,something,false), Span(0,1,List(3),He,he,false), Span(26,27,List(4),evident,evidence-01,false), Span(9,10,List(5),come,come-on-25,false)),Map(2 -> something, 5 -> come-on-25, 1 -> speak-01, 4 -> evidence-01, 0 -> answer-01, 3 -> he),Map(e -> evidence-01, h -> he, s2 -> something, s -> speak-01, a -> answer-01, c -> come-on-25))),[Ljava.lang.String;@6c284af,Annotation([Ljava.lang.String;@5890e879,[Ljava.lang.String;@6440112d,[Ljava.lang.String;@31ea9581),Annotation([Ljava.lang.String;@231f98ef,[Ljava.lang.String;@7c137fd5,[Ledu.cmu.lti.nlp.amr.Dependency;@183ec003),Annotation([Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4,[Ljava.lang.String;@451001e5),Annotation([Ljava.lang.String;@2b40ff9c,[Ljava.lang.String;@3e08ff24,[Ledu.cmu.lti.nlp.amr.Entity;@4d1c005e))
AMR:
(a / answer-01, ARG0, h / he)
(a / answer-01, ARG1, c / come-on-25)
(e / evidence-01, ARG0, h / he)
(e / evidence-01, ARG1, s2 / something)
(s / speak-01, ARG0, h / he)

WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.4.0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 138,416 microseconds
Sentence: And I was obliged to make a great mental effort to solve this problem , without any assistance .

Oracle Span 1:  And => and
Oracle Span 2:  assistance => assist-01
Oracle Span 3:  effort => effort-01
Oracle Span 4:  great => great
Oracle Span 5:  I => i
Oracle Span 6:  mental => mental
Oracle Span 7:  obliged => oblige-02
Oracle Span 8:  problem => problem
Oracle Span 9:  solve => solve-01
Oracle Span 10:  this => this
Spans:
Span 0-1:  And => and
Span 17-18:  assistance => assist-01
Span 9-10:  effort => effort-01
Span 7-8:  great => great
Span 1-2:  I => i
Span 8-9:  mental => mental
Span 3-4:  obliged => oblige-02
Span 13-14:  problem => problem
Span 11-12:  solve => solve-01
Span 12-13:  this => this

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 17-18:  assistance => assist-01
Oracle Span 9-10:  effort => effort-01
Oracle Span 7-8:  great => great
Oracle Span 1-2:  I => i
Oracle Span 8-9:  mental => mental
Oracle Span 3-4:  obliged => oblige-02
Oracle Span 13-14:  problem => problem
Oracle Span 11-12:  solve => solve-01
Oracle Span 12-13:  this => this

Dependencies:
1	And	_	CC	CC	_	4	cc	_	_
2	I	_	PRP	PRP	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	obliged	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	a	_	DT	DT	_	10	det	_	_
8	great	_	JJ	JJ	_	10	amod	_	_
9	mental	_	JJ	JJ	_	10	amod	_	_
10	effort	_	NN	NN	_	6	dobj	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	solve	_	VB	VB	_	6	xcomp	_	_
13	this	_	DT	DT	_	14	det	_	_
14	problem	_	NN	NN	_	12	dobj	_	_
15	,	_	,	,	_	12	punct	_	_
16	without	_	IN	IN	_	12	prep	_	_
17	any	_	DT	DT	_	18	det	_	_
18	assistance	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, o / oblige-02)
(a2 / assist-01, ARG1, i / i)
(a2 / assist-01, ARG2, s / solve-01)
(e / effort-01, ARG0, i / i)
(e / effort-01, ARG1, s / solve-01)
(e / effort-01, manner, m2 / mental)
(e / effort-01, mod, g / great)
(o / oblige-02, ARG2, e / effort-01)
(p / problem, mod, t / this)
(s / solve-01, ARG0, i / i)
(s / solve-01, ARG1, p / problem)

Input(Some(Graph((and :op (oblige-02 :ARG2 (effort-01 :mod great :manner mental :ARG1 (solve-01 :ARG2-of (assist-01 :polarity - :ARG1 i) :ARG1 (problem :mod this) :ARG0 i) :ARG0 i))),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(3,4,List(1),obliged,oblige-02,false), Span(9,10,List(2),effort,effort-01,false), Span(7,8,List(3),great,great,false), Span(8,9,List(4),mental,mental,false), Span(11,12,List(5),solve,solve-01,false), Span(13,14,List(6),problem,problem,false), Span(12,13,List(7),this,this,false), Span(1,2,List(8),I,i,false), Span(17,18,List(9),assistance,assist-01,false)),Map(2 -> effort-01, 5 -> solve-01, 8 -> i, 7 -> this, 1 -> oblige-02, 4 -> mental, 6 -> problem, 9 -> assist-01, 0 -> and, 3 -> great),Map(e -> effort-01, t -> this, m2 -> mental, s -> solve-01, p -> problem, g -> great, a -> and, a2 -> assist-01, i -> i, o -> oblige-02))),[Ljava.lang.String;@8462f31,Annotation([Ljava.lang.String;@24569dba,[Ljava.lang.String;@5ddeb7cb,[Ljava.lang.String;@70ed52de),Annotation([Ljava.lang.String;@496bc455,[Ljava.lang.String;@59402b8f,[Ledu.cmu.lti.nlp.amr.Dependency;@7188af83),Annotation([Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a,[Ljava.lang.String;@247310d0),Annotation([Ljava.lang.String;@1033576a,[Ljava.lang.String;@303cf2ba,[Ledu.cmu.lti.nlp.amr.Entity;@76494737))
AMR:
(a / and, op, o / oblige-02)
(e / effort-01, ARG0, o / oblige-02)
(e / effort-01, ARG1, s / solve-01)
(e / effort-01, mod, g / great)
(e / effort-01, mod, m2 / mental)
(o / oblige-02, ARG1, i / i)
(p / problem, mod, t / this)
(s / solve-01, ARG1, p / problem)
(s / solve-01, manner, a2 / assist-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.1
Decoded in 160,883 microseconds
Sentence: Indeed , as I learned , there were on the planet where the little prince lived -- as on all planets -- good plants and bad plants .

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  bad => bad-07
Oracle Span 4:  good => good-02
Oracle Span 5:  I => i
Oracle Span 6:  Indeed => indeed
Oracle Span 7:  learned => learn-01
Oracle Span 8:  little => little
Oracle Span 9:  lived => live-01
Oracle Span 10:  planet => planet
Oracle Span 11:  planets => planet
Oracle Span 12:  plants => plant
Oracle Span 13:  plants => plant
Oracle Span 14:  prince => prince
Spans:
Span 19-20:  all => all
Span 24-25:  and => and
Span 25-26:  bad => bad-07
Span 22-23:  good => good-02
Span 3-4:  I => i
Span 0-1:  Indeed => indeed
Span 4-5:  learned => learn-01
Span 13-14:  little => little
Span 15-16:  lived => live-01
Span 10-11:  planet => planet
Span 20-21:  planets => planet
Span 23-24:  plants => plant
Span 26-27:  plants => plant
Span 14-15:  prince => prince

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 19-20:  all => all
Oracle Span 24-25:  and => and
Oracle Span 25-26:  bad => bad-07
Oracle Span 22-23:  good => good-02
Oracle Span 3-4:  I => i
Oracle Span 0-1:  Indeed => indeed
Oracle Span 4-5:  learned => learn-01
Oracle Span 13-14:  little => little
Oracle Span 15-16:  lived => live-01
Oracle Span 10-11:  planet => planet
Oracle Span 20-21:  planets => planet
Oracle Span 23-24:  plants => plant
Oracle Span 26-27:  plants => plant
Oracle Span 14-15:  prince => prince

Dependencies:
1	Indeed	_	RB	RB	_	8	advmod	_	_
2	,	_	,	,	_	8	punct	_	_
3	as	_	IN	IN	_	5	mark	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	learned	_	VBD	VBD	_	8	advcl	_	_
6	,	_	,	,	_	8	punct	_	_
7	there	_	EX	EX	_	8	expl	_	_
8	were	_	VBD	VBD	_	0	root	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	planet	_	NN	NN	_	9	pobj	_	_
12	where	_	WRB	WRB	_	16	advmod	_	_
13	the	_	DT	DT	_	15	det	_	_
14	little	_	JJ	JJ	_	15	amod	_	_
15	prince	_	NN	NN	_	16	nsubj	_	_
16	lived	_	VBD	VBD	_	11	rcmod	_	_
17	--	_	:	:	_	19	punct	_	_
18	as	_	RB	RB	_	19	advmod	_	_
19	on	_	IN	IN	_	24	prep	_	_
20	all	_	DT	DT	_	21	det	_	_
21	planets	_	NNS	NNS	_	19	pobj	_	_
22	--	_	:	:	_	19	punct	_	_
23	good	_	JJ	JJ	_	24	amod	_	_
24	plants	_	NNS	NNS	_	16	dobj	_	_
25	and	_	CC	CC	_	11	cc	_	_
26	bad	_	JJ	JJ	_	27	amod	_	_
27	plants	_	NNS	NNS	_	11	conj	_	_
28	.	_	.	.	_	8	punct	_	_

Oracle:
(a3 / and, mod, i / indeed)
(a3 / and, op, p / plant)
(a3 / and, op, p2 / plant)
(b / bad-07, ARG1, p2 / plant)
(g / good-02, ARG1, p / plant)
(l / live-01, ARG0, p4 / prince)
(l / live-01, location, p3 / planet)
(l3 / learn-01, ARG0, i2 / i)
(p4 / prince, mod, l2 / little)
(p5 / planet, mod, a2 / all)

Input(Some(Graph((be-located-at-91 :ARG1 (and :mod indeed :op (plant :ARG1-of bad-07) :op (plant :ARG1-of good-02)) :ARG2 (and :op (planet :location-of (live-01 :ARG0 (prince :mod little))) :op (planet :mod all)) :ARG1-of (learn-01 :ARG0 i)),ArrayBuffer(Span(24,25,List(0),and,and,false), Span(0,1,List(1),Indeed,indeed,false), Span(23,24,List(2),plants,plant,false), Span(25,26,List(3),bad,bad-07,false), Span(26,27,List(4),plants,plant,false), Span(22,23,List(5),good,good-02,false), Span(10,11,List(6),planet,planet,false), Span(15,16,List(7),lived,live-01,false), Span(14,15,List(8),prince,prince,false), Span(13,14,List(9),little,little,false), Span(20,21,List(10),planets,planet,false), Span(19,20,List(11),all,all,false), Span(4,5,List(12),learned,learn-01,false), Span(3,4,List(13),I,i,false)),Map(2 -> plant, 5 -> good-02, 12 -> learn-01, 8 -> prince, 7 -> live-01, 1 -> indeed, 4 -> plant, 11 -> all, 6 -> planet, 9 -> little, 0 -> and, 10 -> planet, 3 -> bad-07, 13 -> i),Map(p5 -> planet, b -> bad-07, p2 -> plant, l3 -> learn-01, a3 -> and, g -> good-02, p -> plant, p4 -> prince, i2 -> i, l2 -> little, a2 -> all, i -> indeed, l -> live-01, p3 -> planet))),[Ljava.lang.String;@4a003cbe,Annotation([Ljava.lang.String;@4082ba93,[Ljava.lang.String;@17fc391b,[Ljava.lang.String;@2b30a42c),Annotation([Ljava.lang.String;@609e8838,[Ljava.lang.String;@359df09a,[Ledu.cmu.lti.nlp.amr.Dependency;@43df23d3),Annotation([Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c,[Ljava.lang.String;@23e84203),Annotation([Ljava.lang.String;@19932c16,[Ljava.lang.String;@73eb439a,[Ledu.cmu.lti.nlp.amr.Entity;@514646ef))
AMR:
(a3 / and, op, p / plant)
(a3 / and, op, p3 / planet)
(b / bad-07, ARG1, p / plant)
(g / good-02, ARG1, p2 / plant)
(g / good-02, ARG2, p5 / planet)
(l / live-01, ARG0, p3 / planet)
(l / live-01, ARG1, p2 / plant)
(l / live-01, ARG2, p4 / prince)
(l3 / learn-01, ARG0, i2 / i)
(l3 / learn-01, ARG1, i / indeed)
(p3 / planet, poss, i2 / i)
(p4 / prince, mod, l2 / little)
(p5 / planet, mod, a2 / all)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 640,150 microseconds
Sentence: In consequence , there were good seeds from good plants , and bad seeds from bad plants .

Oracle Span 1:  and => and
Oracle Span 2:  bad => bad-07
Oracle Span 3:  bad => bad-07
Oracle Span 4:  good => good-02
Oracle Span 5:  good => good-02
Oracle Span 6:  plants => plant
Oracle Span 7:  plants => plant
Oracle Span 8:  seeds => seed
Oracle Span 9:  seeds => seed
Spans:
Span 11-12:  and => and
Span 12-13:  bad => bad-07
Span 15-16:  bad => bad-07
Span 5-6:  good => good-02
Span 8-9:  good => good-02
Span 9-10:  plants => plant
Span 16-17:  plants => plant
Span 6-7:  seeds => seed
Span 13-14:  seeds => seed

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 12-13:  bad => bad-07
Oracle Span 15-16:  bad => bad-07
Oracle Span 5-6:  good => good-02
Oracle Span 8-9:  good => good-02
Oracle Span 9-10:  plants => plant
Oracle Span 16-17:  plants => plant
Oracle Span 6-7:  seeds => seed
Oracle Span 13-14:  seeds => seed

Dependencies:
1	In	_	IN	IN	_	5	prep	_	_
2	consequence	_	NN	NN	_	1	pobj	_	_
3	,	_	,	,	_	5	punct	_	_
4	there	_	EX	EX	_	5	expl	_	_
5	were	_	VBD	VBD	_	0	root	_	_
6	good	_	JJ	JJ	_	7	amod	_	_
7	seeds	_	NNS	NNS	_	5	nsubj	_	_
8	from	_	IN	IN	_	7	prep	_	_
9	good	_	JJ	JJ	_	10	amod	_	_
10	plants	_	NNS	NNS	_	8	pobj	_	_
11	,	_	,	,	_	7	punct	_	_
12	and	_	CC	CC	_	7	cc	_	_
13	bad	_	JJ	JJ	_	14	amod	_	_
14	seeds	_	NNS	NNS	_	7	conj	_	_
15	from	_	IN	IN	_	14	prep	_	_
16	bad	_	JJ	JJ	_	17	amod	_	_
17	plants	_	NNS	NNS	_	15	pobj	_	_
18	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, s / seed)
(a / and, op, s2 / seed)
(b / bad-07, ARG1, s2 / seed)
(b2 / bad-07, ARG1, p2 / plant)
(g / good-02, ARG1, s / seed)
(g2 / good-02, ARG1, p / plant)
(s / seed, source, p / plant)
(s2 / seed, source, p2 / plant)

Input(Some(Graph((and :ARG1-of cause-01 :op (seed :source (plant :ARG1-of bad-07) :ARG1-of bad-07) :op (seed :source (plant :ARG1-of good-02) :ARG1-of good-02)),ArrayBuffer(Span(11,12,List(0),and,and,false), Span(6,7,List(1),seeds,seed,false), Span(9,10,List(2),plants,plant,false), Span(12,13,List(3),bad,bad-07,false), Span(15,16,List(4),bad,bad-07,false), Span(13,14,List(5),seeds,seed,false), Span(16,17,List(6),plants,plant,false), Span(5,6,List(7),good,good-02,false), Span(8,9,List(8),good,good-02,false)),Map(2 -> plant, 5 -> seed, 8 -> good-02, 7 -> good-02, 1 -> seed, 4 -> bad-07, 6 -> plant, 0 -> and, 3 -> bad-07),Map(b -> bad-07, s2 -> seed, b2 -> bad-07, p2 -> plant, s -> seed, g -> good-02, g2 -> good-02, p -> plant, a -> and))),[Ljava.lang.String;@305ffe9e,Annotation([Ljava.lang.String;@302c971f,[Ljava.lang.String;@1972e513,[Ljava.lang.String;@7ae0a9ec),Annotation([Ljava.lang.String;@35841320,[Ljava.lang.String;@61c4eee0,[Ledu.cmu.lti.nlp.amr.Dependency;@6f10d5b6),Annotation([Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a,[Ljava.lang.String;@433defed),Annotation([Ljava.lang.String;@2a693f59,[Ljava.lang.String;@3f4faf53,[Ledu.cmu.lti.nlp.amr.Entity;@7fd50002))
AMR:
(a / and, op, s / seed)
(a / and, op, s2 / seed)
(b / bad-07, ARG1, p / plant)
(b2 / bad-07, ARG1, s / seed)
(b2 / bad-07, ARG3, b / bad-07)
(g / good-02, ARG1, p2 / plant)
(g2 / good-02, ARG1, s2 / seed)
(g2 / good-02, ARG3, g / good-02)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 58,580 microseconds
Sentence: But seeds are invisible .

Oracle Span 1:  But => contrast-01
Oracle Span 2:  seeds => seed
Spans:
Span 0-1:  But => contrast-01
Span 1-2:  seeds => seed

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  seeds => seed

Dependencies:
1	But	_	CC	CC	_	4	cc	_	_
2	seeds	_	NNS	NNS	_	4	nsubj	_	_
3	are	_	VBP	VBP	_	4	cop	_	_
4	invisible	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:


Input(Some(Graph((contrast-01 :ARG2 (possible-01 :polarity - :ARG1 (see-01 :ARG1 seed))),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(1,2,List(1),seeds,seed,false)),Map(1 -> seed, 0 -> contrast-01),Map(s -> seed, c -> contrast-01))),[Ljava.lang.String;@533bda92,Annotation([Ljava.lang.String;@304bb45b,[Ljava.lang.String;@723ca036,[Ljava.lang.String;@25be7b63),Annotation([Ljava.lang.String;@28dcca0c,[Ljava.lang.String;@45d84a20,[Ledu.cmu.lti.nlp.amr.Dependency;@52f27fbd),Annotation([Ljava.lang.String;@4c163e3,[Ljava.lang.String;@4a8355dd,[Ljava.lang.String;@4d0d9fe7),Annotation([Ljava.lang.String;@c430e6c,[Ljava.lang.String;@312aa7c,[Ledu.cmu.lti.nlp.amr.Entity;@536f2a7e))
AMR:
(c / contrast-01, ARG0, s / seed)

WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 12,232 microseconds
Sentence: They sleep deep in the heart of the earth 's darkness , until some one among them is seized with the desire to awaken .

Oracle Span 1:  darkness => darkness
Oracle Span 2:  deep => deep-02
Oracle Span 3:  desire => desire-01
Oracle Span 4:  earth => earth
Oracle Span 5:  heart => heart
Oracle Span 6:  of => include-91
Oracle Span 7:  seized => seize-01
Oracle Span 8:  sleep => sleep-01
Oracle Span 9:  some => someone
Oracle Span 10:  They => they
Oracle Span 11:  until => until
Spans:
Span 10-11:  darkness => darkness
Span 2-3:  deep => deep-02
Span 21-22:  desire => desire-01
Span 8-9:  earth => earth
Span 5-6:  heart => heart
Span 6-7:  of => include-91
Span 18-19:  seized => seize-01
Span 1-2:  sleep => sleep-01
Span 13-14:  some => someone
Span 0-1:  They => they
Span 12-13:  until => until

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 10-11:  darkness => darkness
Oracle Span 2-3:  deep => deep-02
Oracle Span 21-22:  desire => desire-01
Oracle Span 8-9:  earth => earth
Oracle Span 5-6:  heart => heart
Oracle Span 6-7:  of => include-91
Oracle Span 18-19:  seized => seize-01
Oracle Span 1-2:  sleep => sleep-01
Oracle Span 13-14:  some => someone
Oracle Span 0-1:  They => they
Oracle Span 12-13:  until => until

Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	sleep	_	VBP	VBP	_	0	root	_	_
3	deep	_	JJ	JJ	_	2	acomp	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	heart	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	earth	_	NN	NN	_	11	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	darkness	_	NNS	NNS	_	7	pobj	_	_
12	,	_	,	,	_	2	punct	_	_
13	until	_	IN	IN	_	19	mark	_	_
14	some	_	DT	DT	_	15	det	_	_
15	one	_	NN	NN	_	19	nsubjpass	_	_
16	among	_	IN	IN	_	15	prep	_	_
17	them	_	PRP	PRP	_	16	pobj	_	_
18	is	_	VBZ	VBZ	_	19	auxpass	_	_
19	seized	_	VBN	VBN	_	2	advcl	_	_
20	with	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	desire	_	NN	NN	_	20	pobj	_	_
23	to	_	TO	TO	_	19	prep	_	_
24	awaken	_	NN	NN	_	23	pobj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(d / deep-02, ARG2, h / heart)
(d2 / darkness, part, h / heart)
(d2 / darkness, poss, e / earth)
(i / include-91, ARG1, s3 / someone)
(i / include-91, ARG2, t / they)
(s / sleep-01, ARG0, t / they)
(s / sleep-01, location, h / heart)
(s / sleep-01, time, u / until)
(s2 / seize-01, ARG0, d3 / desire-01)
(s2 / seize-01, ARG1, s3 / someone)
(u / until, op, s2 / seize-01)

Input(Some(Graph((sleep-01 :time (until :op (seize-01 :ARG1 (someone :ARG1-of (include-91 :ARG2 they)) :ARG0 (desire-01 :ARG1 (wake-01 :ARG1 sleep-01)))) :location (heart :part-of (darkness :poss earth) :ARG2-of deep-02) :ARG0 they),ArrayBuffer(Span(1,2,List(0),sleep,sleep-01,false), Span(12,13,List(1),until,until,false), Span(18,19,List(2),seized,seize-01,false), Span(6,7,List(3),of,include-91,false), Span(21,22,List(4),desire,desire-01,false), Span(5,6,List(5),heart,heart,false), Span(10,11,List(6),darkness,darkness,false), Span(8,9,List(7),earth,earth,false), Span(2,3,List(8),deep,deep-02,false), Span(0,1,List(9),They,they,false), Span(13,14,List(10),some,someone,false)),Map(2 -> seize-01, 5 -> heart, 8 -> deep-02, 7 -> earth, 1 -> until, 4 -> desire-01, 6 -> darkness, 9 -> they, 0 -> sleep-01, 10 -> someone, 3 -> include-91),Map(e -> earth, h -> heart, t -> they, s2 -> seize-01, d3 -> desire-01, s -> sleep-01, d -> deep-02, d2 -> darkness, i -> include-91, s3 -> someone, u -> until))),[Ljava.lang.String;@72bc6553,Annotation([Ljava.lang.String;@66982506,[Ljava.lang.String;@70cf32e3,[Ljava.lang.String;@5a59ca5e),Annotation([Ljava.lang.String;@4bdeaabb,[Ljava.lang.String;@6c4906d3,[Ledu.cmu.lti.nlp.amr.Dependency;@65987993),Annotation([Ljava.lang.String;@71075444,[Ljava.lang.String;@4f32a3ad,[Ljava.lang.String;@6b695b06),Annotation([Ljava.lang.String;@4d1bf319,[Ljava.lang.String;@6f53b8a,[Ledu.cmu.lti.nlp.amr.Entity;@5c80cf32))
AMR:
(d / deep-02, ARG0, s3 / someone)
(d / deep-02, ARG1, t / they)
(d2 / darkness, poss, e / earth)
(i / include-91, ARG0, h / heart)
(i / include-91, ARG1, e / earth)
(s / sleep-01, ARG0, t / they)
(s / sleep-01, ARG1, h / heart)
(s / sleep-01, condition, s2 / seize-01)
(s2 / seize-01, ARG1, d3 / desire-01)
(u / until, op, s2 / seize-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2.0.1
Decoded in 210,090 microseconds
Sentence: Then this little seed will stretch itself and begin -- timidly at first -- to push a charming little sprig inoffensively upward toward the sun .

Oracle Span 1:  and => and
Oracle Span 2:  begin => begin-01
Oracle Span 3:  charming => charm-01
Oracle Span 4:  inoffensively => (offensive :polarity -)
Oracle Span 5:  little => little
Oracle Span 6:  little => little
Oracle Span 7:  push => push-01
Oracle Span 8:  seed => seed
Oracle Span 9:  sprig => sprig
Oracle Span 10:  stretch => stretch-01
Oracle Span 11:  sun => sun
Oracle Span 12:  Then => then
Oracle Span 13:  this => this
Oracle Span 14:  timidly => timid
Oracle Span 15:  upward => upward
Spans:
Span 7-8:  and => and
Span 8-9:  begin => begin-01
Span 17-18:  charming => charm-01
Span 20-21:  inoffensively => (offensive :polarity -)
Span 2-3:  little => little
Span 18-19:  little => little
Span 15-16:  push => push-01
Span 3-4:  seed => seed
Span 19-20:  sprig => sprig
Span 5-6:  stretch => stretch-01
Span 24-25:  sun => sun
Span 0-1:  Then => then
Span 1-2:  this => this
Span 10-11:  timidly => timid
Span 21-22:  upward => upward

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 8-9:  begin => begin-01
Oracle Span 17-18:  charming => charm-01
Oracle Span 20-21:  inoffensively => (offensive :polarity -)
Oracle Span 2-3:  little => little
Oracle Span 18-19:  little => little
Oracle Span 15-16:  push => push-01
Oracle Span 3-4:  seed => seed
Oracle Span 19-20:  sprig => sprig
Oracle Span 5-6:  stretch => stretch-01
Oracle Span 24-25:  sun => sun
Oracle Span 0-1:  Then => then
Oracle Span 1-2:  this => this
Oracle Span 10-11:  timidly => timid
Oracle Span 21-22:  upward => upward

Dependencies:
1	Then	_	RB	RB	_	6	advmod	_	_
2	this	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	seed	_	NN	NN	_	6	nsubj	_	_
5	will	_	MD	MD	_	6	aux	_	_
6	stretch	_	VB	VB	_	0	root	_	_
7	itself	_	PRP	PRP	_	6	dobj	_	_
8	and	_	CC	CC	_	6	cc	_	_
9	begin	_	VB	VB	_	6	conj	_	_
10	--	_	:	:	_	12	punct	_	_
11	timidly	_	RB	RB	_	12	advmod	_	_
12	at	_	IN	IN	_	9	dep	_	_
13	first	_	JJ	JJ	_	12	pobj	_	_
14	--	_	:	:	_	12	punct	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	push	_	VB	VB	_	6	xcomp	_	_
17	a	_	DT	DT	_	21	det	_	_
18	charming	_	JJ	JJ	_	21	amod	_	_
19	little	_	JJ	JJ	_	21	amod	_	_
20	sprig	_	NN	NN	_	21	nn	_	_
21	inoffensively	_	NN	NN	_	16	dobj	_	_
22	upward	_	RB	RB	_	16	advmod	_	_
23	toward	_	IN	IN	_	16	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	sun	_	NN	NN	_	23	pobj	_	_
26	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, b / begin-01)
(a / and, op, s / stretch-01)
(a / and, time, t / then)
(b / begin-01, ARG0, s2 / seed)
(b / begin-01, ARG1, p / push-01)
(b / begin-01, manner, t3 / timid)
(c / charm-01, ARG0, s3 / sprig)
(o / offensive, polarity, -)
(p / push-01, ARG0, s2 / seed)
(p / push-01, ARG1, s3 / sprig)
(p / push-01, ARG2, u / upward)
(p / push-01, manner, o / offensive)
(s / stretch-01, ARG0, s2 / seed)
(s / stretch-01, ARG1, s2 / seed)
(s2 / seed, mod, l / little)
(s2 / seed, mod, t2 / this)
(s3 / sprig, mod, l2 / little)
(u / upward, direction, s4 / sun)

Input(Some(Graph((and :time then :op (begin-01 :manner (timid :time at-first) :ARG1 (push-01 :manner (offensive :polarity -) :ARG2 (upward :direction sun) :ARG1 (sprig :ARG0-of charm-01 :mod little) :ARG0 seed) :ARG0 seed) :op (stretch-01 :ARG0 (seed :mod this :mod little) :ARG1 seed)),ArrayBuffer(Span(7,8,List(0),and,and,false), Span(0,1,List(1),Then,then,false), Span(8,9,List(2),begin,begin-01,false), Span(15,16,List(3),push,push-01,false), Span(21,22,List(4),upward,upward,false), Span(24,25,List(5),sun,sun,false), Span(19,20,List(6),sprig,sprig,false), Span(17,18,List(7),charming,charm-01,false), Span(2,3,List(8),little,little,false), Span(5,6,List(9),stretch,stretch-01,false), Span(3,4,List(10),seed,seed,false), Span(1,2,List(11),this,this,false), Span(18,19,List(12),little,little,false), Span(10,11,List(13),timidly,timid,false), Span(20,21,List(14, 15),inoffensively,(offensive :polarity -),false)),Map(2 -> begin-01, 5 -> sun, 12 -> little, 15 -> -, 8 -> little, 7 -> charm-01, 1 -> then, 4 -> upward, 11 -> this, 14 -> offensive, 6 -> sprig, 9 -> stretch-01, 0 -> and, 10 -> seed, 3 -> push-01, 13 -> timid),Map(s2 -> seed, b -> begin-01, t -> then, s -> stretch-01, s4 -> sun, t3 -> timid, p -> push-01, a -> and, t2 -> this, l2 -> little, c -> charm-01, s3 -> sprig, l -> little, u -> upward, o -> offensive))),[Ljava.lang.String;@7d900ecf,Annotation([Ljava.lang.String;@6f01b95f,[Ljava.lang.String;@4007f65e,[Ljava.lang.String;@1a245833),Annotation([Ljava.lang.String;@673fdbce,[Ljava.lang.String;@5965d37,[Ledu.cmu.lti.nlp.amr.Dependency;@7a5ceedd),Annotation([Ljava.lang.String;@4201c465,[Ljava.lang.String;@5b799640,[Ljava.lang.String;@6cb107fd),Annotation([Ljava.lang.String;@710636b0,[Ljava.lang.String;@3de8f619,[Ledu.cmu.lti.nlp.amr.Entity;@2ab4bc72))
AMR:
(a / and, op, b / begin-01)
(a / and, op, s / stretch-01)
(b / begin-01, ARG0, s4 / sun)
(b / begin-01, ARG1, t3 / timid)
(c / charm-01, ARG0, s3 / sprig)
(c / charm-01, ARG1, o / offensive)
(c / charm-01, ARG2, l / little)
(o / offensive, polarity, -)
(p / push-01, ARG0, s3 / sprig)
(p / push-01, manner, u / upward)
(s / stretch-01, ARG0, s2 / seed)
(s / stretch-01, ARG1, p / push-01)
(s / stretch-01, time, t / then)
(s2 / seed, mod, l2 / little)
(t2 / this, mod, t / then)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.0
Decoded in 497,899 microseconds
Sentence: If it is only a sprout of radish or the sprig of a rose - bush , one would let it grow wherever it might wish .

Oracle Span 1:  bush => bush
Oracle Span 2:  grow => grow-01
Oracle Span 3:  it => it
Oracle Span 4:  one => one
Oracle Span 5:  only => only
Oracle Span 6:  or => or
Oracle Span 7:  radish => radish
Oracle Span 8:  rose => rose
Oracle Span 9:  sprig => sprig
Oracle Span 10:  sprout => sprout
Oracle Span 11:  wish => wish-01
Spans:
Span 15-16:  bush => bush
Span 21-22:  grow => grow-01
Span 1-2:  it => it
Span 17-18:  one => one
Span 3-4:  only => only
Span 8-9:  or => or
Span 7-8:  radish => radish
Span 13-14:  rose => rose
Span 10-11:  sprig => sprig
Span 5-6:  sprout => sprout
Span 25-26:  wish => wish-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 15-16:  bush => bush
Oracle Span 21-22:  grow => grow-01
Oracle Span 1-2:  it => it
Oracle Span 17-18:  one => one
Oracle Span 3-4:  only => only
Oracle Span 8-9:  or => or
Oracle Span 7-8:  radish => radish
Oracle Span 13-14:  rose => rose
Oracle Span 10-11:  sprig => sprig
Oracle Span 5-6:  sprout => sprout
Oracle Span 25-26:  wish => wish-01

Dependencies:
1	If	_	IN	IN	_	6	mark	_	_
2	it	_	PRP	PRP	_	6	nsubj	_	_
3	is	_	VBZ	VBZ	_	6	cop	_	_
4	only	_	RB	RB	_	6	advmod	_	_
5	a	_	DT	DT	_	6	det	_	_
6	sprout	_	NN	NN	_	20	advcl	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	radish	_	NN	NN	_	7	pobj	_	_
9	or	_	CC	CC	_	6	cc	_	_
10	the	_	DT	DT	_	11	det	_	_
11	sprig	_	NN	NN	_	6	conj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	14	det	_	_
14	rose	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	14	punct	_	_
16	bush	_	NN	NN	_	14	dep	_	_
17	,	_	,	,	_	20	punct	_	_
18	one	_	PRP	PRP	_	20	nsubj	_	_
19	would	_	MD	MD	_	20	aux	_	_
20	let	_	VB	VB	_	0	root	_	_
21	it	_	PRP	PRP	_	22	nsubj	_	_
22	grow	_	VB	VB	_	20	ccomp	_	_
23	wherever	_	WRB	WRB	_	26	advmod	_	_
24	it	_	PRP	PRP	_	26	nsubj	_	_
25	might	_	MD	MD	_	26	aux	_	_
26	wish	_	VB	VB	_	22	advcl	_	_
27	.	_	.	.	_	20	punct	_	_

Oracle:
(b2 / bush, mod, r2 / rose)
(b2 / bush, part, s2 / sprig)
(g / grow-01, ARG1, i / it)
(g / grow-01, location, w2 / wish-01)
(o2 / or, domain, i / it)
(o2 / or, mod, o3 / only)
(o2 / or, op, s / sprout)
(o2 / or, op, s2 / sprig)
(r / radish, part, s / sprout)
(w2 / wish-01, ARG0, i / it)

Input(Some(Graph((allow-01 :ARG0 one :ARG1 (grow-01 :location (wish-01 :ARG1-of possible-01 :ARG0 it) :ARG1 it) :condition (or :domain it :mod only :op (sprig :part-of (bush :mod rose)) :op (sprout :part-of radish))),ArrayBuffer(Span(17,18,List(0),one,one,false), Span(21,22,List(1),grow,grow-01,false), Span(25,26,List(2),wish,wish-01,false), Span(8,9,List(3),or,or,false), Span(1,2,List(4),it,it,false), Span(3,4,List(5),only,only,false), Span(10,11,List(6),sprig,sprig,false), Span(15,16,List(7),bush,bush,false), Span(13,14,List(8),rose,rose,false), Span(5,6,List(9),sprout,sprout,false), Span(7,8,List(10),radish,radish,false)),Map(2 -> wish-01, 5 -> only, 8 -> rose, 7 -> bush, 1 -> grow-01, 4 -> it, 6 -> sprig, 9 -> sprout, 0 -> one, 10 -> radish, 3 -> or),Map(s2 -> sprig, b2 -> bush, o3 -> only, s -> sprout, r2 -> rose, g -> grow-01, o2 -> or, w2 -> wish-01, r -> radish, i -> it, o -> one))),[Ljava.lang.String;@4e5ed836,Annotation([Ljava.lang.String;@eadd4fb,[Ljava.lang.String;@740fb309,[Ljava.lang.String;@7bd7d6d6),Annotation([Ljava.lang.String;@43f02ef2,[Ljava.lang.String;@239a307b,[Ledu.cmu.lti.nlp.amr.Dependency;@2a8448fa),Annotation([Ljava.lang.String;@6f204a1a,[Ljava.lang.String;@2de56eb2,[Ljava.lang.String;@5f8e8a9d),Annotation([Ljava.lang.String;@5745ca0e,[Ljava.lang.String;@3ad83a66,[Ledu.cmu.lti.nlp.amr.Entity;@3cce5371))
AMR:
(b2 / bush, mod, r2 / rose)
(g / grow-01, ARG0, o / one)
(g / grow-01, ARG1, i / it)
(g / grow-01, condition, w2 / wish-01)
(o2 / or, op, s2 / sprig)
(s / sprout, domain, r / radish)
(s / sprout, part, s2 / sprig)
(s2 / sprig, poss, r2 / rose)
(w2 / wish-01, ARG0, o3 / only)
(w2 / wish-01, ARG1, s / sprout)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.3
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
Decoded in 167,179 microseconds
Sentence: But when it is a bad plant , one must destroy it as soon as possible , the very first instant that one recognizes it .

Oracle Span 1:  bad => bad-07
Oracle Span 2:  But => contrast-01
Oracle Span 3:  destroy => destroy-01
Oracle Span 4:  instant => instant
Oracle Span 5:  it => it
Oracle Span 6:  one => 1
Oracle Span 7:  one => one
Oracle Span 8:  plant => plant
Oracle Span 9:  possible => possible-01
Oracle Span 10:  recognizes => recognize-01
Oracle Span 11:  soon => soon
Oracle Span 12:  very => very
Spans:
Span 5-6:  bad => bad-07
Span 0-1:  But => contrast-01
Span 10-11:  destroy => destroy-01
Span 20-21:  instant => instant
Span 2-3:  it => it
Span 8-9:  one => 1
Span 22-23:  one => one
Span 6-7:  plant => plant
Span 15-16:  possible => possible-01
Span 23-24:  recognizes => recognize-01
Span 13-14:  soon => soon
Span 18-19:  very => very

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 5-6:  bad => bad-07
Oracle Span 0-1:  But => contrast-01
Oracle Span 10-11:  destroy => destroy-01
Oracle Span 20-21:  instant => instant
Oracle Span 2-3:  it => it
Oracle Span 8-9:  one => 1
Oracle Span 22-23:  one => one
Oracle Span 6-7:  plant => plant
Oracle Span 15-16:  possible => possible-01
Oracle Span 23-24:  recognizes => recognize-01
Oracle Span 13-14:  soon => soon
Oracle Span 18-19:  very => very

Dependencies:
1	But	_	CC	CC	_	11	cc	_	_
2	when	_	WRB	WRB	_	7	advmod	_	_
3	it	_	PRP	PRP	_	7	nsubj	_	_
4	is	_	VBZ	VBZ	_	7	cop	_	_
5	a	_	DT	DT	_	7	det	_	_
6	bad	_	JJ	JJ	_	7	amod	_	_
7	plant	_	NN	NN	_	11	advcl	_	_
8	,	_	,	,	_	11	punct	_	_
9	one	_	PRP	PRP	_	11	nsubj	_	_
10	must	_	MD	MD	_	11	aux	_	_
11	destroy	_	VB	VB	_	0	root	_	_
12	it	_	PRP	PRP	_	11	dobj	_	_
13	as	_	RB	RB	_	14	advmod	_	_
14	soon	_	RB	RB	_	11	advmod	_	_
15	as	_	IN	IN	_	21	mark	_	_
16	possible	_	JJ	JJ	_	21	dep	_	_
17	,	_	,	,	_	21	punct	_	_
18	the	_	DT	DT	_	21	det	_	_
19	very	_	RB	RB	_	20	advmod	_	_
20	first	_	JJ	JJ	_	21	amod	_	_
21	instant	_	NN	NN	_	14	dep	_	_
22	that	_	IN	IN	_	24	mark	_	_
23	one	_	PRP	PRP	_	24	nsubj	_	_
24	recognizes	_	VBZ	VBZ	_	11	ccomp	_	_
25	it	_	PRP	PRP	_	24	dobj	_	_
26	.	_	.	.	_	11	punct	_	_

Oracle:
(b / bad-07, ARG1, p / plant)
(d / destroy-01, ARG0, o2 / one)
(d / destroy-01, ARG1, i2 / it)
(d / destroy-01, time, i / instant)
(d / destroy-01, time, s / soon)
(p / plant, domain, i2 / it)
(p2 / possible-01, ARG1, d / destroy-01)
(r / recognize-01, ARG0, o2 / one)
(r / recognize-01, ARG1, i2 / it)
(r / recognize-01, time, i / instant)
(s / soon, compared-to, p2 / possible-01)

Input(Some(Graph((contrast-01 :ARG2 (obligate-01 :ARG2 (destroy-01 :time (soon :compared-to (possible-01 :ARG1 destroy-01) :degree most) :time (instant :ord (ordinal-entity :value 1 :degree very) :time-of (recognize-01 :ARG0 one :ARG1 it)) :ARG0 one :ARG1 it) :condition (plant :domain it :ARG1-of bad-07))),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(10,11,List(1),destroy,destroy-01,false), Span(13,14,List(2),soon,soon,false), Span(15,16,List(3),possible,possible-01,false), Span(20,21,List(4),instant,instant,false), Span(8,9,List(5),one,1,false), Span(18,19,List(6),very,very,false), Span(23,24,List(7),recognizes,recognize-01,false), Span(22,23,List(8),one,one,false), Span(6,7,List(9),plant,plant,false), Span(2,3,List(10),it,it,false), Span(5,6,List(11),bad,bad-07,false)),Map(2 -> soon, 5 -> 1, 8 -> one, 7 -> recognize-01, 1 -> destroy-01, 4 -> instant, 11 -> bad-07, 6 -> very, 9 -> plant, 0 -> contrast-01, 10 -> it, 3 -> possible-01),Map(b -> bad-07, p2 -> possible-01, s -> soon, v -> very, d -> destroy-01, 1 -> 1, p -> plant, o2 -> one, i2 -> it, r -> recognize-01, i -> instant, c -> contrast-01))),[Ljava.lang.String;@17bffc17,Annotation([Ljava.lang.String;@6e535154,[Ljava.lang.String;@15a34df2,[Ljava.lang.String;@5b38c1ec),Annotation([Ljava.lang.String;@338fc1d8,[Ljava.lang.String;@4722ef0c,[Ledu.cmu.lti.nlp.amr.Dependency;@48e1f6c7),Annotation([Ljava.lang.String;@55cb6996,[Ljava.lang.String;@1807e3f6,[Ljava.lang.String;@480d3575),Annotation([Ljava.lang.String;@f1da57d,[Ljava.lang.String;@194fad1,[Ledu.cmu.lti.nlp.amr.Entity;@26abb146))
AMR:
(b / bad-07, ARG1, p / plant)
(c / contrast-01, ARG1, v / very)
(c / contrast-01, ARG2, d / destroy-01)
(d / destroy-01, ARG0, 1 / 1)
(d / destroy-01, ARG1, i2 / it)
(d / destroy-01, ARG2, r / recognize-01)
(p / plant, domain, i2 / it)
(p2 / possible-01, ARG0, i / instant)
(p2 / possible-01, ARG1, s / soon)
(r / recognize-01, ARG0, o2 / one)
(r / recognize-01, ARG1, i / instant)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.1
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 446,079 microseconds
Sentence: Now there were some terrible seeds on the planet that was the home of the little prince ; and these were the seeds of the baobab .

Oracle Span 1:  baobab => baobab
Oracle Span 2:  home => home
Oracle Span 3:  little => little
Oracle Span 4:  Now => now
Oracle Span 5:  planet => planet
Oracle Span 6:  prince => prince
Oracle Span 7:  seeds => seed
Oracle Span 8:  some => some
Oracle Span 9:  terrible => terrible-01
Spans:
Span 25-26:  baobab => baobab
Span 12-13:  home => home
Span 15-16:  little => little
Span 0-1:  Now => now
Span 8-9:  planet => planet
Span 16-17:  prince => prince
Span 5-6:  seeds => seed
Span 3-4:  some => some
Span 4-5:  terrible => terrible-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 25-26:  baobab => baobab
Oracle Span 12-13:  home => home
Oracle Span 15-16:  little => little
Oracle Span 0-1:  Now => now
Oracle Span 8-9:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 5-6:  seeds => seed
Oracle Span 3-4:  some => some
Oracle Span 4-5:  terrible => terrible-01

Dependencies:
1	Now	_	RB	RB	_	3	advmod	_	_
2	there	_	EX	EX	_	3	expl	_	_
3	were	_	VBD	VBD	_	0	root	_	_
4	some	_	DT	DT	_	6	det	_	_
5	terrible	_	JJ	JJ	_	6	amod	_	_
6	seeds	_	NNS	NNS	_	3	nsubj	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	planet	_	NN	NN	_	7	pobj	_	_
10	that	_	WDT	WDT	_	13	nsubj	_	_
11	was	_	VBD	VBD	_	13	cop	_	_
12	the	_	DT	DT	_	13	det	_	_
13	home	_	NN	NN	_	9	rcmod	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	pobj	_	_
18	;	_	:	:	_	3	punct	_	_
19	and	_	CC	CC	_	3	cc	_	_
20	these	_	DT	DT	_	23	nsubj	_	_
21	were	_	VBD	VBD	_	23	cop	_	_
22	the	_	DT	DT	_	23	det	_	_
23	seeds	_	NNS	NNS	_	3	conj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	baobab	_	NN	NN	_	24	pobj	_	_
27	.	_	.	.	_	3	punct	_	_

Oracle:
(h / home, location, p / planet)
(h / home, poss, p2 / prince)
(p2 / prince, mod, l / little)
(s / seed, poss, b / baobab)
(s / seed, quant, s2 / some)
(t / terrible-01, ARG1, s / seed)

Input(Some(Graph((be-located-at-91 :ARG1 (seed :poss baobab :quant some :ARG1-of terrible-01) :ARG2 (planet :location-of (home :poss (prince :mod little))) :time now),ArrayBuffer(Span(5,6,List(0),seeds,seed,false), Span(25,26,List(1),baobab,baobab,false), Span(3,4,List(2),some,some,false), Span(4,5,List(3),terrible,terrible-01,false), Span(8,9,List(4),planet,planet,false), Span(12,13,List(5),home,home,false), Span(16,17,List(6),prince,prince,false), Span(15,16,List(7),little,little,false), Span(0,1,List(8),Now,now,false)),Map(2 -> some, 5 -> home, 8 -> now, 7 -> little, 1 -> baobab, 4 -> planet, 6 -> prince, 0 -> seed, 3 -> terrible-01),Map(n -> now, h -> home, t -> terrible-01, s2 -> some, b -> baobab, p2 -> prince, s -> seed, p -> planet, l -> little))),[Ljava.lang.String;@72c8e7b,Annotation([Ljava.lang.String;@65f8f5ae,[Ljava.lang.String;@431cd9b2,[Ljava.lang.String;@38467116),Annotation([Ljava.lang.String;@5b7a7f33,[Ljava.lang.String;@790da477,[Ledu.cmu.lti.nlp.amr.Dependency;@5c7933ad),Annotation([Ljava.lang.String;@57bc27f5,[Ljava.lang.String;@5fb759d6,[Ljava.lang.String;@4b8d604b),Annotation([Ljava.lang.String;@5e7cd6cc,[Ljava.lang.String;@68c9d179,[Ledu.cmu.lti.nlp.amr.Entity;@d554c5f))
AMR:
(b / baobab, op, t / terrible-01)
(p / planet, mod, h / home)
(p2 / prince, mod, l / little)
(s / seed, mod, s2 / some)
(t / terrible-01, ARG0, p2 / prince)
(t / terrible-01, ARG1, s / seed)
(t / terrible-01, ARG2, n / now)
(t / terrible-01, location, p / planet)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 162,867 microseconds
Sentence: The soil of that planet was infested with them .

Oracle Span 1:  infested => infest-01
Oracle Span 2:  planet => planet
Oracle Span 3:  soil => soil
Oracle Span 4:  that => that
Spans:
Span 6-7:  infested => infest-01
Span 4-5:  planet => planet
Span 1-2:  soil => soil
Span 3-4:  that => that

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  infested => infest-01
Oracle Span 4-5:  planet => planet
Oracle Span 1-2:  soil => soil
Oracle Span 3-4:  that => that

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	soil	_	NN	NN	_	7	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	5	det	_	_
5	planet	_	NN	NN	_	3	pobj	_	_
6	was	_	VBD	VBD	_	7	cop	_	_
7	infested	_	JJ	JJ	_	0	root	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	them	_	PRP	PRP	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(i / infest-01, ARG1, s / soil)
(p / planet, mod, t2 / that)
(s / soil, poss, p / planet)

Input(Some(Graph((infest-01 :ARG2 they :ARG1 (soil :poss (planet :mod that))),ArrayBuffer(Span(6,7,List(0),infested,infest-01,false), Span(1,2,List(1),soil,soil,false), Span(4,5,List(2),planet,planet,false), Span(3,4,List(3),that,that,false)),Map(2 -> planet, 1 -> soil, 0 -> infest-01, 3 -> that),Map(s -> soil, p -> planet, t2 -> that, i -> infest-01))),[Ljava.lang.String;@2dfaea86,Annotation([Ljava.lang.String;@15888343,[Ljava.lang.String;@33ecda92,[Ljava.lang.String;@14fc5f04),Annotation([Ljava.lang.String;@6e2829c7,[Ljava.lang.String;@3feb2dda,[Ledu.cmu.lti.nlp.amr.Dependency;@6a8658ff),Annotation([Ljava.lang.String;@1c742ed4,[Ljava.lang.String;@333d4a8c,[Ljava.lang.String;@55de24cc),Annotation([Ljava.lang.String;@dc7df28,[Ljava.lang.String;@30f842ca,[Ledu.cmu.lti.nlp.amr.Entity;@69c81773))
AMR:
(i / infest-01, ARG1, s / soil)
(p / planet, mod, t2 / that)
(s / soil, location, p / planet)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 10,416 microseconds
Sentence: A baobab is something you will never , never be able to get rid of if you attend to it too late .

Oracle Span 1:  able => possible-01
Oracle Span 2:  attend => attend-02
Oracle Span 3:  baobab => baobab
Oracle Span 4:  late => late
Oracle Span 5:  too => too
Oracle Span 6:  you => you
Spans:
Span 10-11:  able => possible-01
Span 17-18:  attend => attend-02
Span 1-2:  baobab => baobab
Span 21-22:  late => late
Span 20-21:  too => too
Span 4-5:  you => you

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 10-11:  able => possible-01
Oracle Span 17-18:  attend => attend-02
Oracle Span 1-2:  baobab => baobab
Oracle Span 21-22:  late => late
Oracle Span 20-21:  too => too
Oracle Span 4-5:  you => you

Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	baobab	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	something	_	NN	NN	_	0	root	_	_
5	you	_	PRP	PRP	_	11	nsubj	_	_
6	will	_	MD	MD	_	11	aux	_	_
7	never	_	RB	RB	_	11	advmod	_	_
8	,	_	,	,	_	7	punct	_	_
9	never	_	RB	RB	_	7	advmod	_	_
10	be	_	VB	VB	_	11	cop	_	_
11	able	_	JJ	JJ	_	4	rcmod	_	_
12	to	_	TO	TO	_	14	aux	_	_
13	get	_	VB	VB	_	14	dep	_	_
14	rid	_	JJ	JJ	_	11	xcomp	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	if	_	IN	IN	_	18	mark	_	_
17	you	_	PRP	PRP	_	18	nsubj	_	_
18	attend	_	VBP	VBP	_	15	pcomp	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	it	_	PRP	PRP	_	19	pobj	_	_
21	too	_	RB	RB	_	22	advmod	_	_
22	late	_	RB	RB	_	14	advmod	_	_
23	.	_	.	.	_	4	punct	_	_

Oracle:
(a / attend-02, ARG0, y / you)
(a / attend-02, ARG1, b / baobab)
(a / attend-02, time, l / late)
(l / late, degree, t / too)
(p / possible-01, condition, a / attend-02)

Input(Some(Graph((possible-01 :condition (attend-02 :time (late :degree too) :ARG0 you :ARG1 baobab) :ARG1 (eliminate-01 :ARG0 you :ARG1 baobab :time ever) :polarity -),ArrayBuffer(Span(10,11,List(0),able,possible-01,false), Span(17,18,List(1),attend,attend-02,false), Span(21,22,List(2),late,late,false), Span(20,21,List(3),too,too,false), Span(4,5,List(4),you,you,false), Span(1,2,List(5),baobab,baobab,false)),Map(2 -> late, 5 -> baobab, 1 -> attend-02, 4 -> you, 0 -> possible-01, 3 -> too),Map(b -> baobab, t -> too, y -> you, p -> possible-01, a -> attend-02, l -> late))),[Ljava.lang.String;@4d14b6c2,Annotation([Ljava.lang.String;@7e990ed7,[Ljava.lang.String;@c05fddc,[Ljava.lang.String;@25df00a0),Annotation([Ljava.lang.String;@4d15107f,[Ljava.lang.String;@7b4c50bc,[Ledu.cmu.lti.nlp.amr.Dependency;@5884a914),Annotation([Ljava.lang.String;@50378a4,[Ljava.lang.String;@60f00693,[Ljava.lang.String;@79207381),Annotation([Ljava.lang.String;@491b9b8,[Ljava.lang.String;@1a4927d6,[Ledu.cmu.lti.nlp.amr.Entity;@7a6d7e92))
AMR:
(a / attend-02, ARG0, y / you)
(a / attend-02, ARG1, l / late)
(l / late, degree, t / too)
(p / possible-01, ARG0, b / baobab)
(p / possible-01, ARG1, y / you)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 76,482 microseconds
Sentence: It spreads over the entire planet .

Oracle Span 1:  entire => entire
Oracle Span 2:  It => it
Oracle Span 3:  planet => planet
Oracle Span 4:  spreads => spread-01
Spans:
Span 4-5:  entire => entire
Span 0-1:  It => it
Span 5-6:  planet => planet
Span 1-2:  spreads => spread-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  entire => entire
Oracle Span 0-1:  It => it
Oracle Span 5-6:  planet => planet
Oracle Span 1-2:  spreads => spread-01

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	spreads	_	VBZ	VBZ	_	0	root	_	_
3	over	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	entire	_	JJ	JJ	_	6	amod	_	_
6	planet	_	NN	NN	_	3	pobj	_	_
7	.	_	.	.	_	2	punct	_	_

Oracle:
(p / planet, mod, e / entire)
(s / spread-01, ARG1, i / it)
(s / spread-01, ARG2, p / planet)

Input(Some(Graph((spread-01 :ARG2 (planet :mod entire) :ARG1 it),ArrayBuffer(Span(1,2,List(0),spreads,spread-01,false), Span(5,6,List(1),planet,planet,false), Span(4,5,List(2),entire,entire,false), Span(0,1,List(3),It,it,false)),Map(2 -> entire, 1 -> planet, 0 -> spread-01, 3 -> it),Map(e -> entire, s -> spread-01, p -> planet, i -> it))),[Ljava.lang.String;@aba625,Annotation([Ljava.lang.String;@97e93f1,[Ljava.lang.String;@5a5a729f,[Ljava.lang.String;@4b520ea8),Annotation([Ljava.lang.String;@16150369,[Ljava.lang.String;@6b09fb41,[Ledu.cmu.lti.nlp.amr.Dependency;@624ea235),Annotation([Ljava.lang.String;@3932c79a,[Ljava.lang.String;@782859e,[Ljava.lang.String;@23f5b5dc),Annotation([Ljava.lang.String;@34bde49d,[Ljava.lang.String;@1b1cfb87,[Ledu.cmu.lti.nlp.amr.Entity;@821330f))
AMR:
(p / planet, extent, e / entire)
(s / spread-01, ARG1, i / it)
(s / spread-01, location, p / planet)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 10,327 microseconds
Sentence: It bores clear through it with its roots .

Oracle Span 1:  bores => bore-01
Oracle Span 2:  clear => clear-03
Oracle Span 3:  It => it
Oracle Span 4:  it => it
Oracle Span 5:  roots => root
Oracle Span 6:  through => through
Spans:
Span 1-2:  bores => bore-01
Span 2-3:  clear => clear-03
Span 0-1:  It => it
Span 4-5:  it => it
Span 7-8:  roots => root
Span 3-4:  through => through

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 1-2:  bores => bore-01
Oracle Span 2-3:  clear => clear-03
Oracle Span 0-1:  It => it
Oracle Span 4-5:  it => it
Oracle Span 7-8:  roots => root
Oracle Span 3-4:  through => through

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	bores	_	VBZ	VBZ	_	0	root	_	_
3	clear	_	JJ	JJ	_	2	acomp	_	_
4	through	_	IN	IN	_	3	prep	_	_
5	it	_	PRP	PRP	_	4	pobj	_	_
6	with	_	IN	IN	_	2	prep	_	_
7	its	_	PRP$	PRP$	_	8	poss	_	_
8	roots	_	NNS	NNS	_	6	pobj	_	_
9	.	_	.	.	_	2	punct	_	_

Oracle:
(b / bore-01, ARG0, i / it)
(b / bore-01, ARG2, t2 / through)
(b / bore-01, ARG3, r / root)
(r / root, poss, i / it)
(t2 / through, mod, c / clear-03)
(t2 / through, op, i2 / it)

Input(Some(Graph((bore-01 :ARG3 (root :poss it) :ARG2 (through :mod clear-03 :op it) :ARG0 it),ArrayBuffer(Span(1,2,List(0),bores,bore-01,false), Span(7,8,List(1),roots,root,false), Span(3,4,List(2),through,through,false), Span(2,3,List(3),clear,clear-03,false), Span(0,1,List(4),It,it,false), Span(4,5,List(5),it,it,false)),Map(2 -> through, 5 -> it, 1 -> root, 4 -> it, 0 -> bore-01, 3 -> clear-03),Map(b -> bore-01, i2 -> it, t2 -> through, i -> it, r -> root, c -> clear-03))),[Ljava.lang.String;@6f43c82,Annotation([Ljava.lang.String;@5db6b9cd,[Ljava.lang.String;@210ab13f,[Ljava.lang.String;@20b2475a),Annotation([Ljava.lang.String;@7857fe2,[Ljava.lang.String;@6f15d60e,[Ledu.cmu.lti.nlp.amr.Dependency;@1be2019a),Annotation([Ljava.lang.String;@29d80d2b,[Ljava.lang.String;@58e1d9d,[Ljava.lang.String;@446a1e84),Annotation([Ljava.lang.String;@4f0f2942,[Ljava.lang.String;@2657d4dd,[Ledu.cmu.lti.nlp.amr.Entity;@5340477f))
AMR:
(b / bore-01, ARG0, i2 / it)
(b / bore-01, ARG1, t2 / through)
(b / bore-01, ARG2, r / root)
(c / clear-03, ARG1, i / it)
(c / clear-03, ARG3, b / bore-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 60,216 microseconds
Sentence: And if the planet is too small , and the baobabs are too many , they split it in pieces ...

Oracle Span 1:  And => and
Oracle Span 2:  and => and
Oracle Span 3:  baobabs => baobab
Oracle Span 4:  many => many
Oracle Span 5:  pieces => piece
Oracle Span 6:  planet => planet
Oracle Span 7:  small => small
Oracle Span 8:  split => split-01
Oracle Span 9:  too => too
Oracle Span 10:  too => too
Spans:
Span 0-1:  And => and
Span 8-9:  and => and
Span 10-11:  baobabs => baobab
Span 13-14:  many => many
Span 19-20:  pieces => piece
Span 3-4:  planet => planet
Span 6-7:  small => small
Span 16-17:  split => split-01
Span 5-6:  too => too
Span 12-13:  too => too

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 8-9:  and => and
Oracle Span 10-11:  baobabs => baobab
Oracle Span 13-14:  many => many
Oracle Span 19-20:  pieces => piece
Oracle Span 3-4:  planet => planet
Oracle Span 6-7:  small => small
Oracle Span 16-17:  split => split-01
Oracle Span 5-6:  too => too
Oracle Span 12-13:  too => too

Dependencies:
1	And	_	CC	CC	_	17	cc	_	_
2	if	_	IN	IN	_	7	mark	_	_
3	the	_	DT	DT	_	4	det	_	_
4	planet	_	NN	NN	_	7	nsubj	_	_
5	is	_	VBZ	VBZ	_	7	cop	_	_
6	too	_	RB	RB	_	7	advmod	_	_
7	small	_	JJ	JJ	_	17	advcl	_	_
8	,	_	,	,	_	7	punct	_	_
9	and	_	CC	CC	_	7	cc	_	_
10	the	_	DT	DT	_	11	det	_	_
11	baobabs	_	NNS	NNS	_	14	nsubj	_	_
12	are	_	VBP	VBP	_	14	cop	_	_
13	too	_	RB	RB	_	14	advmod	_	_
14	many	_	JJ	JJ	_	7	conj	_	_
15	,	_	,	,	_	17	punct	_	_
16	they	_	PRP	PRP	_	17	nsubj	_	_
17	split	_	VBD	VBD	_	0	root	_	_
18	it	_	PRP	PRP	_	17	dobj	_	_
19	in	_	IN	IN	_	17	prep	_	_
20	pieces	_	NNS	NNS	_	19	pobj	_	_
21	...	_	:	:	_	17	punct	_	_

Oracle:
(a / and, op, s / split-01)
(a2 / and, op, b / baobab)
(a2 / and, op, s2 / small)
(b / baobab, quant, m / many)
(m / many, degree, t3 / too)
(s / split-01, ARG0, b / baobab)
(s / split-01, ARG1, p2 / planet)
(s / split-01, ARG2, p / piece)
(s / split-01, condition, a2 / and)
(s2 / small, degree, t2 / too)
(s2 / small, domain, p2 / planet)

Input(Some(Graph((and :op (split-01 :condition (and :op (baobab :quant (many :degree too)) :op (small :domain planet :degree too)) :ARG2 piece :ARG0 baobab :ARG1 planet)),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(16,17,List(1),split,split-01,false), Span(8,9,List(2),and,and,false), Span(10,11,List(3),baobabs,baobab,false), Span(13,14,List(4),many,many,false), Span(5,6,List(5),too,too,false), Span(6,7,List(6),small,small,false), Span(3,4,List(7),planet,planet,false), Span(12,13,List(8),too,too,false), Span(19,20,List(9),pieces,piece,false)),Map(2 -> and, 5 -> too, 8 -> too, 7 -> planet, 1 -> split-01, 4 -> many, 6 -> small, 9 -> piece, 0 -> and, 3 -> baobab),Map(s2 -> small, b -> baobab, p2 -> planet, s -> split-01, m -> many, p -> piece, t3 -> too, a -> and, t2 -> too, a2 -> and))),[Ljava.lang.String;@47caedad,Annotation([Ljava.lang.String;@7139992f,[Ljava.lang.String;@69504ae9,[Ljava.lang.String;@387a8303),Annotation([Ljava.lang.String;@28cda624,[Ljava.lang.String;@1500b2f3,[Ledu.cmu.lti.nlp.amr.Dependency;@7eecb5b8),Annotation([Ljava.lang.String;@126253fd,[Ljava.lang.String;@57db2b13,[Ljava.lang.String;@475c9c31),Annotation([Ljava.lang.String;@5c86a017,[Ljava.lang.String;@5c7bfdc1,[Ledu.cmu.lti.nlp.amr.Entity;@5276d6ee))
AMR:
(a / and, op, s / split-01)
(a2 / and, op, m / many)
(a2 / and, op, s2 / small)
(m / many, degree, t2 / too)
(m / many, domain, b / baobab)
(s / split-01, ARG1, m / many)
(s / split-01, ARG2, p / piece)
(s2 / small, degree, t3 / too)
(s2 / small, domain, p2 / planet)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 67,436 microseconds
Sentence: " It is a question of discipline , " the little prince said to me later on .

Oracle Span 1:  discipline => discipline
Oracle Span 2:  It => it
Oracle Span 3:  later => late
Oracle Span 4:  little => little
Oracle Span 5:  prince => prince
Oracle Span 6:  question => question
Oracle Span 7:  said => say-01
Spans:
Span 6-7:  discipline => discipline
Span 1-2:  It => it
Span 15-16:  later => late
Span 10-11:  little => little
Span 11-12:  prince => prince
Span 4-5:  question => question
Span 12-13:  said => say-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 6-7:  discipline => discipline
Oracle Span 1-2:  It => it
Oracle Span 15-16:  later => late
Oracle Span 10-11:  little => little
Oracle Span 11-12:  prince => prince
Oracle Span 4-5:  question => question
Oracle Span 12-13:  said => say-01

Dependencies:
1	"	_	''	''	_	13	punct	_	_
2	It	_	PRP	PRP	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	a	_	DT	DT	_	5	det	_	_
5	question	_	NN	NN	_	13	ccomp	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	discipline	_	NN	NN	_	6	pobj	_	_
8	,	_	,	,	_	13	punct	_	_
9	"	_	''	''	_	13	punct	_	_
10	the	_	DT	DT	_	12	det	_	_
11	little	_	JJ	JJ	_	12	amod	_	_
12	prince	_	NN	NN	_	13	nsubj	_	_
13	said	_	VBD	VBD	_	0	root	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	me	_	PRP	PRP	_	14	pobj	_	_
16	later	_	RB	RB	_	17	advmod	_	_
17	on	_	RB	RB	_	13	advmod	_	_
18	.	_	.	.	_	13	punct	_	_

Oracle:
(p / prince, mod, l / little)
(q / question, domain, i / it)
(q / question, topic, d / discipline)
(s / say-01, ARG0, p / prince)
(s / say-01, ARG1, q / question)
(s / say-01, time, l2 / late)

Input(Some(Graph((say-01 :time (late :degree more) :ARG2 i :ARG1 (question :domain it :topic discipline) :ARG0 (prince :mod little)),ArrayBuffer(Span(12,13,List(0),said,say-01,false), Span(15,16,List(1),later,late,false), Span(4,5,List(2),question,question,false), Span(1,2,List(3),It,it,false), Span(6,7,List(4),discipline,discipline,false), Span(11,12,List(5),prince,prince,false), Span(10,11,List(6),little,little,false)),Map(2 -> question, 5 -> prince, 1 -> late, 4 -> discipline, 6 -> little, 0 -> say-01, 3 -> it),Map(q -> question, s -> say-01, d -> discipline, p -> prince, i -> it, l2 -> late, l -> little))),[Ljava.lang.String;@71687585,Annotation([Ljava.lang.String;@1807f5a7,[Ljava.lang.String;@1b919693,[Ljava.lang.String;@7fb4f2a9),Annotation([Ljava.lang.String;@4dc27487,[Ljava.lang.String;@6a4f1a55,[Ledu.cmu.lti.nlp.amr.Dependency;@7dfd3c81),Annotation([Ljava.lang.String;@2584b82d,[Ljava.lang.String;@7bbc8656,[Ljava.lang.String;@6933b6c6),Annotation([Ljava.lang.String;@7d3e8655,[Ljava.lang.String;@7dfb0c0f,[Ledu.cmu.lti.nlp.amr.Entity;@626abbd0))
AMR:
(d / discipline, poss, p / prince)
(l2 / late, op, s / say-01)
(p / prince, mod, l / little)
(q / question, domain, i / it)
(s / say-01, ARG0, p / prince)
(s / say-01, ARG1, q / question)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 85,297 microseconds
Sentence: " When you 've finished your own toilet in the morning , then it is time to attend to the toilet of your planet , just so , with the greatest care .

Oracle Span 1:  attend => attend-02
Oracle Span 2:  care => care-04
Oracle Span 3:  finished => finish-01
Oracle Span 4:  greatest => (great :degree most)
Oracle Span 5:  morning => morning
Oracle Span 6:  planet => planet
Oracle Span 7:  toilet => toilet
Oracle Span 8:  toilet => toilet
Oracle Span 9:  you => you
Spans:
Span 17-18:  attend => attend-02
Span 31-32:  care => care-04
Span 4-5:  finished => finish-01
Span 30-31:  greatest => (great :degree most)
Span 10-11:  morning => morning
Span 23-24:  planet => planet
Span 7-8:  toilet => toilet
Span 20-21:  toilet => toilet
Span 2-3:  you => you

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 17-18:  attend => attend-02
Oracle Span 31-32:  care => care-04
Oracle Span 4-5:  finished => finish-01
Oracle Span 30-31:  greatest => (great :degree most)
Oracle Span 10-11:  morning => morning
Oracle Span 23-24:  planet => planet
Oracle Span 7-8:  toilet => toilet
Oracle Span 20-21:  toilet => toilet
Oracle Span 2-3:  you => you

Dependencies:
1	"	_	''	''	_	5	punct	_	_
2	When	_	WRB	WRB	_	4	advmod	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	've	_	VBP	VBP	_	5	advcl	_	_
5	finished	_	VBD	VBD	_	0	root	_	_
6	your	_	PRP$	PRP$	_	8	poss	_	_
7	own	_	JJ	JJ	_	8	amod	_	_
8	toilet	_	NN	NN	_	5	dobj	_	_
9	in	_	IN	IN	_	5	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	morning	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	5	punct	_	_
13	then	_	RB	RB	_	16	advmod	_	_
14	it	_	PRP	PRP	_	16	nsubj	_	_
15	is	_	VBZ	VBZ	_	16	cop	_	_
16	time	_	NN	NN	_	5	ccomp	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	attend	_	VB	VB	_	16	vmod	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	toilet	_	NN	NN	_	19	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	your	_	PRP$	PRP$	_	24	poss	_	_
24	planet	_	NN	NN	_	22	pobj	_	_
25	,	_	,	,	_	18	punct	_	_
26	just	_	RB	RB	_	27	advmod	_	_
27	so	_	RB	RB	_	18	advmod	_	_
28	,	_	,	,	_	18	punct	_	_
29	with	_	IN	IN	_	18	prep	_	_
30	the	_	DT	DT	_	32	det	_	_
31	greatest	_	JJS	JJS	_	32	amod	_	_
32	care	_	NN	NN	_	29	pobj	_	_
33	.	_	.	.	_	5	punct	_	_

Oracle:
(a / attend-02, ARG1, t2 / toilet)
(a / attend-02, manner, c / care-04)
(a / attend-02, time, f / finish-01)
(c / care-04, extent, g / great)
(f / finish-01, ARG0, y / you)
(f / finish-01, ARG1, t / toilet)
(g / great, degree, m2 / most)
(p / planet, poss, y / you)
(t / toilet, poss, y / you)
(t2 / toilet, poss, p / planet)

Input(Some(Graph((attend-02 :time (finish-01 :time (date-entity :dayperiod morning) :ARG1 (toilet :poss you) :ARG0 you) :manner (care-04 :extent (great :degree most)) :ARG1 (toilet :ARG1-of (resemble-01 :ARG2 toilet) :poss (planet :poss you)) :ARG0 you),ArrayBuffer(Span(17,18,List(0),attend,attend-02,false), Span(4,5,List(1),finished,finish-01,false), Span(10,11,List(2),morning,morning,false), Span(7,8,List(3),toilet,toilet,false), Span(2,3,List(4),you,you,false), Span(31,32,List(5),care,care-04,false), Span(30,31,List(6, 7),greatest,(great :degree most),false), Span(20,21,List(8),toilet,toilet,false), Span(23,24,List(9),planet,planet,false)),Map(2 -> morning, 5 -> care-04, 8 -> toilet, 7 -> most, 1 -> finish-01, 4 -> you, 6 -> great, 9 -> planet, 0 -> attend-02, 3 -> toilet),Map(t -> toilet, m2 -> most, m -> morning, p -> planet, g -> great, y -> you, a -> attend-02, t2 -> toilet, c -> care-04, f -> finish-01))),[Ljava.lang.String;@169bb4dd,Annotation([Ljava.lang.String;@1f9e9475,[Ljava.lang.String;@3aa078fd,[Ljava.lang.String;@d23e042),Annotation([Ljava.lang.String;@46d59067,[Ljava.lang.String;@2d0399f4,[Ledu.cmu.lti.nlp.amr.Dependency;@14dd7b39),Annotation([Ljava.lang.String;@66ea810,[Ljava.lang.String;@6cd24612,[Ljava.lang.String;@5dafbe45),Annotation([Ljava.lang.String;@2254127a,[Ljava.lang.String;@51891008,[Ledu.cmu.lti.nlp.amr.Entity;@2f953efd))
AMR:
(a / attend-02, ARG0, t / toilet)
(a / attend-02, ARG1, t2 / toilet)
(c / care-04, ARG0, m / morning)
(c / care-04, degree, g / great)
(f / finish-01, ARG0, y / you)
(f / finish-01, ARG1, t / toilet)
(f / finish-01, location, m / morning)
(g / great, degree, m2 / most)
(t2 / toilet, location, p / planet)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.2.0
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 219,039 microseconds
Sentence: You must see to it that you pull up regularly all the baobabs , at the very first moment when they can be distinguished from the rosebushes which they resemble so closely in their earliest youth .

Oracle Span 1:  all => all
Oracle Span 2:  baobabs => baobab
Oracle Span 3:  can => possible-01
Oracle Span 4:  closely => close-10
Oracle Span 5:  distinguished => distinguish-01
Oracle Span 6:  earliest => (early :degree most)
Oracle Span 7:  moment => moment
Oracle Span 8:  pull => pull-01
Oracle Span 9:  regularly => regular-02
Oracle Span 10:  resemble => resemble-01
Oracle Span 11:  rosebushes => rosebush
Oracle Span 12:  so => so
Oracle Span 13:  very => very
Oracle Span 14:  You => you
Oracle Span 15:  youth => youth
Spans:
Span 10-11:  all => all
Span 12-13:  baobabs => baobab
Span 21-22:  can => possible-01
Span 31-32:  closely => close-10
Span 23-24:  distinguished => distinguish-01
Span 34-35:  earliest => (early :degree most)
Span 18-19:  moment => moment
Span 7-8:  pull => pull-01
Span 9-10:  regularly => regular-02
Span 29-30:  resemble => resemble-01
Span 26-27:  rosebushes => rosebush
Span 30-31:  so => so
Span 16-17:  very => very
Span 0-1:  You => you
Span 35-36:  youth => youth

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 10-11:  all => all
Oracle Span 12-13:  baobabs => baobab
Oracle Span 21-22:  can => possible-01
Oracle Span 31-32:  closely => close-10
Oracle Span 23-24:  distinguished => distinguish-01
Oracle Span 34-35:  earliest => (early :degree most)
Oracle Span 18-19:  moment => moment
Oracle Span 7-8:  pull => pull-01
Oracle Span 9-10:  regularly => regular-02
Oracle Span 29-30:  resemble => resemble-01
Oracle Span 26-27:  rosebushes => rosebush
Oracle Span 30-31:  so => so
Oracle Span 16-17:  very => very
Oracle Span 0-1:  You => you
Oracle Span 35-36:  youth => youth

Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	must	_	MD	MD	_	3	aux	_	_
3	see	_	VB	VB	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	it	_	PRP	PRP	_	4	pobj	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	you	_	PRP	PRP	_	8	nsubj	_	_
8	pull	_	VBP	VBP	_	3	ccomp	_	_
9	up	_	RB	RB	_	10	advmod	_	_
10	regularly	_	RB	RB	_	8	advmod	_	_
11	all	_	PDT	PDT	_	13	predet	_	_
12	the	_	DT	DT	_	13	det	_	_
13	baobabs	_	NNS	NNS	_	8	dobj	_	_
14	,	_	,	,	_	8	punct	_	_
15	at	_	IN	IN	_	8	prep	_	_
16	the	_	DT	DT	_	19	det	_	_
17	very	_	RB	RB	_	18	advmod	_	_
18	first	_	JJ	JJ	_	19	amod	_	_
19	moment	_	NN	NN	_	15	pobj	_	_
20	when	_	WRB	WRB	_	24	advmod	_	_
21	they	_	PRP	PRP	_	24	nsubj	_	_
22	can	_	MD	MD	_	24	aux	_	_
23	be	_	VB	VB	_	24	cop	_	_
24	distinguished	_	JJ	JJ	_	19	rcmod	_	_
25	from	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	rosebushes	_	NNS	NNS	_	25	pobj	_	_
28	which	_	WDT	WDT	_	30	dobj	_	_
29	they	_	PRP	PRP	_	30	nsubj	_	_
30	resemble	_	VBP	VBP	_	27	rcmod	_	_
31	so	_	RB	RB	_	32	advmod	_	_
32	closely	_	RB	RB	_	30	advmod	_	_
33	in	_	IN	IN	_	30	prep	_	_
34	their	_	PRP$	PRP$	_	36	poss	_	_
35	earliest	_	JJS	JJS	_	36	amod	_	_
36	youth	_	NN	NN	_	33	pobj	_	_
37	.	_	.	.	_	3	punct	_	_

Oracle:
(b / baobab, mod, a / all)
(c / close-10, ARG1, r3 / resemble-01)
(c / close-10, degree, s / so)
(d / distinguish-01, ARG1, b / baobab)
(d / distinguish-01, ARG2, r2 / rosebush)
(e / early, degree, m2 / most)
(e / early, op, y2 / youth)
(p / pull-01, ARG0, y / you)
(p / pull-01, ARG1, b / baobab)
(p / pull-01, time, m / moment)
(p2 / possible-01, ARG1, d / distinguish-01)
(p2 / possible-01, time, m / moment)
(r / regular-02, ARG1, p / pull-01)
(r3 / resemble-01, ARG1, b / baobab)
(r3 / resemble-01, ARG2, r2 / rosebush)
(r3 / resemble-01, time, e / early)
(y2 / youth, poss, b / baobab)

Input(Some(Graph((obligate-01 :ARG1 (pull-01 :time (moment :time-of (possible-01 :ARG1 (distinguish-01 :ARG2 (rosebush :ARG2-of (resemble-01 :time (early :degree most :op (youth :poss baobab)) :ARG1-of (close-10 :degree so) :ARG1 baobab)) :ARG1 baobab)) :ord (ordinal-entity :value 1 :degree very)) :ARG1-of regular-02 :ARG1 (baobab :mod all) :ARG0 you)),ArrayBuffer(Span(7,8,List(0),pull,pull-01,false), Span(18,19,List(1),moment,moment,false), Span(21,22,List(2),can,possible-01,false), Span(23,24,List(3),distinguished,distinguish-01,false), Span(26,27,List(4),rosebushes,rosebush,false), Span(29,30,List(5),resemble,resemble-01,false), Span(34,35,List(6, 7),earliest,(early :degree most),false), Span(35,36,List(8),youth,youth,false), Span(30,31,List(9),so,so,false), Span(16,17,List(10),very,very,false), Span(12,13,List(11),baobabs,baobab,false), Span(10,11,List(12),all,all,false), Span(0,1,List(13),You,you,false), Span(31,32,List(14),closely,close-10,false), Span(9,10,List(15),regularly,regular-02,false)),Map(2 -> possible-01, 5 -> resemble-01, 12 -> all, 15 -> regular-02, 8 -> youth, 7 -> most, 1 -> moment, 4 -> rosebush, 11 -> baobab, 14 -> close-10, 6 -> early, 9 -> so, 0 -> pull-01, 10 -> very, 3 -> distinguish-01, 13 -> you),Map(e -> early, r3 -> resemble-01, b -> baobab, m2 -> most, p2 -> possible-01, s -> so, v -> very, d -> distinguish-01, m -> moment, y -> you, r2 -> rosebush, p -> pull-01, a -> all, r -> regular-02, c -> close-10, y2 -> youth))),[Ljava.lang.String;@f68f0dc,Annotation([Ljava.lang.String;@d2de489,[Ljava.lang.String;@14bdbc74,[Ljava.lang.String;@12591ac8),Annotation([Ljava.lang.String;@5a7fe64f,[Ljava.lang.String;@38145825,[Ledu.cmu.lti.nlp.amr.Dependency;@41330d4f),Annotation([Ljava.lang.String;@1b66c0fb,[Ljava.lang.String;@3e0e1046,[Ljava.lang.String;@24c1b2d2),Annotation([Ljava.lang.String;@7dc19a70,[Ljava.lang.String;@508dec2b,[Ledu.cmu.lti.nlp.amr.Entity;@1e4f4a5c))
AMR:
(b / baobab, mod, a / all)
(c / close-10, ARG1, r3 / resemble-01)
(c / close-10, degree, s / so)
(d / distinguish-01, ARG0, v / very)
(d / distinguish-01, ARG1, m / moment)
(e / early, degree, m2 / most)
(p / pull-01, ARG0, y / you)
(p / pull-01, ARG1, b / baobab)
(p2 / possible-01, ARG0, y / you)
(p2 / possible-01, ARG1, d / distinguish-01)
(r / regular-02, ARG0, s / so)
(r / regular-02, ARG1, p / pull-01)
(r3 / resemble-01, ARG0, r2 / rosebush)
(r3 / resemble-01, ARG1, y2 / youth)
(y2 / youth, degree, e / early)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.1
WARNING: makeIds can't find span Id: 0.0.3.1.0
WARNING: makeIds can't find span Id: 0.0.3.1.0.0
WARNING: makeIds can't find span Id: 0.0.3.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.3.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.3.1.0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.3.1.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.3.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.3.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 214,808 microseconds
Sentence: It is very tedious work , " the little prince added , " but very easy . "

Oracle Span 1:  added => add-01
Oracle Span 2:  but => contrast-01
Oracle Span 3:  easy => easy-05
Oracle Span 4:  little => little
Oracle Span 5:  prince => prince
Oracle Span 6:  tedious => tedious
Oracle Span 7:  very => very
Oracle Span 8:  very => very
Oracle Span 9:  work => work-01
Spans:
Span 10-11:  added => add-01
Span 13-14:  but => contrast-01
Span 15-16:  easy => easy-05
Span 8-9:  little => little
Span 9-10:  prince => prince
Span 3-4:  tedious => tedious
Span 2-3:  very => very
Span 14-15:  very => very
Span 4-5:  work => work-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  added => add-01
Oracle Span 13-14:  but => contrast-01
Oracle Span 15-16:  easy => easy-05
Oracle Span 8-9:  little => little
Oracle Span 9-10:  prince => prince
Oracle Span 3-4:  tedious => tedious
Oracle Span 2-3:  very => very
Oracle Span 14-15:  very => very
Oracle Span 4-5:  work => work-01

Dependencies:
1	It	_	PRP	PRP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	very	_	RB	RB	_	4	advmod	_	_
4	tedious	_	JJ	JJ	_	5	amod	_	_
5	work	_	NN	NN	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_
8	the	_	DT	DT	_	10	det	_	_
9	little	_	JJ	JJ	_	10	amod	_	_
10	prince	_	NN	NN	_	11	nsubj	_	_
11	added	_	VBD	VBD	_	5	dep	_	_
12	,	_	,	,	_	11	punct	_	_
13	"	_	''	''	_	11	punct	_	_
14	but	_	CC	CC	_	11	cc	_	_
15	very	_	JJ	JJ	_	11	conj	_	_
16	easy	_	RB	RB	_	15	advmod	_	_
17	.	_	.	.	_	5	punct	_	_
18	"	_	''	''	_	5	punct	_	_

Oracle:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, c / contrast-01)
(c / contrast-01, ARG1, t / tedious)
(c / contrast-01, ARG2, e / easy-05)
(e / easy-05, ARG1, w / work-01)
(e / easy-05, degree, v2 / very)
(p / prince, mod, l / little)
(t / tedious, degree, v / very)
(t / tedious, domain, w / work-01)

Input(Some(Graph((add-01 :ARG1 (contrast-01 :ARG2 (easy-05 :degree very :ARG1 work-01) :ARG1 (tedious :domain work-01 :degree very)) :ARG0 (prince :mod little)),ArrayBuffer(Span(10,11,List(0),added,add-01,false), Span(13,14,List(1),but,contrast-01,false), Span(15,16,List(2),easy,easy-05,false), Span(2,3,List(3),very,very,false), Span(3,4,List(4),tedious,tedious,false), Span(4,5,List(5),work,work-01,false), Span(14,15,List(6),very,very,false), Span(9,10,List(7),prince,prince,false), Span(8,9,List(8),little,little,false)),Map(2 -> easy-05, 5 -> work-01, 8 -> little, 7 -> prince, 1 -> contrast-01, 4 -> tedious, 6 -> very, 0 -> add-01, 3 -> very),Map(w -> work-01, v2 -> very, e -> easy-05, t -> tedious, v -> very, p -> prince, a -> add-01, l -> little, c -> contrast-01))),[Ljava.lang.String;@37313c65,Annotation([Ljava.lang.String;@465232e9,[Ljava.lang.String;@798162bc,[Ljava.lang.String;@1df8da7a),Annotation([Ljava.lang.String;@23941fb4,[Ljava.lang.String;@7486b455,[Ledu.cmu.lti.nlp.amr.Dependency;@660acfb),Annotation([Ljava.lang.String;@5d908d47,[Ljava.lang.String;@5efa40fe,[Ljava.lang.String;@1f9f6368),Annotation([Ljava.lang.String;@1c9b0314,[Ljava.lang.String;@45385f75,[Ledu.cmu.lti.nlp.amr.Entity;@49c90a9c))
AMR:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, c / contrast-01)
(c / contrast-01, ARG0, v / very)
(e / easy-05, ARG1, v / very)
(p / prince, mod, l / little)
(t / tedious, degree, v2 / very)
(w / work-01, ARG0, p / prince)
(w / work-01, mod, t / tedious)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 40,168 microseconds
Sentence: And one day he said to me : " You ought to make a beautiful drawing , so that the children where you live can see exactly how all this is .

Oracle Span 1:  all => all
Oracle Span 2:  And => and
Oracle Span 3:  beautiful => beautiful-02
Oracle Span 4:  can => possible-01
Oracle Span 5:  children => child
Oracle Span 6:  day => day
Oracle Span 7:  drawing => draw-01
Oracle Span 8:  exactly => exact
Oracle Span 9:  he => he
Oracle Span 10:  live => live-01
Oracle Span 11:  one => one
Oracle Span 12:  said => say-01
Oracle Span 13:  see => see-01
Oracle Span 14:  this => this
Spans:
Span 28-29:  all => all
Span 0-1:  And => and
Span 14-15:  beautiful => beautiful-02
Span 24-25:  can => possible-01
Span 20-21:  children => child
Span 2-3:  day => day
Span 15-16:  drawing => draw-01
Span 26-27:  exactly => exact
Span 3-4:  he => he
Span 23-24:  live => live-01
Span 1-2:  one => one
Span 4-5:  said => say-01
Span 25-26:  see => see-01
Span 29-30:  this => this

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 28-29:  all => all
Oracle Span 0-1:  And => and
Oracle Span 14-15:  beautiful => beautiful-02
Oracle Span 24-25:  can => possible-01
Oracle Span 20-21:  children => child
Oracle Span 2-3:  day => day
Oracle Span 15-16:  drawing => draw-01
Oracle Span 26-27:  exactly => exact
Oracle Span 3-4:  he => he
Oracle Span 23-24:  live => live-01
Oracle Span 1-2:  one => one
Oracle Span 4-5:  said => say-01
Oracle Span 25-26:  see => see-01
Oracle Span 29-30:  this => this

Dependencies:
1	And	_	CC	CC	_	5	cc	_	_
2	one	_	CD	CD	_	3	num	_	_
3	day	_	NN	NN	_	5	tmod	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	said	_	VBD	VBD	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	me	_	PRP	PRP	_	6	pobj	_	_
8	:	_	:	:	_	5	punct	_	_
9	"	_	''	''	_	5	punct	_	_
10	You	_	PRP	PRP	_	11	nsubj	_	_
11	ought	_	MD	MD	_	5	ccomp	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	make	_	VB	VB	_	11	xcomp	_	_
14	a	_	DT	DT	_	16	det	_	_
15	beautiful	_	JJ	JJ	_	16	amod	_	_
16	drawing	_	NN	NN	_	13	dobj	_	_
17	,	_	,	,	_	11	punct	_	_
18	so	_	RB	RB	_	26	advmod	_	_
19	that	_	IN	IN	_	26	mark	_	_
20	the	_	DT	DT	_	21	det	_	_
21	children	_	NNS	NNS	_	26	nsubj	_	_
22	where	_	WRB	WRB	_	24	advmod	_	_
23	you	_	PRP	PRP	_	24	nsubj	_	_
24	live	_	VBP	VBP	_	21	rcmod	_	_
25	can	_	MD	MD	_	26	aux	_	_
26	see	_	VB	VB	_	11	advcl	_	_
27	exactly	_	RB	RB	_	28	advmod	_	_
28	how	_	WRB	WRB	_	31	advmod	_	_
29	all	_	PDT	PDT	_	30	predet	_	_
30	this	_	DT	DT	_	31	nsubj	_	_
31	is	_	VBZ	VBZ	_	26	ccomp	_	_
32	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, s / say-01)
(c / child, location, l / live-01)
(d / day, mod, o / one)
(d3 / draw-01, purpose, p / possible-01)
(p / possible-01, ARG1, s2 / see-01)
(s / say-01, ARG0, h / he)
(s / say-01, time, d / day)
(s2 / see-01, ARG0, c / child)
(s2 / see-01, ARG1, t / this)
(s2 / see-01, manner, e / exact)
(t / this, mod, a2 / all)

Input(Some(Graph((and :op (say-01 :time (day :mod one) :ARG2 i :ARG1 (recommend-01 :ARG1 (draw-01 :purpose (possible-01 :ARG1 (see-01 :manner exact :ARG1 (this :mod all) :ARG0 (child :location (live-01 :ARG0 i)))) :ARG1 (picture :ARG1-of beautiful-02) :ARG0 i) :ARG0 he :ARG2 i) :ARG0 he)),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(4,5,List(1),said,say-01,false), Span(2,3,List(2),day,day,false), Span(1,2,List(3),one,one,false), Span(15,16,List(4),drawing,draw-01,false), Span(24,25,List(5),can,possible-01,false), Span(25,26,List(6),see,see-01,false), Span(29,30,List(7),this,this,false), Span(28,29,List(8),all,all,false), Span(20,21,List(9),children,child,false), Span(23,24,List(10),live,live-01,false), Span(14,15,List(11),beautiful,beautiful-02,false), Span(3,4,List(12),he,he,false), Span(26,27,List(13),exactly,exact,false)),Map(2 -> day, 5 -> possible-01, 12 -> he, 8 -> all, 7 -> this, 1 -> say-01, 4 -> draw-01, 11 -> beautiful-02, 6 -> see-01, 9 -> child, 0 -> and, 10 -> live-01, 3 -> one, 13 -> exact),Map(e -> exact, h -> he, s2 -> see-01, b -> beautiful-02, t -> this, d3 -> draw-01, s -> say-01, d -> day, p -> possible-01, a -> and, a2 -> all, c -> child, l -> live-01, o -> one))),[Ljava.lang.String;@2d29b4ee,Annotation([Ljava.lang.String;@69ee81fc,[Ljava.lang.String;@6e2aa843,[Ljava.lang.String;@6f36c2f0),Annotation([Ljava.lang.String;@f58853c,[Ljava.lang.String;@1224144a,[Ledu.cmu.lti.nlp.amr.Dependency;@29f7cefd),Annotation([Ljava.lang.String;@700fb871,[Ljava.lang.String;@3b35a229,[Ljava.lang.String;@9816741),Annotation([Ljava.lang.String;@1e16c0aa,[Ljava.lang.String;@13d73f29,[Ledu.cmu.lti.nlp.amr.Entity;@565f390))
AMR:
(a / and, op, s / say-01)
(b / beautiful-02, ARG1, d3 / draw-01)
(c / child, location, l / live-01)
(d / day, mod, o / one)
(d3 / draw-01, ARG0, h / he)
(l / live-01, ARG0, t / this)
(p / possible-01, ARG1, s2 / see-01)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, p / possible-01)
(s / say-01, time, d / day)
(s2 / see-01, ARG0, e / exact)
(s2 / see-01, ARG1, l / live-01)
(t / this, mod, a2 / all)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.2
Decoded in 218,565 microseconds
Sentence: That would be very useful to them if they were to travel some day .

Oracle Span 1:  day => day
Oracle Span 2:  some => some
Oracle Span 3:  That => that
Oracle Span 4:  they => they
Oracle Span 5:  travel => travel-01
Oracle Span 6:  useful => useful-05
Oracle Span 7:  very => very
Spans:
Span 13-14:  day => day
Span 12-13:  some => some
Span 0-1:  That => that
Span 8-9:  they => they
Span 11-12:  travel => travel-01
Span 4-5:  useful => useful-05
Span 3-4:  very => very

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 13-14:  day => day
Oracle Span 12-13:  some => some
Oracle Span 0-1:  That => that
Oracle Span 8-9:  they => they
Oracle Span 11-12:  travel => travel-01
Oracle Span 4-5:  useful => useful-05
Oracle Span 3-4:  very => very

Dependencies:
1	That	_	DT	DT	_	5	nsubj	_	_
2	would	_	MD	MD	_	5	aux	_	_
3	be	_	VB	VB	_	5	cop	_	_
4	very	_	RB	RB	_	5	advmod	_	_
5	useful	_	JJ	JJ	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	if	_	IN	IN	_	10	mark	_	_
9	they	_	PRP	PRP	_	10	nsubj	_	_
10	were	_	VBD	VBD	_	5	advcl	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	travel	_	VB	VB	_	10	xcomp	_	_
13	some	_	DT	DT	_	14	det	_	_
14	day	_	NN	NN	_	12	tmod	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(d / day, mod, s / some)
(t3 / travel-01, ARG0, t2 / they)
(t3 / travel-01, time, d / day)
(u / useful-05, ARG0, t2 / they)
(u / useful-05, ARG1, t / that)
(u / useful-05, condition, t3 / travel-01)
(u / useful-05, degree, v / very)

Input(Some(Graph((useful-05 :condition (travel-01 :time (day :mod some) :ARG0 they) :degree very :ARG1 that :ARG0 they),ArrayBuffer(Span(4,5,List(0),useful,useful-05,false), Span(11,12,List(1),travel,travel-01,false), Span(13,14,List(2),day,day,false), Span(12,13,List(3),some,some,false), Span(3,4,List(4),very,very,false), Span(0,1,List(5),That,that,false), Span(8,9,List(6),they,they,false)),Map(2 -> day, 5 -> that, 1 -> travel-01, 4 -> very, 6 -> they, 0 -> useful-05, 3 -> some),Map(t -> that, s -> some, v -> very, d -> day, t3 -> travel-01, t2 -> they, u -> useful-05))),[Ljava.lang.String;@7dc3712,Annotation([Ljava.lang.String;@2f67a4d3,[Ljava.lang.String;@5e3f861,[Ljava.lang.String;@2fb0623e),Annotation([Ljava.lang.String;@49b2a47d,[Ljava.lang.String;@5be1d0a4,[Ledu.cmu.lti.nlp.amr.Dependency;@415b0b49),Annotation([Ljava.lang.String;@6d5620ce,[Ljava.lang.String;@311bf055,[Ljava.lang.String;@642a7222),Annotation([Ljava.lang.String;@7d322cad,[Ljava.lang.String;@21be3395,[Ledu.cmu.lti.nlp.amr.Entity;@4f49f6af))
AMR:
(d / day, mod, s / some)
(t3 / travel-01, ARG1, t2 / they)
(t3 / travel-01, time, d / day)
(u / useful-05, ARG0, t / that)
(u / useful-05, ARG1, t2 / they)
(u / useful-05, degree, v / very)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 36,977 microseconds
Sentence: Sometimes , " he added , " there is no harm in putting off a piece of work until another day .

Oracle Span 1:  added => add-01
Oracle Span 2:  another => another
Oracle Span 3:  day => day
Oracle Span 4:  harm => harm-01
Oracle Span 5:  he => he
Oracle Span 6:  no => -
Oracle Span 7:  piece => piece
Oracle Span 8:  Sometimes => sometimes
Oracle Span 9:  work => (thing :ARG1-of work-01)
Spans:
Span 4-5:  added => add-01
Span 19-20:  another => another
Span 20-21:  day => day
Span 10-11:  harm => harm-01
Span 3-4:  he => he
Span 9-10:  no => -
Span 15-16:  piece => piece
Span 0-1:  Sometimes => sometimes
Span 17-18:  work => (thing :ARG1-of work-01)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 4-5:  added => add-01
Oracle Span 19-20:  another => another
Oracle Span 20-21:  day => day
Oracle Span 10-11:  harm => harm-01
Oracle Span 3-4:  he => he
Oracle Span 9-10:  no => -
Oracle Span 15-16:  piece => piece
Oracle Span 0-1:  Sometimes => sometimes
Oracle Span 17-18:  work => (thing :ARG1-of work-01)

Dependencies:
1	Sometimes	_	RB	RB	_	9	advmod	_	_
2	,	_	,	,	_	9	punct	_	_
3	"	_	''	''	_	9	punct	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	added	_	VBD	VBD	_	9	ccomp	_	_
6	,	_	,	,	_	9	punct	_	_
7	"	_	''	''	_	9	punct	_	_
8	there	_	EX	EX	_	9	expl	_	_
9	is	_	VBZ	VBZ	_	0	root	_	_
10	no	_	DT	DT	_	11	det	_	_
11	harm	_	NN	NN	_	9	nsubj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	putting	_	VBG	VBG	_	12	pcomp	_	_
14	off	_	RP	RP	_	13	prt	_	_
15	a	_	DT	DT	_	16	det	_	_
16	piece	_	NN	NN	_	13	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	work	_	NN	NN	_	17	pobj	_	_
19	until	_	IN	IN	_	13	prep	_	_
20	another	_	DT	DT	_	21	det	_	_
21	day	_	NN	NN	_	19	pobj	_	_
22	.	_	.	.	_	9	punct	_	_

Oracle:
(a / add-01, ARG0, h / he)
(a / add-01, ARG1, h2 / harm-01)
(d / day, mod, a2 / another)
(h2 / harm-01, polarity, - / -)
(h2 / harm-01, time, s / sometimes)
(t / thing, quant, p3 / piece)
(w / work-01, ARG1, t / thing)

Input(Some(Graph((add-01 :ARG1 (harm-01 :time sometimes :ARG0 (put-off-06 :ARG1 (thing :quant piece :ARG1-of work-01) :ARG2 (day :mod another)) :polarity -) :ARG0 he),ArrayBuffer(Span(9,10,List(0),no,-,false), Span(4,5,List(1),added,add-01,false), Span(10,11,List(2),harm,harm-01,false), Span(0,1,List(3),Sometimes,sometimes,false), Span(17,18,List(4, 5),work,(thing :ARG1-of work-01),false), Span(15,16,List(6),piece,piece,false), Span(20,21,List(7),day,day,false), Span(19,20,List(8),another,another,false), Span(3,4,List(9),he,he,false)),Map(2 -> harm-01, 5 -> work-01, 8 -> another, 7 -> day, 1 -> add-01, 4 -> thing, 6 -> piece, 9 -> he, 0 -> -, 3 -> sometimes),Map(w -> work-01, h -> he, t -> thing, h2 -> harm-01, s -> sometimes, d -> day, a -> add-01, a2 -> another, - -> -, p3 -> piece))),[Ljava.lang.String;@78452606,Annotation([Ljava.lang.String;@147e2ae7,[Ljava.lang.String;@448c8166,[Ljava.lang.String;@4470fbd6),Annotation([Ljava.lang.String;@15d49048,[Ljava.lang.String;@7098b907,[Ledu.cmu.lti.nlp.amr.Dependency;@503f91c3),Annotation([Ljava.lang.String;@13526e59,[Ljava.lang.String;@2235eaab,[Ljava.lang.String;@17503f6b),Annotation([Ljava.lang.String;@3bcd05cb,[Ljava.lang.String;@3b6d844d,[Ledu.cmu.lti.nlp.amr.Entity;@36804139))
AMR:
(a / add-01, ARG0, h2 / harm-01)
(a / add-01, ARG1, t / thing)
(a / add-01, ARG2, h / he)
(d / day, mod, a2 / another)
(h2 / harm-01, ARG0, d / day)
(h2 / harm-01, ARG1, s / sometimes)
(h2 / harm-01, polarity, - / -)
(t / thing, mod, p3 / piece)
(w / work-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 174,992 microseconds
Sentence: But when it is a matter of baobabs , that always means a catastrophe .

Oracle Span 1:  always => always
Oracle Span 2:  baobabs => baobab
Oracle Span 3:  But => contrast-01
Oracle Span 4:  catastrophe => catastrophe
Oracle Span 5:  means => mean-01
Oracle Span 6:  that => that
Spans:
Span 10-11:  always => always
Span 7-8:  baobabs => baobab
Span 0-1:  But => contrast-01
Span 13-14:  catastrophe => catastrophe
Span 11-12:  means => mean-01
Span 9-10:  that => that

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 10-11:  always => always
Oracle Span 7-8:  baobabs => baobab
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  catastrophe => catastrophe
Oracle Span 11-12:  means => mean-01
Oracle Span 9-10:  that => that

Dependencies:
1	But	_	CC	CC	_	12	cc	_	_
2	when	_	WRB	WRB	_	6	advmod	_	_
3	it	_	PRP	PRP	_	6	nsubj	_	_
4	is	_	VBZ	VBZ	_	6	cop	_	_
5	a	_	DT	DT	_	6	det	_	_
6	matter	_	NN	NN	_	12	advcl	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	baobabs	_	NNS	NNS	_	7	pobj	_	_
9	,	_	,	,	_	12	punct	_	_
10	that	_	DT	DT	_	12	nsubj	_	_
11	always	_	RB	RB	_	12	advmod	_	_
12	means	_	VBZ	VBZ	_	0	root	_	_
13	a	_	DT	DT	_	14	det	_	_
14	catastrophe	_	NN	NN	_	12	dobj	_	_
15	.	_	.	.	_	12	punct	_	_

Oracle:
(c2 / contrast-01, ARG2, m3 / mean-01)
(m3 / mean-01, ARG1, t / that)
(m3 / mean-01, ARG2, c / catastrophe)
(m3 / mean-01, condition, b / baobab)
(m3 / mean-01, time, a / always)

Input(Some(Graph((contrast-01 :ARG2 (mean-01 :condition baobab :time always :ARG2 catastrophe :ARG1 that)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(11,12,List(1),means,mean-01,false), Span(7,8,List(2),baobabs,baobab,false), Span(10,11,List(3),always,always,false), Span(13,14,List(4),catastrophe,catastrophe,false), Span(9,10,List(5),that,that,false)),Map(2 -> baobab, 5 -> that, 1 -> mean-01, 4 -> catastrophe, 0 -> contrast-01, 3 -> always),Map(m3 -> mean-01, t -> that, b -> baobab, a -> always, c -> catastrophe, c2 -> contrast-01))),[Ljava.lang.String;@20bd8be5,Annotation([Ljava.lang.String;@730d2164,[Ljava.lang.String;@24959ca4,[Ljava.lang.String;@10289886),Annotation([Ljava.lang.String;@5c86dbc5,[Ljava.lang.String;@461ad730,[Ledu.cmu.lti.nlp.amr.Dependency;@4ee203eb),Annotation([Ljava.lang.String;@1a5a4e19,[Ljava.lang.String;@7068e664,[Ljava.lang.String;@60db1c0e),Annotation([Ljava.lang.String;@3e78b6a5,[Ljava.lang.String;@769a1df5,[Ledu.cmu.lti.nlp.amr.Entity;@41f69e84))
AMR:
(a / always, domain, t / that)
(c2 / contrast-01, ARG0, b / baobab)
(c2 / contrast-01, ARG2, m3 / mean-01)
(m3 / mean-01, ARG1, c / catastrophe)
(m3 / mean-01, time, a / always)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 54,163 microseconds
Sentence: I knew a planet that was inhabited by a lazy man .

Oracle Span 1:  I => i
Oracle Span 2:  inhabited => inhabit-01
Oracle Span 3:  knew => know-02
Oracle Span 4:  lazy => lazy
Oracle Span 5:  man => man
Oracle Span 6:  planet => planet
Spans:
Span 0-1:  I => i
Span 6-7:  inhabited => inhabit-01
Span 1-2:  knew => know-02
Span 9-10:  lazy => lazy
Span 10-11:  man => man
Span 3-4:  planet => planet

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 6-7:  inhabited => inhabit-01
Oracle Span 1-2:  knew => know-02
Oracle Span 9-10:  lazy => lazy
Oracle Span 10-11:  man => man
Oracle Span 3-4:  planet => planet

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	knew	_	VBD	VBD	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	planet	_	NN	NN	_	2	dobj	_	_
5	that	_	WDT	WDT	_	7	nsubjpass	_	_
6	was	_	VBD	VBD	_	7	auxpass	_	_
7	inhabited	_	VBN	VBN	_	4	rcmod	_	_
8	by	_	IN	IN	_	7	prep	_	_
9	a	_	DT	DT	_	11	det	_	_
10	lazy	_	JJ	JJ	_	11	amod	_	_
11	man	_	NN	NN	_	8	pobj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(i2 / inhabit-01, ARG0, m / man)
(i2 / inhabit-01, ARG1, p / planet)
(k / know-02, ARG0, i / i)
(k / know-02, ARG1, p / planet)
(m / man, mod, l / lazy)

Input(Some(Graph((know-02 :ARG1 (planet :ARG1-of (inhabit-01 :ARG0 (man :mod lazy))) :ARG0 i),ArrayBuffer(Span(1,2,List(0),knew,know-02,false), Span(3,4,List(1),planet,planet,false), Span(6,7,List(2),inhabited,inhabit-01,false), Span(10,11,List(3),man,man,false), Span(9,10,List(4),lazy,lazy,false), Span(0,1,List(5),I,i,false)),Map(2 -> inhabit-01, 5 -> i, 1 -> planet, 4 -> lazy, 0 -> know-02, 3 -> man),Map(k -> know-02, m -> man, p -> planet, i2 -> inhabit-01, i -> i, l -> lazy))),[Ljava.lang.String;@7975d1d8,Annotation([Ljava.lang.String;@2438dcd,[Ljava.lang.String;@24105dc5,[Ljava.lang.String;@5167f57d),Annotation([Ljava.lang.String;@64b0598,[Ljava.lang.String;@18f8cd79,[Ledu.cmu.lti.nlp.amr.Dependency;@3e2055d6),Annotation([Ljava.lang.String;@50029372,[Ljava.lang.String;@e3b3b2f,[Ljava.lang.String;@50f6ac94),Annotation([Ljava.lang.String;@6cc4cdb9,[Ljava.lang.String;@28194a50,[Ledu.cmu.lti.nlp.amr.Entity;@7f2cfe3f))
AMR:
(i2 / inhabit-01, ARG0, m / man)
(i2 / inhabit-01, ARG1, p / planet)
(k / know-02, ARG0, i / i)
(k / know-02, ARG1, p / planet)
(m / man, mod, l / lazy)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 24,423 microseconds
Sentence: He neglected three little bushes ... "

Oracle Span 1:  bushes => bush
Oracle Span 2:  He => he
Oracle Span 3:  little => little
Oracle Span 4:  neglected => neglect-01
Oracle Span 5:  three => 3
Spans:
Span 4-5:  bushes => bush
Span 0-1:  He => he
Span 3-4:  little => little
Span 1-2:  neglected => neglect-01
Span 2-3:  three => 3

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  bushes => bush
Oracle Span 0-1:  He => he
Oracle Span 3-4:  little => little
Oracle Span 1-2:  neglected => neglect-01
Oracle Span 2-3:  three => 3

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	neglected	_	VBD	VBD	_	0	root	_	_
3	three	_	CD	CD	_	5	num	_	_
4	little	_	JJ	JJ	_	5	amod	_	_
5	bushes	_	NNS	NNS	_	2	dobj	_	_
6	...	_	.	.	_	2	punct	_	_
7	"	_	''	''	_	2	punct	_	_

Oracle:
(b / bush, mod, l / little)
(b / bush, quant, 3 / 3)
(n / neglect-01, ARG0, h / he)
(n / neglect-01, ARG1, b / bush)

Input(Some(Graph((neglect-01 :ARG1 (bush :quant 3 :mod little) :ARG0 he),ArrayBuffer(Span(1,2,List(0),neglected,neglect-01,false), Span(4,5,List(1),bushes,bush,false), Span(2,3,List(2),three,3,false), Span(3,4,List(3),little,little,false), Span(0,1,List(4),He,he,false)),Map(2 -> 3, 1 -> bush, 4 -> he, 0 -> neglect-01, 3 -> little),Map(n -> neglect-01, h -> he, b -> bush, l -> little, 3 -> 3))),[Ljava.lang.String;@1a5b6f42,Annotation([Ljava.lang.String;@5038d0b5,[Ljava.lang.String;@32115b28,[Ljava.lang.String;@2ad48653),Annotation([Ljava.lang.String;@6bb4dd34,[Ljava.lang.String;@7d9f158f,[Ledu.cmu.lti.nlp.amr.Dependency;@45efd90f),Annotation([Ljava.lang.String;@4b8729ff,[Ljava.lang.String;@61710c6,[Ljava.lang.String;@3214ee6),Annotation([Ljava.lang.String;@383dc82c,[Ljava.lang.String;@4a07d605,[Ledu.cmu.lti.nlp.amr.Entity;@74287ea3))
AMR:
(b / bush, mod, l / little)
(b / bush, poss, h / he)
(b / bush, quant, 3 / 3)
(n / neglect-01, ARG0, h / he)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 16,672 microseconds
Sentence: So , as the little prince described it to me , I have made a drawing of that planet .

Oracle Span 1:  described => describe-01
Oracle Span 2:  drawing => draw-01
Oracle Span 3:  I => i
Oracle Span 4:  little => little
Oracle Span 5:  planet => planet
Oracle Span 6:  prince => prince
Oracle Span 7:  that => that
Spans:
Span 6-7:  described => describe-01
Span 15-16:  drawing => draw-01
Span 11-12:  I => i
Span 4-5:  little => little
Span 18-19:  planet => planet
Span 5-6:  prince => prince
Span 17-18:  that => that

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 6-7:  described => describe-01
Oracle Span 15-16:  drawing => draw-01
Oracle Span 11-12:  I => i
Oracle Span 4-5:  little => little
Oracle Span 18-19:  planet => planet
Oracle Span 5-6:  prince => prince
Oracle Span 17-18:  that => that

Dependencies:
1	So	_	IN	IN	_	14	dep	_	_
2	,	_	,	,	_	14	punct	_	_
3	as	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	little	_	JJ	JJ	_	6	amod	_	_
6	prince	_	NN	NN	_	7	nsubj	_	_
7	described	_	VBD	VBD	_	14	advcl	_	_
8	it	_	PRP	PRP	_	7	dobj	_	_
9	to	_	TO	TO	_	7	prep	_	_
10	me	_	PRP	PRP	_	9	pobj	_	_
11	,	_	,	,	_	14	punct	_	_
12	I	_	PRP	PRP	_	14	nsubj	_	_
13	have	_	VBP	VBP	_	14	aux	_	_
14	made	_	VBN	VBN	_	0	root	_	_
15	a	_	DT	DT	_	16	det	_	_
16	drawing	_	NN	NN	_	14	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	that	_	DT	DT	_	19	det	_	_
19	planet	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	14	punct	_	_

Oracle:
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, p / planet)
(d / draw-01, manner, d2 / describe-01)
(d2 / describe-01, ARG0, p2 / prince)
(d2 / describe-01, ARG1, p / planet)
(d2 / describe-01, beneficiary, i / i)
(p / planet, mod, t / that)
(p2 / prince, mod, l / little)

Input(Some(Graph((draw-01 :ARG1-of cause-01 :manner (describe-01 :ARG0 (prince :mod little) :ARG1 planet :beneficiary i) :ARG1 (planet :mod that) :ARG0 i),ArrayBuffer(Span(15,16,List(0),drawing,draw-01,false), Span(6,7,List(1),described,describe-01,false), Span(5,6,List(2),prince,prince,false), Span(4,5,List(3),little,little,false), Span(18,19,List(4),planet,planet,false), Span(17,18,List(5),that,that,false), Span(11,12,List(6),I,i,false)),Map(2 -> prince, 5 -> that, 1 -> describe-01, 4 -> planet, 6 -> i, 0 -> draw-01, 3 -> little),Map(t -> that, p2 -> prince, d -> draw-01, p -> planet, d2 -> describe-01, i -> i, l -> little))),[Ljava.lang.String;@7d7758be,Annotation([Ljava.lang.String;@2bdd8394,[Ljava.lang.String;@5f9edf14,[Ljava.lang.String;@68746f22),Annotation([Ljava.lang.String;@2f01783a,[Ljava.lang.String;@68878f6d,[Ledu.cmu.lti.nlp.amr.Dependency;@41488b16),Annotation([Ljava.lang.String;@a8ef162,[Ljava.lang.String;@2eea88a1,[Ljava.lang.String;@7ac296f6),Annotation([Ljava.lang.String;@7fd7a283,[Ljava.lang.String;@22f59fa,[Ledu.cmu.lti.nlp.amr.Entity;@78fa769e))
AMR:
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, p / planet)
(d2 / describe-01, ARG0, p2 / prince)
(d2 / describe-01, ARG1, d / draw-01)
(p / planet, mod, t / that)
(p2 / prince, mod, l / little)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 75,879 microseconds
Sentence: I do not much like to take the tone of a moralist .

Oracle Span 1:  I => i
Oracle Span 2:  like => like-01
Oracle Span 3:  moralist => moralist
Oracle Span 4:  much => much
Oracle Span 5:  take => take-01
Oracle Span 6:  tone => tone
Spans:
Span 0-1:  I => i
Span 4-5:  like => like-01
Span 11-12:  moralist => moralist
Span 3-4:  much => much
Span 6-7:  take => take-01
Span 8-9:  tone => tone

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 4-5:  like => like-01
Oracle Span 11-12:  moralist => moralist
Oracle Span 3-4:  much => much
Oracle Span 6-7:  take => take-01
Oracle Span 8-9:  tone => tone

Dependencies:
1	I	_	PRP	PRP	_	5	nsubj	_	_
2	do	_	VBP	VBP	_	5	aux	_	_
3	not	_	RB	RB	_	5	neg	_	_
4	much	_	RB	RB	_	5	advmod	_	_
5	like	_	VB	VB	_	0	root	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	take	_	VB	VB	_	5	xcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	tone	_	NN	NN	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	moralist	_	NN	NN	_	10	pobj	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(l / like-01, ARG0, i / i)
(l / like-01, ARG1, t / take-01)
(l / like-01, degree, m / much)
(t / take-01, ARG0, i / i)
(t / take-01, ARG1, t2 / tone)
(t2 / tone, poss, m2 / moralist)

Input(Some(Graph((like-01 :degree much :ARG1 (take-01 :ARG1 (tone :poss moralist) :ARG0 i) :ARG0 i :polarity -),ArrayBuffer(Span(4,5,List(0),like,like-01,false), Span(3,4,List(1),much,much,false), Span(6,7,List(2),take,take-01,false), Span(8,9,List(3),tone,tone,false), Span(11,12,List(4),moralist,moralist,false), Span(0,1,List(5),I,i,false)),Map(2 -> take-01, 5 -> i, 1 -> much, 4 -> moralist, 0 -> like-01, 3 -> tone),Map(t -> take-01, m2 -> moralist, m -> much, t2 -> tone, i -> i, l -> like-01))),[Ljava.lang.String;@16612a51,Annotation([Ljava.lang.String;@54e041a4,[Ljava.lang.String;@2c78324b,[Ljava.lang.String;@79defdc),Annotation([Ljava.lang.String;@18317edc,[Ljava.lang.String;@4e0ae11f,[Ledu.cmu.lti.nlp.amr.Dependency;@238d68ff),Annotation([Ljava.lang.String;@4b86805d,[Ljava.lang.String;@5852c06f,[Ljava.lang.String;@4149c063),Annotation([Ljava.lang.String;@9cb8225,[Ljava.lang.String;@76b07f29,[Ledu.cmu.lti.nlp.amr.Entity;@38af9828))
AMR:
(l / like-01, ARG0, i / i)
(l / like-01, ARG1, t / take-01)
(l / like-01, degree, m / much)
(t / take-01, ARG1, t2 / tone)
(t2 / tone, poss, m2 / moralist)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 71,447 microseconds
Sentence: But the danger of the baobabs is so little understood , and such considerable risks would be run by anyone who might get lost on an asteroid , that for once I am breaking through my reserve .

Oracle Span 1:  and => and
Oracle Span 2:  anyone => anyone
Oracle Span 3:  asteroid => asteroid
Oracle Span 4:  baobabs => baobab
Oracle Span 5:  breaking => break-away-14
Oracle Span 6:  But => contrast-01
Oracle Span 7:  considerable => considerable
Oracle Span 8:  danger => danger
Oracle Span 9:  I => i
Oracle Span 10:  little => little
Oracle Span 11:  lost => lose-02
Oracle Span 12:  reserve => reserve
Oracle Span 13:  risks => risk-01
Oracle Span 14:  so => so
Oracle Span 15:  such => such
Oracle Span 16:  understood => understand-01
Spans:
Span 11-12:  and => and
Span 19-20:  anyone => anyone
Span 26-27:  asteroid => asteroid
Span 5-6:  baobabs => baobab
Span 33-34:  breaking => break-away-14
Span 0-1:  But => contrast-01
Span 13-14:  considerable => considerable
Span 2-3:  danger => danger
Span 31-32:  I => i
Span 8-9:  little => little
Span 23-24:  lost => lose-02
Span 36-37:  reserve => reserve
Span 14-15:  risks => risk-01
Span 7-8:  so => so
Span 12-13:  such => such
Span 9-10:  understood => understand-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 19-20:  anyone => anyone
Oracle Span 26-27:  asteroid => asteroid
Oracle Span 5-6:  baobabs => baobab
Oracle Span 33-34:  breaking => break-away-14
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  considerable => considerable
Oracle Span 2-3:  danger => danger
Oracle Span 31-32:  I => i
Oracle Span 8-9:  little => little
Oracle Span 23-24:  lost => lose-02
Oracle Span 36-37:  reserve => reserve
Oracle Span 14-15:  risks => risk-01
Oracle Span 7-8:  so => so
Oracle Span 12-13:  such => such
Oracle Span 9-10:  understood => understand-01

Dependencies:
1	But	_	CC	CC	_	10	cc	_	_
2	the	_	DT	DT	_	3	det	_	_
3	danger	_	NN	NN	_	10	nsubjpass	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	baobabs	_	NNS	NNS	_	4	pobj	_	_
7	is	_	VBZ	VBZ	_	10	auxpass	_	_
8	so	_	RB	RB	_	9	advmod	_	_
9	little	_	RB	RB	_	10	advmod	_	_
10	understood	_	VBN	VBN	_	0	root	_	_
11	,	_	,	,	_	10	punct	_	_
12	and	_	CC	CC	_	10	cc	_	_
13	such	_	JJ	JJ	_	15	amod	_	_
14	considerable	_	JJ	JJ	_	15	amod	_	_
15	risks	_	NNS	NNS	_	18	nsubjpass	_	_
16	would	_	MD	MD	_	18	aux	_	_
17	be	_	VB	VB	_	18	auxpass	_	_
18	run	_	VBN	VBN	_	10	conj	_	_
19	by	_	IN	IN	_	18	prep	_	_
20	anyone	_	NN	NN	_	19	pobj	_	_
21	who	_	WP	WP	_	24	nsubjpass	_	_
22	might	_	MD	MD	_	24	aux	_	_
23	get	_	VB	VB	_	24	auxpass	_	_
24	lost	_	VBN	VBN	_	20	rcmod	_	_
25	on	_	IN	IN	_	24	prep	_	_
26	an	_	DT	DT	_	27	det	_	_
27	asteroid	_	NN	NN	_	25	pobj	_	_
28	,	_	,	,	_	24	punct	_	_
29	that	_	IN	IN	_	34	mark	_	_
30	for	_	IN	IN	_	34	prep	_	_
31	once	_	RB	RB	_	30	pobj	_	_
32	I	_	PRP	PRP	_	34	nsubj	_	_
33	am	_	VBP	VBP	_	34	aux	_	_
34	breaking	_	VBG	VBG	_	24	ccomp	_	_
35	through	_	IN	IN	_	34	prep	_	_
36	my	_	PRP$	PRP$	_	37	poss	_	_
37	reserve	_	NN	NN	_	35	pobj	_	_
38	.	_	.	.	_	10	punct	_	_

Oracle:
(a / and, op, r / risk-01)
(a / and, op, u / understand-01)
(b3 / break-away-14, ARG0, i / i)
(b3 / break-away-14, ARG1, r3 / reserve)
(c / considerable, mod, s2 / such)
(d / danger, poss, b2 / baobab)
(l / little, degree, s / so)
(l2 / lose-02, ARG1, a2 / anyone)
(l2 / lose-02, location, a3 / asteroid)
(r / risk-01, ARG0, a2 / anyone)
(r / risk-01, degree, c / considerable)
(r3 / reserve, poss, i / i)
(u / understand-01, ARG1, d / danger)
(u / understand-01, degree, l / little)

Input(Some(Graph((contrast-01 :ARG2 (cause-01 :ARG0 (and :op (risk-01 :degree (considerable :mod such) :ARG0 (anyone :ARG1-of (lose-02 :ARG1-of possible-01 :location asteroid))) :op (understand-01 :degree (little :degree so) :ARG1 (danger :poss baobab))) :ARG1 (break-away-14 :mod for-once :ARG1 (reserve :poss i) :ARG0 i))),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(11,12,List(1),and,and,false), Span(14,15,List(2),risks,risk-01,false), Span(13,14,List(3),considerable,considerable,false), Span(12,13,List(4),such,such,false), Span(19,20,List(5),anyone,anyone,false), Span(23,24,List(6),lost,lose-02,false), Span(26,27,List(7),asteroid,asteroid,false), Span(9,10,List(8),understood,understand-01,false), Span(8,9,List(9),little,little,false), Span(7,8,List(10),so,so,false), Span(2,3,List(11),danger,danger,false), Span(5,6,List(12),baobabs,baobab,false), Span(31,32,List(13),I,i,false), Span(36,37,List(14),reserve,reserve,false), Span(33,34,List(15),breaking,break-away-14,false)),Map(2 -> risk-01, 5 -> anyone, 12 -> baobab, 15 -> break-away-14, 8 -> understand-01, 7 -> asteroid, 1 -> and, 4 -> such, 11 -> danger, 14 -> reserve, 6 -> lose-02, 9 -> little, 0 -> contrast-01, 10 -> so, 3 -> considerable, 13 -> i),Map(b3 -> break-away-14, r3 -> reserve, s2 -> such, b2 -> baobab, a3 -> asteroid, s -> so, d -> danger, a -> and, l2 -> lose-02, i -> i, a2 -> anyone, r -> risk-01, c -> considerable, l -> little, u -> understand-01, c2 -> contrast-01))),[Ljava.lang.String;@376a0d86,Annotation([Ljava.lang.String;@62656be4,[Ljava.lang.String;@17d919b6,[Ljava.lang.String;@53f3bdbd),Annotation([Ljava.lang.String;@34129c78,[Ljava.lang.String;@7d61eb55,[Ledu.cmu.lti.nlp.amr.Dependency;@222a59e6),Annotation([Ljava.lang.String;@6c7a164b,[Ljava.lang.String;@4c2bb6e0,[Ljava.lang.String;@3e62d773),Annotation([Ljava.lang.String;@4ef74c30,[Ljava.lang.String;@7283d3eb,[Ledu.cmu.lti.nlp.amr.Entity;@638ef7ed))
AMR:
(a / and, op, u / understand-01)
(b3 / break-away-14, ARG0, i / i)
(b3 / break-away-14, ARG1, r3 / reserve)
(c2 / contrast-01, ARG0, b2 / baobab)
(c2 / contrast-01, ARG2, a / and)
(l / little, degree, s / so)
(l2 / lose-02, ARG0, a3 / asteroid)
(l2 / lose-02, ARG1, a2 / anyone)
(l2 / lose-02, ARG2, b3 / break-away-14)
(r / risk-01, ARG1, u / understand-01)
(r / risk-01, mod, c / considerable)
(r / risk-01, mod, s2 / such)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, d / danger)
(u / understand-01, time, l / little)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 560,468 microseconds
Sentence: " Children , "

Oracle Span 1:  Children => child
Spans:
Span 1-2:  Children => child

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  Children => child

Dependencies:
1	"	_	JJ	JJ	_	2	amod	_	_
2	Children	_	NN	NN	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	"	_	''	''	_	2	punct	_	_

Oracle:


Input(Some(Graph(child,ArrayBuffer(Span(1,2,List(0),Children,child,false)),Map(0 -> child),Map(c2 -> child))),[Ljava.lang.String;@4bff7da0,Annotation([Ljava.lang.String;@3f1d2e23,[Ljava.lang.String;@536dbea0,[Ljava.lang.String;@47c81abf),Annotation([Ljava.lang.String;@776a6d9b,[Ljava.lang.String;@21d03963,[Ledu.cmu.lti.nlp.amr.Dependency;@1f760b47),Annotation([Ljava.lang.String;@18ece7f4,[Ljava.lang.String;@3cce57c7,[Ljava.lang.String;@1cf56a1c),Annotation([Ljava.lang.String;@33f676f6,[Ljava.lang.String;@4c5ae43b,[Ledu.cmu.lti.nlp.amr.Entity;@264f218))
AMR:


Decoded in 5,868 microseconds
Sentence: I say plainly , " watch out for the baobabs ! "

Oracle Span 1:  baobabs => baobab
Oracle Span 2:  I => i
Oracle Span 3:  plainly => plain
Oracle Span 4:  say => say-01
Oracle Span 5:  watch => watch-out-02
Spans:
Span 9-10:  baobabs => baobab
Span 0-1:  I => i
Span 2-3:  plainly => plain
Span 1-2:  say => say-01
Span 5-6:  watch => watch-out-02

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 9-10:  baobabs => baobab
Oracle Span 0-1:  I => i
Oracle Span 2-3:  plainly => plain
Oracle Span 1-2:  say => say-01
Oracle Span 5-6:  watch => watch-out-02

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	say	_	VBP	VBP	_	6	ccomp	_	_
3	plainly	_	RB	RB	_	2	advmod	_	_
4	,	_	,	,	_	6	punct	_	_
5	"	_	''	''	_	6	punct	_	_
6	watch	_	VBP	VBP	_	0	root	_	_
7	out	_	RP	RP	_	6	prt	_	_
8	for	_	IN	IN	_	6	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	baobabs	_	NNS	NNS	_	8	pobj	_	_
11	!	_	.	.	_	6	punct	_	_
12	"	_	''	''	_	6	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, w / watch-out-02)
(s / say-01, manner, p / plain)
(w / watch-out-02, ARG1, b / baobab)

Input(Some(Graph((say-01 :manner plain :ARG1 (watch-out-02 :ARG1 baobab :ARG0 you :mode imperative) :ARG0 i),ArrayBuffer(Span(1,2,List(0),say,say-01,false), Span(9,10,List(1),baobabs,baobab,false), Span(0,1,List(2),I,i,false), Span(2,3,List(3),plainly,plain,false), Span(5,6,List(4),watch,watch-out-02,false)),Map(2 -> i, 1 -> baobab, 4 -> watch-out-02, 0 -> say-01, 3 -> plain),Map(w -> watch-out-02, b -> baobab, s -> say-01, p -> plain, i -> i))),[Ljava.lang.String;@3576ddc2,Annotation([Ljava.lang.String;@35b74c5c,[Ljava.lang.String;@2e570ded,[Ljava.lang.String;@b86de0d),Annotation([Ljava.lang.String;@81d9a72,[Ljava.lang.String;@747f281,[Ledu.cmu.lti.nlp.amr.Dependency;@1169afe1),Annotation([Ljava.lang.String;@2ca26d77,[Ljava.lang.String;@4808bc9b,[Ljava.lang.String;@70e38ce1),Annotation([Ljava.lang.String;@2ca923bb,[Ljava.lang.String;@13df2a8c,[Ledu.cmu.lti.nlp.amr.Entity;@1ebea008))
AMR:
(s / say-01, ARG2, i / i)
(w / watch-out-02, ARG0, i / i)
(w / watch-out-02, ARG1, p / plain)
(w / watch-out-02, ARG2, b / baobab)

WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
Decoded in 43,441 microseconds
Sentence: My friends , like myself , have been skirting this danger for a long time , without ever knowing it ; and so it is for them that I have worked so hard over this drawing .

Oracle Span 1:  ; => and
Oracle Span 2:  danger => danger
Oracle Span 3:  drawing => draw-01
Oracle Span 4:  ever => ever
Oracle Span 5:  friends => friend
Oracle Span 6:  hard => hard-02
Oracle Span 7:  have => (person :ARG0-of have-rel-role-91)
Oracle Span 8:  I => i
Oracle Span 9:  knowing => know-01
Oracle Span 10:  long => long-03
Oracle Span 11:  skirting => skirt-02
Oracle Span 12:  so => so
Oracle Span 13:  this => this
Oracle Span 14:  this => this
Oracle Span 15:  worked => work-01
Spans:
Span 20-21:  ; => and
Span 10-11:  danger => danger
Span 35-36:  drawing => draw-01
Span 17-18:  ever => ever
Span 1-2:  friends => friend
Span 32-33:  hard => hard-02
Span 6-7:  have => (person :ARG0-of have-rel-role-91)
Span 28-29:  I => i
Span 18-19:  knowing => know-01
Span 13-14:  long => long-03
Span 8-9:  skirting => skirt-02
Span 22-23:  so => so
Span 9-10:  this => this
Span 34-35:  this => this
Span 30-31:  worked => work-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 20-21:  ; => and
Oracle Span 10-11:  danger => danger
Oracle Span 35-36:  drawing => draw-01
Oracle Span 17-18:  ever => ever
Oracle Span 1-2:  friends => friend
Oracle Span 32-33:  hard => hard-02
Oracle Span 6-7:  have => (person :ARG0-of have-rel-role-91)
Oracle Span 28-29:  I => i
Oracle Span 18-19:  knowing => know-01
Oracle Span 13-14:  long => long-03
Oracle Span 8-9:  skirting => skirt-02
Oracle Span 22-23:  so => so
Oracle Span 9-10:  this => this
Oracle Span 34-35:  this => this
Oracle Span 30-31:  worked => work-01

Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	friends	_	NNS	NNS	_	9	nsubj	_	_
3	,	_	,	,	_	9	punct	_	_
4	like	_	IN	IN	_	9	prep	_	_
5	myself	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	have	_	VBP	VBP	_	9	aux	_	_
8	been	_	VBN	VBN	_	9	aux	_	_
9	skirting	_	VBG	VBG	_	0	root	_	_
10	this	_	DT	DT	_	11	det	_	_
11	danger	_	NN	NN	_	9	dobj	_	_
12	for	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	long	_	JJ	JJ	_	15	amod	_	_
15	time	_	NN	NN	_	12	pobj	_	_
16	,	_	,	,	_	9	punct	_	_
17	without	_	IN	IN	_	9	prep	_	_
18	ever	_	RB	RB	_	19	advmod	_	_
19	knowing	_	VBG	VBG	_	17	pcomp	_	_
20	it	_	PRP	PRP	_	19	dobj	_	_
21	;	_	:	:	_	9	punct	_	_
22	and	_	CC	CC	_	9	cc	_	_
23	so	_	IN	IN	_	25	dep	_	_
24	it	_	PRP	PRP	_	25	nsubj	_	_
25	is	_	VBZ	VBZ	_	9	conj	_	_
26	for	_	IN	IN	_	25	prep	_	_
27	them	_	PRP	PRP	_	26	pobj	_	_
28	that	_	IN	IN	_	31	mark	_	_
29	I	_	PRP	PRP	_	31	nsubj	_	_
30	have	_	VBP	VBP	_	31	aux	_	_
31	worked	_	VBN	VBN	_	25	ccomp	_	_
32	so	_	RB	RB	_	33	advmod	_	_
33	hard	_	JJ	JJ	_	31	acomp	_	_
34	over	_	IN	IN	_	31	prep	_	_
35	this	_	DT	DT	_	36	det	_	_
36	drawing	_	NN	NN	_	34	pobj	_	_
37	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, i / i)
(a / and, op, p2 / person)
(d / danger, mod, t / this)
(h / hard-02, ARG1, w / work-01)
(h / hard-02, degree, s2 / so)
(h2 / have-rel-role-91, ARG0, p2 / person)
(h2 / have-rel-role-91, ARG1, i / i)
(h2 / have-rel-role-91, ARG2, f / friend)
(k / know-01, ARG0, p2 / person)
(k / know-01, ARG1, s / skirt-02)
(k / know-01, time, e / ever)
(l / long-03, ARG1, s / skirt-02)
(s / skirt-02, ARG0, a / and)
(s / skirt-02, ARG1, d / danger)
(w / work-01, ARG0, i / i)
(w / work-01, beneficiary, p2 / person)

Input(Some(Graph((cause-01 :ARG0 (skirt-02 :ARG1-of long-03 :ARG1-of (know-01 :time ever :polarity - :ARG0 person) :ARG1 (danger :mod this) :ARG0 (and :op (person :ARG0-of (have-rel-role-91 :ARG2 friend :ARG1 i)) :op i)) :ARG1 (work-01 :ARG1-of (hard-02 :degree so) :ARG1 (picture :ARG1-of draw-01 :mod this) :ARG0 i :beneficiary person)),ArrayBuffer(Span(8,9,List(0),skirting,skirt-02,false), Span(13,14,List(1),long,long-03,false), Span(18,19,List(2),knowing,know-01,false), Span(17,18,List(3),ever,ever,false), Span(10,11,List(4),danger,danger,false), Span(9,10,List(5),this,this,false), Span(20,21,List(6),;,and,false), Span(28,29,List(7),I,i,false), Span(1,2,List(8),friends,friend,false), Span(30,31,List(9),worked,work-01,false), Span(32,33,List(10),hard,hard-02,false), Span(22,23,List(11),so,so,false), Span(35,36,List(12),drawing,draw-01,false), Span(34,35,List(13),this,this,false), Span(6,7,List(14, 15),have,(person :ARG0-of have-rel-role-91),false)),Map(2 -> know-01, 5 -> this, 12 -> draw-01, 15 -> have-rel-role-91, 8 -> friend, 7 -> i, 1 -> long-03, 4 -> danger, 11 -> so, 14 -> person, 6 -> and, 9 -> work-01, 0 -> skirt-02, 10 -> hard-02, 3 -> ever, 13 -> this),Map(e -> ever, w -> work-01, h -> hard-02, h2 -> have-rel-role-91, s2 -> so, t -> this, k -> know-01, p2 -> person, s -> skirt-02, d -> danger, t3 -> this, a -> and, d2 -> draw-01, i -> i, l -> long-03, f -> friend))),[Ljava.lang.String;@72d6b3ba,Annotation([Ljava.lang.String;@1787f2a0,[Ljava.lang.String;@7de62196,[Ljava.lang.String;@163370c2),Annotation([Ljava.lang.String;@51bf5add,[Ljava.lang.String;@7905a0b8,[Ledu.cmu.lti.nlp.amr.Dependency;@35a3d49f),Annotation([Ljava.lang.String;@389b0789,[Ljava.lang.String;@13d9cbf5,[Ljava.lang.String;@478db956),Annotation([Ljava.lang.String;@6ca18a14,[Ljava.lang.String;@c667f46,[Ledu.cmu.lti.nlp.amr.Entity;@51bd8b5c))
AMR:
(a / and, op, s / skirt-02)
(d / danger, mod, t / this)
(d2 / draw-01, ARG0, i / i)
(d2 / draw-01, ARG2, t3 / this)
(h / hard-02, ARG0, d / danger)
(h / hard-02, ARG1, w / work-01)
(h2 / have-rel-role-91, ARG0, p2 / person)
(h2 / have-rel-role-91, ARG1, s / skirt-02)
(k / know-01, ARG0, f / friend)
(k / know-01, ARG1, s / skirt-02)
(k / know-01, time, e / ever)
(l / long-03, ARG1, d / danger)
(s / skirt-02, ARG1, d / danger)
(w / work-01, ARG0, i / i)
(w / work-01, ARG1, s2 / so)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
Decoded in 316,855 microseconds
Sentence: The lesson which I pass on by this means is worth all the trouble it has cost me .

Oracle Span 1:  all => all
Oracle Span 2:  cost => cost-01
Oracle Span 3:  I => i
Oracle Span 4:  lesson => lesson
Oracle Span 5:  pass => pass-on-09
Oracle Span 6:  this => this
Oracle Span 7:  trouble => trouble
Oracle Span 8:  worth => worth-02
Spans:
Span 11-12:  all => all
Span 16-17:  cost => cost-01
Span 3-4:  I => i
Span 1-2:  lesson => lesson
Span 4-5:  pass => pass-on-09
Span 7-8:  this => this
Span 13-14:  trouble => trouble
Span 10-11:  worth => worth-02

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 11-12:  all => all
Oracle Span 16-17:  cost => cost-01
Oracle Span 3-4:  I => i
Oracle Span 1-2:  lesson => lesson
Oracle Span 4-5:  pass => pass-on-09
Oracle Span 7-8:  this => this
Oracle Span 13-14:  trouble => trouble
Oracle Span 10-11:  worth => worth-02

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	lesson	_	NN	NN	_	11	nsubj	_	_
3	which	_	WDT	WDT	_	5	dobj	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	pass	_	VBP	VBP	_	2	rcmod	_	_
6	on	_	RP	RP	_	5	prt	_	_
7	by	_	IN	IN	_	5	prep	_	_
8	this	_	DT	DT	_	9	det	_	_
9	means	_	NNS	NNS	_	7	pobj	_	_
10	is	_	VBZ	VBZ	_	11	cop	_	_
11	worth	_	JJ	JJ	_	0	root	_	_
12	all	_	PDT	PDT	_	14	predet	_	_
13	the	_	DT	DT	_	14	det	_	_
14	trouble	_	NN	NN	_	11	dep	_	_
15	it	_	PRP	PRP	_	17	nsubj	_	_
16	has	_	VBZ	VBZ	_	17	aux	_	_
17	cost	_	VBN	VBN	_	14	rcmod	_	_
18	me	_	PRP	PRP	_	17	dobj	_	_
19	.	_	.	.	_	11	punct	_	_

Oracle:
(c / cost-01, ARG1, l / lesson)
(c / cost-01, ARG2, t / trouble)
(c / cost-01, ARG3, i / i)
(p / pass-on-09, ARG0, i / i)
(p / pass-on-09, ARG1, l / lesson)
(p / pass-on-09, manner, t2 / this)
(t / trouble, mod, a / all)
(w / worth-02, ARG1, l / lesson)
(w / worth-02, ARG2, t / trouble)

Input(Some(Graph((worth-02 :ARG2 (trouble :mod all :ARG2-of (cost-01 :ARG1 lesson :ARG3 i)) :ARG1 (lesson :ARG1-of (pass-on-09 :manner this :ARG0 i))),ArrayBuffer(Span(10,11,List(0),worth,worth-02,false), Span(13,14,List(1),trouble,trouble,false), Span(11,12,List(2),all,all,false), Span(16,17,List(3),cost,cost-01,false), Span(1,2,List(4),lesson,lesson,false), Span(3,4,List(5),I,i,false), Span(7,8,List(6),this,this,false), Span(4,5,List(7),pass,pass-on-09,false)),Map(2 -> all, 5 -> i, 7 -> pass-on-09, 1 -> trouble, 4 -> lesson, 6 -> this, 0 -> worth-02, 3 -> cost-01),Map(w -> worth-02, t -> trouble, p -> pass-on-09, a -> all, t2 -> this, i -> i, l -> lesson, c -> cost-01))),[Ljava.lang.String;@7b50df34,Annotation([Ljava.lang.String;@1b410b60,[Ljava.lang.String;@2462cb01,[Ljava.lang.String;@19b843ba),Annotation([Ljava.lang.String;@64ec96c6,[Ljava.lang.String;@77659b30,[Ledu.cmu.lti.nlp.amr.Dependency;@456d6c1e),Annotation([Ljava.lang.String;@1e13529a,[Ljava.lang.String;@1ec9bd38,[Ljava.lang.String;@452e19ca),Annotation([Ljava.lang.String;@6b0d80ed,[Ljava.lang.String;@6f8e8894,[Ledu.cmu.lti.nlp.amr.Entity;@3cfdd820))
AMR:
(c / cost-01, ARG0, t2 / this)
(c / cost-01, ARG1, t / trouble)
(p / pass-on-09, ARG0, i / i)
(p / pass-on-09, ARG1, l / lesson)
(t / trouble, mod, a / all)
(w / worth-02, ARG0, a / all)
(w / worth-02, ARG1, l / lesson)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 149,593 microseconds
Sentence: Perhaps you will ask me , " Why are there no other drawing in this book as magnificent and impressive as this drawing of the baobabs ? "

Oracle Span 1:  ask => ask-01
Oracle Span 2:  baobabs => baobab
Oracle Span 3:  book => book
Oracle Span 4:  drawing => draw-01
Oracle Span 5:  drawing => draw-01
Oracle Span 6:  impressive => impress-01
Oracle Span 7:  magnificent => magnificent
Oracle Span 8:  no => -
Oracle Span 9:  other => other
Oracle Span 10:  this => this
Oracle Span 11:  this => this
Oracle Span 12:  you => you
Spans:
Span 3-4:  ask => ask-01
Span 25-26:  baobabs => baobab
Span 15-16:  book => book
Span 12-13:  drawing => draw-01
Span 22-23:  drawing => draw-01
Span 19-20:  impressive => impress-01
Span 17-18:  magnificent => magnificent
Span 10-11:  no => -
Span 11-12:  other => other
Span 14-15:  this => this
Span 21-22:  this => this
Span 1-2:  you => you

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 3-4:  ask => ask-01
Oracle Span 25-26:  baobabs => baobab
Oracle Span 15-16:  book => book
Oracle Span 12-13:  drawing => draw-01
Oracle Span 22-23:  drawing => draw-01
Oracle Span 19-20:  impressive => impress-01
Oracle Span 17-18:  magnificent => magnificent
Oracle Span 10-11:  no => -
Oracle Span 11-12:  other => other
Oracle Span 14-15:  this => this
Oracle Span 21-22:  this => this
Oracle Span 1-2:  you => you

Dependencies:
1	Perhaps	_	RB	RB	_	4	advmod	_	_
2	you	_	PRP	PRP	_	4	nsubj	_	_
3	will	_	MD	MD	_	4	aux	_	_
4	ask	_	VB	VB	_	0	root	_	_
5	me	_	PRP	PRP	_	4	dobj	_	_
6	,	_	,	,	_	4	punct	_	_
7	"	_	''	''	_	4	punct	_	_
8	Why	_	WRB	WRB	_	13	advmod	_	_
9	are	_	VBP	VBP	_	13	cop	_	_
10	there	_	RB	RB	_	13	advmod	_	_
11	no	_	DT	DT	_	13	det	_	_
12	other	_	JJ	JJ	_	13	amod	_	_
13	drawing	_	NN	NN	_	4	advcl	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	this	_	DT	DT	_	16	det	_	_
16	book	_	NN	NN	_	14	pobj	_	_
17	as	_	IN	IN	_	16	prep	_	_
18	magnificent	_	NNP	NNP	_	17	pobj	_	_
19	and	_	CC	CC	_	4	cc	_	_
20	impressive	_	JJ	JJ	_	4	conj	_	_
21	as	_	IN	IN	_	20	prep	_	_
22	this	_	DT	DT	_	23	det	_	_
23	drawing	_	NN	NN	_	21	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	baobabs	_	NNS	NNS	_	24	pobj	_	_
27	?	_	.	.	_	4	punct	_	_
28	"	_	''	''	_	4	punct	_	_

Oracle:
(a / ask-01, ARG0, y / you)
(b / book, mod, t / this)

Input(Some(Graph((possible-01 :ARG1 (ask-01 :ARG2 i :ARG1 (picture :polarity - :ARG1-of draw-01 :mod other :location (book :mod this) :mod (magnificent :compared-to (picture :ARG1-of draw-01 :mod this :topic baobab) :degree equal) :ARG0-of (impress-01 :degree equal :compared-to picture) :ARG0-of (cause-01 :ARG1 amr-unknown)) :ARG0 you)),ArrayBuffer(Span(10,11,List(0),no,-,false), Span(3,4,List(1),ask,ask-01,false), Span(12,13,List(2),drawing,draw-01,false), Span(11,12,List(3),other,other,false), Span(15,16,List(4),book,book,false), Span(14,15,List(5),this,this,false), Span(17,18,List(6),magnificent,magnificent,false), Span(22,23,List(7),drawing,draw-01,false), Span(21,22,List(8),this,this,false), Span(25,26,List(9),baobabs,baobab,false), Span(1,2,List(10),you,you,false), Span(19,20,List(11),impressive,impress-01,false)),Map(2 -> draw-01, 5 -> this, 8 -> this, 7 -> draw-01, 1 -> ask-01, 4 -> book, 11 -> impress-01, 6 -> magnificent, 9 -> baobab, 0 -> -, 10 -> you, 3 -> other),Map(t -> this, b -> book, b2 -> baobab, m -> magnificent, d -> draw-01, y -> you, a -> ask-01, d2 -> draw-01, t2 -> this, i -> impress-01, - -> -, o -> other))),[Ljava.lang.String;@928763c,Annotation([Ljava.lang.String;@e25951c,[Ljava.lang.String;@15f47664,[Ljava.lang.String;@471a9022),Annotation([Ljava.lang.String;@dc9876b,[Ljava.lang.String;@2f666ebb,[Ledu.cmu.lti.nlp.amr.Dependency;@19976a65),Annotation([Ljava.lang.String;@a1f72f5,[Ljava.lang.String;@4b2c5e02,[Ljava.lang.String;@57a3e26a),Annotation([Ljava.lang.String;@75c56eb9,[Ljava.lang.String;@4bc222e,[Ledu.cmu.lti.nlp.amr.Entity;@2dc9b0f5))
AMR:
(a / ask-01, ARG0, y / you)
(a / ask-01, ARG1, m / magnificent)
(b / book, mod, t / this)
(d / draw-01, ARG0, b / book)
(d / draw-01, ARG1, i / impress-01)
(d / draw-01, mod, o / other)
(d2 / draw-01, ARG0, y / you)
(d2 / draw-01, ARG1, b2 / baobab)
(d2 / draw-01, ARG2, t2 / this)
(i / impress-01, ARG1, y / you)
(o / other, mod, - / -)

WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.3
WARNING: makeIds can't find span Id: 0.0.1.3.0
WARNING: makeIds can't find span Id: 0.0.1.4
WARNING: makeIds can't find span Id: 0.0.1.4.1.0
WARNING: makeIds can't find span Id: 0.0.1.4.1.1
WARNING: makeIds can't find span Id: 0.0.1.4.1.2
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.5
Decoded in 275,244 microseconds
Sentence: The reply is simple .

Oracle Span 1:  reply => (thing :ARG2-of reply-01)
Oracle Span 2:  simple => simple-02
Spans:
Span 1-2:  reply => (thing :ARG2-of reply-01)
Span 3-4:  simple => simple-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  reply => (thing :ARG2-of reply-01)
Oracle Span 3-4:  simple => simple-02

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	reply	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	simple	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:
(r / reply-01, ARG2, t / thing)
(s / simple-02, ARG1, t / thing)

Input(Some(Graph((simple-02 :ARG1 (thing :ARG2-of reply-01)),ArrayBuffer(Span(3,4,List(0),simple,simple-02,false), Span(1,2,List(1, 2),reply,(thing :ARG2-of reply-01),false)),Map(2 -> reply-01, 1 -> thing, 0 -> simple-02),Map(t -> thing, s -> simple-02, r -> reply-01))),[Ljava.lang.String;@6531a794,Annotation([Ljava.lang.String;@3b5fad2d,[Ljava.lang.String;@5e17553a,[Ljava.lang.String;@3eb91815),Annotation([Ljava.lang.String;@56dc1551,[Ljava.lang.String;@102cec62,[Ledu.cmu.lti.nlp.amr.Dependency;@74f6c5d8),Annotation([Ljava.lang.String;@27912e3,[Ljava.lang.String;@34b9f960,[Ljava.lang.String;@43015c69),Annotation([Ljava.lang.String;@19b89d4,[Ljava.lang.String;@4bbf6d0e,[Ledu.cmu.lti.nlp.amr.Entity;@30b6ffe0))
AMR:
(r / reply-01, ARG2, t / thing)
(s / simple-02, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 6,997 microseconds
Sentence: I have tried .

Oracle Span 1:  I => i
Oracle Span 2:  tried => try-01
Spans:
Span 0-1:  I => i
Span 2-3:  tried => try-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 2-3:  tried => try-01

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	tried	_	VBN	VBN	_	0	root	_	_
4	.	_	.	.	_	3	punct	_	_

Oracle:
(t / try-01, ARG0, i / i)

Input(Some(Graph((try-01 :ARG0 i),ArrayBuffer(Span(2,3,List(0),tried,try-01,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> try-01),Map(t -> try-01, i -> i))),[Ljava.lang.String;@791d1f8b,Annotation([Ljava.lang.String;@2415fc55,[Ljava.lang.String;@14f232c4,[Ljava.lang.String;@13bc8645),Annotation([Ljava.lang.String;@24c22fe,[Ljava.lang.String;@93081b6,[Ledu.cmu.lti.nlp.amr.Dependency;@cd1e646),Annotation([Ljava.lang.String;@7ba8c737,[Ljava.lang.String;@1890516e,[Ljava.lang.String;@15a04efb),Annotation([Ljava.lang.String;@16c069df,[Ljava.lang.String;@2bec854f,[Ledu.cmu.lti.nlp.amr.Entity;@31edaa7d))
AMR:
(t / try-01, ARG0, i / i)

WARNING: makeIds can't find span Id: 0.0
Decoded in 3,600 microseconds
Sentence: But with the others I have not been successful .

Oracle Span 1:  But => contrast-01
Oracle Span 2:  I => i
Oracle Span 3:  others => other
Oracle Span 4:  successful => succeed-01
Spans:
Span 0-1:  But => contrast-01
Span 4-5:  I => i
Span 3-4:  others => other
Span 8-9:  successful => succeed-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 4-5:  I => i
Oracle Span 3-4:  others => other
Oracle Span 8-9:  successful => succeed-01

Dependencies:
1	But	_	CC	CC	_	9	cc	_	_
2	with	_	IN	IN	_	9	prep	_	_
3	the	_	DT	DT	_	4	det	_	_
4	others	_	NNS	NNS	_	2	pobj	_	_
5	I	_	PRP	PRP	_	9	nsubj	_	_
6	have	_	VBP	VBP	_	9	aux	_	_
7	not	_	RB	RB	_	9	neg	_	_
8	been	_	VBN	VBN	_	9	cop	_	_
9	successful	_	JJ	JJ	_	0	root	_	_
10	.	_	.	.	_	9	punct	_	_

Oracle:
(c / contrast-01, ARG2, s / succeed-01)
(s / succeed-01, ARG0, i / i)
(s / succeed-01, ARG1, o / other)

Input(Some(Graph((contrast-01 :ARG2 (succeed-01 :ARG1 other :ARG0 i :polarity -)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(4,5,List(1),I,i,false), Span(3,4,List(2),others,other,false), Span(8,9,List(3),successful,succeed-01,false)),Map(2 -> other, 1 -> i, 0 -> contrast-01, 3 -> succeed-01),Map(s -> succeed-01, i -> i, c -> contrast-01, o -> other))),[Ljava.lang.String;@26adfd2d,Annotation([Ljava.lang.String;@3336e6b6,[Ljava.lang.String;@7c3fdb62,[Ljava.lang.String;@205d38da),Annotation([Ljava.lang.String;@6950ed69,[Ljava.lang.String;@6dd7b5a3,[Ledu.cmu.lti.nlp.amr.Dependency;@6f3187b0),Annotation([Ljava.lang.String;@2663e964,[Ljava.lang.String;@48b67364,[Ljava.lang.String;@189cbd7c),Annotation([Ljava.lang.String;@7bf3a5d8,[Ljava.lang.String;@42e25b0b,[Ledu.cmu.lti.nlp.amr.Entity;@39b43d60))
AMR:
(c / contrast-01, ARG1, o / other)
(c / contrast-01, ARG2, s / succeed-01)
(s / succeed-01, ARG1, i / i)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0
Decoded in 12,207 microseconds
Sentence: When I made the drawing of the baobabs I was carried beyond myself by the inspiring force of urgent necessity .

Oracle Span 1:  baobabs => baobab
Oracle Span 2:  beyond => beyond
Oracle Span 3:  carried => carry-01
Oracle Span 4:  drawing => draw-01
Oracle Span 5:  force => force-01
Oracle Span 6:  I => i
Oracle Span 7:  inspiring => inspire-01
Oracle Span 8:  necessity => necessity
Oracle Span 9:  urgent => urgent
Spans:
Span 7-8:  baobabs => baobab
Span 11-12:  beyond => beyond
Span 10-11:  carried => carry-01
Span 4-5:  drawing => draw-01
Span 16-17:  force => force-01
Span 1-2:  I => i
Span 15-16:  inspiring => inspire-01
Span 19-20:  necessity => necessity
Span 18-19:  urgent => urgent

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 7-8:  baobabs => baobab
Oracle Span 11-12:  beyond => beyond
Oracle Span 10-11:  carried => carry-01
Oracle Span 4-5:  drawing => draw-01
Oracle Span 16-17:  force => force-01
Oracle Span 1-2:  I => i
Oracle Span 15-16:  inspiring => inspire-01
Oracle Span 19-20:  necessity => necessity
Oracle Span 18-19:  urgent => urgent

Dependencies:
1	When	_	WRB	WRB	_	3	advmod	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	made	_	VBD	VBD	_	11	advcl	_	_
4	the	_	DT	DT	_	5	det	_	_
5	drawing	_	NN	NN	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	baobabs	_	NNS	NNS	_	6	pobj	_	_
9	I	_	PRP	PRP	_	11	nsubjpass	_	_
10	was	_	VBD	VBD	_	11	auxpass	_	_
11	carried	_	VBN	VBN	_	0	root	_	_
12	beyond	_	IN	IN	_	11	prep	_	_
13	myself	_	PRP	PRP	_	12	pobj	_	_
14	by	_	IN	IN	_	11	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	inspiring	_	JJ	JJ	_	17	amod	_	_
17	force	_	NN	NN	_	14	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	urgent	_	JJ	JJ	_	20	amod	_	_
20	necessity	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	11	punct	_	_

Oracle:
(b / beyond, op, i / i)
(c / carry-01, ARG0, f / force-01)
(c / carry-01, ARG1, i / i)
(c / carry-01, destination, b / beyond)
(c / carry-01, time, d / draw-01)
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, b2 / baobab)
(f / force-01, ARG0, n / necessity)
(i2 / inspire-01, ARG0, f / force-01)
(n / necessity, mod, u / urgent)

Input(Some(Graph((carry-01 :time (draw-01 :ARG1 baobab :ARG0 i) :destination (beyond :op i) :ARG1 i :ARG0 (force-01 :ARG0-of inspire-01 :ARG0 (necessity :mod urgent))),ArrayBuffer(Span(10,11,List(0),carried,carry-01,false), Span(4,5,List(1),drawing,draw-01,false), Span(7,8,List(2),baobabs,baobab,false), Span(11,12,List(3),beyond,beyond,false), Span(1,2,List(4),I,i,false), Span(16,17,List(5),force,force-01,false), Span(15,16,List(6),inspiring,inspire-01,false), Span(19,20,List(7),necessity,necessity,false), Span(18,19,List(8),urgent,urgent,false)),Map(2 -> baobab, 5 -> force-01, 8 -> urgent, 7 -> necessity, 1 -> draw-01, 4 -> i, 6 -> inspire-01, 0 -> carry-01, 3 -> beyond),Map(n -> necessity, b -> beyond, b2 -> baobab, d -> draw-01, i2 -> inspire-01, i -> i, u -> urgent, c -> carry-01, f -> force-01))),[Ljava.lang.String;@44be0077,Annotation([Ljava.lang.String;@2205a05d,[Ljava.lang.String;@72ef8d15,[Ljava.lang.String;@6aa8e115),Annotation([Ljava.lang.String;@5e21e98f,[Ljava.lang.String;@51a9ad5e,[Ledu.cmu.lti.nlp.amr.Dependency;@5f20155b),Annotation([Ljava.lang.String;@72ade7e3,[Ljava.lang.String;@239105a8,[Ljava.lang.String;@3fce8fd9),Annotation([Ljava.lang.String;@609bcfb6,[Ljava.lang.String;@7d94beb9,[Ledu.cmu.lti.nlp.amr.Entity;@560348e6))
AMR:
(c / carry-01, ARG0, i / i)
(c / carry-01, ARG2, b / beyond)
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, b2 / baobab)
(f / force-01, ARG0, n / necessity)
(f / force-01, ARG1, i / i)
(i2 / inspire-01, ARG1, f / force-01)
(n / necessity, mod, u / urgent)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 73,223 microseconds
Sentence: Chapter 6 .

Oracle Span 1:  6 => 6
Oracle Span 2:  Chapter => chapter
Spans:
Span 1-2:  6 => 6
Span 0-1:  Chapter => chapter

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  6 => 6
Oracle Span 0-1:  Chapter => chapter

Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	6	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 6 / 6)

Input(Some(Graph((chapter :mod 6),ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false), Span(1,2,List(1),6,6,false)),Map(1 -> 6, 0 -> chapter),Map(6 -> 6, c -> chapter))),[Ljava.lang.String;@1df8b5b8,Annotation([Ljava.lang.String;@23202fce,[Ljava.lang.String;@7b993c65,[Ljava.lang.String;@37911f88),Annotation([Ljava.lang.String;@6f1c29b7,[Ljava.lang.String;@4d6025c5,[Ledu.cmu.lti.nlp.amr.Dependency;@7f284218),Annotation([Ljava.lang.String;@407a7f2a,[Ljava.lang.String;@4ea5b703,[Ljava.lang.String;@2a7ed1f),Annotation([Ljava.lang.String;@3fa247d1,[Ljava.lang.String;@2cb2fc20,[Ledu.cmu.lti.nlp.amr.Entity;@4f4c4b1a))
AMR:
(c / chapter, mod, 6 / 6)

WARNING: makeIds can't find span Id: 0.0
Decoded in 4,020 microseconds
Sentence: Oh , little prince !

Oracle Span 1:  little => little
Oracle Span 2:  prince => prince
Spans:
Span 2-3:  little => little
Span 3-4:  prince => prince

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  little => little
Oracle Span 3-4:  prince => prince

Dependencies:
1	Oh	_	UH	UH	_	4	discourse	_	_
2	,	_	,	,	_	4	punct	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	0	root	_	_
5	!	_	.	.	_	4	punct	_	_

Oracle:
(p / prince, mod, l / little)

Input(Some(Graph((prince :mod little),ArrayBuffer(Span(3,4,List(0),prince,prince,false), Span(2,3,List(1),little,little,false)),Map(1 -> little, 0 -> prince),Map(p -> prince, l -> little))),[Ljava.lang.String;@723e88f9,Annotation([Ljava.lang.String;@5f0fd5a0,[Ljava.lang.String;@64e7619d,[Ljava.lang.String;@495ee280),Annotation([Ljava.lang.String;@4fa1c212,[Ljava.lang.String;@6ea2bc93,[Ledu.cmu.lti.nlp.amr.Dependency;@3116c353),Annotation([Ljava.lang.String;@f627d13,[Ljava.lang.String;@4e928fbf,[Ljava.lang.String;@352ff4da),Annotation([Ljava.lang.String;@3224a577,[Ljava.lang.String;@2e32ccc5,[Ledu.cmu.lti.nlp.amr.Entity;@748741cb))
AMR:
(p / prince, mod, l / little)

WARNING: makeIds can't find span Id: 0.0
Decoded in 6,351 microseconds
Sentence: Bit by bit I came to understand the secrets of your sad little life ...

Oracle Span 1:  I => i
Oracle Span 2:  life => life
Oracle Span 3:  little => little
Oracle Span 4:  sad => sad-02
Oracle Span 5:  secrets => secret
Oracle Span 6:  understand => understand-01
Spans:
Span 3-4:  I => i
Span 13-14:  life => life
Span 12-13:  little => little
Span 11-12:  sad => sad-02
Span 8-9:  secrets => secret
Span 6-7:  understand => understand-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 3-4:  I => i
Oracle Span 13-14:  life => life
Oracle Span 12-13:  little => little
Oracle Span 11-12:  sad => sad-02
Oracle Span 8-9:  secrets => secret
Oracle Span 6-7:  understand => understand-01

Dependencies:
1	Bit	_	NN	NN	_	0	root	_	_
2	by	_	IN	IN	_	1	prep	_	_
3	bit	_	NN	NN	_	2	pobj	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	came	_	VBD	VBD	_	3	rcmod	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	understand	_	VB	VB	_	5	xcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	secrets	_	NNS	NNS	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	your	_	PRP$	PRP$	_	14	poss	_	_
12	sad	_	JJ	JJ	_	14	amod	_	_
13	little	_	JJ	JJ	_	14	amod	_	_
14	life	_	NN	NN	_	10	pobj	_	_
15	...	_	:	:	_	2	punct	_	_

Oracle:
(l / life, mod, l2 / little)
(s / secret, poss, l / life)
(s2 / sad-02, ARG1, l / life)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, s / secret)

Input(Some(Graph((understand-01 :manner bit-by-bit :ARG1 (secret :poss (life :ARG1-of sad-02 :mod little :poss you)) :ARG0 i),ArrayBuffer(Span(6,7,List(0),understand,understand-01,false), Span(8,9,List(1),secrets,secret,false), Span(13,14,List(2),life,life,false), Span(11,12,List(3),sad,sad-02,false), Span(12,13,List(4),little,little,false), Span(3,4,List(5),I,i,false)),Map(2 -> life, 5 -> i, 1 -> secret, 4 -> little, 0 -> understand-01, 3 -> sad-02),Map(s2 -> sad-02, s -> secret, i -> i, l2 -> little, l -> life, u -> understand-01))),[Ljava.lang.String;@3e44f2a5,Annotation([Ljava.lang.String;@295cf707,[Ljava.lang.String;@1130520d,[Ljava.lang.String;@5f77d0f9),Annotation([Ljava.lang.String;@463fd068,[Ljava.lang.String;@895e367,[Ledu.cmu.lti.nlp.amr.Dependency;@1b266842),Annotation([Ljava.lang.String;@7a3793c7,[Ljava.lang.String;@42b3b079,[Ljava.lang.String;@651aed93),Annotation([Ljava.lang.String;@4dd6fd0a,[Ljava.lang.String;@bb9e6dc,[Ledu.cmu.lti.nlp.amr.Entity;@5456afaa))
AMR:
(l / life, mod, l2 / little)
(s2 / sad-02, ARG1, l / life)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, s / secret)
(u / understand-01, location, l / life)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 30,784 microseconds
Sentence: For a long time you had found your only entertainment in the quiet pleasure of looking at the sunset .

Oracle Span 1:  entertainment => entertain-01
Oracle Span 2:  found => find-01
Oracle Span 3:  long => long-03
Oracle Span 4:  looking => look-01
Oracle Span 5:  only => only
Oracle Span 6:  pleasure => pleasure
Oracle Span 7:  quiet => quiet-04
Oracle Span 8:  sunset => sunset
Oracle Span 9:  you => you
Spans:
Span 9-10:  entertainment => entertain-01
Span 6-7:  found => find-01
Span 2-3:  long => long-03
Span 15-16:  looking => look-01
Span 8-9:  only => only
Span 13-14:  pleasure => pleasure
Span 12-13:  quiet => quiet-04
Span 18-19:  sunset => sunset
Span 4-5:  you => you

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 9-10:  entertainment => entertain-01
Oracle Span 6-7:  found => find-01
Oracle Span 2-3:  long => long-03
Oracle Span 15-16:  looking => look-01
Oracle Span 8-9:  only => only
Oracle Span 13-14:  pleasure => pleasure
Oracle Span 12-13:  quiet => quiet-04
Oracle Span 18-19:  sunset => sunset
Oracle Span 4-5:  you => you

Dependencies:
1	For	_	IN	IN	_	7	prep	_	_
2	a	_	DT	DT	_	4	det	_	_
3	long	_	JJ	JJ	_	4	amod	_	_
4	time	_	NN	NN	_	1	pobj	_	_
5	you	_	PRP	PRP	_	7	nsubj	_	_
6	had	_	VBD	VBD	_	7	aux	_	_
7	found	_	VBN	VBN	_	0	root	_	_
8	your	_	PRP$	PRP$	_	10	poss	_	_
9	only	_	JJ	JJ	_	10	amod	_	_
10	entertainment	_	NN	NN	_	7	dobj	_	_
11	in	_	IN	IN	_	7	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	quiet	_	JJ	JJ	_	14	amod	_	_
14	pleasure	_	NN	NN	_	11	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	looking	_	VBG	VBG	_	15	pcomp	_	_
17	at	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	sunset	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(e / entertain-01, ARG0, l2 / look-01)
(e / entertain-01, ARG1, y / you)
(e / entertain-01, mod, o / only)
(f / find-01, ARG0, y / you)
(f / find-01, ARG1, e / entertain-01)
(l / long-03, ARG1, f / find-01)
(l2 / look-01, ARG0, y / you)
(l2 / look-01, ARG1, s / sunset)
(l2 / look-01, mod, p / pleasure)
(q / quiet-04, ARG1, p / pleasure)

Input(Some(Graph((find-01 :ARG1-of long-03 :ARG1 (entertain-01 :mod only :ARG0 (look-01 :mod (pleasure :ARG1-of quiet-04) :ARG1 sunset :ARG0 you) :ARG1 you) :ARG0 you),ArrayBuffer(Span(6,7,List(0),found,find-01,false), Span(2,3,List(1),long,long-03,false), Span(15,16,List(2),looking,look-01,false), Span(13,14,List(3),pleasure,pleasure,false), Span(12,13,List(4),quiet,quiet-04,false), Span(18,19,List(5),sunset,sunset,false), Span(8,9,List(6),only,only,false), Span(4,5,List(7),you,you,false), Span(9,10,List(8),entertainment,entertain-01,false)),Map(2 -> look-01, 5 -> sunset, 8 -> entertain-01, 7 -> you, 1 -> long-03, 4 -> quiet-04, 6 -> only, 0 -> find-01, 3 -> pleasure),Map(e -> entertain-01, q -> quiet-04, s -> sunset, y -> you, p -> pleasure, l2 -> look-01, l -> long-03, o -> only, f -> find-01))),[Ljava.lang.String;@6692b6c6,Annotation([Ljava.lang.String;@1cd629b3,[Ljava.lang.String;@589da3f3,[Ljava.lang.String;@39d76cb5),Annotation([Ljava.lang.String;@4a00d9cf,[Ljava.lang.String;@6736fa8d,[Ledu.cmu.lti.nlp.amr.Dependency;@52815fa3),Annotation([Ljava.lang.String;@50313382,[Ljava.lang.String;@1cb346ea,[Ljava.lang.String;@4c012563),Annotation([Ljava.lang.String;@14a50707,[Ljava.lang.String;@4d518b32,[Ledu.cmu.lti.nlp.amr.Entity;@4bd31064))
AMR:
(e / entertain-01, mod, o / only)
(f / find-01, ARG0, y / you)
(f / find-01, ARG1, e / entertain-01)
(f / find-01, location, p / pleasure)
(l / long-03, ARG1, f / find-01)
(l2 / look-01, ARG1, s / sunset)
(p / pleasure, purpose, l2 / look-01)
(q / quiet-04, ARG1, p / pleasure)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 57,117 microseconds
Sentence: I learned that new detail on the morning of the fourth day , when you said to me : " I am very fond of sunsets .

Oracle Span 1:  day => day
Oracle Span 2:  detail => detail
Oracle Span 3:  I => i
Oracle Span 4:  learned => learn-01
Oracle Span 5:  morning => morning
Oracle Span 6:  new => new-01
Oracle Span 7:  said => say-01
Oracle Span 8:  sunsets => sunset
Oracle Span 9:  that => that
Oracle Span 10:  very => very
Oracle Span 11:  you => you
Spans:
Span 11-12:  day => day
Span 4-5:  detail => detail
Span 0-1:  I => i
Span 1-2:  learned => learn-01
Span 7-8:  morning => morning
Span 3-4:  new => new-01
Span 15-16:  said => say-01
Span 25-26:  sunsets => sunset
Span 2-3:  that => that
Span 22-23:  very => very
Span 14-15:  you => you

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 11-12:  day => day
Oracle Span 4-5:  detail => detail
Oracle Span 0-1:  I => i
Oracle Span 1-2:  learned => learn-01
Oracle Span 7-8:  morning => morning
Oracle Span 3-4:  new => new-01
Oracle Span 15-16:  said => say-01
Oracle Span 25-26:  sunsets => sunset
Oracle Span 2-3:  that => that
Oracle Span 22-23:  very => very
Oracle Span 14-15:  you => you

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	learned	_	VBD	VBD	_	0	root	_	_
3	that	_	DT	DT	_	5	det	_	_
4	new	_	JJ	JJ	_	5	amod	_	_
5	detail	_	NN	NN	_	2	dobj	_	_
6	on	_	IN	IN	_	2	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	morning	_	NN	NN	_	6	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	fourth	_	JJ	JJ	_	12	amod	_	_
12	day	_	NN	NN	_	9	pobj	_	_
13	,	_	,	,	_	2	punct	_	_
14	when	_	WRB	WRB	_	16	advmod	_	_
15	you	_	PRP	PRP	_	16	nsubj	_	_
16	said	_	VBD	VBD	_	2	advcl	_	_
17	to	_	TO	TO	_	16	prep	_	_
18	me	_	PRP	PRP	_	17	pobj	_	_
19	:	_	:	:	_	2	punct	_	_
20	"	_	''	''	_	2	punct	_	_
21	I	_	PRP	PRP	_	24	nsubj	_	_
22	am	_	VBP	VBP	_	24	cop	_	_
23	very	_	RB	RB	_	24	advmod	_	_
24	fond	_	JJ	JJ	_	2	ccomp	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	sunsets	_	NNS	NNS	_	25	pobj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(d / detail, mod, t / that)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, d / detail)
(l / learn-01, time, s / say-01)
(n / new-01, ARG1, d / detail)
(s / say-01, ARG0, y / you)
(s / say-01, ARG2, i / i)

Input(Some(Graph((learn-01 :time (say-01 :ARG1 (like-01 :ARG1 sunset :degree very :ARG0 you) :ARG0 you :ARG2 i) :time (date-entity :dayperiod morning :mod (day :ord (ordinal-entity :value 4))) :ARG1 (detail :mod that :ARG1-of new-01) :ARG0 i),ArrayBuffer(Span(1,2,List(0),learned,learn-01,false), Span(15,16,List(1),said,say-01,false), Span(25,26,List(2),sunsets,sunset,false), Span(22,23,List(3),very,very,false), Span(14,15,List(4),you,you,false), Span(7,8,List(5),morning,morning,false), Span(11,12,List(6),day,day,false), Span(4,5,List(7),detail,detail,false), Span(2,3,List(8),that,that,false), Span(3,4,List(9),new,new-01,false), Span(0,1,List(10),I,i,false)),Map(2 -> sunset, 5 -> morning, 8 -> that, 7 -> detail, 1 -> say-01, 4 -> you, 6 -> day, 9 -> new-01, 0 -> learn-01, 10 -> i, 3 -> very),Map(n -> new-01, s2 -> sunset, t -> that, s -> say-01, v -> very, d -> detail, m -> morning, y -> you, d2 -> day, i -> i, l -> learn-01))),[Ljava.lang.String;@e3c0e40,Annotation([Ljava.lang.String;@329dbdbf,[Ljava.lang.String;@7354b8c5,[Ljava.lang.String;@20d7d6fb),Annotation([Ljava.lang.String;@4ef782af,[Ljava.lang.String;@11d8ae8b,[Ledu.cmu.lti.nlp.amr.Dependency;@479cbee5),Annotation([Ljava.lang.String;@59e2d8e3,[Ljava.lang.String;@2b72cb8a,[Ljava.lang.String;@7f8a9499),Annotation([Ljava.lang.String;@5d43661b,[Ljava.lang.String;@12299890,[Ledu.cmu.lti.nlp.amr.Entity;@2fba3fc4))
AMR:
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, d / detail)
(l / learn-01, ARG2, m / morning)
(l / learn-01, condition, s / say-01)
(l / learn-01, manner, d2 / day)
(n / new-01, ARG0, v / very)
(n / new-01, ARG1, d / detail)
(n / new-01, ARG2, t / that)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / sunset)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.3.1.1
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 350,773 microseconds
Sentence: Come , let us go look at a sunset now . "

Oracle Span 1:  Come => come-01
Oracle Span 2:  go => go-05
Oracle Span 3:  look => look-01
Oracle Span 4:  now => now
Oracle Span 5:  sunset => sunset
Spans:
Span 0-1:  Come => come-01
Span 4-5:  go => go-05
Span 5-6:  look => look-01
Span 9-10:  now => now
Span 8-9:  sunset => sunset

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Come => come-01
Oracle Span 4-5:  go => go-05
Oracle Span 5-6:  look => look-01
Oracle Span 9-10:  now => now
Oracle Span 8-9:  sunset => sunset

Dependencies:
1	Come	_	VB	VB	_	0	root	_	_
2	,	_	,	,	_	1	punct	_	_
3	let	_	VB	VB	_	1	dep	_	_
4	us	_	PRP	PRP	_	5	nsubj	_	_
5	go	_	VB	VB	_	3	ccomp	_	_
6	look	_	VB	VB	_	5	dep	_	_
7	at	_	IN	IN	_	6	prep	_	_
8	a	_	DT	DT	_	9	det	_	_
9	sunset	_	NN	NN	_	7	pobj	_	_
10	now	_	RB	RB	_	6	advmod	_	_
11	.	_	.	.	_	1	punct	_	_
12	"	_	''	''	_	1	punct	_	_

Oracle:
(g / go-05, ARG1, l / look-01)
(l / look-01, ARG1, s / sunset)
(l / look-01, time, n / now)

Input(Some(Graph((and :op (come-01 :ARG1 you :mode imperative) :op (go-05 :ARG1 (look-01 :time now :ARG1 sunset :ARG0 we) :mode imperative :ARG0 we)),ArrayBuffer(Span(0,1,List(0),Come,come-01,false), Span(4,5,List(1),go,go-05,false), Span(5,6,List(2),look,look-01,false), Span(9,10,List(3),now,now,false), Span(8,9,List(4),sunset,sunset,false)),Map(2 -> look-01, 1 -> go-05, 4 -> sunset, 0 -> come-01, 3 -> now),Map(n -> now, s -> sunset, g -> go-05, l -> look-01, c -> come-01))),[Ljava.lang.String;@4bf48f6,Annotation([Ljava.lang.String;@420a85c4,[Ljava.lang.String;@1c39680d,[Ljava.lang.String;@62833051),Annotation([Ljava.lang.String;@1c852c0f,[Ljava.lang.String;@a37aefe,[Ledu.cmu.lti.nlp.amr.Dependency;@5d99c6b5),Annotation([Ljava.lang.String;@266374ef,[Ljava.lang.String;@13b3d178,[Ljava.lang.String;@24c4ddae),Annotation([Ljava.lang.String;@37fb0bed,[Ljava.lang.String;@a82c5f1,[Ledu.cmu.lti.nlp.amr.Entity;@7b7fdc8))
AMR:
(c / come-01, ARG1, g / go-05)
(g / go-05, ARG0, n / now)
(g / go-05, ARG1, l / look-01)
(l / look-01, ARG1, s / sunset)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
Decoded in 20,552 microseconds
Sentence: " But we must wait , "

Oracle Span 1:  But => contrast-01
Oracle Span 2:  wait => wait-01
Oracle Span 3:  we => we
Spans:
Span 1-2:  But => contrast-01
Span 4-5:  wait => wait-01
Span 2-3:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  But => contrast-01
Oracle Span 4-5:  wait => wait-01
Oracle Span 2-3:  we => we

Dependencies:
1	"	_	NNP	NNP	_	2	nsubj	_	_
2	But	_	VBZ	VBZ	_	0	root	_	_
3	we	_	PRP	PRP	_	5	nsubj	_	_
4	must	_	MD	MD	_	5	aux	_	_
5	wait	_	VB	VB	_	2	ccomp	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_

Oracle:
(w2 / wait-01, ARG1, w / we)

Input(Some(Graph((contrast-01 :ARG2 (obligate-01 :ARG2 (wait-01 :ARG1 we))),ArrayBuffer(Span(1,2,List(0),But,contrast-01,false), Span(4,5,List(1),wait,wait-01,false), Span(2,3,List(2),we,we,false)),Map(2 -> we, 1 -> wait-01, 0 -> contrast-01),Map(w -> we, w2 -> wait-01, c -> contrast-01))),[Ljava.lang.String;@51c693d,Annotation([Ljava.lang.String;@6a57ae10,[Ljava.lang.String;@766653e6,[Ljava.lang.String;@4e07b95f),Annotation([Ljava.lang.String;@28b46423,[Ljava.lang.String;@7fc4780b,[Ledu.cmu.lti.nlp.amr.Dependency;@3b79fd76),Annotation([Ljava.lang.String;@48c76607,[Ljava.lang.String;@43599640,[Ljava.lang.String;@1f81aa00),Annotation([Ljava.lang.String;@6b6776cb,[Ljava.lang.String;@1863d2fe,[Ledu.cmu.lti.nlp.amr.Entity;@1787bc24))
AMR:
(c / contrast-01, ARG1, w2 / wait-01)
(w2 / wait-01, ARG0, w / we)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 8,780 microseconds
Sentence: I said .

Oracle Span 1:  I => i
Oracle Span 2:  said => say-01
Spans:
Span 0-1:  I => i
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 1-2:  said => say-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	.	_	.	.	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)

Input(Some(Graph((say-01 :ARG0 i),ArrayBuffer(Span(1,2,List(0),said,say-01,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> say-01),Map(s -> say-01, i -> i))),[Ljava.lang.String;@544d57e,Annotation([Ljava.lang.String;@55c53a33,[Ljava.lang.String;@53b7f657,[Ljava.lang.String;@797b0699),Annotation([Ljava.lang.String;@5a37d3ed,[Ljava.lang.String;@26df6e3a,[Ledu.cmu.lti.nlp.amr.Dependency;@4a3631f8),Annotation([Ljava.lang.String;@6b58b9e9,[Ljava.lang.String;@f14a7d4,[Ljava.lang.String;@52e7a6b2),Annotation([Ljava.lang.String;@29a5f4e7,[Ljava.lang.String;@79c97cb,[Ledu.cmu.lti.nlp.amr.Entity;@2d9caaeb))
AMR:
(s / say-01, ARG0, i / i)

WARNING: makeIds can't find span Id: 0.0
Decoded in 3,310 microseconds
Sentence: " Wait ?

Oracle Span 1:  Wait => wait-01
Spans:
Span 1-2:  Wait => wait-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  Wait => wait-01

Dependencies:
1	"	_	WP	WP	_	2	nsubj	_	_
2	Wait	_	VBZ	VBZ	_	0	root	_	_
3	?	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph((wait-01 :mode interrogative),ArrayBuffer(Span(1,2,List(0),Wait,wait-01,false)),Map(0 -> wait-01),Map(w -> wait-01))),[Ljava.lang.String;@42a15bdc,Annotation([Ljava.lang.String;@44a59da3,[Ljava.lang.String;@27e47833,[Ljava.lang.String;@6f6745d6),Annotation([Ljava.lang.String;@27508c5d,[Ljava.lang.String;@4f704591,[Ledu.cmu.lti.nlp.amr.Dependency;@4b5189ac),Annotation([Ljava.lang.String;@1e4d3ce5,[Ljava.lang.String;@3ddc6915,[Ljava.lang.String;@704deff2),Annotation([Ljava.lang.String;@379614be,[Ljava.lang.String;@404bbcbd,[Ledu.cmu.lti.nlp.amr.Entity;@1e81f160))
AMR:


Decoded in 1,994 microseconds
Sentence: For what ? "

Spans:

Langrangian relaxation converged after 1 iterations. Delta = 0.0

Dependencies:
1	For	_	IN	IN	_	0	root	_	_
2	what	_	WP	WP	_	1	pobj	_	_
3	?	_	.	.	_	1	punct	_	_
4	"	_	''	''	_	1	punct	_	_

Oracle:


Input(Some(Graph((wait-01 :ARG2 amr-unknown),ArrayBuffer(),Map(),Map())),[Ljava.lang.String;@1acaf3d,Annotation([Ljava.lang.String;@6986852,[Ljava.lang.String;@1bab8268,[Ljava.lang.String;@a307a8c),Annotation([Ljava.lang.String;@6e01f9b0,[Ljava.lang.String;@2b9ed6da,[Ledu.cmu.lti.nlp.amr.Dependency;@6c61a903),Annotation([Ljava.lang.String;@658c5a19,[Ljava.lang.String;@421e361,[Ljava.lang.String;@59d4cd39),Annotation([Ljava.lang.String;@389c4eb1,[Ljava.lang.String;@3fc79729,[Ledu.cmu.lti.nlp.amr.Entity;@34f6515b))
AMR:


Decoded in 12,157 microseconds
Sentence: " For the sunset .

Oracle Span 1:  sunset => sunset
Spans:
Span 3-4:  sunset => sunset

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  sunset => sunset

Dependencies:
1	"	_	''	''	_	4	punct	_	_
2	For	_	IN	IN	_	3	amod	_	_
3	the	_	DT	DT	_	4	nsubj	_	_
4	sunset	_	VBP	VBP	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:


Input(Some(Graph((wait-01 :ARG2 sunset),ArrayBuffer(Span(3,4,List(0),sunset,sunset,false)),Map(0 -> sunset),Map(s -> sunset))),[Ljava.lang.String;@4b34fff9,Annotation([Ljava.lang.String;@1187c9e8,[Ljava.lang.String;@127a7a2e,[Ljava.lang.String;@14008db3),Annotation([Ljava.lang.String;@78a773fd,[Ljava.lang.String;@57c03d88,[Ledu.cmu.lti.nlp.amr.Dependency;@16aa8654),Annotation([Ljava.lang.String;@6d7fc27,[Ljava.lang.String;@45ac5f9b,[Ljava.lang.String;@135606db),Annotation([Ljava.lang.String;@518caac3,[Ljava.lang.String;@68034211,[Ledu.cmu.lti.nlp.amr.Entity;@4f74980d))
AMR:


WARNING: makeIds can't find span Id: 0.0
Decoded in 11,589 microseconds
Sentence: We must wait until it is time . "

Oracle Span 1:  time => time
Oracle Span 2:  until => until
Oracle Span 3:  wait => wait-01
Oracle Span 4:  We => we
Spans:
Span 6-7:  time => time
Span 3-4:  until => until
Span 2-3:  wait => wait-01
Span 0-1:  We => we

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 6-7:  time => time
Oracle Span 3-4:  until => until
Oracle Span 2-3:  wait => wait-01
Oracle Span 0-1:  We => we

Dependencies:
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	must	_	MD	MD	_	3	aux	_	_
3	wait	_	VB	VB	_	0	root	_	_
4	until	_	IN	IN	_	7	mark	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	time	_	NN	NN	_	3	advcl	_	_
8	.	_	.	.	_	3	punct	_	_
9	"	_	''	''	_	3	punct	_	_

Oracle:
(u / until, op, t / time)
(w2 / wait-01, ARG1, w / we)
(w2 / wait-01, duration, u / until)

Input(Some(Graph((obligate-01 :ARG2 (wait-01 :duration (until :op time) :ARG1 we)),ArrayBuffer(Span(2,3,List(0),wait,wait-01,false), Span(3,4,List(1),until,until,false), Span(6,7,List(2),time,time,false), Span(0,1,List(3),We,we,false)),Map(2 -> time, 1 -> until, 0 -> wait-01, 3 -> we),Map(w -> we, t -> time, w2 -> wait-01, u -> until))),[Ljava.lang.String;@6c372fe6,Annotation([Ljava.lang.String;@58594a11,[Ljava.lang.String;@2a3888c1,[Ljava.lang.String;@4167d97b),Annotation([Ljava.lang.String;@14fa86ae,[Ljava.lang.String;@6e15fe2,[Ledu.cmu.lti.nlp.amr.Dependency;@68f1b17f),Annotation([Ljava.lang.String;@1722011b,[Ljava.lang.String;@57ad2aa7,[Ljava.lang.String;@5b3f61ff),Annotation([Ljava.lang.String;@3e2059ae,[Ljava.lang.String;@398dada8,[Ledu.cmu.lti.nlp.amr.Entity;@7cb502c))
AMR:
(w2 / wait-01, ARG0, w / we)
(w2 / wait-01, ARG1, u / until)
(w2 / wait-01, time, t / time)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 19,188 microseconds
Sentence: At first you seemed to be very much surprised .

Oracle Span 1:  much => much
Oracle Span 2:  seemed => seem-01
Oracle Span 3:  surprised => surprise-01
Oracle Span 4:  very => very
Oracle Span 5:  you => you
Spans:
Span 7-8:  much => much
Span 3-4:  seemed => seem-01
Span 8-9:  surprised => surprise-01
Span 6-7:  very => very
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  much => much
Oracle Span 3-4:  seemed => seem-01
Oracle Span 8-9:  surprised => surprise-01
Oracle Span 6-7:  very => very
Oracle Span 2-3:  you => you

Dependencies:
1	At	_	IN	IN	_	4	prep	_	_
2	first	_	JJ	JJ	_	1	pobj	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	seemed	_	VBD	VBD	_	0	root	_	_
5	to	_	TO	TO	_	9	aux	_	_
6	be	_	VB	VB	_	9	cop	_	_
7	very	_	RB	RB	_	9	advmod	_	_
8	much	_	RB	RB	_	9	advmod	_	_
9	surprised	_	JJ	JJ	_	4	xcomp	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(m / much, degree, v / very)
(s / seem-01, ARG1, s2 / surprise-01)
(s2 / surprise-01, ARG1, y / you)
(s2 / surprise-01, degree, m / much)

Input(Some(Graph((seem-01 :time at-first :ARG1 (surprise-01 :degree (much :degree very) :ARG1 you)),ArrayBuffer(Span(3,4,List(0),seemed,seem-01,false), Span(8,9,List(1),surprised,surprise-01,false), Span(7,8,List(2),much,much,false), Span(6,7,List(3),very,very,false), Span(2,3,List(4),you,you,false)),Map(2 -> much, 1 -> surprise-01, 4 -> you, 0 -> seem-01, 3 -> very),Map(s2 -> surprise-01, s -> seem-01, v -> very, m -> much, y -> you))),[Ljava.lang.String;@275bf9b3,Annotation([Ljava.lang.String;@1b8a29df,[Ljava.lang.String;@4fbe37eb,[Ljava.lang.String;@12a94400),Annotation([Ljava.lang.String;@6a47b187,[Ljava.lang.String;@2049a9c1,[Ledu.cmu.lti.nlp.amr.Dependency;@1ef6d34c),Annotation([Ljava.lang.String;@46271dd6,[Ljava.lang.String;@11bb571c,[Ljava.lang.String;@7c51f34b),Annotation([Ljava.lang.String;@5495333e,[Ljava.lang.String;@2a225dd7,[Ledu.cmu.lti.nlp.amr.Entity;@61eaec38))
AMR:
(m / much, degree, v / very)
(s / seem-01, ARG0, y / you)
(s2 / surprise-01, ARG1, y / you)
(s2 / surprise-01, degree, m / much)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 20,745 microseconds
Sentence: And then you laughed to yourself .

Oracle Span 1:  And => and
Oracle Span 2:  laughed => laugh-01
Oracle Span 3:  then => then
Oracle Span 4:  you => you
Spans:
Span 0-1:  And => and
Span 3-4:  laughed => laugh-01
Span 1-2:  then => then
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 3-4:  laughed => laugh-01
Oracle Span 1-2:  then => then
Oracle Span 2-3:  you => you

Dependencies:
1	And	_	CC	CC	_	4	cc	_	_
2	then	_	RB	RB	_	4	advmod	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	laughed	_	VBD	VBD	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	yourself	_	PRP	PRP	_	5	pobj	_	_
7	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, l / laugh-01)
(l / laugh-01, ARG0, y / you)
(l / laugh-01, ARG2, y / you)
(l / laugh-01, time, t / then)

Input(Some(Graph((and :op (laugh-01 :time then :ARG0 you :ARG2 you)),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(3,4,List(1),laughed,laugh-01,false), Span(1,2,List(2),then,then,false), Span(2,3,List(3),you,you,false)),Map(2 -> then, 1 -> laugh-01, 0 -> and, 3 -> you),Map(t -> then, y -> you, a -> and, l -> laugh-01))),[Ljava.lang.String;@125290e5,Annotation([Ljava.lang.String;@6fa34d52,[Ljava.lang.String;@57576994,[Ljava.lang.String;@616ac46a),Annotation([Ljava.lang.String;@67b9b51a,[Ljava.lang.String;@1205bd62,[Ledu.cmu.lti.nlp.amr.Dependency;@7ef27d7f),Annotation([Ljava.lang.String;@490caf5f,[Ljava.lang.String;@6337c201,[Ljava.lang.String;@5c669da8),Annotation([Ljava.lang.String;@31920ade,[Ljava.lang.String;@1d483de4,[Ledu.cmu.lti.nlp.amr.Entity;@4032d386))
AMR:
(a / and, op, l / laugh-01)
(l / laugh-01, ARG0, y / you)
(l / laugh-01, time, t / then)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 11,748 microseconds
Sentence: You said to me : " I am always thinking that I am at home ! "

Oracle Span 1:  always => always
Oracle Span 2:  home => home
Oracle Span 3:  I => i
Oracle Span 4:  said => say-01
Oracle Span 5:  thinking => think-01
Oracle Span 6:  You => you
Spans:
Span 8-9:  always => always
Span 14-15:  home => home
Span 6-7:  I => i
Span 1-2:  said => say-01
Span 9-10:  thinking => think-01
Span 0-1:  You => you

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 8-9:  always => always
Oracle Span 14-15:  home => home
Oracle Span 6-7:  I => i
Oracle Span 1-2:  said => say-01
Oracle Span 9-10:  thinking => think-01
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	me	_	PRP	PRP	_	3	pobj	_	_
5	:	_	:	:	_	2	punct	_	_
6	"	_	''	''	_	2	punct	_	_
7	I	_	PRP	PRP	_	10	nsubj	_	_
8	am	_	VBP	VBP	_	10	aux	_	_
9	always	_	RB	RB	_	10	advmod	_	_
10	thinking	_	VBG	VBG	_	2	ccomp	_	_
11	that	_	IN	IN	_	13	mark	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	am	_	VBP	VBP	_	10	ccomp	_	_
14	at	_	IN	IN	_	13	prep	_	_
15	home	_	NN	NN	_	14	pobj	_	_
16	!	_	.	.	_	2	punct	_	_
17	"	_	''	''	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, t / think-01)
(s / say-01, ARG2, i / i)
(t / think-01, ARG0, y / you)
(t / think-01, time, a / always)

Input(Some(Graph((say-01 :ARG2 i :ARG1 (think-01 :time always :ARG1 (be-located-at-91 :ARG2 home :ARG1 you) :ARG0 you) :ARG0 you),ArrayBuffer(Span(1,2,List(0),said,say-01,false), Span(6,7,List(1),I,i,false), Span(9,10,List(2),thinking,think-01,false), Span(8,9,List(3),always,always,false), Span(14,15,List(4),home,home,false), Span(0,1,List(5),You,you,false)),Map(2 -> think-01, 5 -> you, 1 -> i, 4 -> home, 0 -> say-01, 3 -> always),Map(h -> home, t -> think-01, s -> say-01, y -> you, a -> always, i -> i))),[Ljava.lang.String;@28d18df5,Annotation([Ljava.lang.String;@934b6cb,[Ljava.lang.String;@55cf0d14,[Ljava.lang.String;@3b74ac8),Annotation([Ljava.lang.String;@27adc16e,[Ljava.lang.String;@b83a9be,[Ledu.cmu.lti.nlp.amr.Dependency;@2609b277),Annotation([Ljava.lang.String;@1fd14d74,[Ljava.lang.String;@563e4951,[Ljava.lang.String;@4066c471),Annotation([Ljava.lang.String;@2b175c00,[Ljava.lang.String;@3eb81efb,[Ledu.cmu.lti.nlp.amr.Entity;@1ae8bcbc))
AMR:
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, t / think-01)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, h / home)
(t / think-01, time, a / always)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 124,722 microseconds
Sentence: Just so .

Oracle Span 1:  Just => just
Oracle Span 2:  so => so
Spans:
Span 0-1:  Just => just
Span 1-2:  so => so

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Just => just
Oracle Span 1-2:  so => so

Dependencies:
1	Just	_	CD	CD	_	0	root	_	_
2	so	_	RB	RB	_	1	advmod	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(s / so, mod, j / just)

Input(Some(Graph((so :mod just),ArrayBuffer(Span(1,2,List(0),so,so,false), Span(0,1,List(1),Just,just,false)),Map(1 -> just, 0 -> so),Map(j -> just, s -> so))),[Ljava.lang.String;@6cdba6dc,Annotation([Ljava.lang.String;@7d3d101b,[Ljava.lang.String;@30c8681,[Ljava.lang.String;@5cdec700),Annotation([Ljava.lang.String;@6d026701,[Ljava.lang.String;@78aa1f72,[Ledu.cmu.lti.nlp.amr.Dependency;@1f75a668),Annotation([Ljava.lang.String;@35399441,[Ljava.lang.String;@4b7dc788,[Ljava.lang.String;@6304101a),Annotation([Ljava.lang.String;@5170bcf4,[Ljava.lang.String;@2812b107,[Ledu.cmu.lti.nlp.amr.Entity;@df6620a))
AMR:
(j / just, mod, s / so)

WARNING: makeIds can't find span Id: 0.0
Decoded in 4,659 microseconds
Sentence: Everybody knows that when it is noon in the United States the sun is setting over France .

Oracle Span 1:  Everybody => everybody
Oracle Span 2:  France => (country :name (name :op "France"))
Oracle Span 3:  knows => know-01
Oracle Span 4:  setting => set-11
Oracle Span 5:  sun => sun
Oracle Span 6:  United States => (country :name (name :op "States" :op "United"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "United" :op "States"))
Spans:
Span 0-1:  Everybody => everybody
Span 16-17:  France => (country :name (name :op "France"))
Span 1-2:  knows => know-01
Span 14-15:  setting => set-11
Span 12-13:  sun => sun
Span 9-11:  United States => (country :name (name :op "States" :op "United"))

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 0-1:  Everybody => everybody
Oracle Span 16-17:  France => (country :name (name :op "France"))
Oracle Span 1-2:  knows => know-01
Oracle Span 14-15:  setting => set-11
Oracle Span 12-13:  sun => sun
Oracle Span 9-11:  United States => (country :name (name :op "States" :op "United"))

Dependencies:
1	Everybody	_	NN	NN	_	2	nsubj	_	_
2	knows	_	VBZ	VBZ	_	0	root	_	_
3	that	_	IN	IN	_	15	mark	_	_
4	when	_	WRB	WRB	_	7	advmod	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	noon	_	NN	NN	_	15	advcl	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	United	_	NNP	NNP	_	11	nn	_	_
11	States	_	NNPS	NNPS	_	8	pobj	_	_
12	the	_	DT	DT	_	13	det	_	_
13	sun	_	NN	NN	_	15	nsubj	_	_
14	is	_	VBZ	VBZ	_	15	aux	_	_
15	setting	_	VBG	VBG	_	2	ccomp	_	_
16	over	_	IN	IN	_	15	prep	_	_
17	France	_	NNP	NNP	_	16	pobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(k / know-01, ARG0, e / everybody)
(k / know-01, ARG1, s / set-11)
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "France")
(s / set-11, ARG1, s2 / sun)
(s / set-11, location, c2 / country)

Input(Some(Graph((know-01 :ARG1 (set-11 :time (date-entity :time "12:00" :location (country :name (name :op "States" :op "United") :wiki "United_States")) :location (country :name (name :op "France") :wiki "France") :ARG1 sun) :ARG0 everybody),ArrayBuffer(Span(16,17,List(0, 1, 2),France,(country :name (name :op "France")),false), Span(9,11,List(3, 4, 5, 6),United States,(country :name (name :op "States" :op "United")),false), Span(1,2,List(7),knows,know-01,false), Span(14,15,List(8),setting,set-11,false), Span(12,13,List(9),sun,sun,false), Span(0,1,List(10),Everybody,everybody,false)),Map(2 -> "France", 5 -> "States", 8 -> set-11, 7 -> know-01, 1 -> name, 4 -> name, 6 -> "United", 9 -> sun, 0 -> country, 10 -> everybody, 3 -> country),Map(e -> everybody, s2 -> sun, k -> know-01, s -> set-11, n3 -> name, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@4e31276e,Annotation([Ljava.lang.String;@1a72a540,[Ljava.lang.String;@27d5a580,[Ljava.lang.String;@198d6542),Annotation([Ljava.lang.String;@5e403b4a,[Ljava.lang.String;@5117dd67,[Ledu.cmu.lti.nlp.amr.Dependency;@5be49b60),Annotation([Ljava.lang.String;@2931522b,[Ljava.lang.String;@7674b62c,[Ljava.lang.String;@19e7a160),Annotation([Ljava.lang.String;@662706a7,[Ljava.lang.String;@45a4b042,[Ledu.cmu.lti.nlp.amr.Entity;@16b2bb0c))
AMR:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(k / know-01, ARG0, e / everybody)
(k / know-01, ARG1, s / set-11)
(k / know-01, ARG2, c / country)
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "France")
(s / set-11, ARG0, s2 / sun)
(s / set-11, ARG1, c2 / country)

WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.2.1.1
WARNING: makeIds can't find span Id: 0.1.2.1.1.1
WARNING: makeIds can't find span Id: 0.1.2.1.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 223,107 microseconds
Sentence: If you could fly to France in one minute , you could go straight into the sunset , right from noon .

Oracle Span 1:  could => possible-01
Oracle Span 2:  could => possible-01
Oracle Span 3:  fly => fly-01
Oracle Span 4:  France => (country :name (name :op "France"))
Oracle Span 5:  go => go-02
Oracle Span 6:  minute => (temporal-quantity :unit minute)
Oracle Span 7:  one => 1
Oracle Span 8:  straight => straight-04
Oracle Span 9:  sunset => sunset
Oracle Span 10:  you => you
NER Entity: (country :name (name :op "France"))
Spans:
Span 2-3:  could => possible-01
Span 11-12:  could => possible-01
Span 3-4:  fly => fly-01
Span 5-6:  France => (country :name (name :op "France"))
Span 12-13:  go => go-02
Span 8-9:  minute => (temporal-quantity :unit minute)
Span 7-8:  one => 1
Span 13-14:  straight => straight-04
Span 16-17:  sunset => sunset
Span 1-2:  you => you

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 2-3:  could => possible-01
Oracle Span 11-12:  could => possible-01
Oracle Span 3-4:  fly => fly-01
Oracle Span 5-6:  France => (country :name (name :op "France"))
Oracle Span 12-13:  go => go-02
Oracle Span 8-9:  minute => (temporal-quantity :unit minute)
Oracle Span 7-8:  one => 1
Oracle Span 13-14:  straight => straight-04
Oracle Span 16-17:  sunset => sunset
Oracle Span 1-2:  you => you

Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	you	_	PRP	PRP	_	4	nsubj	_	_
3	could	_	MD	MD	_	4	aux	_	_
4	fly	_	VB	VB	_	13	advcl	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	France	_	NNP	NNP	_	5	pobj	_	_
7	in	_	IN	IN	_	4	prep	_	_
8	one	_	CD	CD	_	9	num	_	_
9	minute	_	NN	NN	_	7	pobj	_	_
10	,	_	,	,	_	13	punct	_	_
11	you	_	PRP	PRP	_	13	nsubj	_	_
12	could	_	MD	MD	_	13	aux	_	_
13	go	_	VB	VB	_	0	root	_	_
14	straight	_	RB	RB	_	15	advmod	_	_
15	into	_	IN	IN	_	13	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	sunset	_	NN	NN	_	15	pobj	_	_
18	,	_	,	,	_	15	punct	_	_
19	right	_	RB	RB	_	15	dep	_	_
20	from	_	IN	IN	_	15	prep	_	_
21	noon	_	NN	NN	_	20	pobj	_	_
22	.	_	.	.	_	13	punct	_	_

Oracle:
(c / country, name, n / name)
(f / fly-01, ARG1, y / you)
(f / fly-01, destination, c / country)
(f / fly-01, duration, t / temporal-quantity)
(g / go-02, ARG0, y / you)
(g / go-02, ARG4, s / sunset)
(n / name, op, "France")
(p / possible-01, ARG1, g / go-02)
(p / possible-01, condition, p2 / possible-01)
(p2 / possible-01, ARG1, f / fly-01)
(s2 / straight-04, ARG1, g / go-02)
(t / temporal-quantity, quant, 1 / 1)
(t / temporal-quantity, unit, m / minute)

Input(Some(Graph((possible-01 :condition (possible-01 :ARG1 (fly-01 :destination (country :name (name :op "France") :wiki "France") :duration (temporal-quantity :unit minute :quant 1) :ARG1 you)) :ARG1 (go-02 :ARG1-of straight-04 :ARG4 sunset :ARG3 (date-entity :time "12:00") :ARG0 you)),ArrayBuffer(Span(5,6,List(0, 1, 2),France,(country :name (name :op "France")),false), Span(2,3,List(3),could,possible-01,false), Span(11,12,List(4),could,possible-01,false), Span(3,4,List(5),fly,fly-01,false), Span(7,8,List(6),one,1,false), Span(8,9,List(7, 8),minute,(temporal-quantity :unit minute),false), Span(1,2,List(9),you,you,false), Span(12,13,List(10),go,go-02,false), Span(13,14,List(11),straight,straight-04,false), Span(16,17,List(12),sunset,sunset,false)),Map(2 -> "France", 5 -> fly-01, 12 -> sunset, 8 -> minute, 7 -> temporal-quantity, 1 -> name, 4 -> possible-01, 11 -> straight-04, 6 -> 1, 9 -> you, 0 -> country, 10 -> go-02, 3 -> possible-01),Map(n -> name, s2 -> straight-04, t -> temporal-quantity, p2 -> possible-01, s -> sunset, m -> minute, 1 -> 1, g -> go-02, y -> you, p -> possible-01, c -> country, f -> fly-01))),[Ljava.lang.String;@327af41b,Annotation([Ljava.lang.String;@6cb6decd,[Ljava.lang.String;@c7045b9,[Ljava.lang.String;@f99f5e0),Annotation([Ljava.lang.String;@6aa61224,[Ljava.lang.String;@30bce90b,[Ledu.cmu.lti.nlp.amr.Dependency;@3e6f3f28),Annotation([Ljava.lang.String;@7e19ebf0,[Ljava.lang.String;@2474f125,[Ljava.lang.String;@7357a011),Annotation([Ljava.lang.String;@3406472c,[Ljava.lang.String;@5717c37,[Ledu.cmu.lti.nlp.amr.Entity;@68f4865))
AMR:
(c / country, name, n / name)
(f / fly-01, ARG0, y / you)
(f / fly-01, ARG1, t / temporal-quantity)
(f / fly-01, ARG2, c / country)
(g / go-02, ARG0, y / you)
(g / go-02, ARG1, s / sunset)
(n / name, op, "France")
(p / possible-01, ARG1, f / fly-01)
(p2 / possible-01, ARG1, g / go-02)
(s2 / straight-04, ARG0, s / sunset)
(t / temporal-quantity, quant, 1 / 1)
(t / temporal-quantity, unit, m / minute)

WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.1
WARNING: makeIds can't find span Id: 0.1.0.2.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 197,169 microseconds
Sentence: Unfortunately , France is too far away for that .

Oracle Span 1:  away => away
Oracle Span 2:  far => far
Oracle Span 3:  France => (country :name (name :op "France"))
Oracle Span 4:  that => that
Oracle Span 5:  too => too
NER Entity: (country :name (name :op "France"))
Spans:
Span 6-7:  away => away
Span 5-6:  far => far
Span 2-3:  France => (country :name (name :op "France"))
Span 8-9:  that => that
Span 4-5:  too => too

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  away => away
Oracle Span 5-6:  far => far
Oracle Span 2-3:  France => (country :name (name :op "France"))
Oracle Span 8-9:  that => that
Oracle Span 4-5:  too => too

Dependencies:
1	Unfortunately	_	RB	RB	_	4	advmod	_	_
2	,	_	,	,	_	4	punct	_	_
3	France	_	NNP	NNP	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	0	root	_	_
5	too	_	RB	RB	_	7	advmod	_	_
6	far	_	RB	RB	_	7	advmod	_	_
7	away	_	RB	RB	_	4	advmod	_	_
8	for	_	IN	IN	_	4	prep	_	_
9	that	_	DT	DT	_	8	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(a / away, extent, f2 / far)
(c / country, name, n / name)
(f2 / far, degree, t / too)
(n / name, op, "France")

Input(Some(Graph((fortunate-01 :polarity - :ARG2 (be-located-at-91 :ARG1 (country :name (name :op "France") :wiki "France") :ARG2 (away :extent (far :degree too)) :purpose that)),ArrayBuffer(Span(2,3,List(0, 1, 2),France,(country :name (name :op "France")),false), Span(6,7,List(3),away,away,false), Span(5,6,List(4),far,far,false), Span(4,5,List(5),too,too,false), Span(8,9,List(6),that,that,false)),Map(2 -> "France", 5 -> too, 1 -> name, 4 -> far, 6 -> that, 0 -> country, 3 -> away),Map(n -> name, t -> too, a -> away, t2 -> that, f2 -> far, c -> country))),[Ljava.lang.String;@4816278d,Annotation([Ljava.lang.String;@4eaf3684,[Ljava.lang.String;@40317ba2,[Ljava.lang.String;@3c01cfa1),Annotation([Ljava.lang.String;@45d2ade3,[Ljava.lang.String;@727eb8cb,[Ledu.cmu.lti.nlp.amr.Dependency;@39d9314d),Annotation([Ljava.lang.String;@b978d10,[Ljava.lang.String;@5b7a8434,[Ljava.lang.String;@5c45d770),Annotation([Ljava.lang.String;@2ce6c6ec,[Ljava.lang.String;@1bae316d,[Ledu.cmu.lti.nlp.amr.Entity;@147a5d08))
AMR:
(a / away, extent, f2 / far)
(c / country, mod, f2 / far)
(c / country, name, n / name)
(f2 / far, degree, t / too)
(n / name, op, "France")
(t2 / that, poss, c / country)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 19,256 microseconds
Sentence: But on your tiny planet , my little prince , all you need do is move your chair a few steps .

Oracle Span 1:  But => contrast-01
Oracle Span 2:  chair => chair
Oracle Span 3:  few => few
Oracle Span 4:  little => little
Oracle Span 5:  move => move-01
Oracle Span 6:  planet => planet
Oracle Span 7:  prince => prince
Oracle Span 8:  steps => step
Oracle Span 9:  tiny => tiny
Spans:
Span 0-1:  But => contrast-01
Span 17-18:  chair => chair
Span 19-20:  few => few
Span 7-8:  little => little
Span 15-16:  move => move-01
Span 4-5:  planet => planet
Span 8-9:  prince => prince
Span 20-21:  steps => step
Span 3-4:  tiny => tiny

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 17-18:  chair => chair
Oracle Span 19-20:  few => few
Oracle Span 7-8:  little => little
Oracle Span 15-16:  move => move-01
Oracle Span 4-5:  planet => planet
Oracle Span 8-9:  prince => prince
Oracle Span 20-21:  steps => step
Oracle Span 3-4:  tiny => tiny

Dependencies:
1	But	_	CC	CC	_	16	cc	_	_
2	on	_	IN	IN	_	16	prep	_	_
3	your	_	PRP$	PRP$	_	5	poss	_	_
4	tiny	_	JJ	JJ	_	5	amod	_	_
5	planet	_	NN	NN	_	2	pobj	_	_
6	,	_	,	,	_	16	punct	_	_
7	my	_	PRP$	PRP$	_	9	poss	_	_
8	little	_	JJ	JJ	_	9	amod	_	_
9	prince	_	NN	NN	_	16	nsubj	_	_
10	,	_	,	,	_	9	punct	_	_
11	all	_	DT	DT	_	14	dobj	_	_
12	you	_	PRP	PRP	_	14	nsubj	_	_
13	need	_	MD	MD	_	14	aux	_	_
14	do	_	VB	VB	_	9	rcmod	_	_
15	is	_	VBZ	VBZ	_	16	aux	_	_
16	move	_	VB	VB	_	0	root	_	_
17	your	_	PRP$	PRP$	_	18	poss	_	_
18	chair	_	NN	NN	_	16	dep	_	_
19	a	_	DT	DT	_	21	det	_	_
20	few	_	JJ	JJ	_	21	amod	_	_
21	steps	_	NNS	NNS	_	16	dobj	_	_
22	.	_	.	.	_	16	punct	_	_

Oracle:
(c / chair, poss, p2 / prince)
(m / move-01, ARG0, p2 / prince)
(m / move-01, ARG1, c / chair)
(m / move-01, extent, s / step)
(p / planet, mod, t / tiny)
(p / planet, poss, p2 / prince)
(p2 / prince, mod, l / little)
(s / step, quant, f / few)

Input(Some(Graph((say-01 :ARG1 (contrast-01 :ARG2 (obligate-01 :ARG2 (move-01 :mod only :extent (step :quant few) :ARG1 (chair :poss prince) :ARG0 prince) :location (planet :poss (prince :poss i :mod little) :mod tiny))) :ARG2 prince),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(15,16,List(1),move,move-01,false), Span(20,21,List(2),steps,step,false), Span(19,20,List(3),few,few,false), Span(17,18,List(4),chair,chair,false), Span(4,5,List(5),planet,planet,false), Span(8,9,List(6),prince,prince,false), Span(7,8,List(7),little,little,false), Span(3,4,List(8),tiny,tiny,false)),Map(2 -> step, 5 -> planet, 8 -> tiny, 7 -> little, 1 -> move-01, 4 -> chair, 6 -> prince, 0 -> contrast-01, 3 -> few),Map(t -> tiny, p2 -> prince, s -> step, m -> move-01, p -> planet, c -> chair, l -> little, f -> few, c2 -> contrast-01))),[Ljava.lang.String;@6676f6a0,Annotation([Ljava.lang.String;@7cbd9d24,[Ljava.lang.String;@1672fe87,[Ljava.lang.String;@5026735c),Annotation([Ljava.lang.String;@1b45c0e,[Ljava.lang.String;@11f0a5a1,[Ledu.cmu.lti.nlp.amr.Dependency;@10f7f7de),Annotation([Ljava.lang.String;@73a8da0f,[Ljava.lang.String;@50dfbc58,[Ljava.lang.String;@4416d64f),Annotation([Ljava.lang.String;@6bf08014,[Ljava.lang.String;@5e3d57c7,[Ledu.cmu.lti.nlp.amr.Entity;@732d0d24))
AMR:
(c2 / contrast-01, ARG1, p / planet)
(c2 / contrast-01, ARG2, m / move-01)
(m / move-01, ARG0, c / chair)
(m / move-01, ARG1, s / step)
(m / move-01, ARG2, p2 / prince)
(p / planet, mod, t / tiny)
(p2 / prince, mod, l / little)
(s / step, mod, f / few)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
Decoded in 208,384 microseconds
Sentence: You can see the day end and the twilight falling whenever you like ...

Oracle Span 1:  and => and
Oracle Span 2:  can => possible-01
Oracle Span 3:  day => day
Oracle Span 4:  end => end-01
Oracle Span 5:  falling => fall-04
Oracle Span 6:  like => like-02
Oracle Span 7:  see => see-01
Oracle Span 8:  twilight => twilight
Oracle Span 9:  You => you
Spans:
Span 6-7:  and => and
Span 1-2:  can => possible-01
Span 4-5:  day => day
Span 5-6:  end => end-01
Span 9-10:  falling => fall-04
Span 12-13:  like => like-02
Span 2-3:  see => see-01
Span 8-9:  twilight => twilight
Span 0-1:  You => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 1-2:  can => possible-01
Oracle Span 4-5:  day => day
Oracle Span 5-6:  end => end-01
Oracle Span 9-10:  falling => fall-04
Oracle Span 12-13:  like => like-02
Oracle Span 2-3:  see => see-01
Oracle Span 8-9:  twilight => twilight
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	can	_	MD	MD	_	3	aux	_	_
3	see	_	VB	VB	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	day	_	NN	NN	_	6	nn	_	_
6	end	_	NN	NN	_	10	nsubj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	the	_	DT	DT	_	9	det	_	_
9	twilight	_	NN	NN	_	6	conj	_	_
10	falling	_	VBG	VBG	_	3	dep	_	_
11	whenever	_	WRB	WRB	_	13	advmod	_	_
12	you	_	PRP	PRP	_	13	nsubj	_	_
13	like	_	VBP	VBP	_	10	advcl	_	_
14	...	_	:	:	_	3	punct	_	_

Oracle:
(a / and, op, e / end-01)
(a / and, op, f / fall-04)
(e / end-01, ARG1, d / day)
(f / fall-04, ARG1, t / twilight)
(l / like-02, ARG0, y / you)
(l / like-02, ARG1, s / see-01)
(p / possible-01, ARG1, s / see-01)
(s / see-01, ARG0, y / you)
(s / see-01, ARG1, a / and)
(s / see-01, time, l / like-02)

Input(Some(Graph((possible-01 :ARG1 (see-01 :time (like-02 :mod any :ARG0 you :ARG1 see-01) :ARG1 (and :op (fall-04 :ARG1 twilight) :op (end-01 :ARG1 day)) :ARG0 you)),ArrayBuffer(Span(1,2,List(0),can,possible-01,false), Span(2,3,List(1),see,see-01,false), Span(12,13,List(2),like,like-02,false), Span(6,7,List(3),and,and,false), Span(9,10,List(4),falling,fall-04,false), Span(8,9,List(5),twilight,twilight,false), Span(5,6,List(6),end,end-01,false), Span(4,5,List(7),day,day,false), Span(0,1,List(8),You,you,false)),Map(2 -> like-02, 5 -> twilight, 8 -> you, 7 -> day, 1 -> see-01, 4 -> fall-04, 6 -> end-01, 0 -> possible-01, 3 -> and),Map(e -> end-01, t -> twilight, s -> see-01, d -> day, y -> you, p -> possible-01, a -> and, l -> like-02, f -> fall-04))),[Ljava.lang.String;@1fb19a0,Annotation([Ljava.lang.String;@6ee4d9ab,[Ljava.lang.String;@5a5338df,[Ljava.lang.String;@418c5a9c),Annotation([Ljava.lang.String;@18e36d14,[Ljava.lang.String;@5082d622,[Ledu.cmu.lti.nlp.amr.Dependency;@13d4992d),Annotation([Ljava.lang.String;@302f7971,[Ljava.lang.String;@332729ad,[Ljava.lang.String;@75d2da2d),Annotation([Ljava.lang.String;@4278284b,[Ljava.lang.String;@9573584,[Ledu.cmu.lti.nlp.amr.Entity;@3370f42))
AMR:
(a / and, op, e / end-01)
(e / end-01, ARG1, d / day)
(f / fall-04, ARG1, t / twilight)
(f / fall-04, time, l / like-02)
(p / possible-01, ARG1, s / see-01)
(s / see-01, ARG0, y / you)
(s / see-01, ARG1, e / end-01)
(t / twilight, mod, d / day)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 45,439 microseconds
Sentence: " One day , " you said to me , " I saw the sunset forty - four times ! "

Oracle Span 1:  day => day
Oracle Span 2:  I => i
Oracle Span 3:  One => one
Oracle Span 4:  said => say-01
Oracle Span 5:  saw => see-01
Oracle Span 6:  sunset => sunset
Oracle Span 7:  you => you
Spans:
Span 2-3:  day => day
Span 11-12:  I => i
Span 1-2:  One => one
Span 6-7:  said => say-01
Span 12-13:  saw => see-01
Span 14-15:  sunset => sunset
Span 5-6:  you => you

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 2-3:  day => day
Oracle Span 11-12:  I => i
Oracle Span 1-2:  One => one
Oracle Span 6-7:  said => say-01
Oracle Span 12-13:  saw => see-01
Oracle Span 14-15:  sunset => sunset
Oracle Span 5-6:  you => you

Dependencies:
1	"	_	''	''	_	13	punct	_	_
2	One	_	CD	CD	_	7	nsubj	_	_
3	day	_	NN	NN	_	2	dep	_	_
4	,	_	,	,	_	2	punct	_	_
5	"	_	''	''	_	2	punct	_	_
6	you	_	PRP	PRP	_	7	nsubj	_	_
7	said	_	VBD	VBD	_	13	ccomp	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	me	_	PRP	PRP	_	8	pobj	_	_
10	,	_	,	,	_	13	punct	_	_
11	"	_	''	''	_	13	punct	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	saw	_	VBD	VBD	_	0	root	_	_
14	the	_	DT	DT	_	16	det	_	_
15	sunset	_	JJ	JJ	_	16	amod	_	_
16	forty	_	NN	NN	_	13	dobj	_	_
17	-	_	:	:	_	16	punct	_	_
18	four	_	CD	CD	_	19	num	_	_
19	times	_	NNS	NNS	_	16	dep	_	_
20	!	_	.	.	_	13	punct	_	_
21	"	_	''	''	_	13	punct	_	_

Oracle:
(d / day, mod, o / one)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, i / i)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, s3 / sunset)
(s2 / see-01, time, d / day)

Input(Some(Graph((say-01 :ARG2 i :ARG1 (see-01 :time (day :mod one) :ARG1 sunset :frequency 44 :ARG0 you) :ARG0 you),ArrayBuffer(Span(6,7,List(0),said,say-01,false), Span(11,12,List(1),I,i,false), Span(12,13,List(2),saw,see-01,false), Span(2,3,List(3),day,day,false), Span(1,2,List(4),One,one,false), Span(14,15,List(5),sunset,sunset,false), Span(5,6,List(6),you,you,false)),Map(2 -> see-01, 5 -> sunset, 1 -> i, 4 -> one, 6 -> you, 0 -> say-01, 3 -> day),Map(s2 -> see-01, s -> say-01, d -> day, y -> you, i -> i, s3 -> sunset, o -> one))),[Ljava.lang.String;@6057aebb,Annotation([Ljava.lang.String;@63eef88a,[Ljava.lang.String;@53251a66,[Ljava.lang.String;@6853425f),Annotation([Ljava.lang.String;@352c1b98,[Ljava.lang.String;@21129f1f,[Ledu.cmu.lti.nlp.amr.Dependency;@5a9f4771),Annotation([Ljava.lang.String;@282cb7c7,[Ljava.lang.String;@7d898981,[Ljava.lang.String;@48d61b48),Annotation([Ljava.lang.String;@68d279ec,[Ljava.lang.String;@258d79be,[Ledu.cmu.lti.nlp.amr.Entity;@14f9390f))
AMR:
(d / day, mod, o / one)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, s3 / sunset)
(s / say-01, time, d / day)
(s2 / see-01, ARG0, i / i)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 130,886 microseconds
Sentence: And a little later you added : " You know -- one loves the sunset , when one is so sad ... "

Oracle Span 1:  added => add-01
Oracle Span 2:  And => and
Oracle Span 3:  later => late
Oracle Span 4:  little => little
Oracle Span 5:  loves => love-01
Oracle Span 6:  one => one
Oracle Span 7:  sad => sad-02
Oracle Span 8:  so => so
Oracle Span 9:  sunset => sunset
Oracle Span 10:  you => you
Spans:
Span 5-6:  added => add-01
Span 0-1:  And => and
Span 3-4:  later => late
Span 2-3:  little => little
Span 12-13:  loves => love-01
Span 11-12:  one => one
Span 20-21:  sad => sad-02
Span 19-20:  so => so
Span 14-15:  sunset => sunset
Span 4-5:  you => you

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 5-6:  added => add-01
Oracle Span 0-1:  And => and
Oracle Span 3-4:  later => late
Oracle Span 2-3:  little => little
Oracle Span 12-13:  loves => love-01
Oracle Span 11-12:  one => one
Oracle Span 20-21:  sad => sad-02
Oracle Span 19-20:  so => so
Oracle Span 14-15:  sunset => sunset
Oracle Span 4-5:  you => you

Dependencies:
1	And	_	CC	CC	_	6	cc	_	_
2	a	_	DT	DT	_	3	det	_	_
3	little	_	RB	RB	_	4	npadvmod	_	_
4	later	_	RB	RB	_	6	advmod	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	added	_	VBD	VBD	_	0	root	_	_
7	:	_	:	:	_	6	punct	_	_
8	"	_	''	''	_	6	punct	_	_
9	You	_	PRP	PRP	_	10	nsubj	_	_
10	know	_	VBP	VBP	_	6	dep	_	_
11	--	_	:	:	_	6	punct	_	_
12	one	_	PRP	PRP	_	13	nsubj	_	_
13	loves	_	VBZ	VBZ	_	6	parataxis	_	_
14	the	_	DT	DT	_	15	det	_	_
15	sunset	_	NN	NN	_	13	dobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	when	_	WRB	WRB	_	21	advmod	_	_
18	one	_	PRP	PRP	_	21	nsubj	_	_
19	is	_	VBZ	VBZ	_	21	cop	_	_
20	so	_	RB	RB	_	21	advmod	_	_
21	sad	_	JJ	JJ	_	15	rcmod	_	_
22	...	_	:	:	_	6	punct	_	_
23	"	_	''	''	_	6	punct	_	_

Oracle:
(a / and, op, a2 / add-01)
(a2 / add-01, ARG0, y / you)
(a2 / add-01, ARG1, l3 / love-01)
(a2 / add-01, time, l / late)
(l3 / love-01, ARG0, o / one)
(l3 / love-01, ARG1, s / sunset)
(l3 / love-01, time, s2 / sad-02)
(s2 / sad-02, ARG1, o / one)
(s2 / sad-02, mod, s3 / so)

Input(Some(Graph((and :op (add-01 :time (late :degree (more :quant little)) :ARG1 (love-01 :time (sad-02 :mod so :ARG1 one) :ARG1 sunset :ARG0 one) :ARG0 you)),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(5,6,List(1),added,add-01,false), Span(3,4,List(2),later,late,false), Span(2,3,List(3),little,little,false), Span(12,13,List(4),loves,love-01,false), Span(20,21,List(5),sad,sad-02,false), Span(19,20,List(6),so,so,false), Span(14,15,List(7),sunset,sunset,false), Span(11,12,List(8),one,one,false), Span(4,5,List(9),you,you,false)),Map(2 -> late, 5 -> sad-02, 8 -> one, 7 -> sunset, 1 -> add-01, 4 -> love-01, 6 -> so, 9 -> you, 0 -> and, 3 -> little),Map(s2 -> sad-02, s -> sunset, l3 -> love-01, y -> you, a -> and, l2 -> little, a2 -> add-01, s3 -> so, l -> late, o -> one))),[Ljava.lang.String;@6c0d7c83,Annotation([Ljava.lang.String;@176b75f7,[Ljava.lang.String;@5965be2d,[Ljava.lang.String;@409c54f),Annotation([Ljava.lang.String;@3e74829,[Ljava.lang.String;@4f6f416f,[Ledu.cmu.lti.nlp.amr.Dependency;@3b8f0a79),Annotation([Ljava.lang.String;@71e693fa,[Ljava.lang.String;@48793bef,[Ljava.lang.String;@7d286fb6),Annotation([Ljava.lang.String;@3eb77ea8,[Ljava.lang.String;@7b8b43c7,[Ledu.cmu.lti.nlp.amr.Entity;@7aaca91a))
AMR:
(a / and, op, a2 / add-01)
(a2 / add-01, ARG0, y / you)
(a2 / add-01, ARG1, o / one)
(a2 / add-01, degree, l2 / little)
(a2 / add-01, time, l / late)
(l3 / love-01, ARG0, o / one)
(l3 / love-01, ARG1, s / sunset)
(s2 / sad-02, ARG1, s / sunset)
(s2 / sad-02, degree, s3 / so)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 93,892 microseconds
Sentence: " Were you so sad , then ? "

Oracle Span 1:  sad => sad-02
Oracle Span 2:  so => so
Oracle Span 3:  then => then
Oracle Span 4:  you => you
Spans:
Span 4-5:  sad => sad-02
Span 3-4:  so => so
Span 6-7:  then => then
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  sad => sad-02
Oracle Span 3-4:  so => so
Oracle Span 6-7:  then => then
Oracle Span 2-3:  you => you

Dependencies:
1	"	_	''	''	_	5	punct	_	_
2	Were	_	NNP	NNP	_	5	nsubj	_	_
3	you	_	PRP	PRP	_	2	dep	_	_
4	so	_	RB	RB	_	5	advmod	_	_
5	sad	_	VBD	VBD	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	then	_	RB	RB	_	5	advmod	_	_
8	?	_	.	.	_	5	punct	_	_
9	"	_	''	''	_	5	punct	_	_

Oracle:
(s / sad-02, ARG1, y / you)
(s / sad-02, degree, s2 / so)
(s / sad-02, time, t / then)

Input(Some(Graph((sad-02 :degree so :time then :ARG1 you :mode interrogative),ArrayBuffer(Span(4,5,List(0),sad,sad-02,false), Span(3,4,List(1),so,so,false), Span(6,7,List(2),then,then,false), Span(2,3,List(3),you,you,false)),Map(2 -> then, 1 -> so, 0 -> sad-02, 3 -> you),Map(t -> then, s2 -> so, s -> sad-02, y -> you))),[Ljava.lang.String;@44c73c26,Annotation([Ljava.lang.String;@41005828,[Ljava.lang.String;@60b4beb4,[Ljava.lang.String;@7fcf2fc1),Annotation([Ljava.lang.String;@2141a12,[Ljava.lang.String;@4196c360,[Ledu.cmu.lti.nlp.amr.Dependency;@41294f8),Annotation([Ljava.lang.String;@225129c,[Ljava.lang.String;@20435c40,[Ljava.lang.String;@573906eb),Annotation([Ljava.lang.String;@479ceda0,[Ljava.lang.String;@6d07a63d,[Ledu.cmu.lti.nlp.amr.Entity;@571c5681))
AMR:
(s / sad-02, ARG1, s2 / so)
(s / sad-02, time, t / then)
(y / you, location, s / sad-02)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
Decoded in 10,114 microseconds
Sentence: I asked , " on the day of the forty - four sunsets ? "

Oracle Span 1:  asked => ask-01
Oracle Span 2:  day => day
Oracle Span 3:  I => i
Oracle Span 4:  sunsets => sunset
Spans:
Span 1-2:  asked => ask-01
Span 6-7:  day => day
Span 0-1:  I => i
Span 12-13:  sunsets => sunset

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 1-2:  asked => ask-01
Oracle Span 6-7:  day => day
Oracle Span 0-1:  I => i
Oracle Span 12-13:  sunsets => sunset

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	asked	_	VBD	VBD	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	"	_	''	''	_	2	punct	_	_
5	on	_	IN	IN	_	2	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	day	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	forty	_	NN	NN	_	8	pobj	_	_
11	-	_	:	:	_	10	punct	_	_
12	four	_	CD	CD	_	13	num	_	_
13	sunsets	_	NNS	NNS	_	10	dep	_	_
14	?	_	.	.	_	2	punct	_	_
15	"	_	''	''	_	2	punct	_	_

Oracle:
(a / ask-01, ARG0, i / i)

Input(Some(Graph((ask-01 :ARG1 (be-temporally-at-91 :mode interrogative :ARG2 (day :ARG0-of (have-03 :ARG1 (sunset :quant 44)))) :ARG0 i),ArrayBuffer(Span(1,2,List(0),asked,ask-01,false), Span(6,7,List(1),day,day,false), Span(12,13,List(2),sunsets,sunset,false), Span(0,1,List(3),I,i,false)),Map(2 -> sunset, 1 -> day, 0 -> ask-01, 3 -> i),Map(s -> sunset, d -> day, a -> ask-01, i -> i))),[Ljava.lang.String;@488d1cd7,Annotation([Ljava.lang.String;@68dc098b,[Ljava.lang.String;@38ba6ce3,[Ljava.lang.String;@d278d2b),Annotation([Ljava.lang.String;@2d6c53fc,[Ljava.lang.String;@25f4878b,[Ledu.cmu.lti.nlp.amr.Dependency;@4e423aa2),Annotation([Ljava.lang.String;@7fbdb894,[Ljava.lang.String;@3081f72c,[Ljava.lang.String;@3148f668),Annotation([Ljava.lang.String;@6e005dc9,[Ljava.lang.String;@7ceb3185,[Ledu.cmu.lti.nlp.amr.Entity;@436c81a3))
AMR:
(a / ask-01, ARG0, i / i)
(a / ask-01, ARG1, s / sunset)
(a / ask-01, ARG2, d / day)

WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 22,216 microseconds
Sentence: But the little prince made no reply .

Oracle Span 1:  But => contrast-01
Oracle Span 2:  little => little
Oracle Span 3:  no => -
Oracle Span 4:  prince => prince
Oracle Span 5:  reply => reply-01
Spans:
Span 0-1:  But => contrast-01
Span 2-3:  little => little
Span 5-6:  no => -
Span 3-4:  prince => prince
Span 6-7:  reply => reply-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 2-3:  little => little
Oracle Span 5-6:  no => -
Oracle Span 3-4:  prince => prince
Oracle Span 6-7:  reply => reply-01

Dependencies:
1	But	_	CC	CC	_	5	cc	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	made	_	VBD	VBD	_	0	root	_	_
6	no	_	DT	DT	_	7	det	_	_
7	reply	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(c / contrast-01, ARG2, r / reply-01)
(p / prince, mod, l / little)
(r / reply-01, ARG0, p / prince)
(r / reply-01, polarity, - / -)

Input(Some(Graph((contrast-01 :ARG2 (reply-01 :ARG0 (prince :mod little) :polarity -)),ArrayBuffer(Span(5,6,List(0),no,-,false), Span(0,1,List(1),But,contrast-01,false), Span(6,7,List(2),reply,reply-01,false), Span(3,4,List(3),prince,prince,false), Span(2,3,List(4),little,little,false)),Map(2 -> reply-01, 1 -> contrast-01, 4 -> little, 0 -> -, 3 -> prince),Map(p -> prince, r -> reply-01, - -> -, l -> little, c -> contrast-01))),[Ljava.lang.String;@3561c410,Annotation([Ljava.lang.String;@59e32960,[Ljava.lang.String;@7c214cc0,[Ljava.lang.String;@5b67bb7e),Annotation([Ljava.lang.String;@609db546,[Ljava.lang.String;@20f5281c,[Ledu.cmu.lti.nlp.amr.Dependency;@56c4278e),Annotation([Ljava.lang.String;@301eda63,[Ljava.lang.String;@3d246ea3,[Ljava.lang.String;@341814d3),Annotation([Ljava.lang.String;@4397ad89,[Ljava.lang.String;@59cba5a,[Ledu.cmu.lti.nlp.amr.Entity;@1bd39d3c))
AMR:
(c / contrast-01, ARG2, r / reply-01)
(p / prince, mod, l / little)
(r / reply-01, ARG0, p / prince)
(r / reply-01, polarity, - / -)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 12,849 microseconds
